[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 8, 2018 11:11:57 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1026:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:941:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.22.3-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/ArrayOfBytesBenchmark.scala:7:69: Unused import
[warn] import com.github.plokhotnyuk.jsoniter_scala.macros.DslPlatformJson._
[warn]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           if (req1.!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(req1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(req0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:17:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:23:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:24:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:34:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:83:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:91:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:92:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:98:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:99:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:108:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:109:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 24 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT.jar ...
Processing 345 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 42 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 536 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.22.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:49:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359520.890 ops/s
[info] # Warmup Iteration   2: 693243.584 ops/s
[info] # Warmup Iteration   3: 681236.655 ops/s
[info] Iteration   1: 686815.134 ops/s
[info]                  ·gc.alloc.rate:                                  1804.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3877.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.633 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 701844.957 ops/s
[info]                  ·gc.alloc.rate:                                  1844.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4580.050 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 725740.915 ops/s
[info]                  ·gc.alloc.rate:            1906.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       4136.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4429.266 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 725981.626 ops/s
[info]                  ·gc.alloc.rate:                                  1907.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3689.738 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 723376.780 ops/s
[info]                  ·gc.alloc.rate:                                  1901.051 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4136.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4443.745 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   712751.882 ±(99.9%) 68024.255 ops/s [Average]
[info]   (min, avg, max) = (686815.134, 712751.882, 725981.626), stdev = 17665.683
[info]   CI (99.9%): [644727.627, 780776.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1872.934 ±(99.9%) 179.037 MB/sec [Average]
[info]   (min, avg, max) = (1804.722, 1872.934, 1907.958), stdev = 46.495
[info]   CI (99.9%): [1693.897, 2051.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4136.001, 4136.001, 4136.001), stdev = 0.001
[info]   CI (99.9%): [4136.001, 4136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.085), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.049 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.195), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.122 ±(99.9%) 728.239 MB/sec [Average]
[info]   (min, avg, max) = (1691.881, 1904.122, 2042.501), stdev = 189.121
[info]   CI (99.9%): [1175.883, 2632.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4204.039 ±(99.9%) 1516.943 B/op [Average]
[info]   (min, avg, max) = (3689.738, 4204.039, 4580.050), stdev = 393.945
[info]   CI (99.9%): [2687.096, 5720.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.527 ±(99.9%) 13.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.527, 7.633), stdev = 3.413
[info]   CI (99.9%): [≈ 0, 14.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 3.847
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.27% complete, ETA 01:19:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261529.425 ops/s
[info] # Warmup Iteration   2: 1409174.562 ops/s
[info] # Warmup Iteration   3: 1412046.894 ops/s
[info] Iteration   1: 1354830.188 ops/s
[info]                  ·gc.alloc.rate:                   963.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1171.566 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1421293.221 ops/s
[info]                  ·gc.alloc.rate:            1011.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1116.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 1421871.995 ops/s
[info]                  ·gc.alloc.rate:                   1012.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1116.354 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 1436202.143 ops/s
[info]                  ·gc.alloc.rate:                                  1021.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1119.091 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1438574.580 ops/s
[info]                  ·gc.alloc.rate:            1023.609 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1117.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1414554.426 ±(99.9%) 132155.286 ops/s [Average]
[info]   (min, avg, max) = (1354830.188, 1414554.426, 1438574.580), stdev = 34320.308
[info]   CI (99.9%): [1282399.140, 1546709.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1006.548 ±(99.9%) 94.237 MB/sec [Average]
[info]   (min, avg, max) = (963.912, 1006.548, 1023.609), stdev = 24.473
[info]   CI (99.9%): [912.311, 1100.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.186), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.204), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.510 ±(99.9%) 26.466 MB/sec [Average]
[info]   (min, avg, max) = (1008.292, 1013.510, 1021.073), stdev = 6.873
[info]   CI (99.9%): [987.044, 1039.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1128.203 ±(99.9%) 93.429 B/op [Average]
[info]   (min, avg, max) = (1116.354, 1128.203, 1171.566), stdev = 24.263
[info]   CI (99.9%): [1034.774, 1221.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.825 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.187 ±(99.9%) 8.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.187, 5.161), stdev = 2.247
[info]   CI (99.9%): [≈ 0, 9.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 15.000), stdev = 6.504
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.54% complete, ETA 01:18:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2377372.923 ops/s
[info] # Warmup Iteration   2: 3225546.216 ops/s
[info] # Warmup Iteration   3: 3320741.826 ops/s
[info] Iteration   1: 3291055.607 ops/s
[info]                  ·gc.alloc.rate:            217.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3318785.885 ops/s
[info]                  ·gc.alloc.rate:                   219.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159.849 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3207853.084 ops/s
[info]                  ·gc.alloc.rate:      212.016 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3188419.443 ops/s
[info]                  ·gc.alloc.rate:            210.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166.718 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3337725.439 ops/s
[info]                  ·gc.alloc.rate:      220.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3268767.892 ±(99.9%) 257735.627 ops/s [Average]
[info]   (min, avg, max) = (3188419.443, 3268767.892, 3337725.439), stdev = 66933.124
[info]   CI (99.9%): [3011032.265, 3526503.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   215.989 ±(99.9%) 16.918 MB/sec [Average]
[info]   (min, avg, max) = (210.696, 215.989, 220.512), stdev = 4.394
[info]   CI (99.9%): [199.071, 232.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.497 ±(99.9%) 711.807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.497, 337.757), stdev = 184.854
[info]   CI (99.9%): [≈ 0, 914.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   97.616 ±(99.9%) 343.274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.616, 166.718), stdev = 89.147
[info]   CI (99.9%): [≈ 0, 440.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.316), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.81% complete, ETA 01:18:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22598.679 ops/s
[info] # Warmup Iteration   2: 147012.101 ops/s
[info] # Warmup Iteration   3: 146865.859 ops/s
[info] Iteration   1: 145717.584 ops/s
[info]                  ·gc.alloc.rate:            1234.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10878.748 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 143177.884 ops/s
[info]                  ·gc.alloc.rate:                   1213.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14761.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.257 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 147439.244 ops/s
[info]                  ·gc.alloc.rate:                                  1249.155 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14535.210 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 151271.813 ops/s
[info]                  ·gc.alloc.rate:            1281.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10624.790 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 150177.044 ops/s
[info]                  ·gc.alloc.rate:            1272.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14269.380 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   147556.714 ±(99.9%) 12660.136 ops/s [Average]
[info]   (min, avg, max) = (143177.884, 147556.714, 151271.813), stdev = 3287.797
[info]   CI (99.9%): [134896.578, 160216.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1250.314 ±(99.9%) 107.181 MB/sec [Average]
[info]   (min, avg, max) = (1213.311, 1250.314, 1281.506), stdev = 27.834
[info]   CI (99.9%): [1143.134, 1357.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.421 ±(99.9%) 3.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.421, 2.105), stdev = 0.941
[info]   CI (99.9%): [≈ 0, 4.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.939 ±(99.9%) 720.961 MB/sec [Average]
[info]   (min, avg, max) = (1007.180, 1218.939, 1362.011), stdev = 187.231
[info]   CI (99.9%): [497.978, 1939.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13014.020 ±(99.9%) 7987.903 B/op [Average]
[info]   (min, avg, max) = (10624.790, 13014.020, 14761.972), stdev = 2074.433
[info]   CI (99.9%): [5026.117, 21001.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.251 ±(99.9%) 88.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.251, 51.257), stdev = 22.923
[info]   CI (99.9%): [≈ 0, 98.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 19.000), stdev = 7.301
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.08% complete, ETA 01:18:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134557.781 ops/s
[info] # Warmup Iteration   2: 496532.724 ops/s
[info] # Warmup Iteration   3: 503019.756 ops/s
[info] Iteration   1: 497698.431 ops/s
[info]                  ·gc.alloc.rate:            1629.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       5152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4263.617 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 510852.013 ops/s
[info]                  ·gc.alloc.rate:                                  1671.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5233.398 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.262 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 516194.473 ops/s
[info]                  ·gc.alloc.rate:                                  1689.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5189.261 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 515928.678 ops/s
[info]                  ·gc.alloc.rate:                                  1688.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5191.966 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 495243.464 ops/s
[info]                  ·gc.alloc.rate:                                  1621.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5152.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5408.959 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   507183.412 ±(99.9%) 38682.434 ops/s [Average]
[info]   (min, avg, max) = (495243.464, 507183.412, 516194.473), stdev = 10045.705
[info]   CI (99.9%): [468500.978, 545865.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1660.182 ±(99.9%) 126.104 MB/sec [Average]
[info]   (min, avg, max) = (1621.054, 1660.182, 1689.832), stdev = 32.749
[info]   CI (99.9%): [1534.078, 1786.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5152.001, 5152.001, 5152.001), stdev = 0.001
[info]   CI (99.9%): [5152.001, 5152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.184), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.117 ±(99.9%) 0.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.566), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1630.499 ±(99.9%) 606.873 MB/sec [Average]
[info]   (min, avg, max) = (1348.585, 1630.499, 1702.054), stdev = 157.603
[info]   CI (99.9%): [1023.627, 2237.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5057.440 ±(99.9%) 1743.619 B/op [Average]
[info]   (min, avg, max) = (4263.617, 5057.440, 5408.959), stdev = 452.812
[info]   CI (99.9%): [3313.822, 6801.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.052 ±(99.9%) 17.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.052, 10.262), stdev = 4.589
[info]   CI (99.9%): [≈ 0, 19.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.34% complete, ETA 01:17:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 527542.938 ops/s
[info] # Warmup Iteration   2: 1660238.503 ops/s
[info] # Warmup Iteration   3: 1673643.136 ops/s
[info] Iteration   1: 1732393.070 ops/s
[info]                  ·gc.alloc.rate:            721.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 610.028 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1722619.170 ops/s
[info]                  ·gc.alloc.rate:            718.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 920.219 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1737456.773 ops/s
[info]                  ·gc.alloc.rate:            724.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 608.226 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1727435.408 ops/s
[info]                  ·gc.alloc.rate:            720.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 611.781 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1725821.927 ops/s
[info]                  ·gc.alloc.rate:                   719.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        612.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.645 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1729145.270 ±(99.9%) 22468.393 ops/s [Average]
[info]   (min, avg, max) = (1722619.170, 1729145.270, 1737456.773), stdev = 5834.970
[info]   CI (99.9%): [1706676.877, 1751613.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   720.696 ±(99.9%) 9.207 MB/sec [Average]
[info]   (min, avg, max) = (718.031, 720.696, 724.149), stdev = 2.391
[info]   CI (99.9%): [711.489, 729.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.588 ±(99.9%) 578.280 MB/sec [Average]
[info]   (min, avg, max) = (671.314, 738.588, 1007.234), stdev = 150.178
[info]   CI (99.9%): [160.308, 1316.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   672.519 ±(99.9%) 533.229 B/op [Average]
[info]   (min, avg, max) = (608.226, 672.519, 920.219), stdev = 138.478
[info]   CI (99.9%): [139.290, 1205.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.729 ±(99.9%) 6.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.645), stdev = 1.630
[info]   CI (99.9%): [≈ 0, 7.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 13.000), stdev = 1.789
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.61% complete, ETA 01:17:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9557600.327 ops/s
[info] # Warmup Iteration   2: 7392972.739 ops/s
[info] # Warmup Iteration   3: 7350827.071 ops/s
[info] Iteration   1: 7376705.974 ops/s
[info]                  ·gc.alloc.rate:                   374.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71.774 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7361431.074 ops/s
[info]                  ·gc.alloc.rate:            374.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7350853.058 ops/s
[info]                  ·gc.alloc.rate:            373.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 7371041.842 ops/s
[info]                  ·gc.alloc.rate:            374.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7369060.225 ops/s
[info]                  ·gc.alloc.rate:            374.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.842 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7365818.435 ±(99.9%) 38484.444 ops/s [Average]
[info]   (min, avg, max) = (7350853.058, 7365818.435, 7376705.974), stdev = 9994.288
[info]   CI (99.9%): [7327333.991, 7404302.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   374.395 ±(99.9%) 2.072 MB/sec [Average]
[info]   (min, avg, max) = (373.584, 374.395, 374.952), stdev = 0.538
[info]   CI (99.9%): [372.323, 376.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.782 ±(99.9%) 578.797 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 403.782, 672.668), stdev = 150.312
[info]   CI (99.9%): [≈ 0, 982.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   86.311 ±(99.9%) 124.281 B/op [Average]
[info]   (min, avg, max) = (71.774, 86.311, 144.047), stdev = 32.275
[info]   CI (99.9%): [≈ 0, 210.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.142), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43201.932 ops/s
[info] # Warmup Iteration   2: 269989.048 ops/s
[info] # Warmup Iteration   3: 285470.609 ops/s
[info] Iteration   1: 286778.405 ops/s
[info]                  ·gc.alloc.rate:                   915.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5530.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 291408.144 ops/s
[info]                  ·gc.alloc.rate:                   930.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5443.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 292471.180 ops/s
[info]                  ·gc.alloc.rate:            933.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5420.202 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 291711.107 ops/s
[info]                  ·gc.alloc.rate:                   931.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3644.208 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.157 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 282289.420 ops/s
[info]                  ·gc.alloc.rate:                                  900.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.241 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5693.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   288931.651 ±(99.9%) 16689.594 ops/s [Average]
[info]   (min, avg, max) = (282289.420, 288931.651, 292471.180), stdev = 4334.235
[info]   CI (99.9%): [272242.057, 305621.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   922.323 ±(99.9%) 53.719 MB/sec [Average]
[info]   (min, avg, max) = (900.988, 922.323, 933.731), stdev = 13.951
[info]   CI (99.9%): [868.604, 976.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.002), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.048 ±(99.9%) 0.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.241), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.269 ±(99.9%) 2.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.346), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   943.927 ±(99.9%) 578.459 MB/sec [Average]
[info]   (min, avg, max) = (675.397, 943.927, 1021.063), stdev = 150.224
[info]   CI (99.9%): [365.468, 1522.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5146.462 ±(99.9%) 3260.006 B/op [Average]
[info]   (min, avg, max) = (3644.208, 5146.462, 5693.555), stdev = 846.613
[info]   CI (99.9%): [1886.456, 8406.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.482 ±(99.9%) 40.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.482, 25.157), stdev = 10.596
[info]   CI (99.9%): [≈ 0, 47.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 14.000), stdev = 4.796
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.15% complete, ETA 01:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 794901.952 ops/s
[info] # Warmup Iteration   2: 1349084.026 ops/s
[info] # Warmup Iteration   3: 1350939.700 ops/s
[info] Iteration   1: 1406857.595 ops/s
[info]                  ·gc.alloc.rate:                                  2202.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2284.867 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 1395570.778 ops/s
[info]                  ·gc.alloc.rate:                                  2185.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2687.179 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1403313.810 ops/s
[info]                  ·gc.alloc.rate:                                  2196.754 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2290.539 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1403589.629 ops/s
[info]                  ·gc.alloc.rate:                                  2197.335 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2671.850 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1365715.867 ops/s
[info]                  ·gc.alloc.rate:                                  2137.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2464.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2353.609 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1395009.536 ±(99.9%) 65045.956 ops/s [Average]
[info]   (min, avg, max) = (1365715.867, 1395009.536, 1406857.595), stdev = 16892.228
[info]   CI (99.9%): [1329963.579, 1460055.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2183.850 ±(99.9%) 102.080 MB/sec [Average]
[info]   (min, avg, max) = (2137.803, 2183.850, 2202.316), stdev = 26.510
[info]   CI (99.9%): [2081.769, 2285.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2464.000, 2464.000, 2464.000), stdev = 0.001
[info]   CI (99.9%): [2464.000, 2464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.029, 0.139), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.396 ±(99.9%) 718.582 MB/sec [Average]
[info]   (min, avg, max) = (2042.026, 2178.396, 2382.952), stdev = 186.613
[info]   CI (99.9%): [1459.814, 2896.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2457.609 ±(99.9%) 787.194 B/op [Average]
[info]   (min, avg, max) = (2284.867, 2457.609, 2687.179), stdev = 204.432
[info]   CI (99.9%): [1670.415, 3244.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.42% complete, ETA 01:16:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.917 ops/s
[info] # Warmup Iteration   2: 8186096.078 ops/s
[info] # Warmup Iteration   3: 8558699.179 ops/s
[info] Iteration   1: 8568018.528 ops/s
[info]                  ·gc.alloc.rate:            1045.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.908 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 8598723.776 ops/s
[info]                  ·gc.alloc.rate:            1049.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.255 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 8655870.870 ops/s
[info]                  ·gc.alloc.rate:                   1055.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        182.047 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 8920568.147 ops/s
[info]                  ·gc.alloc.rate:                                  1088.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.593 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       179.703 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.470 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 8938474.506 ops/s
[info]                  ·gc.alloc.rate:                                  1090.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       239.746 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   8736331.166 ±(99.9%) 690286.305 ops/s [Average]
[info]   (min, avg, max) = (8568018.528, 8736331.166, 8938474.506), stdev = 179265.161
[info]   CI (99.9%): [8046044.861, 9426617.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1065.836 ±(99.9%) 83.693 MB/sec [Average]
[info]   (min, avg, max) = (1045.402, 1065.836, 1090.338), stdev = 21.735
[info]   CI (99.9%): [982.143, 1149.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.119 ±(99.9%) 1.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.593), stdev = 0.265
[info]   CI (99.9%): [≈ 0, 1.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1076.808 ±(99.9%) 613.448 MB/sec [Average]
[info]   (min, avg, max) = (1001.176, 1076.808, 1361.481), stdev = 159.311
[info]   CI (99.9%): [463.360, 1690.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   193.732 ±(99.9%) 99.242 B/op [Average]
[info]   (min, avg, max) = (179.703, 193.732, 239.746), stdev = 25.773
[info]   CI (99.9%): [94.490, 292.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 3.997), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 1.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 0.727), stdev = 0.340
[info]   CI (99.9%): [≈ 0, 1.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 15.000), stdev = 5.683
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.69% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682995.119 ops/s
[info] # Warmup Iteration   2: 2128312.521 ops/s
[info] # Warmup Iteration   3: 2073453.084 ops/s
[info] Iteration   1: 2089481.097 ops/s
[info]                  ·gc.alloc.rate:                   1465.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1013.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 2100147.665 ops/s
[info]                  ·gc.alloc.rate:                                  1472.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1017.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.995 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2159353.001 ops/s
[info]                  ·gc.alloc.rate:                                  1514.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1240.528 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2191184.625 ops/s
[info]                  ·gc.alloc.rate:            1536.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 978.013 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2149020.032 ops/s
[info]                  ·gc.alloc.rate:                                  1507.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1246.467 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2137837.284 ±(99.9%) 163286.679 ops/s [Average]
[info]   (min, avg, max) = (2089481.097, 2137837.284, 2191184.625), stdev = 42405.032
[info]   CI (99.9%): [1974550.605, 2301123.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1499.494 ±(99.9%) 114.958 MB/sec [Average]
[info]   (min, avg, max) = (1465.406, 1499.494, 1536.884), stdev = 29.854
[info]   CI (99.9%): [1384.536, 1614.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.552 ±(99.9%) 733.288 MB/sec [Average]
[info]   (min, avg, max) = (1344.734, 1493.552, 1702.307), stdev = 190.432
[info]   CI (99.9%): [760.265, 2226.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1099.104 ±(99.9%) 511.026 B/op [Average]
[info]   (min, avg, max) = (978.013, 1099.104, 1246.467), stdev = 132.712
[info]   CI (99.9%): [588.078, 1610.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.699 ±(99.9%) 5.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 2.995), stdev = 1.302
[info]   CI (99.9%): [≈ 0, 5.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 17.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.96% complete, ETA 01:16:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8527510.627 ops/s
[info] # Warmup Iteration   2: 9759153.147 ops/s
[info] # Warmup Iteration   3: 9653203.694 ops/s
[info] Iteration   1: 9532973.553 ops/s
[info]                  ·gc.alloc.rate:            1211.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 222.692 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 9446289.454 ops/s
[info]                  ·gc.alloc.rate:                                  1200.289 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       169.025 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.555 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9148946.726 ops/s
[info]                  ·gc.alloc.rate:                                  1162.454 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       234.229 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 9208507.929 ops/s
[info]                  ·gc.alloc.rate:            1170.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 174.540 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 9194063.028 ops/s
[info]                  ·gc.alloc.rate:            1168.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233.081 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9306156.138 ±(99.9%) 661084.812 ops/s [Average]
[info]   (min, avg, max) = (9148946.726, 9306156.138, 9532973.553), stdev = 171681.626
[info]   CI (99.9%): [8645071.326, 9967240.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1182.500 ±(99.9%) 84.544 MB/sec [Average]
[info]   (min, avg, max) = (1162.454, 1182.500, 1211.610), stdev = 21.956
[info]   CI (99.9%): [1097.955, 1267.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.070), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.454 ±(99.9%) 716.357 MB/sec [Average]
[info]   (min, avg, max) = (1014.394, 1221.454, 1361.401), stdev = 186.036
[info]   CI (99.9%): [505.098, 1937.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   206.713 ±(99.9%) 124.227 B/op [Average]
[info]   (min, avg, max) = (169.025, 206.713, 234.229), stdev = 32.261
[info]   CI (99.9%): [82.486, 330.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.555), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.23% complete, ETA 01:16:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92678.186 ops/s
[info] # Warmup Iteration   2: 533711.638 ops/s
[info] # Warmup Iteration   3: 538442.742 ops/s
[info] Iteration   1: 540601.427 ops/s
[info]                  ·gc.alloc.rate:                   1423.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3911.635 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.939 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 550406.224 ops/s
[info]                  ·gc.alloc.rate:                                  1448.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3868.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.333 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 564290.524 ops/s
[info]                  ·gc.alloc.rate:                                  1485.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4747.050 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 546145.059 ops/s
[info]                  ·gc.alloc.rate:            1437.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3923.857 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 555864.711 ops/s
[info]                  ·gc.alloc.rate:            1463.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3855.031 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   551461.589 ±(99.9%) 35043.582 ops/s [Average]
[info]   (min, avg, max) = (540601.427, 551461.589, 564290.524), stdev = 9100.707
[info]   CI (99.9%): [516418.007, 586505.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1451.827 ±(99.9%) 92.471 MB/sec [Average]
[info]   (min, avg, max) = (1423.059, 1451.827, 1485.569), stdev = 24.015
[info]   CI (99.9%): [1359.355, 1544.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.001, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.131), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.374), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.156 ±(99.9%) 598.262 MB/sec [Average]
[info]   (min, avg, max) = (1343.264, 1424.156, 1701.754), stdev = 155.367
[info]   CI (99.9%): [825.894, 2022.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4061.234 ±(99.9%) 1480.403 B/op [Average]
[info]   (min, avg, max) = (3855.031, 4061.234, 4747.050), stdev = 384.456
[info]   CI (99.9%): [2580.831, 5541.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.055 ±(99.9%) 22.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.055, 13.333), stdev = 5.807
[info]   CI (99.9%): [≈ 0, 25.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.907
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.49% complete, ETA 01:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1036326.738 ops/s
[info] # Warmup Iteration   2: 1831650.273 ops/s
[info] # Warmup Iteration   3: 1799378.479 ops/s
[info] Iteration   1: 1844385.993 ops/s
[info]                  ·gc.alloc.rate:                                  1677.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1441.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.842 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1826301.675 ops/s
[info]                  ·gc.alloc.rate:                                  1662.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1466.727 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1857463.575 ops/s
[info]                  ·gc.alloc.rate:                                  1689.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1442.115 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1845241.836 ops/s
[info]                  ·gc.alloc.rate:                                  1679.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1451.652 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1865803.573 ops/s
[info]                  ·gc.alloc.rate:                                  1697.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1435.624 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1847839.330 ±(99.9%) 57691.695 ops/s [Average]
[info]   (min, avg, max) = (1826301.675, 1847839.330, 1865803.573), stdev = 14982.350
[info]   CI (99.9%): [1790147.636, 1905531.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1681.336 ±(99.9%) 51.496 MB/sec [Average]
[info]   (min, avg, max) = (1662.093, 1681.336, 1697.377), stdev = 13.373
[info]   CI (99.9%): [1629.840, 1732.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.013, 0.048), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.065 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.012, 0.041), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.363 ±(99.9%) 23.613 MB/sec [Average]
[info]   (min, avg, max) = (1688.414, 1699.363, 1702.550), stdev = 6.132
[info]   CI (99.9%): [1675.750, 1722.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1447.424 ±(99.9%) 47.126 B/op [Average]
[info]   (min, avg, max) = (1435.624, 1447.424, 1466.727), stdev = 12.239
[info]   CI (99.9%): [1400.298, 1494.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.568 ±(99.9%) 4.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.568, 2.842), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.76% complete, ETA 01:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.930 ops/s
[info] # Warmup Iteration   2: 15820863.076 ops/s
[info] # Warmup Iteration   3: 15898402.954 ops/s
[info] Iteration   1: 16310062.321 ops/s
[info]                  ·gc.alloc.rate:            497.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64.405 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 16912416.494 ops/s
[info]                  ·gc.alloc.rate:            515.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.116 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 16877825.763 ops/s
[info]                  ·gc.alloc.rate:            514.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 17256891.725 ops/s
[info]                  ·gc.alloc.rate:            526.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60.875 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 17351932.715 ops/s
[info]                  ·gc.alloc.rate:            529.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.271 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16941825.804 ±(99.9%) 1577754.331 ops/s [Average]
[info]   (min, avg, max) = (16310062.321, 16941825.804, 17351932.715), stdev = 409737.789
[info]   CI (99.9%): [15364071.473, 18519580.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   516.681 ±(99.9%) 47.938 MB/sec [Average]
[info]   (min, avg, max) = (497.510, 516.681, 529.129), stdev = 12.449
[info]   CI (99.9%): [468.743, 564.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.976 ±(99.9%) 704.069 MB/sec [Average]
[info]   (min, avg, max) = (333.670, 533.976, 667.546), stdev = 182.845
[info]   CI (99.9%): [≈ 0, 1238.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   49.757 ±(99.9%) 67.193 B/op [Average]
[info]   (min, avg, max) = (30.271, 49.757, 64.405), stdev = 17.450
[info]   CI (99.9%): [≈ 0, 116.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 4.03% complete, ETA 01:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.934 ops/s
[info] # Warmup Iteration   2: 17675851.684 ops/s
[info] # Warmup Iteration   3: 17864359.549 ops/s
[info] Iteration   1: 18076003.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18299757.686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17313687.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18433735.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18360374.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc":
[info]   18096711.856 ±(99.9%) 1762365.635 ops/s [Average]
[info]   (min, avg, max) = (17313687.531, 18096711.856, 18433735.968), stdev = 457680.759
[info]   CI (99.9%): [16334346.221, 19859077.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.30% complete, ETA 01:15:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1297296.094 ops/s
[info] # Warmup Iteration   2: 4079308.115 ops/s
[info] # Warmup Iteration   3: 4173559.116 ops/s
[info] Iteration   1: 4150466.020 ops/s
[info]                  ·gc.alloc.rate:            1139.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 509.251 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4167162.584 ops/s
[info]                  ·gc.alloc.rate:            1143.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 380.418 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 4196041.218 ops/s
[info]                  ·gc.alloc.rate:                                  1151.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       508.735 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.749 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4227455.570 ops/s
[info]                  ·gc.alloc.rate:            1160.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 380.202 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4226771.914 ops/s
[info]                  ·gc.alloc.rate:            1160.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 380.255 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4193579.461 ±(99.9%) 133556.993 ops/s [Average]
[info]   (min, avg, max) = (4150466.020, 4193579.461, 4227455.570), stdev = 34684.327
[info]   CI (99.9%): [4060022.468, 4327136.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1151.200 ±(99.9%) 36.599 MB/sec [Average]
[info]   (min, avg, max) = (1139.594, 1151.200, 1160.468), stdev = 9.505
[info]   CI (99.9%): [1114.601, 1187.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1149.946 ±(99.9%) 703.794 MB/sec [Average]
[info]   (min, avg, max) = (1007.084, 1149.946, 1356.615), stdev = 182.773
[info]   CI (99.9%): [446.152, 1853.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   431.772 ±(99.9%) 271.443 B/op [Average]
[info]   (min, avg, max) = (380.202, 431.772, 509.251), stdev = 70.493
[info]   CI (99.9%): [160.329, 703.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.350 ±(99.9%) 3.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.350, 1.749), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 16.000), stdev = 6.140
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.57% complete, ETA 01:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12644209.238 ops/s
[info] # Warmup Iteration   2: 20316826.731 ops/s
[info] # Warmup Iteration   3: 21508275.243 ops/s
[info] Iteration   1: 21480772.067 ops/s
[info]                  ·gc.alloc.rate:            654.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.295 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 21437137.360 ops/s
[info]                  ·gc.alloc.rate:            653.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.395 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 20594896.471 ops/s
[info]                  ·gc.alloc.rate:                   628.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 20654675.564 ops/s
[info]                  ·gc.alloc.rate:            629.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.266 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20844589.366 ops/s
[info]                  ·gc.alloc.rate:                   635.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50.799 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21002414.166 ±(99.9%) 1644671.296 ops/s [Average]
[info]   (min, avg, max) = (20594896.471, 21002414.166, 21480772.067), stdev = 427115.913
[info]   CI (99.9%): [19357742.870, 22647085.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   640.502 ±(99.9%) 49.829 MB/sec [Average]
[info]   (min, avg, max) = (628.022, 640.502, 654.977), stdev = 12.940
[info]   CI (99.9%): [590.673, 690.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.895 ±(99.9%) 1.174 MB/sec [Average]
[info]   (min, avg, max) = (672.633, 672.895, 673.371), stdev = 0.305
[info]   CI (99.9%): [671.721, 674.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   50.444 ±(99.9%) 3.978 B/op [Average]
[info]   (min, avg, max) = (49.295, 50.444, 51.466), stdev = 1.033
[info]   CI (99.9%): [46.467, 54.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.051), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.84% complete, ETA 01:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14423700.134 ops/s
[info] # Warmup Iteration   2: 20745317.836 ops/s
[info] # Warmup Iteration   3: 21068328.464 ops/s
[info] Iteration   1: 20445767.447 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20297618.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20026917.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19893329.587 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20949847.505 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20322696.184 ±(99.9%) 1588751.869 ops/s [Average]
[info]   (min, avg, max) = (19893329.587, 20322696.184, 20949847.505), stdev = 412593.815
[info]   CI (99.9%): [18733944.315, 21911448.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.11% complete, ETA 01:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149690.706 ops/s
[info] # Warmup Iteration   2: 1197108.761 ops/s
[info] # Warmup Iteration   3: 1182716.396 ops/s
[info] Iteration   1: 1197195.943 ops/s
[info]                  ·gc.alloc.rate:                   1752.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              2304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2214.676 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.130 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 1230132.092 ops/s
[info]                  ·gc.alloc.rate:                                  1800.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.198 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2177.541 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1250295.646 ops/s
[info]                  ·gc.alloc.rate:                                  1830.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2568.614 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1237385.560 ops/s
[info]                  ·gc.alloc.rate:                                  1811.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2164.841 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1238631.360 ops/s
[info]                  ·gc.alloc.rate:                                  1813.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2162.665 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1230728.120 ±(99.9%) 77359.449 ops/s [Average]
[info]   (min, avg, max) = (1197195.943, 1230728.120, 1250295.646), stdev = 20090.003
[info]   CI (99.9%): [1153368.671, 1308087.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1801.704 ±(99.9%) 114.367 MB/sec [Average]
[info]   (min, avg, max) = (1752.187, 1801.704, 1830.770), stdev = 29.701
[info]   CI (99.9%): [1687.337, 1916.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2304.000, 2304.000, 2304.000), stdev = 0.001
[info]   CI (99.9%): [2304.000, 2304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.198), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.253), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1766.274 ±(99.9%) 592.184 MB/sec [Average]
[info]   (min, avg, max) = (1684.256, 1766.274, 2041.034), stdev = 153.788
[info]   CI (99.9%): [1174.089, 2358.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2257.667 ±(99.9%) 674.134 B/op [Average]
[info]   (min, avg, max) = (2162.665, 2257.667, 2568.614), stdev = 175.070
[info]   CI (99.9%): [1583.534, 2931.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.226 ±(99.9%) 10.556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.226, 6.130), stdev = 2.741
[info]   CI (99.9%): [≈ 0, 11.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 19.000), stdev = 6.611
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.38% complete, ETA 01:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15368.621 ops/s
[info] # Warmup Iteration   2: 19808.633 ops/s
[info] # Warmup Iteration   3: 19302.508 ops/s
[info] Iteration   1: 19979.409 ops/s
[info]                  ·gc.alloc.rate:            1249.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       98456.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79654.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 19767.692 ops/s
[info]                  ·gc.alloc.rate:                                  1236.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.719 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107610.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                265.180 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 19482.075 ops/s
[info]                  ·gc.alloc.rate:                                  1218.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109991.242 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 19819.287 ops/s
[info]                  ·gc.alloc.rate:            1240.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       98456.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81091.006 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 19904.514 ops/s
[info]                  ·gc.alloc.rate:                                  1245.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98456.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.902 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107654.294 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19790.595 ±(99.9%) 733.547 ops/s [Average]
[info]   (min, avg, max) = (19482.075, 19790.595, 19979.409), stdev = 190.500
[info]   CI (99.9%): [19057.048, 20524.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1238.056 ±(99.9%) 46.302 MB/sec [Average]
[info]   (min, avg, max) = (1218.565, 1238.056, 1249.751), stdev = 12.024
[info]   CI (99.9%): [1191.754, 1284.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98456.022 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (98456.020, 98456.022, 98456.028), stdev = 0.003
[info]   CI (99.9%): [98456.010, 98456.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.060), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.292 ±(99.9%) 7.794 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.292, 4.837), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 9.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.387 ±(99.9%) 721.187 MB/sec [Average]
[info]   (min, avg, max) = (1011.096, 1221.387, 1361.730), stdev = 187.290
[info]   CI (99.9%): [500.200, 1942.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   97200.268 ±(99.9%) 59299.282 B/op [Average]
[info]   (min, avg, max) = (79654.625, 97200.268, 109991.242), stdev = 15399.835
[info]   CI (99.9%): [37900.986, 156499.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.036 ±(99.9%) 456.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.036, 265.180), stdev = 118.592
[info]   CI (99.9%): [≈ 0, 509.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.65% complete, ETA 01:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18956.369 ops/s
[info] # Warmup Iteration   2: 32490.946 ops/s
[info] # Warmup Iteration   3: 33362.503 ops/s
[info] Iteration   1: 33540.115 ops/s
[info]                  ·gc.alloc.rate:            840.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31571.375 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 33192.191 ops/s
[info]                  ·gc.alloc.rate:                   831.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47820.473 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.586 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 33685.576 ops/s
[info]                  ·gc.alloc.rate:                   844.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31402.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 32566.481 ops/s
[info]                  ·gc.alloc.rate:                                  816.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48966.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                193.161 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 32908.918 ops/s
[info]                  ·gc.alloc.rate:                                  824.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.274 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32558.932 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   33178.656 ±(99.9%) 1759.665 ops/s [Average]
[info]   (min, avg, max) = (32566.481, 33178.656, 33685.576), stdev = 456.980
[info]   CI (99.9%): [31418.991, 34938.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   831.642 ±(99.9%) 44.059 MB/sec [Average]
[info]   (min, avg, max) = (816.290, 831.642, 844.384), stdev = 11.442
[info]   CI (99.9%): [787.584, 875.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.014 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (39456.012, 39456.014, 39456.020), stdev = 0.003
[info]   CI (99.9%): [39456.001, 39456.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.048), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.823 ±(99.9%) 4.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.823, 2.274), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 5.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.362 ±(99.9%) 707.898 MB/sec [Average]
[info]   (min, avg, max) = (672.034, 809.362, 1013.046), stdev = 183.839
[info]   CI (99.9%): [101.463, 1517.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38463.934 ±(99.9%) 34979.794 B/op [Average]
[info]   (min, avg, max) = (31402.505, 38463.934, 48966.384), stdev = 9084.141
[info]   CI (99.9%): [3484.140, 73443.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.174 ±(99.9%) 311.544 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.174, 193.161), stdev = 80.907
[info]   CI (99.9%): [≈ 0, 362.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 3.899
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.91% complete, ETA 01:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27588.462 ops/s
[info] # Warmup Iteration   2: 30857.500 ops/s
[info] # Warmup Iteration   3: 30927.192 ops/s
[info] Iteration   1: 31680.585 ops/s
[info]                  ·gc.alloc.rate:            425.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16744.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 31679.795 ops/s
[info]                  ·gc.alloc.rate:            425.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33490.892 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 31698.935 ops/s
[info]                  ·gc.alloc.rate:            425.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16735.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 31742.451 ops/s
[info]                  ·gc.alloc.rate:            426.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16712.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 31781.107 ops/s
[info]                  ·gc.alloc.rate:            426.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16691.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   31716.575 ±(99.9%) 169.965 ops/s [Average]
[info]   (min, avg, max) = (31679.795, 31716.575, 31781.107), stdev = 44.139
[info]   CI (99.9%): [31546.609, 31886.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   426.045 ±(99.9%) 2.096 MB/sec [Average]
[info]   (min, avg, max) = (425.580, 426.045, 426.848), stdev = 0.544
[info]   CI (99.9%): [423.950, 428.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (21144.013, 21144.014, 21144.016), stdev = 0.001
[info]   CI (99.9%): [21144.008, 21144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.431 ±(99.9%) 580.468 MB/sec [Average]
[info]   (min, avg, max) = (336.966, 404.431, 674.094), stdev = 150.746
[info]   CI (99.9%): [≈ 0, 984.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   20075.029 ±(99.9%) 28878.764 B/op [Average]
[info]   (min, avg, max) = (16691.712, 20075.029, 33490.892), stdev = 7499.723
[info]   CI (99.9%): [≈ 0, 48953.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.18% complete, ETA 01:14:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13466.149 ops/s
[info] # Warmup Iteration   2: 25020.772 ops/s
[info] # Warmup Iteration   3: 24638.071 ops/s
[info] Iteration   1: 24493.392 ops/s
[info]                  ·gc.alloc.rate:            1297.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86461.079 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 24921.241 ops/s
[info]                  ·gc.alloc.rate:                                  1320.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85481.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                252.405 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 25581.150 ops/s
[info]                  ·gc.alloc.rate:                                  1355.658 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.601 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83768.051 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25522.031 ops/s
[info]                  ·gc.alloc.rate:                                  1352.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83961.662 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25466.848 ops/s
[info]                  ·gc.alloc.rate:                                  1349.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84146.258 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25196.933 ±(99.9%) 1823.618 ops/s [Average]
[info]   (min, avg, max) = (24493.392, 25196.933, 25581.150), stdev = 473.588
[info]   CI (99.9%): [23373.315, 27020.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1335.161 ±(99.9%) 97.214 MB/sec [Average]
[info]   (min, avg, max) = (1297.668, 1335.161, 1355.658), stdev = 25.246
[info]   CI (99.9%): [1237.947, 1432.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.022), stdev = 0.003
[info]   CI (99.9%): [83400.007, 83400.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.114), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.652 ±(99.9%) 11.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.652, 7.183), stdev = 3.099
[info]   CI (99.9%): [≈ 0, 13.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.710 ±(99.9%) 28.175 MB/sec [Average]
[info]   (min, avg, max) = (1345.297, 1356.710, 1361.930), stdev = 7.317
[info]   CI (99.9%): [1328.536, 1384.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84763.666 ±(99.9%) 4478.945 B/op [Average]
[info]   (min, avg, max) = (83768.051, 84763.666, 86461.079), stdev = 1163.168
[info]   CI (99.9%): [80284.721, 89242.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.481 ±(99.9%) 434.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.481, 252.405), stdev = 112.879
[info]   CI (99.9%): [≈ 0, 485.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.45% complete, ETA 01:13:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19081.982 ops/s
[info] # Warmup Iteration   2: 27146.011 ops/s
[info] # Warmup Iteration   3: 27293.918 ops/s
[info] Iteration   1: 27605.613 ops/s
[info]                  ·gc.alloc.rate:                                  1568.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96271.057 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.884 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        20.000 ms
[info] Iteration   2: 28214.869 ops/s
[info]                  ·gc.alloc.rate:                                  1602.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89406.621 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75951.995 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 28020.593 ops/s
[info]                  ·gc.alloc.rate:                                  1591.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95597.205 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28099.790 ops/s
[info]                  ·gc.alloc.rate:                                  1596.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95328.483 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27506.264 ops/s
[info]                  ·gc.alloc.rate:            1563.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77895.306 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27889.426 ±(99.9%) 1209.639 ops/s [Average]
[info]   (min, avg, max) = (27506.264, 27889.426, 28214.869), stdev = 314.139
[info]   CI (99.9%): [26679.787, 29099.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1584.383 ±(99.9%) 67.549 MB/sec [Average]
[info]   (min, avg, max) = (1563.207, 1584.383, 1602.609), stdev = 17.542
[info]   CI (99.9%): [1516.834, 1651.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89407.736 ±(99.9%) 2.400 B/op [Average]
[info]   (min, avg, max) = (89406.621, 89407.736, 89408.015), stdev = 0.623
[info]   CI (99.9%): [89405.336, 89410.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.073), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.529 ±(99.9%) 7.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.529, 4.056), stdev = 1.957
[info]   CI (99.9%): [≈ 0, 9.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.142 ±(99.9%) 708.479 MB/sec [Average]
[info]   (min, avg, max) = (1361.436, 1563.142, 1701.865), stdev = 183.990
[info]   CI (99.9%): [854.663, 2271.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   88208.809 ±(99.9%) 39779.027 B/op [Average]
[info]   (min, avg, max) = (75951.995, 88208.809, 96271.057), stdev = 10330.487
[info]   CI (99.9%): [48429.783, 127987.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.977 ±(99.9%) 326.991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.977, 189.884), stdev = 84.919
[info]   CI (99.9%): [≈ 0, 364.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 20.000), stdev = 7.280
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.72% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12181.725 ops/s
[info] # Warmup Iteration   2: 27677.548 ops/s
[info] # Warmup Iteration   3: 27996.193 ops/s
[info] Iteration   1: 28125.919 ops/s
[info]                  ·gc.alloc.rate:                   1540.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        75257.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 260.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 28368.036 ops/s
[info]                  ·gc.alloc.rate:                                  1553.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.891 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94424.688 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 28669.404 ops/s
[info]                  ·gc.alloc.rate:                                  1570.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.233 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74746.786 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27912.120 ops/s
[info]                  ·gc.alloc.rate:                                  1528.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95960.159 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 27638.366 ops/s
[info]                  ·gc.alloc.rate:            1513.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       86208.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77534.614 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28142.769 ±(99.9%) 1535.430 ops/s [Average]
[info]   (min, avg, max) = (27638.366, 28142.769, 28669.404), stdev = 398.746
[info]   CI (99.9%): [26607.339, 29678.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1541.308 ±(99.9%) 84.533 MB/sec [Average]
[info]   (min, avg, max) = (1513.621, 1541.308, 1570.365), stdev = 21.953
[info]   CI (99.9%): [1456.775, 1625.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.026 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (86208.015, 86208.026, 86208.070), stdev = 0.024
[info]   CI (99.9%): [86207.932, 86208.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.665 ±(99.9%) 4.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 2.891), stdev = 1.249
[info]   CI (99.9%): [≈ 0, 5.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.171 ±(99.9%) 729.977 MB/sec [Average]
[info]   (min, avg, max) = (1344.534, 1494.171, 1701.843), stdev = 189.573
[info]   CI (99.9%): [764.194, 2224.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83584.794 ±(99.9%) 41055.349 B/op [Average]
[info]   (min, avg, max) = (74746.786, 83584.794, 95960.159), stdev = 10661.944
[info]   CI (99.9%): [42529.445, 124640.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   52.185 ±(99.9%) 449.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.185, 260.923), stdev = 116.688
[info]   CI (99.9%): [≈ 0, 501.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.340
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 6.99% complete, ETA 01:13:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22868.260 ops/s
[info] # Warmup Iteration   2: 29577.435 ops/s
[info] # Warmup Iteration   3: 29304.293 ops/s
[info] Iteration   1: 29587.620 ops/s
[info]                  ·gc.alloc.rate:                                  1526.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81200.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89720.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                248.041 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 30000.746 ops/s
[info]                  ·gc.alloc.rate:                                  1547.438 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81200.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71428.692 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29746.527 ops/s
[info]                  ·gc.alloc.rate:                                  1534.560 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81200.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90048.120 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30577.998 ops/s
[info]                  ·gc.alloc.rate:                                  1578.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81200.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70081.069 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30546.589 ops/s
[info]                  ·gc.alloc.rate:            1576.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       81200.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87693.093 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30091.896 ±(99.9%) 1748.678 ops/s [Average]
[info]   (min, avg, max) = (29587.620, 30091.896, 30577.998), stdev = 454.126
[info]   CI (99.9%): [28343.218, 31840.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1552.616 ±(99.9%) 90.835 MB/sec [Average]
[info]   (min, avg, max) = (1526.784, 1552.616, 1578.186), stdev = 23.590
[info]   CI (99.9%): [1461.780, 1643.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81200.024 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (81200.013, 81200.024, 81200.062), stdev = 0.021
[info]   CI (99.9%): [81199.942, 81200.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.067), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.491 ±(99.9%) 7.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.491, 3.588), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.841 ±(99.9%) 707.599 MB/sec [Average]
[info]   (min, avg, max) = (1361.224, 1562.841, 1702.141), stdev = 183.761
[info]   CI (99.9%): [855.242, 2270.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81794.196 ±(99.9%) 39003.037 B/op [Average]
[info]   (min, avg, max) = (70081.069, 81794.196, 90048.120), stdev = 10128.965
[info]   CI (99.9%): [42791.159, 120797.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.608 ±(99.9%) 427.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.608, 248.041), stdev = 110.927
[info]   CI (99.9%): [≈ 0, 476.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.26% complete, ETA 01:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22468.938 ops/s
[info] # Warmup Iteration   2: 29912.067 ops/s
[info] # Warmup Iteration   3: 29032.962 ops/s
[info] Iteration   1: 29853.868 ops/s
[info]                  ·gc.alloc.rate:                   1483.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70935.148 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 210.698 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 29451.735 ops/s
[info]                  ·gc.alloc.rate:                                  1462.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72762.403 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30013.079 ops/s
[info]                  ·gc.alloc.rate:                                  1490.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.173 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89250.173 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30111.268 ops/s
[info]                  ·gc.alloc.rate:                                  1495.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71167.796 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29571.456 ops/s
[info]                  ·gc.alloc.rate:                                  1468.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72467.181 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   29800.281 ±(99.9%) 1086.933 ops/s [Average]
[info]   (min, avg, max) = (29451.735, 29800.281, 30111.268), stdev = 282.273
[info]   CI (99.9%): [28713.348, 30887.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1480.067 ±(99.9%) 54.017 MB/sec [Average]
[info]   (min, avg, max) = (1462.497, 1480.067, 1495.363), stdev = 14.028
[info]   CI (99.9%): [1426.050, 1534.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (78168.014, 78168.014, 78168.017), stdev = 0.002
[info]   CI (99.9%): [78168.008, 78168.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.325 ±(99.9%) 10.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.325, 6.315), stdev = 2.790
[info]   CI (99.9%): [≈ 0, 12.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1426.446 ±(99.9%) 593.211 MB/sec [Average]
[info]   (min, avg, max) = (1345.964, 1426.446, 1701.765), stdev = 154.055
[info]   CI (99.9%): [833.235, 2019.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   75316.540 ±(99.9%) 30148.184 B/op [Average]
[info]   (min, avg, max) = (70935.148, 75316.540, 89250.173), stdev = 7829.388
[info]   CI (99.9%): [45168.356, 105464.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   42.140 ±(99.9%) 362.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.140, 210.698), stdev = 94.227
[info]   CI (99.9%): [≈ 0, 404.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.53% complete, ETA 01:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4715.766 ops/s
[info] # Warmup Iteration   2: 7648.392 ops/s
[info] # Warmup Iteration   3: 8035.524 ops/s
[info] Iteration   1: 7783.517 ops/s
[info]                  ·gc.alloc.rate:            1013.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 270963.735 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7946.616 ops/s
[info]                  ·gc.alloc.rate:            1033.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 199848.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 7971.508 ops/s
[info]                  ·gc.alloc.rate:                                  1036.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200035.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                789.095 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 7929.954 ops/s
[info]                  ·gc.alloc.rate:                                  1031.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202655.952 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 8044.362 ops/s
[info]                  ·gc.alloc.rate:            1046.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 199759.787 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7935.191 ±(99.9%) 367.329 ops/s [Average]
[info]   (min, avg, max) = (7783.517, 7935.191, 8044.362), stdev = 95.394
[info]   CI (99.9%): [7567.862, 8302.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1032.112 ±(99.9%) 45.422 MB/sec [Average]
[info]   (min, avg, max) = (1013.680, 1032.112, 1046.045), stdev = 11.796
[info]   CI (99.9%): [986.690, 1077.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204656.053 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (204656.051, 204656.053, 204656.055), stdev = 0.002
[info]   CI (99.9%): [204656.046, 204656.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.271 ±(99.9%) 12.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.271, 6.759), stdev = 3.202
[info]   CI (99.9%): [≈ 0, 14.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1081.242 ±(99.9%) 561.890 MB/sec [Average]
[info]   (min, avg, max) = (1008.893, 1081.242, 1342.108), stdev = 145.921
[info]   CI (99.9%): [519.352, 1643.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   214652.644 ±(99.9%) 121302.741 B/op [Average]
[info]   (min, avg, max) = (199759.787, 214652.644, 270963.735), stdev = 31501.937
[info]   CI (99.9%): [93349.903, 335955.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   157.819 ±(99.9%) 1358.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 157.819, 789.095), stdev = 352.894
[info]   CI (99.9%): [≈ 0, 1516.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 16.000), stdev = 6.058
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 7.80% complete, ETA 01:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14279.552 ops/s
[info] # Warmup Iteration   2: 18527.193 ops/s
[info] # Warmup Iteration   3: 18969.004 ops/s
[info] Iteration   1: 19120.090 ops/s
[info]                  ·gc.alloc.rate:                   1485.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              122264.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110970.867 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 274.138 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 19647.373 ops/s
[info]                  ·gc.alloc.rate:                                  1526.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.686 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109067.699 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 19638.362 ops/s
[info]                  ·gc.alloc.rate:                                  1525.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       136397.092 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 19611.129 ops/s
[info]                  ·gc.alloc.rate:                                  1523.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.961 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109267.874 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 19773.972 ops/s
[info]                  ·gc.alloc.rate:                                  1536.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122264.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       135466.030 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19558.185 ±(99.9%) 973.530 ops/s [Average]
[info]   (min, avg, max) = (19120.090, 19558.185, 19773.972), stdev = 252.823
[info]   CI (99.9%): [18584.655, 20531.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1519.497 ±(99.9%) 75.537 MB/sec [Average]
[info]   (min, avg, max) = (1485.545, 1519.497, 1536.437), stdev = 19.617
[info]   CI (99.9%): [1443.960, 1595.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122264.023 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (122264.021, 122264.023, 122264.028), stdev = 0.003
[info]   CI (99.9%): [122264.011, 122264.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.046), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.457 ±(99.9%) 5.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.457, 3.686), stdev = 1.373
[info]   CI (99.9%): [≈ 0, 6.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.159 ±(99.9%) 727.537 MB/sec [Average]
[info]   (min, avg, max) = (1348.329, 1495.159, 1702.341), stdev = 188.939
[info]   CI (99.9%): [767.622, 2222.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   120233.912 ±(99.9%) 55267.410 B/op [Average]
[info]   (min, avg, max) = (109067.699, 120233.912, 136397.092), stdev = 14352.771
[info]   CI (99.9%): [64966.502, 175501.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   54.828 ±(99.9%) 472.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.828, 274.138), stdev = 122.598
[info]   CI (99.9%): [≈ 0, 526.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.06% complete, ETA 01:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24288.071 ops/s
[info] # Warmup Iteration   2: 38657.756 ops/s
[info] # Warmup Iteration   3: 38607.160 ops/s
[info] Iteration   1: 38191.694 ops/s
[info]                  ·gc.alloc.rate:            941.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.155 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41588.372 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 37933.444 ops/s
[info]                  ·gc.alloc.rate:            935.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41871.182 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 38835.208 ops/s
[info]                  ·gc.alloc.rate:                   958.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27266.594 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 39111.030 ops/s
[info]                  ·gc.alloc.rate:                                  964.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41094.872 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 38881.891 ops/s
[info]                  ·gc.alloc.rate:                                  959.022 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41335.811 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   38590.653 ±(99.9%) 1931.579 ops/s [Average]
[info]   (min, avg, max) = (37933.444, 38590.653, 39111.030), stdev = 501.625
[info]   CI (99.9%): [36659.075, 40522.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   951.860 ±(99.9%) 47.484 MB/sec [Average]
[info]   (min, avg, max) = (935.815, 951.860, 964.540), stdev = 12.331
[info]   CI (99.9%): [904.376, 999.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.840 ±(99.9%) 1.475 B/op [Average]
[info]   (min, avg, max) = (38823.155, 38823.840, 38824.012), stdev = 0.383
[info]   CI (99.9%): [38822.365, 38825.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.798 ±(99.9%) 6.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.792), stdev = 1.676
[info]   CI (99.9%): [≈ 0, 7.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.618 ±(99.9%) 589.718 MB/sec [Average]
[info]   (min, avg, max) = (672.866, 946.618, 1021.068), stdev = 153.148
[info]   CI (99.9%): [356.900, 1536.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38631.366 ±(99.9%) 24488.796 B/op [Average]
[info]   (min, avg, max) = (27266.594, 38631.366, 41871.182), stdev = 6359.662
[info]   CI (99.9%): [14142.570, 63120.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.396 ±(99.9%) 278.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.396, 161.980), stdev = 72.440
[info]   CI (99.9%): [≈ 0, 311.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 13.000), stdev = 4.764
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.33% complete, ETA 01:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49039.775 ops/s
[info] # Warmup Iteration   2: 53725.650 ops/s
[info] # Warmup Iteration   3: 56505.904 ops/s
[info] Iteration   1: 56581.286 ops/s
[info]                  ·gc.alloc.rate:            731.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18751.372 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 55908.538 ops/s
[info]                  ·gc.alloc.rate:            722.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18977.054 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 54709.596 ops/s
[info]                  ·gc.alloc.rate:            706.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19393.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 54451.351 ops/s
[info]                  ·gc.alloc.rate:            703.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19484.749 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 54494.891 ops/s
[info]                  ·gc.alloc.rate:                   704.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19469.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 96.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   55229.132 ±(99.9%) 3705.373 ops/s [Average]
[info]   (min, avg, max) = (54451.351, 55229.132, 56581.286), stdev = 962.274
[info]   CI (99.9%): [51523.760, 58934.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   713.596 ±(99.9%) 47.855 MB/sec [Average]
[info]   (min, avg, max) = (703.549, 713.596, 731.054), stdev = 12.428
[info]   CI (99.9%): [665.741, 761.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.008, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.106 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (674.042, 674.106, 674.205), stdev = 0.060
[info]   CI (99.9%): [673.875, 674.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19215.228 ±(99.9%) 1278.469 B/op [Average]
[info]   (min, avg, max) = (18751.372, 19215.228, 19484.749), stdev = 332.014
[info]   CI (99.9%): [17936.759, 20493.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.239 ±(99.9%) 165.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.239, 96.193), stdev = 43.019
[info]   CI (99.9%): [≈ 0, 184.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Run progress: 8.60% complete, ETA 01:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10345.758 ops/s
[info] # Warmup Iteration   2: 29078.546 ops/s
[info] # Warmup Iteration   3: 28936.387 ops/s
[info] Iteration   1: 29106.526 ops/s
[info]                  ·gc.alloc.rate:                                  1944.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109932.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                252.139 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 29449.991 ops/s
[info]                  ·gc.alloc.rate:            1967.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       105144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109143.605 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 29625.737 ops/s
[info]                  ·gc.alloc.rate:                                  1979.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.418 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108495.343 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29674.302 ops/s
[info]                  ·gc.alloc.rate:                                  1982.800 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90266.566 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 29250.226 ops/s
[info]                  ·gc.alloc.rate:                                  1953.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109889.733 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29421.357 ±(99.9%) 933.288 ops/s [Average]
[info]   (min, avg, max) = (29106.526, 29421.357, 29674.302), stdev = 242.372
[info]   CI (99.9%): [28488.068, 30354.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1965.522 ±(99.9%) 63.187 MB/sec [Average]
[info]   (min, avg, max) = (1944.158, 1965.522, 1982.800), stdev = 16.409
[info]   CI (99.9%): [1902.336, 2028.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105144.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (105144.014, 105144.015, 105144.017), stdev = 0.001
[info]   CI (99.9%): [105144.009, 105144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.137 ±(99.9%) 0.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.418), stdev = 0.170
[info]   CI (99.9%): [≈ 0, 0.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1972.344 ±(99.9%) 581.633 MB/sec [Average]
[info]   (min, avg, max) = (1702.242, 1972.344, 2042.599), stdev = 151.048
[info]   CI (99.9%): [1390.711, 2553.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105545.611 ±(99.9%) 32968.269 B/op [Average]
[info]   (min, avg, max) = (90266.566, 105545.611, 109932.807), stdev = 8561.755
[info]   CI (99.9%): [72577.342, 138513.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.428 ±(99.9%) 434.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.428, 252.139), stdev = 112.760
[info]   CI (99.9%): [≈ 0, 484.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 8.87% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17278.422 ops/s
[info] # Warmup Iteration   2: 31504.037 ops/s
[info] # Warmup Iteration   3: 31697.904 ops/s
[info] Iteration   1: 31832.449 ops/s
[info]                  ·gc.alloc.rate:                                  1802.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83720.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                230.543 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 32278.261 ops/s
[info]                  ·gc.alloc.rate:            1828.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99582.890 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 32340.536 ops/s
[info]                  ·gc.alloc.rate:            1831.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82824.116 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 32122.977 ops/s
[info]                  ·gc.alloc.rate:                                  1819.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100063.308 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 31729.699 ops/s
[info]                  ·gc.alloc.rate:            1797.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84421.354 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32060.784 ±(99.9%) 1038.925 ops/s [Average]
[info]   (min, avg, max) = (31729.699, 32060.784, 32340.536), stdev = 269.805
[info]   CI (99.9%): [31021.859, 33099.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1815.870 ±(99.9%) 59.304 MB/sec [Average]
[info]   (min, avg, max) = (1797.183, 1815.870, 1831.630), stdev = 15.401
[info]   CI (99.9%): [1756.566, 1875.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.014 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.014, 89144.016), stdev = 0.001
[info]   CI (99.9%): [89144.008, 89144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.294 ±(99.9%) 2.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.294, 1.409), stdev = 0.624
[info]   CI (99.9%): [≈ 0, 2.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1836.319 ±(99.9%) 724.825 MB/sec [Average]
[info]   (min, avg, max) = (1692.886, 1836.319, 2042.716), stdev = 188.235
[info]   CI (99.9%): [1111.494, 2561.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   90122.351 ±(99.9%) 34175.358 B/op [Average]
[info]   (min, avg, max) = (82824.116, 90122.351, 100063.308), stdev = 8875.232
[info]   CI (99.9%): [55946.993, 124297.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   46.109 ±(99.9%) 397.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.109, 230.543), stdev = 103.102
[info]   CI (99.9%): [≈ 0, 443.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.14% complete, ETA 01:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36358.984 ops/s
[info] # Warmup Iteration   2: 44145.631 ops/s
[info] # Warmup Iteration   3: 44537.205 ops/s
[info] Iteration   1: 44230.432 ops/s
[info]                  ·gc.alloc.rate:                                  1700.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60301.950 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.222 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 43801.615 ops/s
[info]                  ·gc.alloc.rate:                                  1682.769 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61154.367 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 44756.026 ops/s
[info]                  ·gc.alloc.rate:                                  1719.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59849.694 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 43784.914 ops/s
[info]                  ·gc.alloc.rate:                                  1682.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61178.107 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 43854.732 ops/s
[info]                  ·gc.alloc.rate:                                  1684.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61080.472 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   44085.544 ±(99.9%) 1604.854 ops/s [Average]
[info]   (min, avg, max) = (43784.914, 44085.544, 44756.026), stdev = 416.775
[info]   CI (99.9%): [42480.690, 45690.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1694.007 ±(99.9%) 61.764 MB/sec [Average]
[info]   (min, avg, max) = (1682.644, 1694.007, 1719.625), stdev = 16.040
[info]   CI (99.9%): [1632.243, 1755.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.010, 60480.010), stdev = 0.001
[info]   CI (99.9%): [60480.008, 60480.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.016, 0.069), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.567 ±(99.9%) 4.039 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.567, 2.443), stdev = 1.049
[info]   CI (99.9%): [≈ 0, 4.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1700.405 ±(99.9%) 11.643 MB/sec [Average]
[info]   (min, avg, max) = (1695.007, 1700.405, 1702.067), stdev = 3.024
[info]   CI (99.9%): [1688.762, 1712.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60712.918 ±(99.9%) 2326.715 B/op [Average]
[info]   (min, avg, max) = (59849.694, 60712.918, 61178.107), stdev = 604.241
[info]   CI (99.9%): [58386.203, 63039.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.444 ±(99.9%) 244.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.444, 142.222), stdev = 63.603
[info]   CI (99.9%): [≈ 0, 273.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.41% complete, ETA 01:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37161.198 ops/s
[info] # Warmup Iteration   2: 43535.538 ops/s
[info] # Warmup Iteration   3: 44973.488 ops/s
[info] Iteration   1: 43699.910 ops/s
[info]                  ·gc.alloc.rate:                                  1602.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.791 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60890.630 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                143.949 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 44074.053 ops/s
[info]                  ·gc.alloc.rate:                                  1616.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.501 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60778.396 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45131.700 ops/s
[info]                  ·gc.alloc.rate:            1656.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59351.167 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 45577.661 ops/s
[info]                  ·gc.alloc.rate:                                  1672.012 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58771.782 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 45602.167 ops/s
[info]                  ·gc.alloc.rate:                                  1672.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58742.143 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   44817.098 ±(99.9%) 3386.591 ops/s [Average]
[info]   (min, avg, max) = (43699.910, 44817.098, 45602.167), stdev = 879.487
[info]   CI (99.9%): [41430.507, 48203.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1643.958 ±(99.9%) 125.009 MB/sec [Average]
[info]   (min, avg, max) = (1602.772, 1643.958, 1672.642), stdev = 32.465
[info]   CI (99.9%): [1518.949, 1768.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.008, 57736.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.105), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.908 ±(99.9%) 6.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 3.791), stdev = 1.624
[info]   CI (99.9%): [≈ 0, 7.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1699.602 ±(99.9%) 19.963 MB/sec [Average]
[info]   (min, avg, max) = (1690.345, 1699.602, 1702.371), stdev = 5.184
[info]   CI (99.9%): [1679.638, 1719.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   59706.824 ±(99.9%) 4075.624 B/op [Average]
[info]   (min, avg, max) = (58742.143, 59706.824, 60890.630), stdev = 1058.427
[info]   CI (99.9%): [55631.200, 63782.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   28.790 ±(99.9%) 247.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.790, 143.949), stdev = 64.376
[info]   CI (99.9%): [≈ 0, 276.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 9.68% complete, ETA 01:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277788.497 ops/s
[info] # Warmup Iteration   2: 346329.611 ops/s
[info] # Warmup Iteration   3: 346930.491 ops/s
[info] Iteration   1: 339830.169 ops/s
[info]                  ·gc.alloc.rate:                                  1713.794 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.619 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7851.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.425 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 350824.856 ops/s
[info]                  ·gc.alloc.rate:                                  1768.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7635.190 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 352497.653 ops/s
[info]                  ·gc.alloc.rate:            1777.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       7936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9119.009 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 349089.403 ops/s
[info]                  ·gc.alloc.rate:                                  1760.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7673.723 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 352308.232 ops/s
[info]                  ·gc.alloc.rate:                                  1776.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7603.444 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   348910.062 ±(99.9%) 20244.413 ops/s [Average]
[info]   (min, avg, max) = (339830.169, 348910.062, 352497.653), stdev = 5257.410
[info]   CI (99.9%): [328665.649, 369154.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1759.210 ±(99.9%) 101.321 MB/sec [Average]
[info]   (min, avg, max) = (1713.794, 1759.210, 1777.384), stdev = 26.313
[info]   CI (99.9%): [1657.889, 1860.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7936.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7936.001, 7936.001, 7936.001), stdev = 0.001
[info]   CI (99.9%): [7936.001, 7936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.131 ±(99.9%) 1.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.619), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.627 ±(99.9%) 589.270 MB/sec [Average]
[info]   (min, avg, max) = (1695.563, 1768.627, 2042.336), stdev = 153.032
[info]   CI (99.9%): [1179.357, 2357.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7976.589 ±(99.9%) 2486.775 B/op [Average]
[info]   (min, avg, max) = (7603.444, 7976.589, 9119.009), stdev = 645.807
[info]   CI (99.9%): [5489.814, 10463.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.085 ±(99.9%) 26.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.085, 15.425), stdev = 6.898
[info]   CI (99.9%): [≈ 0, 29.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Run progress: 9.95% complete, ETA 01:11:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66455.260 ops/s
[info] # Warmup Iteration   2: 1496797.659 ops/s
[info] # Warmup Iteration   3: 1502189.159 ops/s
[info] Iteration   1: 1424742.339 ops/s
[info]                  ·gc.alloc.rate:            448.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 737.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1503843.304 ops/s
[info]                  ·gc.alloc.rate:            473.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 349.291 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1498268.412 ops/s
[info]                  ·gc.alloc.rate:            472.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.171 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1499074.280 ops/s
[info]                  ·gc.alloc.rate:            472.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1498138.760 ops/s
[info]                  ·gc.alloc.rate:            472.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      665.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 697.718 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1484813.419 ±(99.9%) 129622.147 ops/s [Average]
[info]   (min, avg, max) = (1424742.339, 1484813.419, 1503843.304), stdev = 33662.460
[info]   CI (99.9%): [1355191.271, 1614435.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   468.033 ±(99.9%) 41.220 MB/sec [Average]
[info]   (min, avg, max) = (448.920, 468.033, 473.863), stdev = 10.705
[info]   CI (99.9%): [426.812, 509.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.470 ±(99.9%) 702.205 MB/sec [Average]
[info]   (min, avg, max) = (333.702, 533.470, 667.413), stdev = 182.360
[info]   CI (99.9%): [≈ 0, 1235.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   567.180 ±(99.9%) 766.319 B/op [Average]
[info]   (min, avg, max) = (349.291, 567.180, 737.334), stdev = 199.011
[info]   CI (99.9%): [≈ 0, 1333.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.22% complete, ETA 01:11:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373500.243 ops/s
[info] # Warmup Iteration   2: 578778.174 ops/s
[info] # Warmup Iteration   3: 592097.381 ops/s
[info] Iteration   1: 589453.076 ops/s
[info]                  ·gc.alloc.rate:            500.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1796.475 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 591443.806 ops/s
[info]                  ·gc.alloc.rate:            501.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 895.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 588033.009 ops/s
[info]                  ·gc.alloc.rate:            499.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1800.733 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 591645.311 ops/s
[info]                  ·gc.alloc.rate:            502.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.869 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 588726.556 ops/s
[info]                  ·gc.alloc.rate:            499.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1798.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   589860.352 ±(99.9%) 6233.988 ops/s [Average]
[info]   (min, avg, max) = (588033.009, 589860.352, 591645.311), stdev = 1618.947
[info]   CI (99.9%): [583626.363, 596094.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   500.630 ±(99.9%) 5.241 MB/sec [Average]
[info]   (min, avg, max) = (499.059, 500.630, 502.125), stdev = 1.361
[info]   CI (99.9%): [495.390, 505.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.162 ±(99.9%) 709.453 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 538.162, 672.749), stdev = 184.243
[info]   CI (99.9%): [≈ 0, 1247.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1437.179 ±(99.9%) 1905.724 B/op [Average]
[info]   (min, avg, max) = (894.869, 1437.179, 1800.733), stdev = 494.910
[info]   CI (99.9%): [≈ 0, 3342.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.48% complete, ETA 01:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1552639.462 ops/s
[info] # Warmup Iteration   2: 1702650.957 ops/s
[info] # Warmup Iteration   3: 1740739.104 ops/s
[info] Iteration   1: 1735292.183 ops/s
[info]                  ·gc.alloc.rate:            335.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.701 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1738258.265 ops/s
[info]                  ·gc.alloc.rate:            335.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.188 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1733990.061 ops/s
[info]                  ·gc.alloc.rate:            334.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1739468.530 ops/s
[info]                  ·gc.alloc.rate:            336.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 304.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1738060.362 ops/s
[info]                  ·gc.alloc.rate:            335.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1737013.880 ±(99.9%) 8775.888 ops/s [Average]
[info]   (min, avg, max) = (1733990.061, 1737013.880, 1739468.530), stdev = 2279.070
[info]   CI (99.9%): [1728237.992, 1745789.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.484 ±(99.9%) 1.745 MB/sec [Average]
[info]   (min, avg, max) = (334.865, 335.484, 336.002), stdev = 0.453
[info]   CI (99.9%): [333.739, 337.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.036 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (336.995, 337.036, 337.081), stdev = 0.035
[info]   CI (99.9%): [336.899, 337.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   305.406 ±(99.9%) 1.549 B/op [Average]
[info]   (min, avg, max) = (304.976, 305.406, 305.948), stdev = 0.402
[info]   CI (99.9%): [303.857, 306.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 10.75% complete, ETA 01:10:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51726.945 ops/s
[info] # Warmup Iteration   2: 87071.665 ops/s
[info] # Warmup Iteration   3: 89769.373 ops/s
[info] Iteration   1: 92133.426 ops/s
[info]                  ·gc.alloc.rate:                                  3346.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3402.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58147.385 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 90363.368 ops/s
[info]                  ·gc.alloc.rate:                                  3282.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59286.155 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 91964.600 ops/s
[info]                  ·gc.alloc.rate:                                  3340.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58256.122 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 91438.958 ops/s
[info]                  ·gc.alloc.rate:                                  3320.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52731.499 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 90814.944 ops/s
[info]                  ·gc.alloc.rate:                                  3298.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58992.429 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   91343.059 ±(99.9%) 2893.682 ops/s [Average]
[info]   (min, avg, max) = (90363.368, 91343.059, 92133.426), stdev = 751.480
[info]   CI (99.9%): [88449.377, 94236.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3317.828 ±(99.9%) 103.783 MB/sec [Average]
[info]   (min, avg, max) = (3282.949, 3317.828, 3346.128), stdev = 26.952
[info]   CI (99.9%): [3214.046, 3421.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.005, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.046, 0.069), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.379 ±(99.9%) 586.681 MB/sec [Average]
[info]   (min, avg, max) = (3062.832, 3335.379, 3404.110), stdev = 152.359
[info]   CI (99.9%): [2748.699, 3922.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57482.718 ±(99.9%) 10394.177 B/op [Average]
[info]   (min, avg, max) = (52731.499, 57482.718, 59286.155), stdev = 2699.335
[info]   CI (99.9%): [47088.541, 67876.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.095
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.02% complete, ETA 01:10:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270785.567 ops/s
[info] # Warmup Iteration   2: 331969.292 ops/s
[info] # Warmup Iteration   3: 331754.345 ops/s
[info] Iteration   1: 325236.883 ops/s
[info]                  ·gc.alloc.rate:            500.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1631.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 320608.710 ops/s
[info]                  ·gc.alloc.rate:            493.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3309.399 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 332426.719 ops/s
[info]                  ·gc.alloc.rate:            511.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1595.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 322681.980 ops/s
[info]                  ·gc.alloc.rate:            496.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3288.101 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 316069.161 ops/s
[info]                  ·gc.alloc.rate:            486.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       2424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1678.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   323404.691 ±(99.9%) 23335.644 ops/s [Average]
[info]   (min, avg, max) = (316069.161, 323404.691, 332426.719), stdev = 6060.193
[info]   CI (99.9%): [300069.047, 346740.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   498.049 ±(99.9%) 35.951 MB/sec [Average]
[info]   (min, avg, max) = (486.716, 498.049, 511.887), stdev = 9.336
[info]   CI (99.9%): [462.098, 534.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2424.001, 2424.001, 2424.001), stdev = 0.001
[info]   CI (99.9%): [2424.001, 2424.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.855 ±(99.9%) 710.804 MB/sec [Average]
[info]   (min, avg, max) = (336.997, 471.855, 674.102), stdev = 184.594
[info]   CI (99.9%): [≈ 0, 1182.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2300.588 ±(99.9%) 3510.616 B/op [Average]
[info]   (min, avg, max) = (1595.824, 2300.588, 3309.399), stdev = 911.696
[info]   CI (99.9%): [≈ 0, 5811.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Run progress: 11.29% complete, ETA 01:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76609.508 ops/s
[info] # Warmup Iteration   2: 1214388.282 ops/s
[info] # Warmup Iteration   3: 1201158.165 ops/s
[info] Iteration   1: 1181206.246 ops/s
[info]                  ·gc.alloc.rate:            546.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 889.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1223102.835 ops/s
[info]                  ·gc.alloc.rate:            565.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1210241.978 ops/s
[info]                  ·gc.alloc.rate:            559.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1210916.667 ops/s
[info]                  ·gc.alloc.rate:            560.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1226992.214 ops/s
[info]                  ·gc.alloc.rate:            567.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1210491.988 ±(99.9%) 69129.207 ops/s [Average]
[info]   (min, avg, max) = (1181206.246, 1210491.988, 1226992.214), stdev = 17952.635
[info]   CI (99.9%): [1141362.781, 1279621.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   559.868 ±(99.9%) 31.949 MB/sec [Average]
[info]   (min, avg, max) = (546.305, 559.868, 567.473), stdev = 8.297
[info]   CI (99.9%): [527.920, 591.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.941 ±(99.9%) 703.923 MB/sec [Average]
[info]   (min, avg, max) = (333.673, 533.941, 667.592), stdev = 182.807
[info]   CI (99.9%): [≈ 0, 1237.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   696.491 ±(99.9%) 941.689 B/op [Average]
[info]   (min, avg, max) = (428.097, 696.491, 889.353), stdev = 244.554
[info]   CI (99.9%): [≈ 0, 1638.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 11.56% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80787.411 ops/s
[info] # Warmup Iteration   2: 1229783.482 ops/s
[info] # Warmup Iteration   3: 1171376.004 ops/s
[info] Iteration   1: 1234934.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1236914.565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1233519.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1236451.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1232767.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc":
[info]   1234917.437 ±(99.9%) 6919.552 ops/s [Average]
[info]   (min, avg, max) = (1232767.377, 1234917.437, 1236914.565), stdev = 1796.986
[info]   CI (99.9%): [1227997.885, 1241836.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.83% complete, ETA 01:09:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627345.473 ops/s
[info] # Warmup Iteration   2: 982575.309 ops/s
[info] # Warmup Iteration   3: 976488.564 ops/s
[info] Iteration   1: 975716.574 ops/s
[info]                  ·gc.alloc.rate:            689.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1085.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 946511.750 ops/s
[info]                  ·gc.alloc.rate:            668.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1118.755 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 946930.130 ops/s
[info]                  ·gc.alloc.rate:            668.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1118.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 948085.052 ops/s
[info]                  ·gc.alloc.rate:            669.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1116.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 941329.928 ops/s
[info]                  ·gc.alloc.rate:                   664.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1124.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.682 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   951714.687 ±(99.9%) 52624.039 ops/s [Average]
[info]   (min, avg, max) = (941329.928, 951714.687, 975716.574), stdev = 13666.296
[info]   CI (99.9%): [899090.647, 1004338.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   672.336 ±(99.9%) 37.083 MB/sec [Average]
[info]   (min, avg, max) = (664.965, 672.336, 689.243), stdev = 9.630
[info]   CI (99.9%): [635.253, 709.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.701 ±(99.9%) 0.467 MB/sec [Average]
[info]   (min, avg, max) = (672.626, 672.701, 672.917), stdev = 0.121
[info]   CI (99.9%): [672.233, 673.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1112.784 ±(99.9%) 60.460 B/op [Average]
[info]   (min, avg, max) = (1085.240, 1112.784, 1124.852), stdev = 15.701
[info]   CI (99.9%): [1052.324, 1173.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.336 ±(99.9%) 11.507 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.336, 6.682), stdev = 2.988
[info]   CI (99.9%): [≈ 0, 12.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.10% complete, ETA 01:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2149456.184 ops/s
[info] # Warmup Iteration   2: 2398308.884 ops/s
[info] # Warmup Iteration   3: 2481015.566 ops/s
[info] Iteration   1: 2431318.564 ops/s
[info]                  ·gc.alloc.rate:                   1124.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        872.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.431 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2456494.395 ops/s
[info]                  ·gc.alloc.rate:                   1136.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        647.457 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2439321.102 ops/s
[info]                  ·gc.alloc.rate:                                  1128.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       658.884 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2456603.259 ops/s
[info]                  ·gc.alloc.rate:                                  1136.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       872.351 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2466021.090 ops/s
[info]                  ·gc.alloc.rate:                                  1140.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       651.763 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2449951.682 ±(99.9%) 54642.482 ops/s [Average]
[info]   (min, avg, max) = (2431318.564, 2449951.682, 2466021.090), stdev = 14190.479
[info]   CI (99.9%): [2395309.200, 2504594.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1133.167 ±(99.9%) 24.694 MB/sec [Average]
[info]   (min, avg, max) = (1124.919, 1133.167, 1140.528), stdev = 6.413
[info]   CI (99.9%): [1108.473, 1157.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.387 ±(99.9%) 711.565 MB/sec [Average]
[info]   (min, avg, max) = (1010.399, 1152.387, 1361.406), stdev = 184.791
[info]   CI (99.9%): [440.822, 1863.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   740.562 ±(99.9%) 463.530 B/op [Average]
[info]   (min, avg, max) = (647.457, 740.562, 872.355), stdev = 120.377
[info]   CI (99.9%): [277.032, 1204.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.598 ±(99.9%) 4.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.598, 2.561), stdev = 1.113
[info]   CI (99.9%): [≈ 0, 4.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.37% complete, ETA 01:09:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2243752.023 ops/s
[info] # Warmup Iteration   2: 2477696.153 ops/s
[info] # Warmup Iteration   3: 2489630.025 ops/s
[info] Iteration   1: 2492771.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2492256.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2492389.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2494095.818 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2497031.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2493708.789 ±(99.9%) 7681.193 ops/s [Average]
[info]   (min, avg, max) = (2492256.458, 2493708.789, 2497031.067), stdev = 1994.781
[info]   CI (99.9%): [2486027.596, 2501389.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.63% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300648.510 ops/s
[info] # Warmup Iteration   2: 397054.539 ops/s
[info] # Warmup Iteration   3: 389045.078 ops/s
[info] Iteration   1: 401203.330 ops/s
[info]                  ·gc.alloc.rate:            468.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2639.248 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 404448.352 ops/s
[info]                  ·gc.alloc.rate:            472.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1309.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 398151.862 ops/s
[info]                  ·gc.alloc.rate:            465.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2659.422 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 401837.851 ops/s
[info]                  ·gc.alloc.rate:            469.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1317.585 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 403202.392 ops/s
[info]                  ·gc.alloc.rate:            471.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1313.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   401768.758 ±(99.9%) 9161.367 ops/s [Average]
[info]   (min, avg, max) = (398151.862, 401768.758, 404448.352), stdev = 2379.178
[info]   CI (99.9%): [392607.391, 410930.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   469.610 ±(99.9%) 10.658 MB/sec [Average]
[info]   (min, avg, max) = (465.410, 469.610, 472.713), stdev = 2.768
[info]   CI (99.9%): [458.952, 480.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   470.856 ±(99.9%) 709.297 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 470.856, 672.674), stdev = 184.202
[info]   CI (99.9%): [≈ 0, 1180.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1847.687 ±(99.9%) 2818.064 B/op [Average]
[info]   (min, avg, max) = (1309.087, 1847.687, 2659.422), stdev = 731.842
[info]   CI (99.9%): [≈ 0, 4665.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 12.90% complete, ETA 01:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139217.028 ops/s
[info] # Warmup Iteration   2: 160250.137 ops/s
[info] # Warmup Iteration   3: 165827.716 ops/s
[info] Iteration   1: 164442.011 ops/s
[info]                  ·gc.alloc.rate:                                  1974.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.833 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19546.524 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 164677.490 ops/s
[info]                  ·gc.alloc.rate:                                  1977.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19519.465 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 163570.685 ops/s
[info]                  ·gc.alloc.rate:                                  1963.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19651.066 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 163874.326 ops/s
[info]                  ·gc.alloc.rate:                                  1967.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16346.213 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 164587.420 ops/s
[info]                  ·gc.alloc.rate:                                  1976.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18896.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19530.137 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   164230.386 ±(99.9%) 1860.845 ops/s [Average]
[info]   (min, avg, max) = (163570.685, 164230.386, 164677.490), stdev = 483.256
[info]   CI (99.9%): [162369.541, 166091.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1971.834 ±(99.9%) 23.533 MB/sec [Average]
[info]   (min, avg, max) = (1963.586, 1971.834, 1977.536), stdev = 6.111
[info]   CI (99.9%): [1948.302, 1995.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18896.002, 18896.003, 18896.003), stdev = 0.001
[info]   CI (99.9%): [18896.002, 18896.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.019, 0.087), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 1.393 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.186, 0.833), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1974.346 ±(99.9%) 586.751 MB/sec [Average]
[info]   (min, avg, max) = (1701.765, 1974.346, 2042.784), stdev = 152.377
[info]   CI (99.9%): [1387.595, 2561.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18918.681 ±(99.9%) 5541.110 B/op [Average]
[info]   (min, avg, max) = (16346.213, 18918.681, 19651.066), stdev = 1439.009
[info]   CI (99.9%): [13377.571, 24459.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.17% complete, ETA 01:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233740.324 ops/s
[info] # Warmup Iteration   2: 365605.256 ops/s
[info] # Warmup Iteration   3: 367018.455 ops/s
[info] Iteration   1: 366774.493 ops/s
[info]                  ·gc.alloc.rate:            311.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1443.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 363569.112 ops/s
[info]                  ·gc.alloc.rate:            308.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1456.239 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 352800.703 ops/s
[info]                  ·gc.alloc.rate:            299.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1500.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 353031.849 ops/s
[info]                  ·gc.alloc.rate:            299.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1499.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 366161.750 ops/s
[info]                  ·gc.alloc.rate:            310.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1445.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   360467.581 ±(99.9%) 26947.034 ops/s [Average]
[info]   (min, avg, max) = (352800.703, 360467.581, 366774.493), stdev = 6998.059
[info]   CI (99.9%): [333520.547, 387414.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   305.931 ±(99.9%) 22.854 MB/sec [Average]
[info]   (min, avg, max) = (299.438, 305.931, 311.283), stdev = 5.935
[info]   CI (99.9%): [283.077, 328.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.337 ±(99.9%) 0.039 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 336.337, 336.351), stdev = 0.010
[info]   CI (99.9%): [336.298, 336.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1469.230 ±(99.9%) 110.377 B/op [Average]
[info]   (min, avg, max) = (1443.556, 1469.230, 1500.691), stdev = 28.665
[info]   CI (99.9%): [1358.853, 1579.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.44% complete, ETA 01:08:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 804040.282 ops/s
[info] # Warmup Iteration   2: 838425.531 ops/s
[info] # Warmup Iteration   3: 818483.909 ops/s
[info] Iteration   1: 845362.568 ops/s
[info]                  ·gc.alloc.rate:      163.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 798544.068 ops/s
[info]                  ·gc.alloc.rate:            154.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 841373.200 ops/s
[info]                  ·gc.alloc.rate:      162.490 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 839514.259 ops/s
[info]                  ·gc.alloc.rate:            162.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 840549.203 ops/s
[info]                  ·gc.alloc.rate:      162.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   833068.660 ±(99.9%) 74804.576 ops/s [Average]
[info]   (min, avg, max) = (798544.068, 833068.660, 845362.568), stdev = 19426.511
[info]   CI (99.9%): [758264.084, 907873.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   160.908 ±(99.9%) 14.379 MB/sec [Average]
[info]   (min, avg, max) = (154.268, 160.908, 163.253), stdev = 3.734
[info]   CI (99.9%): [146.529, 175.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.860 ±(99.9%) 711.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.860, 337.169), stdev = 184.665
[info]   CI (99.9%): [≈ 0, 845.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   259.251 ±(99.9%) 1367.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 259.251, 664.347), stdev = 355.179
[info]   CI (99.9%): [≈ 0, 1626.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 13.71% complete, ETA 01:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42941.935 ops/s
[info] # Warmup Iteration   2: 76020.026 ops/s
[info] # Warmup Iteration   3: 78828.808 ops/s
[info] Iteration   1: 77447.316 ops/s
[info]                  ·gc.alloc.rate:                                  3297.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69176.748 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 78684.845 ops/s
[info]                  ·gc.alloc.rate:                                  3351.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68088.485 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 77048.243 ops/s
[info]                  ·gc.alloc.rate:                                  3280.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69534.037 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 78610.356 ops/s
[info]                  ·gc.alloc.rate:                                  3347.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68150.838 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 77241.066 ops/s
[info]                  ·gc.alloc.rate:                                  3289.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62423.479 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   77806.365 ±(99.9%) 3008.285 ops/s [Average]
[info]   (min, avg, max) = (77048.243, 77806.365, 78684.845), stdev = 781.242
[info]   CI (99.9%): [74798.080, 80814.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3313.138 ±(99.9%) 128.953 MB/sec [Average]
[info]   (min, avg, max) = (3280.365, 3313.138, 3351.011), stdev = 33.489
[info]   CI (99.9%): [3184.185, 3442.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.008, 0.011), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 0.192 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.170, 0.223), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3336.027 ±(99.9%) 585.121 MB/sec [Average]
[info]   (min, avg, max) = (3064.204, 3336.027, 3404.638), stdev = 151.954
[info]   CI (99.9%): [2750.906, 3921.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67474.718 ±(99.9%) 11141.372 B/op [Average]
[info]   (min, avg, max) = (62423.479, 67474.718, 69534.037), stdev = 2893.379
[info]   CI (99.9%): [56333.346, 78616.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 13.98% complete, ETA 01:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241983.174 ops/s
[info] # Warmup Iteration   2: 313654.761 ops/s
[info] # Warmup Iteration   3: 307317.393 ops/s
[info] Iteration   1: 308577.061 ops/s
[info]                  ·gc.alloc.rate:            1370.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       6992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6876.621 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 318878.851 ops/s
[info]                  ·gc.alloc.rate:                                  1416.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.668 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6703.790 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.439 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 319722.675 ops/s
[info]                  ·gc.alloc.rate:                                  1420.474 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6702.513 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 319844.650 ops/s
[info]                  ·gc.alloc.rate:                                  1421.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8374.998 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 320177.285 ops/s
[info]                  ·gc.alloc.rate:            1422.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       6992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6692.969 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   317440.104 ±(99.9%) 19167.125 ops/s [Average]
[info]   (min, avg, max) = (308577.061, 317440.104, 320177.285), stdev = 4977.641
[info]   CI (99.9%): [298272.979, 336607.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1410.300 ±(99.9%) 85.547 MB/sec [Average]
[info]   (min, avg, max) = (1370.782, 1410.300, 1422.668), stdev = 22.216
[info]   CI (99.9%): [1324.753, 1495.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6992.001, 6992.001, 6992.001), stdev = 0.001
[info]   CI (99.9%): [6992.001, 6992.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.136 ±(99.9%) 1.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.668), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1426.392 ±(99.9%) 594.414 MB/sec [Average]
[info]   (min, avg, max) = (1348.161, 1426.392, 1702.353), stdev = 154.367
[info]   CI (99.9%): [831.978, 2020.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7070.178 ±(99.9%) 2824.208 B/op [Average]
[info]   (min, avg, max) = (6692.969, 7070.178, 8374.998), stdev = 733.438
[info]   CI (99.9%): [4245.970, 9894.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.288 ±(99.9%) 28.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.288, 16.439), stdev = 7.352
[info]   CI (99.9%): [≈ 0, 31.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.207
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Run progress: 14.25% complete, ETA 01:08:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1129132.549 ops/s
[info] # Warmup Iteration   2: 1667670.949 ops/s
[info] # Warmup Iteration   3: 1715682.189 ops/s
[info] Iteration   1: 1704616.272 ops/s
[info]                  ·gc.alloc.rate:                   874.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        931.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1709609.315 ops/s
[info]                  ·gc.alloc.rate:            877.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 929.063 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1718390.758 ops/s
[info]                  ·gc.alloc.rate:                   882.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        615.601 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1703640.591 ops/s
[info]                  ·gc.alloc.rate:                                  874.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       939.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.692 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1728580.696 ops/s
[info]                  ·gc.alloc.rate:                                  887.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       619.856 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1712967.526 ±(99.9%) 40440.711 ops/s [Average]
[info]   (min, avg, max) = (1703640.591, 1712967.526, 1728580.696), stdev = 10502.324
[info]   CI (99.9%): [1672526.815, 1753408.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   879.335 ±(99.9%) 20.808 MB/sec [Average]
[info]   (min, avg, max) = (874.461, 879.335, 887.319), stdev = 5.404
[info]   CI (99.9%): [858.527, 900.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.102), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.095), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.486 ±(99.9%) 707.108 MB/sec [Average]
[info]   (min, avg, max) = (672.069, 877.486, 1017.001), stdev = 183.634
[info]   CI (99.9%): [170.378, 1584.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   807.075 ±(99.9%) 665.785 B/op [Average]
[info]   (min, avg, max) = (615.601, 807.075, 939.707), stdev = 172.902
[info]   CI (99.9%): [141.291, 1472.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.984 ±(99.9%) 5.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.984, 3.692), stdev = 1.545
[info]   CI (99.9%): [≈ 0, 6.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.025
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.52% complete, ETA 01:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1979768.579 ops/s
[info] # Warmup Iteration   2: 2145235.318 ops/s
[info] # Warmup Iteration   3: 2169344.824 ops/s
[info] Iteration   1: 2146113.001 ops/s
[info]                  ·gc.alloc.rate:            578.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246.688 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2087473.193 ops/s
[info]                  ·gc.alloc.rate:                   562.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        507.746 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2176477.007 ops/s
[info]                  ·gc.alloc.rate:            586.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 486.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2185294.362 ops/s
[info]                  ·gc.alloc.rate:            588.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2174428.776 ops/s
[info]                  ·gc.alloc.rate:                   585.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        486.973 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2153957.268 ±(99.9%) 153904.167 ops/s [Average]
[info]   (min, avg, max) = (2087473.193, 2153957.268, 2185294.362), stdev = 39968.423
[info]   CI (99.9%): [2000053.100, 2307861.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   580.257 ±(99.9%) 41.400 MB/sec [Average]
[info]   (min, avg, max) = (562.332, 580.257, 588.717), stdev = 10.751
[info]   CI (99.9%): [538.857, 621.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.459 ±(99.9%) 710.182 MB/sec [Average]
[info]   (min, avg, max) = (336.397, 538.459, 673.400), stdev = 184.432
[info]   CI (99.9%): [≈ 0, 1248.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   394.136 ±(99.9%) 527.101 B/op [Average]
[info]   (min, avg, max) = (242.277, 394.136, 507.746), stdev = 136.886
[info]   CI (99.9%): [≈ 0, 921.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.197 ±(99.9%) 1.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.502), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 14.78% complete, ETA 01:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2113138.756 ops/s
[info] # Warmup Iteration   2: 2393903.004 ops/s
[info] # Warmup Iteration   3: 2389167.378 ops/s
[info] Iteration   1: 2397842.153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2399264.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2388972.679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2392217.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2395162.863 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2394692.062 ±(99.9%) 16095.678 ops/s [Average]
[info]   (min, avg, max) = (2388972.679, 2394692.062, 2399264.912), stdev = 4179.996
[info]   CI (99.9%): [2378596.384, 2410787.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.05% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25283.027 ops/s
[info] # Warmup Iteration   2: 37315.376 ops/s
[info] # Warmup Iteration   3: 37619.635 ops/s
[info] Iteration   1: 38019.219 ops/s
[info]                  ·gc.alloc.rate:                                  1601.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66324.371 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69794.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                165.456 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 38622.920 ops/s
[info]                  ·gc.alloc.rate:                                  1627.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.894 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69354.932 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 38918.412 ops/s
[info]                  ·gc.alloc.rate:                                  1640.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68827.532 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38757.256 ops/s
[info]                  ·gc.alloc.rate:                                  1632.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55292.143 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 39004.330 ops/s
[info]                  ·gc.alloc.rate:                                  1643.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68674.041 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   38664.427 ±(99.9%) 1499.623 ops/s [Average]
[info]   (min, avg, max) = (38019.219, 38664.427, 39004.330), stdev = 389.447
[info]   CI (99.9%): [37164.805, 40164.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1629.160 ±(99.9%) 63.704 MB/sec [Average]
[info]   (min, avg, max) = (1601.789, 1629.160, 1643.413), stdev = 16.544
[info]   CI (99.9%): [1565.456, 1692.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.883 ±(99.9%) 7.508 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.883, 66324.371), stdev = 1.950
[info]   CI (99.9%): [66313.375, 66328.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.031, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.284 ±(99.9%) 6.652 B/op [Average]
[info]   (min, avg, max) = (0.053, 1.284, 3.894), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.580 ±(99.9%) 580.030 MB/sec [Average]
[info]   (min, avg, max) = (1361.420, 1630.580, 1702.348), stdev = 150.632
[info]   CI (99.9%): [1050.550, 2210.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66388.682 ±(99.9%) 23947.171 B/op [Average]
[info]   (min, avg, max) = (55292.143, 66388.682, 69794.763), stdev = 6219.004
[info]   CI (99.9%): [42441.511, 90335.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.091 ±(99.9%) 284.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.091, 165.456), stdev = 73.994
[info]   CI (99.9%): [≈ 0, 318.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.941
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Run progress: 15.32% complete, ETA 01:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189283.044 ops/s
[info] # Warmup Iteration   2: 231357.221 ops/s
[info] # Warmup Iteration   3: 236164.859 ops/s
[info] Iteration   1: 242647.134 ops/s
[info]                  ·gc.alloc.rate:                                  2493.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15454.800 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 235388.360 ops/s
[info]                  ·gc.alloc.rate:                                  2418.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15931.311 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 236624.267 ops/s
[info]                  ·gc.alloc.rate:                                  2432.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15848.981 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 242115.756 ops/s
[info]                  ·gc.alloc.rate:                                  2488.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17702.382 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 240117.624 ops/s
[info]                  ·gc.alloc.rate:                                  2468.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15618.390 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   239378.628 ±(99.9%) 12511.610 ops/s [Average]
[info]   (min, avg, max) = (235388.360, 239378.628, 242647.134), stdev = 3249.225
[info]   CI (99.9%): [226867.019, 251890.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2460.140 ±(99.9%) 128.257 MB/sec [Average]
[info]   (min, avg, max) = (2418.679, 2460.140, 2493.320), stdev = 33.308
[info]   CI (99.9%): [2331.883, 2588.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16176.002, 16176.002, 16176.002), stdev = 0.001
[info]   CI (99.9%): [16176.001, 16176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.016), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (0.043, 0.070, 0.110), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.694 ±(99.9%) 585.848 MB/sec [Average]
[info]   (min, avg, max) = (2382.092, 2450.694, 2722.853), stdev = 152.143
[info]   CI (99.9%): [1864.846, 3036.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16111.173 ±(99.9%) 3501.071 B/op [Average]
[info]   (min, avg, max) = (15454.800, 16111.173, 17702.382), stdev = 909.217
[info]   CI (99.9%): [12610.102, 19612.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Run progress: 15.59% complete, ETA 01:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188527.399 ops/s
[info] # Warmup Iteration   2: 296472.218 ops/s
[info] # Warmup Iteration   3: 299200.648 ops/s
[info] Iteration   1: 297285.946 ops/s
[info]                  ·gc.alloc.rate:                   1438.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7123.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 290813.159 ops/s
[info]                  ·gc.alloc.rate:                                  1407.067 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.143 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7368.649 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 297395.169 ops/s
[info]                  ·gc.alloc.rate:                                  1438.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7205.811 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 302326.195 ops/s
[info]                  ·gc.alloc.rate:                                  1462.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8860.668 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 299283.018 ops/s
[info]                  ·gc.alloc.rate:            1448.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7160.528 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   297420.697 ±(99.9%) 16247.085 ops/s [Average]
[info]   (min, avg, max) = (290813.159, 297420.697, 302326.195), stdev = 4219.316
[info]   CI (99.9%): [281173.612, 313667.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1439.145 ±(99.9%) 78.639 MB/sec [Average]
[info]   (min, avg, max) = (1407.067, 1439.145, 1462.803), stdev = 20.422
[info]   CI (99.9%): [1360.507, 1517.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.002), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.777), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1426.383 ±(99.9%) 593.570 MB/sec [Average]
[info]   (min, avg, max) = (1345.797, 1426.383, 1701.866), stdev = 154.148
[info]   CI (99.9%): [832.814, 2019.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7543.803 ±(99.9%) 2857.482 B/op [Average]
[info]   (min, avg, max) = (7123.358, 7543.803, 8860.668), stdev = 742.079
[info]   CI (99.9%): [4686.321, 10401.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.232 ±(99.9%) 36.436 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.232, 21.158), stdev = 9.462
[info]   CI (99.9%): [≈ 0, 40.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Run progress: 15.86% complete, ETA 01:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1165375.477 ops/s
[info] # Warmup Iteration   2: 1250050.397 ops/s
[info] # Warmup Iteration   3: 1275169.378 ops/s
[info] Iteration   1: 1233552.628 ops/s
[info]                  ·gc.alloc.rate:            426.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 860.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1205339.739 ops/s
[info]                  ·gc.alloc.rate:            416.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 440.134 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 1235453.399 ops/s
[info]                  ·gc.alloc.rate:            427.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1221452.232 ops/s
[info]                  ·gc.alloc.rate:            422.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.311 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1266460.917 ops/s
[info]                  ·gc.alloc.rate:            437.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 837.766 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1232451.783 ±(99.9%) 86594.463 ops/s [Average]
[info]   (min, avg, max) = (1205339.739, 1232451.783, 1266460.917), stdev = 22488.307
[info]   CI (99.9%): [1145857.320, 1319046.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   426.000 ±(99.9%) 29.858 MB/sec [Average]
[info]   (min, avg, max) = (416.533, 426.000, 437.669), stdev = 7.754
[info]   CI (99.9%): [396.142, 455.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.900 ±(99.9%) 710.867 MB/sec [Average]
[info]   (min, avg, max) = (337.004, 471.900, 674.245), stdev = 184.610
[info]   CI (99.9%): [≈ 0, 1182.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   600.344 ±(99.9%) 874.501 B/op [Average]
[info]   (min, avg, max) = (429.394, 600.344, 860.113), stdev = 227.105
[info]   CI (99.9%): [≈ 0, 1474.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Run progress: 16.13% complete, ETA 01:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29788.654 ops/s
[info] # Warmup Iteration   2: 71545.072 ops/s
[info] # Warmup Iteration   3: 73879.247 ops/s
[info] Iteration   1: 74229.807 ops/s
[info]                  ·gc.alloc.rate:                                  3118.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72172.401 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 74629.214 ops/s
[info]                  ·gc.alloc.rate:                                  3136.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64607.071 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 74517.777 ops/s
[info]                  ·gc.alloc.rate:                                  3131.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64702.423 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 73561.954 ops/s
[info]                  ·gc.alloc.rate:                                  3090.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65542.235 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 73736.546 ops/s
[info]                  ·gc.alloc.rate:                                  3098.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65388.488 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   74135.060 ±(99.9%) 1813.180 ops/s [Average]
[info]   (min, avg, max) = (73561.954, 74135.060, 74629.214), stdev = 470.877
[info]   CI (99.9%): [72321.879, 75948.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3115.109 ±(99.9%) 76.669 MB/sec [Average]
[info]   (min, avg, max) = (3090.725, 3115.109, 3136.083), stdev = 19.911
[info]   CI (99.9%): [3038.440, 3191.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.006, 66144.006), stdev = 0.001
[info]   CI (99.9%): [66144.005, 66144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.010, 0.016), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.220 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.147, 0.220, 0.340), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.035 ±(99.9%) 585.736 MB/sec [Average]
[info]   (min, avg, max) = (3062.606, 3131.035, 3403.144), stdev = 152.114
[info]   CI (99.9%): [2545.299, 3716.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66482.524 ±(99.9%) 12349.381 B/op [Average]
[info]   (min, avg, max) = (64607.071, 66482.524, 72172.401), stdev = 3207.095
[info]   CI (99.9%): [54133.143, 78831.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Run progress: 16.40% complete, ETA 01:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166179.884 ops/s
[info] # Warmup Iteration   2: 209833.552 ops/s
[info] # Warmup Iteration   3: 207118.908 ops/s
[info] Iteration   1: 212172.666 ops/s
[info]                  ·gc.alloc.rate:                                  1801.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.612 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15100.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.707 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 213503.052 ops/s
[info]                  ·gc.alloc.rate:                                  1812.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12546.358 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 210976.183 ops/s
[info]                  ·gc.alloc.rate:                                  1790.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12696.851 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 212729.788 ops/s
[info]                  ·gc.alloc.rate:            1805.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15110.684 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 214726.978 ops/s
[info]                  ·gc.alloc.rate:                                  1823.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12475.084 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   212821.733 ±(99.9%) 5421.740 ops/s [Average]
[info]   (min, avg, max) = (210976.183, 212821.733, 214726.978), stdev = 1408.009
[info]   CI (99.9%): [207399.994, 218243.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1806.661 ±(99.9%) 46.990 MB/sec [Average]
[info]   (min, avg, max) = (1790.529, 1806.661, 1823.174), stdev = 12.203
[info]   CI (99.9%): [1759.671, 1853.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.135 ±(99.9%) 1.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.612), stdev = 0.267
[info]   CI (99.9%): [≈ 0, 1.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.920 ±(99.9%) 711.106 MB/sec [Average]
[info]   (min, avg, max) = (1701.652, 1836.920, 2042.293), stdev = 184.672
[info]   CI (99.9%): [1125.814, 2548.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13585.925 ±(99.9%) 5351.009 B/op [Average]
[info]   (min, avg, max) = (12475.084, 13585.925, 15110.684), stdev = 1389.640
[info]   CI (99.9%): [8234.916, 18936.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.941 ±(99.9%) 42.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.941, 24.707), stdev = 11.049
[info]   CI (99.9%): [≈ 0, 47.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Run progress: 16.67% complete, ETA 01:06:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 624520.517 ops/s
[info] # Warmup Iteration   2: 1116619.858 ops/s
[info] # Warmup Iteration   3: 1124748.582 ops/s
[info] Iteration   1: 1165251.053 ops/s
[info]                  ·gc.alloc.rate:            681.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 908.698 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1170376.240 ops/s
[info]                  ·gc.alloc.rate:            684.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 904.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1160713.752 ops/s
[info]                  ·gc.alloc.rate:            678.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 912.270 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1165927.769 ops/s
[info]                  ·gc.alloc.rate:            681.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 908.195 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1164015.677 ops/s
[info]                  ·gc.alloc.rate:                   680.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        909.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.404 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1165256.898 ±(99.9%) 13455.035 ops/s [Average]
[info]   (min, avg, max) = (1160713.752, 1165256.898, 1170376.240), stdev = 3494.230
[info]   CI (99.9%): [1151801.863, 1178711.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   681.120 ±(99.9%) 8.038 MB/sec [Average]
[info]   (min, avg, max) = (678.378, 681.120, 684.204), stdev = 2.088
[info]   CI (99.9%): [673.082, 689.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.761 ±(99.9%) 0.452 MB/sec [Average]
[info]   (min, avg, max) = (672.659, 672.761, 672.922), stdev = 0.118
[info]   CI (99.9%): [672.309, 673.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   908.716 ±(99.9%) 10.492 B/op [Average]
[info]   (min, avg, max) = (904.734, 908.716, 912.270), stdev = 2.725
[info]   CI (99.9%): [898.224, 919.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.081 ±(99.9%) 9.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.081, 5.404), stdev = 2.417
[info]   CI (99.9%): [≈ 0, 10.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Run progress: 16.94% complete, ETA 01:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2664086.813 ops/s
[info] # Warmup Iteration   2: 3028558.276 ops/s
[info] # Warmup Iteration   3: 3059715.747 ops/s
[info] Iteration   1: 3027530.637 ops/s
[info]                  ·gc.alloc.rate:            1031.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 698.305 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3060870.583 ops/s
[info]                  ·gc.alloc.rate:                   1042.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        518.929 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2918947.749 ops/s
[info]                  ·gc.alloc.rate:                                  993.915 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       548.833 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.796 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2914124.957 ops/s
[info]                  ·gc.alloc.rate:                                  992.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       367.690 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2921496.886 ops/s
[info]                  ·gc.alloc.rate:            994.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 550.138 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2968594.162 ±(99.9%) 269808.027 ops/s [Average]
[info]   (min, avg, max) = (2914124.957, 2968594.162, 3060870.583), stdev = 70068.288
[info]   CI (99.9%): [2698786.135, 3238402.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1011.071 ±(99.9%) 92.061 MB/sec [Average]
[info]   (min, avg, max) = (992.653, 1011.071, 1042.188), stdev = 23.908
[info]   CI (99.9%): [919.010, 1103.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1014.579 ±(99.9%) 902.960 MB/sec [Average]
[info]   (min, avg, max) = (680.949, 1014.579, 1344.064), stdev = 234.496
[info]   CI (99.9%): [111.619, 1917.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   536.779 ±(99.9%) 452.857 B/op [Average]
[info]   (min, avg, max) = (367.690, 536.779, 698.305), stdev = 117.605
[info]   CI (99.9%): [83.923, 989.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 3.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 1.796), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.416
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 17.20% complete, ETA 01:05:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2991009.639 ops/s
[info] # Warmup Iteration   2: 3271934.842 ops/s
[info] # Warmup Iteration   3: 3355252.174 ops/s
[info] Iteration   1: 3353928.537 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3353226.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3353846.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3344349.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3353118.921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3351693.811 ±(99.9%) 15870.600 ops/s [Average]
[info]   (min, avg, max) = (3344349.247, 3351693.811, 3353928.537), stdev = 4121.544
[info]   CI (99.9%): [3335823.212, 3367564.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Run progress: 17.47% complete, ETA 01:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154498.307 ops/s
[info] # Warmup Iteration   2: 291519.499 ops/s
[info] # Warmup Iteration   3: 297464.801 ops/s
[info] Iteration   1: 305505.359 ops/s
[info]                  ·gc.alloc.rate:                                  2496.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12274.984 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 309651.749 ops/s
[info]                  ·gc.alloc.rate:                                  2530.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12111.052 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 306580.020 ops/s
[info]                  ·gc.alloc.rate:                                  2505.584 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13980.010 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 309305.770 ops/s
[info]                  ·gc.alloc.rate:                                  2527.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12124.989 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 300157.499 ops/s
[info]                  ·gc.alloc.rate:                                  2453.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12494.275 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   306240.079 ±(99.9%) 14749.915 ops/s [Average]
[info]   (min, avg, max) = (300157.499, 306240.079, 309651.749), stdev = 3830.506
[info]   CI (99.9%): [291490.164, 320989.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2502.724 ±(99.9%) 120.665 MB/sec [Average]
[info]   (min, avg, max) = (2453.013, 2502.724, 2530.801), stdev = 31.336
[info]   CI (99.9%): [2382.059, 2623.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.001, 12864.001, 12864.001), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.009), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.032, 0.046), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2450.567 ±(99.9%) 586.335 MB/sec [Average]
[info]   (min, avg, max) = (2382.245, 2450.567, 2722.955), stdev = 152.269
[info]   CI (99.9%): [1864.232, 3036.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12597.062 ±(99.9%) 3035.607 B/op [Average]
[info]   (min, avg, max) = (12111.052, 12597.062, 13980.010), stdev = 788.337
[info]   CI (99.9%): [9561.455, 15632.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 17.74% complete, ETA 01:05:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19225.998 ops/s
[info] # Warmup Iteration   2: 25621.698 ops/s
[info] # Warmup Iteration   3: 25640.394 ops/s
[info] Iteration   1: 25430.085 ops/s
[info]                  ·gc.alloc.rate:                   1488.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              92168.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83440.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 206.129 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 25611.616 ops/s
[info]                  ·gc.alloc.rate:                                  1499.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104583.350 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 25475.512 ops/s
[info]                  ·gc.alloc.rate:            1491.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       92168.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84116.536 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 25536.386 ops/s
[info]                  ·gc.alloc.rate:            1495.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       92168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83915.639 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 26133.107 ops/s
[info]                  ·gc.alloc.rate:                                  1530.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92168.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.507 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102502.647 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25637.341 ±(99.9%) 1098.922 ops/s [Average]
[info]   (min, avg, max) = (25430.085, 25637.341, 26133.107), stdev = 285.386
[info]   CI (99.9%): [24538.419, 26736.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1501.268 ±(99.9%) 65.175 MB/sec [Average]
[info]   (min, avg, max) = (1488.966, 1501.268, 1530.688), stdev = 16.926
[info]   CI (99.9%): [1436.094, 1566.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92168.017 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (92168.016, 92168.017, 92168.020), stdev = 0.002
[info]   CI (99.9%): [92168.011, 92168.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.595 ±(99.9%) 12.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.595, 7.466), stdev = 3.289
[info]   CI (99.9%): [≈ 0, 14.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.960 ±(99.9%) 728.044 MB/sec [Average]
[info]   (min, avg, max) = (1347.979, 1494.960, 1702.321), stdev = 189.071
[info]   CI (99.9%): [766.916, 2223.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91711.803 ±(99.9%) 41695.383 B/op [Average]
[info]   (min, avg, max) = (83440.842, 91711.803, 104583.350), stdev = 10828.159
[info]   CI (99.9%): [50016.420, 133407.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.226 ±(99.9%) 354.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.226, 206.129), stdev = 92.183
[info]   CI (99.9%): [≈ 0, 396.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.658
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Run progress: 18.01% complete, ETA 01:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1467.328 ops/s
[info] # Warmup Iteration   2: 87277.446 ops/s
[info] # Warmup Iteration   3: 91251.843 ops/s
[info] Iteration   1: 92379.919 ops/s
[info]                  ·gc.alloc.rate:            832.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17057.859 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 93229.837 ops/s
[info]                  ·gc.alloc.rate:            839.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11267.877 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 92468.921 ops/s
[info]                  ·gc.alloc.rate:            832.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17041.443 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 90670.993 ops/s
[info]                  ·gc.alloc.rate:            816.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11585.581 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 93033.197 ops/s
[info]                  ·gc.alloc.rate:                                  838.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.484 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17118.274 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                112.694 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   92356.573 ±(99.9%) 3886.460 ops/s [Average]
[info]   (min, avg, max) = (90670.993, 92356.573, 93229.837), stdev = 1009.301
[info]   CI (99.9%): [88470.113, 96243.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   831.896 ±(99.9%) 35.320 MB/sec [Average]
[info]   (min, avg, max) = (816.567, 831.896, 839.854), stdev = 9.173
[info]   CI (99.9%): [796.575, 867.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.005, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.097 ±(99.9%) 0.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.484), stdev = 0.216
[info]   CI (99.9%): [≈ 0, 0.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.636 ±(99.9%) 14.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.636, 8.180), stdev = 3.658
[info]   CI (99.9%): [≈ 0, 15.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   869.886 ±(99.9%) 711.761 MB/sec [Average]
[info]   (min, avg, max) = (667.354, 869.886, 1011.942), stdev = 184.842
[info]   CI (99.9%): [158.125, 1581.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14814.207 ±(99.9%) 11915.825 B/op [Average]
[info]   (min, avg, max) = (11267.877, 14814.207, 17118.274), stdev = 3094.502
[info]   CI (99.9%): [2898.382, 26730.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.472 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.662), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   22.539 ±(99.9%) 194.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.539, 112.694), stdev = 50.398
[info]   CI (99.9%): [≈ 0, 216.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 14.000), stdev = 2.408
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 18.28% complete, ETA 01:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34179.430 ops/s
[info] # Warmup Iteration   2: 57479.285 ops/s
[info] # Warmup Iteration   3: 58559.443 ops/s
[info] Iteration   1: 58893.026 ops/s
[info]                  ·gc.alloc.rate:            972.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26970.555 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 57635.334 ops/s
[info]                  ·gc.alloc.rate:            952.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27558.682 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 58924.630 ops/s
[info]                  ·gc.alloc.rate:                                  973.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27062.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                106.756 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 58438.658 ops/s
[info]                  ·gc.alloc.rate:                                  965.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18335.324 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 57867.138 ops/s
[info]                  ·gc.alloc.rate:            956.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27773.848 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   58351.757 ±(99.9%) 2259.138 ops/s [Average]
[info]   (min, avg, max) = (57635.334, 58351.757, 58924.630), stdev = 586.691
[info]   CI (99.9%): [56092.619, 60610.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   964.230 ±(99.9%) 37.312 MB/sec [Average]
[info]   (min, avg, max) = (952.436, 964.230, 973.940), stdev = 9.690
[info]   CI (99.9%): [926.918, 1001.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.008), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.566 ±(99.9%) 3.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.266), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.694 ±(99.9%) 572.676 MB/sec [Average]
[info]   (min, avg, max) = (680.797, 946.694, 1021.102), stdev = 148.722
[info]   CI (99.9%): [374.018, 1519.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25540.215 ±(99.9%) 15562.690 B/op [Average]
[info]   (min, avg, max) = (18335.324, 25540.215, 27773.848), stdev = 4041.581
[info]   CI (99.9%): [9977.525, 41102.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.351 ±(99.9%) 183.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.351, 106.756), stdev = 47.743
[info]   CI (99.9%): [≈ 0, 205.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.404
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 18.55% complete, ETA 01:04:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72232.389 ops/s
[info] # Warmup Iteration   2: 78854.517 ops/s
[info] # Warmup Iteration   3: 78685.373 ops/s
[info] Iteration   1: 80930.212 ops/s
[info]                  ·gc.alloc.rate:            521.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6555.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 80529.941 ops/s
[info]                  ·gc.alloc.rate:            519.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13175.388 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 80494.627 ops/s
[info]                  ·gc.alloc.rate:            518.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13180.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 80696.596 ops/s
[info]                  ·gc.alloc.rate:            520.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6573.900 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80498.663 ops/s
[info]                  ·gc.alloc.rate:            518.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13180.461 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   80630.008 ±(99.9%) 720.774 ops/s [Average]
[info]   (min, avg, max) = (80494.627, 80630.008, 80930.212), stdev = 187.183
[info]   CI (99.9%): [79909.234, 81350.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   519.663 ±(99.9%) 4.584 MB/sec [Average]
[info]   (min, avg, max) = (518.787, 519.663, 521.580), stdev = 1.190
[info]   CI (99.9%): [515.080, 524.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.005), stdev = 0.001
[info]   CI (99.9%): [10144.004, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.293 ±(99.9%) 710.946 MB/sec [Average]
[info]   (min, avg, max) = (337.037, 539.293, 674.203), stdev = 184.630
[info]   CI (99.9%): [≈ 0, 1250.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10533.119 ±(99.9%) 13950.356 B/op [Average]
[info]   (min, avg, max) = (6555.057, 10533.119, 13180.788), stdev = 3622.863
[info]   CI (99.9%): [≈ 0, 24483.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 18.82% complete, ETA 01:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15005.718 ops/s
[info] # Warmup Iteration   2: 31041.077 ops/s
[info] # Warmup Iteration   3: 31406.356 ops/s
[info] Iteration   1: 31109.613 ops/s
[info]                  ·gc.alloc.rate:                                  1624.676 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68278.427 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                202.207 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 31718.266 ops/s
[info]                  ·gc.alloc.rate:                                  1656.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.807 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84447.965 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 31903.402 ops/s
[info]                  ·gc.alloc.rate:                                  1666.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.388 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83958.373 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 32034.720 ops/s
[info]                  ·gc.alloc.rate:                                  1673.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83617.718 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 32312.975 ops/s
[info]                  ·gc.alloc.rate:                                  1687.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82890.742 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   31815.795 ±(99.9%) 1733.855 ops/s [Average]
[info]   (min, avg, max) = (31109.613, 31815.795, 32312.975), stdev = 450.277
[info]   CI (99.9%): [30081.940, 33549.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1661.809 ±(99.9%) 91.098 MB/sec [Average]
[info]   (min, avg, max) = (1624.676, 1661.809, 1687.848), stdev = 23.658
[info]   CI (99.9%): [1570.711, 1752.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82216.013, 82216.014, 82216.016), stdev = 0.002
[info]   CI (99.9%): [82216.008, 82216.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (0.008, 0.025, 0.082), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.244 ±(99.9%) 6.314 B/op [Average]
[info]   (min, avg, max) = (0.387, 1.244, 4.161), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.259 ±(99.9%) 607.037 MB/sec [Average]
[info]   (min, avg, max) = (1349.254, 1631.259, 1701.955), stdev = 157.646
[info]   CI (99.9%): [1024.222, 2238.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80638.645 ±(99.9%) 26695.637 B/op [Average]
[info]   (min, avg, max) = (68278.427, 80638.645, 84447.965), stdev = 6932.772
[info]   CI (99.9%): [53943.008, 107334.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   40.441 ±(99.9%) 348.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.441, 202.207), stdev = 90.430
[info]   CI (99.9%): [≈ 0, 388.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 14.000), stdev = 4.615
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 19.09% complete, ETA 01:04:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26386.048 ops/s
[info] # Warmup Iteration   2: 36931.720 ops/s
[info] # Warmup Iteration   3: 37276.141 ops/s
[info] Iteration   1: 38403.126 ops/s
[info]                  ·gc.alloc.rate:            430.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13813.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 38671.569 ops/s
[info]                  ·gc.alloc.rate:            433.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27435.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 38382.731 ops/s
[info]                  ·gc.alloc.rate:            429.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13821.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 38776.845 ops/s
[info]                  ·gc.alloc.rate:            434.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13680.370 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 38660.893 ops/s
[info]                  ·gc.alloc.rate:            433.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13721.054 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38579.033 ±(99.9%) 677.625 ops/s [Average]
[info]   (min, avg, max) = (38382.731, 38579.033, 38776.845), stdev = 175.977
[info]   CI (99.9%): [37901.408, 39256.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   432.168 ±(99.9%) 7.664 MB/sec [Average]
[info]   (min, avg, max) = (429.963, 432.168, 434.399), stdev = 1.990
[info]   CI (99.9%): [424.504, 439.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.011 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (17632.011, 17632.011, 17632.014), stdev = 0.002
[info]   CI (99.9%): [17632.005, 17632.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.443 ±(99.9%) 580.482 MB/sec [Average]
[info]   (min, avg, max) = (337.003, 404.443, 674.112), stdev = 150.749
[info]   CI (99.9%): [≈ 0, 984.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16494.371 ±(99.9%) 23553.224 B/op [Average]
[info]   (min, avg, max) = (13680.370, 16494.371, 27435.723), stdev = 6116.697
[info]   CI (99.9%): [≈ 0, 40047.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 19.35% complete, ETA 01:04:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24438.728 ops/s
[info] # Warmup Iteration   2: 40906.594 ops/s
[info] # Warmup Iteration   3: 39891.588 ops/s
[info] Iteration   1: 41389.967 ops/s
[info]                  ·gc.alloc.rate:            373.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12791.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 41154.132 ops/s
[info]                  ·gc.alloc.rate:            371.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25729.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 41358.055 ops/s
[info]                  ·gc.alloc.rate:            373.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12801.423 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 41402.171 ops/s
[info]                  ·gc.alloc.rate:                   373.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12761.882 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.321 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 39878.354 ops/s
[info]                  ·gc.alloc.rate:            360.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13276.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41036.536 ±(99.9%) 2522.975 ops/s [Average]
[info]   (min, avg, max) = (39878.354, 41036.536, 41402.171), stdev = 655.208
[info]   CI (99.9%): [38513.561, 43559.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   370.607 ±(99.9%) 22.773 MB/sec [Average]
[info]   (min, avg, max) = (360.152, 370.607, 373.896), stdev = 5.914
[info]   CI (99.9%): [347.834, 393.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.472 ±(99.9%) 579.492 MB/sec [Average]
[info]   (min, avg, max) = (335.651, 403.472, 672.681), stdev = 150.492
[info]   CI (99.9%): [≈ 0, 982.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15472.016 ±(99.9%) 22094.456 B/op [Average]
[info]   (min, avg, max) = (12761.882, 15472.016, 25729.113), stdev = 5737.860
[info]   CI (99.9%): [≈ 0, 37566.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.064 ±(99.9%) 43.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.064, 25.321), stdev = 11.324
[info]   CI (99.9%): [≈ 0, 48.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 19.62% complete, ETA 01:03:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35102.742 ops/s
[info] # Warmup Iteration   2: 43212.636 ops/s
[info] # Warmup Iteration   3: 43465.889 ops/s
[info] Iteration   1: 43492.418 ops/s
[info]                  ·gc.alloc.rate:            382.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12172.844 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44171.088 ops/s
[info]                  ·gc.alloc.rate:            388.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11986.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44702.718 ops/s
[info]                  ·gc.alloc.rate:            392.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11843.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 42945.127 ops/s
[info]                  ·gc.alloc.rate:            377.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12328.147 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44505.570 ops/s
[info]                  ·gc.alloc.rate:            391.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23748.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   43963.384 ±(99.9%) 2818.067 ops/s [Average]
[info]   (min, avg, max) = (42945.127, 43963.384, 44702.718), stdev = 731.843
[info]   CI (99.9%): [41145.317, 46781.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   386.424 ±(99.9%) 24.877 MB/sec [Average]
[info]   (min, avg, max) = (377.467, 386.424, 392.922), stdev = 6.460
[info]   CI (99.9%): [361.547, 411.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.010, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.007, 13832.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.504 ±(99.9%) 577.763 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 403.504, 671.909), stdev = 150.043
[info]   CI (99.9%): [≈ 0, 981.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14415.881 ±(99.9%) 20101.465 B/op [Average]
[info]   (min, avg, max) = (11843.944, 14415.881, 23748.442), stdev = 5220.287
[info]   CI (99.9%): [≈ 0, 34517.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.89% complete, ETA 01:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37336.110 ops/s
[info] # Warmup Iteration   2: 42799.570 ops/s
[info] # Warmup Iteration   3: 44347.384 ops/s
[info] Iteration   1: 44285.749 ops/s
[info]                  ·gc.alloc.rate:            338.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11955.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 43877.656 ops/s
[info]                  ·gc.alloc.rate:            335.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12066.055 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44335.442 ops/s
[info]                  ·gc.alloc.rate:            338.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11941.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 44392.268 ops/s
[info]                  ·gc.alloc.rate:            339.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11926.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44423.099 ops/s
[info]                  ·gc.alloc.rate:            339.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11918.050 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44262.843 ±(99.9%) 853.675 ops/s [Average]
[info]   (min, avg, max) = (43877.656, 44262.843, 44423.099), stdev = 221.697
[info]   CI (99.9%): [43409.168, 45116.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   338.360 ±(99.9%) 6.583 MB/sec [Average]
[info]   (min, avg, max) = (335.374, 338.360, 339.567), stdev = 1.710
[info]   CI (99.9%): [331.777, 344.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.372 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 336.372, 336.457), stdev = 0.051
[info]   CI (99.9%): [336.177, 336.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   11961.526 ±(99.9%) 231.573 B/op [Average]
[info]   (min, avg, max) = (11918.050, 11961.526, 12066.055), stdev = 60.139
[info]   CI (99.9%): [11729.952, 12193.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 20.16% complete, ETA 01:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13712.266 ops/s
[info] # Warmup Iteration   2: 18208.055 ops/s
[info] # Warmup Iteration   3: 18390.213 ops/s
[info] Iteration   1: 18392.921 ops/s
[info]                  ·gc.alloc.rate:            689.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57684.220 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19563.253 ops/s
[info]                  ·gc.alloc.rate:            733.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54234.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 19411.767 ops/s
[info]                  ·gc.alloc.rate:                   727.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82038.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 108.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 19374.390 ops/s
[info]                  ·gc.alloc.rate:            726.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       59016.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54872.068 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 19364.948 ops/s
[info]                  ·gc.alloc.rate:                   725.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54843.427 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 270.698 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19221.456 ±(99.9%) 1809.692 ops/s [Average]
[info]   (min, avg, max) = (18392.921, 19221.456, 19563.253), stdev = 469.971
[info]   CI (99.9%): [17411.763, 21031.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   720.633 ±(99.9%) 68.022 MB/sec [Average]
[info]   (min, avg, max) = (689.497, 720.633, 733.512), stdev = 17.665
[info]   CI (99.9%): [652.610, 788.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59016.023 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (59016.021, 59016.023, 59016.026), stdev = 0.002
[info]   CI (99.9%): [59016.014, 59016.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   741.954 ±(99.9%) 580.701 MB/sec [Average]
[info]   (min, avg, max) = (673.937, 741.954, 1011.722), stdev = 150.806
[info]   CI (99.9%): [161.253, 1322.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   60734.709 ±(99.9%) 46147.675 B/op [Average]
[info]   (min, avg, max) = (54234.842, 60734.709, 82038.988), stdev = 11984.405
[info]   CI (99.9%): [14587.034, 106882.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   75.743 ±(99.9%) 456.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.743, 270.698), stdev = 118.596
[info]   CI (99.9%): [≈ 0, 532.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 10.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 20.43% complete, ETA 01:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11420.653 ops/s
[info] # Warmup Iteration   2: 18064.319 ops/s
[info] # Warmup Iteration   3: 18577.470 ops/s
[info] Iteration   1: 18661.635 ops/s
[info]                  ·gc.alloc.rate:            529.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       44657.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28370.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18515.335 ops/s
[info]                  ·gc.alloc.rate:            525.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57187.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18615.370 ops/s
[info]                  ·gc.alloc.rate:            528.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28440.350 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18537.812 ops/s
[info]                  ·gc.alloc.rate:            526.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57119.991 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 18498.845 ops/s
[info]                  ·gc.alloc.rate:            525.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28620.197 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18565.799 ±(99.9%) 268.543 ops/s [Average]
[info]   (min, avg, max) = (18498.845, 18565.799, 18661.635), stdev = 69.740
[info]   CI (99.9%): [18297.257, 18834.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   526.930 ±(99.9%) 7.179 MB/sec [Average]
[info]   (min, avg, max) = (525.163, 526.930, 529.409), stdev = 1.864
[info]   CI (99.9%): [519.750, 534.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44675.093 ±(99.9%) 38.763 B/op [Average]
[info]   (min, avg, max) = (44657.138, 44675.093, 44680.027), stdev = 10.067
[info]   CI (99.9%): [44636.330, 44713.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.879 ±(99.9%) 709.322 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 470.879, 672.686), stdev = 184.209
[info]   CI (99.9%): [≈ 0, 1180.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39947.729 ±(99.9%) 60483.274 B/op [Average]
[info]   (min, avg, max) = (28370.259, 39947.729, 57187.848), stdev = 15707.314
[info]   CI (99.9%): [≈ 0, 100431.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 20.70% complete, ETA 01:03:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71074.605 ops/s
[info] # Warmup Iteration   2: 73029.545 ops/s
[info] # Warmup Iteration   3: 72116.888 ops/s
[info] Iteration   1: 72662.860 ops/s
[info]                  ·gc.alloc.rate:            189.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7329.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 74964.231 ops/s
[info]                  ·gc.alloc.rate:      195.098 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74845.774 ops/s
[info]                  ·gc.alloc.rate:            194.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7101.820 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 74692.656 ops/s
[info]                  ·gc.alloc.rate:            194.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7116.651 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 74947.268 ops/s
[info]                  ·gc.alloc.rate:      195.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74422.558 ±(99.9%) 3810.646 ops/s [Average]
[info]   (min, avg, max) = (72662.860, 74422.558, 74964.231), stdev = 989.613
[info]   CI (99.9%): [70611.911, 78233.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   193.674 ±(99.9%) 9.976 MB/sec [Average]
[info]   (min, avg, max) = (189.065, 193.674, 195.098), stdev = 2.591
[info]   CI (99.9%): [183.698, 203.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.761 ±(99.9%) 712.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.761, 338.321), stdev = 185.095
[info]   CI (99.9%): [≈ 0, 915.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4309.608 ±(99.9%) 15152.853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4309.608, 7329.571), stdev = 3935.148
[info]   CI (99.9%): [≈ 0, 19462.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.97% complete, ETA 01:02:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8585.426 ops/s
[info] # Warmup Iteration   2: 15245.159 ops/s
[info] # Warmup Iteration   3: 15458.797 ops/s
[info] Iteration   1: 15408.546 ops/s
[info]                  ·gc.alloc.rate:            999.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103075.048 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 15577.877 ops/s
[info]                  ·gc.alloc.rate:            1009.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101963.584 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15900.712 ops/s
[info]                  ·gc.alloc.rate:                                  1030.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.763 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100281.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                395.590 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 15838.158 ops/s
[info]                  ·gc.alloc.rate:                                  1026.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101475.097 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 16179.775 ops/s
[info]                  ·gc.alloc.rate:            1048.944 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99330.594 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15781.014 ±(99.9%) 1149.726 ops/s [Average]
[info]   (min, avg, max) = (15408.546, 15781.014, 16179.775), stdev = 298.580
[info]   CI (99.9%): [14631.287, 16930.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1023.170 ±(99.9%) 74.230 MB/sec [Average]
[info]   (min, avg, max) = (999.240, 1023.170, 1048.944), stdev = 19.277
[info]   CI (99.9%): [948.940, 1097.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.096 ±(99.9%) 0.590 B/op [Average]
[info]   (min, avg, max) = (102048.025, 102048.096, 102048.370), stdev = 0.153
[info]   CI (99.9%): [102047.506, 102048.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.842 ±(99.9%) 16.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.842, 9.763), stdev = 4.322
[info]   CI (99.9%): [≈ 0, 19.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.706 ±(99.9%) 23.171 MB/sec [Average]
[info]   (min, avg, max) = (1009.058, 1014.706, 1021.120), stdev = 6.017
[info]   CI (99.9%): [991.535, 1037.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101225.254 ±(99.9%) 5616.152 B/op [Average]
[info]   (min, avg, max) = (99330.594, 101225.254, 103075.048), stdev = 1458.497
[info]   CI (99.9%): [95609.102, 106841.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.118 ±(99.9%) 681.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.118, 395.590), stdev = 176.913
[info]   CI (99.9%): [≈ 0, 760.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 21.24% complete, ETA 01:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43189.114 ops/s
[info] # Warmup Iteration   2: 57658.780 ops/s
[info] # Warmup Iteration   3: 58210.318 ops/s
[info] Iteration   1: 58886.924 ops/s
[info]                  ·gc.alloc.rate:            892.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18017.198 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58657.222 ops/s
[info]                  ·gc.alloc.rate:            888.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27131.750 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58766.856 ops/s
[info]                  ·gc.alloc.rate:            890.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27080.513 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 57177.067 ops/s
[info]                  ·gc.alloc.rate:                                  866.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18647.626 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                91.680 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 57599.779 ops/s
[info]                  ·gc.alloc.rate:                                  872.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27903.053 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58217.570 ±(99.9%) 2987.263 ops/s [Average]
[info]   (min, avg, max) = (57177.067, 58217.570, 58886.924), stdev = 775.783
[info]   CI (99.9%): [55230.306, 61204.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   882.071 ±(99.9%) 44.586 MB/sec [Average]
[info]   (min, avg, max) = (866.716, 882.071, 892.084), stdev = 11.579
[info]   CI (99.9%): [837.485, 926.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.008), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.276 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 0.863), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.931 ±(99.9%) 714.073 MB/sec [Average]
[info]   (min, avg, max) = (673.971, 878.931, 1020.998), stdev = 185.443
[info]   CI (99.9%): [164.858, 1593.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23756.028 ±(99.9%) 19125.286 B/op [Average]
[info]   (min, avg, max) = (18017.198, 23756.028, 27903.053), stdev = 4966.776
[info]   CI (99.9%): [4630.742, 42881.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.336 ±(99.9%) 157.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.336, 91.680), stdev = 41.000
[info]   CI (99.9%): [≈ 0, 176.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 2.864
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Run progress: 21.51% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56769.670 ops/s
[info] # Warmup Iteration   2: 90773.084 ops/s
[info] # Warmup Iteration   3: 88484.144 ops/s
[info] Iteration   1: 88173.079 ops/s
[info]                  ·gc.alloc.rate:            1045.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18013.910 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 89533.051 ops/s
[info]                  ·gc.alloc.rate:            1061.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17740.322 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 91651.757 ops/s
[info]                  ·gc.alloc.rate:                                  1086.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.195 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17467.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                68.635 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 92374.887 ops/s
[info]                  ·gc.alloc.rate:                                  1095.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23198.283 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 90534.204 ops/s
[info]                  ·gc.alloc.rate:            1073.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17752.455 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   90453.396 ±(99.9%) 6438.068 ops/s [Average]
[info]   (min, avg, max) = (88173.079, 90453.396, 92374.887), stdev = 1671.946
[info]   CI (99.9%): [84015.328, 96891.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1072.664 ±(99.9%) 76.741 MB/sec [Average]
[info]   (min, avg, max) = (1045.397, 1072.664, 1095.485), stdev = 19.929
[info]   CI (99.9%): [995.923, 1149.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.004, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.335 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.672 ±(99.9%) 5.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.346), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.678 ±(99.9%) 598.654 MB/sec [Average]
[info]   (min, avg, max) = (1008.984, 1083.678, 1361.624), stdev = 155.469
[info]   CI (99.9%): [485.023, 1682.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18834.531 ±(99.9%) 9422.714 B/op [Average]
[info]   (min, avg, max) = (17467.687, 18834.531, 23198.283), stdev = 2447.049
[info]   CI (99.9%): [9411.817, 28257.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.727 ±(99.9%) 118.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.727, 68.635), stdev = 30.695
[info]   CI (99.9%): [≈ 0, 131.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 12.000), stdev = 4.604
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 21.77% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258533.466 ops/s
[info] # Warmup Iteration   2: 289223.344 ops/s
[info] # Warmup Iteration   3: 291199.382 ops/s
[info] Iteration   1: 289675.761 ops/s
[info]                  ·gc.alloc.rate:            459.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1827.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 292107.727 ops/s
[info]                  ·gc.alloc.rate:            463.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1812.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 291276.043 ops/s
[info]                  ·gc.alloc.rate:            461.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3635.340 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 291950.010 ops/s
[info]                  ·gc.alloc.rate:            462.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1813.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 286941.424 ops/s
[info]                  ·gc.alloc.rate:            455.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1845.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   290390.193 ±(99.9%) 8297.245 ops/s [Average]
[info]   (min, avg, max) = (286941.424, 290390.193, 292107.727), stdev = 2154.768
[info]   CI (99.9%): [282092.948, 298687.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.498 ±(99.9%) 13.179 MB/sec [Average]
[info]   (min, avg, max) = (455.053, 460.498, 463.304), stdev = 3.422
[info]   CI (99.9%): [447.319, 473.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.001, 2496.001, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.636 ±(99.9%) 579.089 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 403.636, 672.658), stdev = 150.388
[info]   CI (99.9%): [≈ 0, 982.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2186.818 ±(99.9%) 3118.469 B/op [Average]
[info]   (min, avg, max) = (1812.475, 2186.818, 3635.340), stdev = 809.856
[info]   CI (99.9%): [≈ 0, 5305.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.04% complete, ETA 01:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293786.727 ops/s
[info] # Warmup Iteration   2: 327213.340 ops/s
[info] # Warmup Iteration   3: 328566.926 ops/s
[info] Iteration   1: 328661.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 328807.371 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 329652.361 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 329694.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 324256.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   328214.551 ±(99.9%) 8711.281 ops/s [Average]
[info]   (min, avg, max) = (324256.905, 328214.551, 329694.524), stdev = 2262.292
[info]   CI (99.9%): [319503.269, 336925.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 22.31% complete, ETA 01:01:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48416.754 ops/s
[info] # Warmup Iteration   2: 69378.978 ops/s
[info] # Warmup Iteration   3: 70481.160 ops/s
[info] Iteration   1: 70377.503 ops/s
[info]                  ·gc.alloc.rate:            1096.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30091.256 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 70199.638 ops/s
[info]                  ·gc.alloc.rate:            1093.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       24520.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22625.657 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 70455.161 ops/s
[info]                  ·gc.alloc.rate:                                  1097.554 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.308 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22722.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.282 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 70875.939 ops/s
[info]                  ·gc.alloc.rate:                                  1104.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.594 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22676.151 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 70861.822 ops/s
[info]                  ·gc.alloc.rate:                                  1104.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24520.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30240.841 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   70554.013 ±(99.9%) 1163.016 ops/s [Average]
[info]   (min, avg, max) = (70199.638, 70554.013, 70875.939), stdev = 302.032
[info]   CI (99.9%): [69390.996, 71717.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1099.051 ±(99.9%) 18.311 MB/sec [Average]
[info]   (min, avg, max) = (1093.498, 1099.051, 1104.010), stdev = 4.755
[info]   CI (99.9%): [1080.740, 1117.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24520.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24520.006, 24520.006, 24520.006), stdev = 0.001
[info]   CI (99.9%): [24520.005, 24520.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.103), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.599 ±(99.9%) 3.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.599, 2.308), stdev = 0.987
[info]   CI (99.9%): [≈ 0, 4.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.787 ±(99.9%) 712.824 MB/sec [Average]
[info]   (min, avg, max) = (1009.017, 1150.787, 1361.588), stdev = 185.118
[info]   CI (99.9%): [437.963, 1863.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25671.250 ±(99.9%) 15801.710 B/op [Average]
[info]   (min, avg, max) = (22625.657, 25671.250, 30240.841), stdev = 4103.654
[info]   CI (99.9%): [9869.540, 41472.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   17.856 ±(99.9%) 153.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.856, 89.282), stdev = 39.928
[info]   CI (99.9%): [≈ 0, 171.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 5.450
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 22.58% complete, ETA 01:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19584.786 ops/s
[info] # Warmup Iteration   2: 27114.112 ops/s
[info] # Warmup Iteration   3: 27362.058 ops/s
[info] Iteration   1: 27587.319 ops/s
[info]                  ·gc.alloc.rate:            573.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38458.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27700.467 ops/s
[info]                  ·gc.alloc.rate:            575.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       32700.577 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38302.072 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 27588.441 ops/s
[info]                  ·gc.alloc.rate:            573.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19228.770 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27519.961 ops/s
[info]                  ·gc.alloc.rate:            571.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38552.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 27617.976 ops/s
[info]                  ·gc.alloc.rate:            573.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38417.164 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27602.833 ±(99.9%) 251.601 ops/s [Average]
[info]   (min, avg, max) = (27519.961, 27602.833, 27700.467), stdev = 65.340
[info]   CI (99.9%): [27351.232, 27854.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   573.422 ±(99.9%) 5.271 MB/sec [Average]
[info]   (min, avg, max) = (571.677, 573.422, 575.477), stdev = 1.369
[info]   CI (99.9%): [568.150, 578.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32700.128 ±(99.9%) 26.700 B/op [Average]
[info]   (min, avg, max) = (32696.015, 32700.128, 32712.019), stdev = 6.934
[info]   CI (99.9%): [32673.428, 32726.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.630 ±(99.9%) 580.394 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 606.630, 674.076), stdev = 150.727
[info]   CI (99.9%): [26.236, 1187.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34591.898 ±(99.9%) 33072.104 B/op [Average]
[info]   (min, avg, max) = (19228.770, 34591.898, 38552.549), stdev = 8588.720
[info]   CI (99.9%): [1519.794, 67664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Run progress: 22.85% complete, ETA 01:01:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17348.789 ops/s
[info] # Warmup Iteration   2: 28169.721 ops/s
[info] # Warmup Iteration   3: 28187.936 ops/s
[info] Iteration   1: 28233.494 ops/s
[info]                  ·gc.alloc.rate:            371.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18751.757 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 28047.791 ops/s
[info]                  ·gc.alloc.rate:            368.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       20686.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37752.175 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 28274.001 ops/s
[info]                  ·gc.alloc.rate:            371.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18725.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28149.331 ops/s
[info]                  ·gc.alloc.rate:                   369.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18769.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.242 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28307.262 ops/s
[info]                  ·gc.alloc.rate:            372.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18703.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28202.376 ±(99.9%) 402.985 ops/s [Average]
[info]   (min, avg, max) = (28047.791, 28202.376, 28307.262), stdev = 104.654
[info]   CI (99.9%): [27799.391, 28605.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   370.671 ±(99.9%) 5.348 MB/sec [Average]
[info]   (min, avg, max) = (368.625, 370.671, 372.059), stdev = 1.389
[info]   CI (99.9%): [365.323, 376.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.782 ±(99.9%) 2.012 B/op [Average]
[info]   (min, avg, max) = (20686.848, 20687.782, 20688.019), stdev = 0.522
[info]   CI (99.9%): [20685.770, 20689.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.493 ±(99.9%) 579.527 MB/sec [Average]
[info]   (min, avg, max) = (335.649, 403.493, 672.717), stdev = 150.501
[info]   CI (99.9%): [≈ 0, 983.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22540.473 ±(99.9%) 32744.479 B/op [Average]
[info]   (min, avg, max) = (18703.408, 22540.473, 37752.175), stdev = 8503.637
[info]   CI (99.9%): [≈ 0, 55284.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.448 ±(99.9%) 64.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.448, 37.242), stdev = 16.655
[info]   CI (99.9%): [≈ 0, 71.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 23.12% complete, ETA 01:01:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102012.098 ops/s
[info] # Warmup Iteration   2: 118475.952 ops/s
[info] # Warmup Iteration   3: 119433.723 ops/s
[info] Iteration   1: 117146.560 ops/s
[info]                  ·gc.alloc.rate:            457.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4528.558 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 120553.787 ops/s
[info]                  ·gc.alloc.rate:            470.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4400.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 120248.298 ops/s
[info]                  ·gc.alloc.rate:            469.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8823.652 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 120403.503 ops/s
[info]                  ·gc.alloc.rate:            470.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4406.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 119710.032 ops/s
[info]                  ·gc.alloc.rate:            467.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4431.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   119612.436 ±(99.9%) 5447.784 ops/s [Average]
[info]   (min, avg, max) = (117146.560, 119612.436, 120553.787), stdev = 1414.772
[info]   CI (99.9%): [114164.652, 125060.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.921 ±(99.9%) 21.203 MB/sec [Average]
[info]   (min, avg, max) = (457.322, 466.921, 470.615), stdev = 5.506
[info]   CI (99.9%): [445.719, 488.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.458 ±(99.9%) 580.264 MB/sec [Average]
[info]   (min, avg, max) = (337.059, 404.458, 674.025), stdev = 150.693
[info]   CI (99.9%): [≈ 0, 984.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5318.025 ±(99.9%) 7548.736 B/op [Average]
[info]   (min, avg, max) = (4400.447, 5318.025, 8823.652), stdev = 1960.383
[info]   CI (99.9%): [≈ 0, 12866.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 23.39% complete, ETA 01:00:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8436.189 ops/s
[info] # Warmup Iteration   2: 20972.999 ops/s
[info] # Warmup Iteration   3: 20809.855 ops/s
[info] Iteration   1: 20684.016 ops/s
[info]                  ·gc.alloc.rate:                   1142.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76636.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 21245.996 ops/s
[info]                  ·gc.alloc.rate:                   1173.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99627.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 345.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   3: 21474.249 ops/s
[info]                  ·gc.alloc.rate:                                  1185.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.637 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74842.490 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 21355.972 ops/s
[info]                  ·gc.alloc.rate:            1179.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100341.261 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 21271.131 ops/s
[info]                  ·gc.alloc.rate:            1174.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75553.065 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21206.273 ±(99.9%) 1175.484 ops/s [Average]
[info]   (min, avg, max) = (20684.016, 21206.273, 21474.249), stdev = 305.269
[info]   CI (99.9%): [20030.789, 22381.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1170.954 ±(99.9%) 65.103 MB/sec [Average]
[info]   (min, avg, max) = (1142.042, 1170.954, 1185.698), stdev = 16.907
[info]   CI (99.9%): [1105.851, 1236.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.027 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.027, 86904.051), stdev = 0.013
[info]   CI (99.9%): [86903.976, 86904.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.127 ±(99.9%) 9.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.127, 5.637), stdev = 2.521
[info]   CI (99.9%): [≈ 0, 10.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.203 ±(99.9%) 711.487 MB/sec [Average]
[info]   (min, avg, max) = (1007.106, 1151.203, 1361.928), stdev = 184.771
[info]   CI (99.9%): [439.716, 1862.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85399.988 ±(99.9%) 51333.580 B/op [Average]
[info]   (min, avg, max) = (74842.490, 85399.988, 100341.261), stdev = 13331.168
[info]   CI (99.9%): [34066.408, 136733.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.220 ±(99.9%) 579.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.220, 345.413), stdev = 150.417
[info]   CI (99.9%): [≈ 0, 658.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 20.000), stdev = 7.956
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 23.66% complete, ETA 01:00:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138229.510 ops/s
[info] # Warmup Iteration   2: 177500.336 ops/s
[info] # Warmup Iteration   3: 176951.139 ops/s
[info] Iteration   1: 179582.479 ops/s
[info]                  ·gc.alloc.rate:            626.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5908.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 180233.190 ops/s
[info]                  ·gc.alloc.rate:            629.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2943.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 173220.059 ops/s
[info]                  ·gc.alloc.rate:            604.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6125.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 179099.066 ops/s
[info]                  ·gc.alloc.rate:            625.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5924.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 179497.468 ops/s
[info]                  ·gc.alloc.rate:            626.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5911.057 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   178326.452 ±(99.9%) 11103.069 ops/s [Average]
[info]   (min, avg, max) = (173220.059, 178326.452, 180233.190), stdev = 2883.432
[info]   CI (99.9%): [167223.383, 189429.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   622.708 ±(99.9%) 38.821 MB/sec [Average]
[info]   (min, avg, max) = (604.877, 622.708, 629.550), stdev = 10.082
[info]   CI (99.9%): [583.887, 661.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.698 ±(99.9%) 580.193 MB/sec [Average]
[info]   (min, avg, max) = (337.164, 606.698, 674.157), stdev = 150.674
[info]   CI (99.9%): [26.506, 1186.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5362.447 ±(99.9%) 5218.951 B/op [Average]
[info]   (min, avg, max) = (2943.461, 5362.447, 6125.298), stdev = 1355.345
[info]   CI (99.9%): [143.496, 10581.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Run progress: 23.92% complete, ETA 01:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186627.504 ops/s
[info] # Warmup Iteration   2: 278611.503 ops/s
[info] # Warmup Iteration   3: 282467.876 ops/s
[info] Iteration   1: 282502.764 ops/s
[info]                  ·gc.alloc.rate:            285.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1874.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 284241.926 ops/s
[info]                  ·gc.alloc.rate:      287.516 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 267363.287 ops/s
[info]                  ·gc.alloc.rate:            270.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1980.236 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 278844.075 ops/s
[info]                  ·gc.alloc.rate:            282.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1898.695 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 280741.426 ops/s
[info]                  ·gc.alloc.rate:            284.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1885.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   278738.696 ±(99.9%) 25678.029 ops/s [Average]
[info]   (min, avg, max) = (267363.287, 278738.696, 284241.926), stdev = 6668.503
[info]   CI (99.9%): [253060.667, 304416.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   281.950 ±(99.9%) 26.022 MB/sec [Average]
[info]   (min, avg, max) = (270.422, 281.950, 287.516), stdev = 6.758
[info]   CI (99.9%): [255.929, 307.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.113 ±(99.9%) 579.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.113, 336.454), stdev = 150.439
[info]   CI (99.9%): [≈ 0, 848.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1527.768 ±(99.9%) 3292.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1527.768, 1980.236), stdev = 855.063
[info]   CI (99.9%): [≈ 0, 4820.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 24.19% complete, ETA 01:00:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443873.234 ops/s
[info] # Warmup Iteration   2: 506567.831 ops/s
[info] # Warmup Iteration   3: 486993.687 ops/s
[info] Iteration   1: 509000.700 ops/s
[info]                  ·gc.alloc.rate:                   390.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1040.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 493200.860 ops/s
[info]                  ·gc.alloc.rate:            378.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1075.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 508142.817 ops/s
[info]                  ·gc.alloc.rate:                   389.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1041.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 497711.155 ops/s
[info]                  ·gc.alloc.rate:            381.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1065.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 506940.474 ops/s
[info]                  ·gc.alloc.rate:            389.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2090.886 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   502999.201 ±(99.9%) 27362.566 ops/s [Average]
[info]   (min, avg, max) = (493200.860, 502999.201, 509000.700), stdev = 7105.972
[info]   CI (99.9%): [475636.634, 530361.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   386.008 ±(99.9%) 21.018 MB/sec [Average]
[info]   (min, avg, max) = (378.477, 386.008, 390.608), stdev = 5.458
[info]   CI (99.9%): [364.989, 407.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.018 ±(99.9%) 579.804 MB/sec [Average]
[info]   (min, avg, max) = (336.336, 404.018, 673.371), stdev = 150.573
[info]   CI (99.9%): [≈ 0, 983.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1262.902 ±(99.9%) 1783.266 B/op [Average]
[info]   (min, avg, max) = (1040.160, 1262.902, 2090.886), stdev = 463.109
[info]   CI (99.9%): [≈ 0, 3046.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.825 ±(99.9%) 4.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.825, 2.063), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 5.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.46% complete, ETA 01:00:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459740.630 ops/s
[info] # Warmup Iteration   2: 489243.071 ops/s
[info] # Warmup Iteration   3: 484922.072 ops/s
[info] Iteration   1: 490024.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 484215.123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 491383.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 473832.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 474633.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   482817.988 ±(99.9%) 31926.306 ops/s [Average]
[info]   (min, avg, max) = (473832.693, 482817.988, 491383.524), stdev = 8291.160
[info]   CI (99.9%): [450891.682, 514744.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 24.73% complete, ETA 00:59:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146056.101 ops/s
[info] # Warmup Iteration   2: 264211.582 ops/s
[info] # Warmup Iteration   3: 274654.121 ops/s
[info] Iteration   1: 271787.772 ops/s
[info]                  ·gc.alloc.rate:                   748.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3892.144 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 264676.088 ops/s
[info]                  ·gc.alloc.rate:                   729.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5997.114 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 264228.613 ops/s
[info]                  ·gc.alloc.rate:            727.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4007.484 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 268980.129 ops/s
[info]                  ·gc.alloc.rate:            741.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3928.959 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 275509.696 ops/s
[info]                  ·gc.alloc.rate:                                  759.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3862.418 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.637 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   269036.460 ±(99.9%) 18427.244 ops/s [Average]
[info]   (min, avg, max) = (264228.613, 269036.460, 275509.696), stdev = 4785.497
[info]   CI (99.9%): [250609.216, 287463.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   741.147 ±(99.9%) 50.647 MB/sec [Average]
[info]   (min, avg, max) = (727.866, 741.147, 759.004), stdev = 13.153
[info]   CI (99.9%): [690.499, 791.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.034 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.173 ±(99.9%) 577.889 MB/sec [Average]
[info]   (min, avg, max) = (671.483, 740.173, 1008.617), stdev = 150.076
[info]   CI (99.9%): [162.284, 1318.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4337.624 ±(99.9%) 3578.293 B/op [Average]
[info]   (min, avg, max) = (3862.418, 4337.624, 5997.114), stdev = 929.271
[info]   CI (99.9%): [759.331, 7915.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.891 ±(99.9%) 43.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.891, 26.637), stdev = 11.210
[info]   CI (99.9%): [≈ 0, 50.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.400, 14.000), stdev = 2.966
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 25.00% complete, ETA 00:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27134.742 ops/s
[info] # Warmup Iteration   2: 36377.223 ops/s
[info] # Warmup Iteration   3: 35980.910 ops/s
[info] Iteration   1: 36241.366 ops/s
[info]                  ·gc.alloc.rate:                                  1616.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73478.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                144.643 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 36960.119 ops/s
[info]                  ·gc.alloc.rate:                                  1648.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57980.018 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37001.209 ops/s
[info]                  ·gc.alloc.rate:                                  1650.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72392.771 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 36545.509 ops/s
[info]                  ·gc.alloc.rate:                                  1629.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73295.898 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36283.954 ops/s
[info]                  ·gc.alloc.rate:                                  1617.729 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70176.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73825.067 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36606.431 ±(99.9%) 1390.930 ops/s [Average]
[info]   (min, avg, max) = (36241.366, 36606.431, 37001.209), stdev = 361.220
[info]   CI (99.9%): [35215.501, 37997.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1632.241 ±(99.9%) 62.410 MB/sec [Average]
[info]   (min, avg, max) = (1616.050, 1632.241, 1650.129), stdev = 16.208
[info]   CI (99.9%): [1569.831, 1694.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70176.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (70176.011, 70176.012, 70176.014), stdev = 0.001
[info]   CI (99.9%): [70176.007, 70176.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.020, 0.076), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.846 ±(99.9%) 5.285 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.846, 3.290), stdev = 1.373
[info]   CI (99.9%): [≈ 0, 6.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.905 ±(99.9%) 582.054 MB/sec [Average]
[info]   (min, avg, max) = (1361.614, 1631.905, 1702.254), stdev = 151.158
[info]   CI (99.9%): [1049.851, 2213.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70194.494 ±(99.9%) 26371.411 B/op [Average]
[info]   (min, avg, max) = (57980.018, 70194.494, 73825.067), stdev = 6848.572
[info]   CI (99.9%): [43823.083, 96565.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.929 ±(99.9%) 249.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.929, 144.643), stdev = 64.686
[info]   CI (99.9%): [≈ 0, 278.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Run progress: 25.27% complete, ETA 00:59:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14635.312 ops/s
[info] # Warmup Iteration   2: 285270.985 ops/s
[info] # Warmup Iteration   3: 284868.783 ops/s
[info] Iteration   1: 286010.857 ops/s
[info]                  ·gc.alloc.rate:            296.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1836.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 286099.832 ops/s
[info]                  ·gc.alloc.rate:            296.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1835.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 286245.942 ops/s
[info]                  ·gc.alloc.rate:            296.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1834.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 285980.640 ops/s
[info]                  ·gc.alloc.rate:            296.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1836.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 286168.544 ops/s
[info]                  ·gc.alloc.rate:                   296.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1831.855 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   286101.163 ±(99.9%) 422.624 ops/s [Average]
[info]   (min, avg, max) = (285980.640, 286101.163, 286245.942), stdev = 109.754
[info]   CI (99.9%): [285678.539, 286523.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   296.661 ±(99.9%) 0.435 MB/sec [Average]
[info]   (min, avg, max) = (296.548, 296.661, 296.819), stdev = 0.113
[info]   CI (99.9%): [296.226, 297.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.002), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.593 ±(99.9%) 1.126 MB/sec [Average]
[info]   (min, avg, max) = (333.074, 333.593, 333.766), stdev = 0.293
[info]   CI (99.9%): [332.467, 334.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1835.177 ±(99.9%) 7.644 B/op [Average]
[info]   (min, avg, max) = (1831.855, 1835.177, 1836.668), stdev = 1.985
[info]   CI (99.9%): [1827.532, 1842.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.733 ±(99.9%) 6.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.664), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.54% complete, ETA 00:59:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59819.938 ops/s
[info] # Warmup Iteration   2: 93876.952 ops/s
[info] # Warmup Iteration   3: 95114.689 ops/s
[info] Iteration   1: 95250.078 ops/s
[info]                  ·gc.alloc.rate:            1052.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16675.337 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 95074.129 ops/s
[info]                  ·gc.alloc.rate:            1050.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16705.674 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 98870.672 ops/s
[info]                  ·gc.alloc.rate:                                  1092.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16192.136 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                63.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 100232.124 ops/s
[info]                  ·gc.alloc.rate:                                  1107.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16035.383 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 95922.008 ops/s
[info]                  ·gc.alloc.rate:            1060.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22340.592 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   97069.802 ±(99.9%) 9000.741 ops/s [Average]
[info]   (min, avg, max) = (95074.129, 97069.802, 100232.124), stdev = 2337.464
[info]   CI (99.9%): [88069.062, 106070.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1072.558 ±(99.9%) 99.620 MB/sec [Average]
[info]   (min, avg, max) = (1050.485, 1072.558, 1107.623), stdev = 25.871
[info]   CI (99.9%): [972.937, 1172.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.003, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.117), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.460 ±(99.9%) 3.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 1.864), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 3.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.567 ±(99.9%) 599.012 MB/sec [Average]
[info]   (min, avg, max) = (1008.897, 1083.567, 1361.683), stdev = 155.561
[info]   CI (99.9%): [484.556, 1682.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17589.824 ±(99.9%) 10288.791 B/op [Average]
[info]   (min, avg, max) = (16035.383, 17589.824, 22340.592), stdev = 2671.966
[info]   CI (99.9%): [7301.033, 27878.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.725 ±(99.9%) 109.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.725, 63.623), stdev = 28.453
[info]   CI (99.9%): [≈ 0, 122.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 12.000), stdev = 4.550
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.81% complete, ETA 00:59:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144883.040 ops/s
[info] # Warmup Iteration   2: 150472.976 ops/s
[info] # Warmup Iteration   3: 150943.221 ops/s
[info] Iteration   1: 147135.956 ops/s
[info]                  ·gc.alloc.rate:            95.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3648.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 150370.275 ops/s
[info]                  ·gc.alloc.rate:      97.821 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 150899.042 ops/s
[info]                  ·gc.alloc.rate:      98.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 148784.003 ops/s
[info]                  ·gc.alloc.rate:            96.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3565.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 150932.562 ops/s
[info]                  ·gc.alloc.rate:      98.186 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   149624.368 ±(99.9%) 6324.602 ops/s [Average]
[info]   (min, avg, max) = (147135.956, 149624.368, 150932.562), stdev = 1642.479
[info]   CI (99.9%): [143299.766, 155948.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   97.341 ±(99.9%) 4.100 MB/sec [Average]
[info]   (min, avg, max) = (95.714, 97.341, 98.186), stdev = 1.065
[info]   CI (99.9%): [93.241, 101.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.625 ±(99.9%) 715.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.625, 341.001), stdev = 185.717
[info]   CI (99.9%): [≈ 0, 850.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1442.739 ±(99.9%) 7607.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1442.739, 3648.212), stdev = 1975.768
[info]   CI (99.9%): [≈ 0, 9050.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 26.08% complete, ETA 00:58:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18225.151 ops/s
[info] # Warmup Iteration   2: 35510.877 ops/s
[info] # Warmup Iteration   3: 35953.617 ops/s
[info] Iteration   1: 36495.605 ops/s
[info]                  ·gc.alloc.rate:                                  1948.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.667 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87831.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                172.218 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 36208.983 ops/s
[info]                  ·gc.alloc.rate:                                  1933.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73973.871 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 36243.249 ops/s
[info]                  ·gc.alloc.rate:                                  1934.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88687.835 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 35592.937 ops/s
[info]                  ·gc.alloc.rate:                                  1899.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75255.946 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35782.614 ops/s
[info]                  ·gc.alloc.rate:                                  1910.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.569 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89830.228 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   36064.678 ±(99.9%) 1415.484 ops/s [Average]
[info]   (min, avg, max) = (35592.937, 36064.678, 36495.605), stdev = 367.597
[info]   CI (99.9%): [34649.194, 37480.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1925.295 ±(99.9%) 75.979 MB/sec [Average]
[info]   (min, avg, max) = (1899.993, 1925.295, 1948.259), stdev = 19.731
[info]   CI (99.9%): [1849.316, 2001.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (84016.011, 84016.012, 84016.015), stdev = 0.002
[info]   CI (99.9%): [84016.006, 84016.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.032, 0.131), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.389 ±(99.9%) 9.225 B/op [Average]
[info]   (min, avg, max) = (0.214, 1.389, 5.667), stdev = 2.396
[info]   CI (99.9%): [≈ 0, 10.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1905.103 ±(99.9%) 713.691 MB/sec [Average]
[info]   (min, avg, max) = (1701.887, 1905.103, 2042.424), stdev = 185.343
[info]   CI (99.9%): [1191.412, 2618.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83115.778 ±(99.9%) 30057.015 B/op [Average]
[info]   (min, avg, max) = (73973.871, 83115.778, 89830.228), stdev = 7805.711
[info]   CI (99.9%): [53058.764, 113172.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.994), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.444 ±(99.9%) 296.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.444, 172.218), stdev = 77.018
[info]   CI (99.9%): [≈ 0, 331.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 26.34% complete, ETA 00:58:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70495.602 ops/s
[info] # Warmup Iteration   2: 90771.562 ops/s
[info] # Warmup Iteration   3: 88413.574 ops/s
[info] Iteration   1: 91154.405 ops/s
[info]                  ·gc.alloc.rate:            440.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5819.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 90667.667 ops/s
[info]                  ·gc.alloc.rate:            437.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11701.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 91021.515 ops/s
[info]                  ·gc.alloc.rate:            439.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5828.302 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 91146.535 ops/s
[info]                  ·gc.alloc.rate:            440.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5820.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 88395.051 ops/s
[info]                  ·gc.alloc.rate:            426.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12002.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   90477.034 ±(99.9%) 4545.765 ops/s [Average]
[info]   (min, avg, max) = (88395.051, 90477.034, 91154.405), stdev = 1180.521
[info]   CI (99.9%): [85931.269, 95022.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   436.865 ±(99.9%) 21.993 MB/sec [Average]
[info]   (min, avg, max) = (426.807, 436.865, 440.220), stdev = 5.712
[info]   CI (99.9%): [414.872, 458.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.004, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.838 ±(99.9%) 710.675 MB/sec [Average]
[info]   (min, avg, max) = (337.013, 471.838, 674.057), stdev = 184.560
[info]   CI (99.9%): [≈ 0, 1182.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8234.568 ±(99.9%) 12723.579 B/op [Average]
[info]   (min, avg, max) = (5819.672, 8234.568, 12002.702), stdev = 3304.273
[info]   CI (99.9%): [≈ 0, 20958.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Run progress: 26.61% complete, ETA 00:58:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6230.325 ops/s
[info] # Warmup Iteration   2: 111927.169 ops/s
[info] # Warmup Iteration   3: 111662.503 ops/s
[info] Iteration   1: 114028.067 ops/s
[info]                  ·gc.alloc.rate:            348.896 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4606.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 112970.936 ops/s
[info]                  ·gc.alloc.rate:            345.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4649.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 108915.443 ops/s
[info]                  ·gc.alloc.rate:            333.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4822.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 113530.663 ops/s
[info]                  ·gc.alloc.rate:            347.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4626.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 114340.422 ops/s
[info]                  ·gc.alloc.rate:            349.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4593.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   112757.106 ±(99.9%) 8507.378 ops/s [Average]
[info]   (min, avg, max) = (108915.443, 112757.106, 114340.422), stdev = 2209.339
[info]   CI (99.9%): [104249.728, 121264.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   345.037 ±(99.9%) 26.156 MB/sec [Average]
[info]   (min, avg, max) = (333.225, 345.037, 349.970), stdev = 6.793
[info]   CI (99.9%): [318.881, 371.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.741 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (333.680, 333.741, 333.819), stdev = 0.066
[info]   CI (99.9%): [333.488, 333.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4659.812 ±(99.9%) 359.944 B/op [Average]
[info]   (min, avg, max) = (4593.749, 4659.812, 4822.699), stdev = 93.476
[info]   CI (99.9%): [4299.868, 5019.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 26.88% complete, ETA 00:58:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2511.898 ops/s
[info] # Warmup Iteration   2: 114312.668 ops/s
[info] # Warmup Iteration   3: 111966.952 ops/s
[info] Iteration   1: 110921.547 ops/s
[info]                  ·gc.alloc.rate:            252.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4735.535 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 114372.506 ops/s
[info]                  ·gc.alloc.rate:            259.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4592.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 114369.181 ops/s
[info]                  ·gc.alloc.rate:      259.822 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 114206.524 ops/s
[info]                  ·gc.alloc.rate:            259.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4599.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 114441.963 ops/s
[info]                  ·gc.alloc.rate:            259.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4589.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc":
[info]   113662.344 ±(99.9%) 5909.156 ops/s [Average]
[info]   (min, avg, max) = (110921.547, 113662.344, 114441.963), stdev = 1534.589
[info]   CI (99.9%): [107753.189, 119571.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   258.250 ±(99.9%) 13.291 MB/sec [Average]
[info]   (min, avg, max) = (252.085, 258.250, 259.996), stdev = 3.452
[info]   CI (99.9%): [244.959, 271.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   267.004 ±(99.9%) 574.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 267.004, 333.825), stdev = 149.260
[info]   CI (99.9%): [≈ 0, 841.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3703.487 ±(99.9%) 7975.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3703.487, 4735.535), stdev = 2071.222
[info]   CI (99.9%): [≈ 0, 11679.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 27.15% complete, ETA 00:57:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65975.826 ops/s
[info] # Warmup Iteration   2: 99265.584 ops/s
[info] # Warmup Iteration   3: 98991.946 ops/s
[info] Iteration   1: 99124.403 ops/s
[info]                  ·gc.alloc.rate:            327.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5341.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 99033.259 ops/s
[info]                  ·gc.alloc.rate:            327.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5346.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 98954.907 ops/s
[info]                  ·gc.alloc.rate:            326.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5350.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 98729.568 ops/s
[info]                  ·gc.alloc.rate:            326.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5362.610 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 98310.567 ops/s
[info]                  ·gc.alloc.rate:            324.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5385.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98830.541 ±(99.9%) 1252.916 ops/s [Average]
[info]   (min, avg, max) = (98310.567, 98830.541, 99124.403), stdev = 325.378
[info]   CI (99.9%): [97577.625, 100083.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   326.530 ±(99.9%) 3.885 MB/sec [Average]
[info]   (min, avg, max) = (324.901, 326.530, 327.441), stdev = 1.009
[info]   CI (99.9%): [322.645, 330.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.400 ±(99.9%) 0.290 MB/sec [Average]
[info]   (min, avg, max) = (336.341, 336.400, 336.496), stdev = 0.075
[info]   CI (99.9%): [336.110, 336.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5357.220 ±(99.9%) 68.177 B/op [Average]
[info]   (min, avg, max) = (5341.351, 5357.220, 5385.571), stdev = 17.705
[info]   CI (99.9%): [5289.044, 5425.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 27.42% complete, ETA 00:57:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102356.535 ops/s
[info] # Warmup Iteration   2: 110665.914 ops/s
[info] # Warmup Iteration   3: 113337.201 ops/s
[info] Iteration   1: 114026.524 ops/s
[info]                  ·gc.alloc.rate:            348.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4643.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 113962.523 ops/s
[info]                  ·gc.alloc.rate:                   348.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4645.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 113904.237 ops/s
[info]                  ·gc.alloc.rate:            348.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4657.556 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 112829.523 ops/s
[info]                  ·gc.alloc.rate:            345.221 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4692.634 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 113884.942 ops/s
[info]                  ·gc.alloc.rate:            348.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4648.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   113721.550 ±(99.9%) 1931.915 ops/s [Average]
[info]   (min, avg, max) = (112829.523, 113721.550, 114026.524), stdev = 501.712
[info]   CI (99.9%): [111789.635, 115653.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   347.995 ±(99.9%) 6.006 MB/sec [Average]
[info]   (min, avg, max) = (345.221, 347.995, 348.946), stdev = 1.560
[info]   CI (99.9%): [341.989, 354.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.548 ±(99.9%) 1.075 MB/sec [Average]
[info]   (min, avg, max) = (336.378, 336.548, 337.044), stdev = 0.279
[info]   CI (99.9%): [335.473, 337.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4657.663 ±(99.9%) 78.071 B/op [Average]
[info]   (min, avg, max) = (4643.297, 4657.663, 4692.634), stdev = 20.275
[info]   CI (99.9%): [4579.592, 4735.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.840 ±(99.9%) 15.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.840, 9.200), stdev = 4.114
[info]   CI (99.9%): [≈ 0, 17.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 27.69% complete, ETA 00:57:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103694.149 ops/s
[info] # Warmup Iteration   2: 111040.307 ops/s
[info] # Warmup Iteration   3: 114446.511 ops/s
[info] Iteration   1: 112884.150 ops/s
[info]                  ·gc.alloc.rate:            256.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4699.552 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 115955.982 ops/s
[info]                  ·gc.alloc.rate:      263.438 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 115585.197 ops/s
[info]                  ·gc.alloc.rate:            262.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4580.519 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 112436.517 ops/s
[info]                  ·gc.alloc.rate:            255.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4709.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115494.728 ops/s
[info]                  ·gc.alloc.rate:            262.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4584.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   114471.315 ±(99.9%) 6429.492 ops/s [Average]
[info]   (min, avg, max) = (112436.517, 114471.315, 115955.982), stdev = 1669.719
[info]   CI (99.9%): [108041.823, 120900.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   260.075 ±(99.9%) 14.601 MB/sec [Average]
[info]   (min, avg, max) = (255.473, 260.075, 263.438), stdev = 3.792
[info]   CI (99.9%): [245.474, 274.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.241 ±(99.9%) 579.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.241, 337.022), stdev = 150.510
[info]   CI (99.9%): [≈ 0, 848.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3714.654 ±(99.9%) 7999.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3714.654, 4709.034), stdev = 2077.453
[info]   CI (99.9%): [≈ 0, 11714.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.96% complete, ETA 00:57:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5596.915 ops/s
[info] # Warmup Iteration   2: 8542.040 ops/s
[info] # Warmup Iteration   3: 8634.717 ops/s
[info] Iteration   1: 8450.465 ops/s
[info]                  ·gc.alloc.rate:                   1398.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              260528.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        251072.734 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 124.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 8464.735 ops/s
[info]                  ·gc.alloc.rate:                                  1401.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.592 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252668.916 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                495.429 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 8708.715 ops/s
[info]                  ·gc.alloc.rate:                                  1441.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246044.007 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8754.523 ops/s
[info]                  ·gc.alloc.rate:                                  1449.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       305974.381 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8750.321 ops/s
[info]                  ·gc.alloc.rate:                                  1449.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260528.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.236 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244891.378 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8625.752 ±(99.9%) 595.401 ops/s [Average]
[info]   (min, avg, max) = (8450.465, 8625.752, 8754.523), stdev = 154.624
[info]   CI (99.9%): [8030.351, 9221.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1427.963 ±(99.9%) 98.752 MB/sec [Average]
[info]   (min, avg, max) = (1398.691, 1427.963, 1449.089), stdev = 25.646
[info]   CI (99.9%): [1329.210, 1526.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260528.049 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (260528.047, 260528.049, 260528.052), stdev = 0.002
[info]   CI (99.9%): [260528.040, 260528.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.263 ±(99.9%) 9.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.263, 5.592), stdev = 2.422
[info]   CI (99.9%): [≈ 0, 10.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.488 ±(99.9%) 593.182 MB/sec [Average]
[info]   (min, avg, max) = (1347.928, 1426.488, 1701.867), stdev = 154.047
[info]   CI (99.9%): [833.306, 2019.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   260130.283 ±(99.9%) 99486.062 B/op [Average]
[info]   (min, avg, max) = (244891.378, 260130.283, 305974.381), stdev = 25836.214
[info]   CI (99.9%): [160644.221, 359616.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.665), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   123.895 ±(99.9%) 826.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.895, 495.429), stdev = 214.527
[info]   CI (99.9%): [≈ 0, 949.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 28.23% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4196.432 ops/s
[info] # Warmup Iteration   2: 8255.431 ops/s
[info] # Warmup Iteration   3: 8540.553 ops/s
[info] Iteration   1: 8522.121 ops/s
[info]                  ·gc.alloc.rate:            1327.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248489.385 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 8581.304 ops/s
[info]                  ·gc.alloc.rate:                                  1337.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.452 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248247.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                733.014 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 8408.560 ops/s
[info]                  ·gc.alloc.rate:                                  1310.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245216.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254850.100 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8638.629 ops/s
[info]                  ·gc.alloc.rate:            1346.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248037.188 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 8631.618 ops/s
[info]                  ·gc.alloc.rate:            1345.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       245216.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248238.284 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8556.446 ±(99.9%) 365.666 ops/s [Average]
[info]   (min, avg, max) = (8408.560, 8556.446, 8638.629), stdev = 94.962
[info]   CI (99.9%): [8190.780, 8922.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1333.307 ±(99.9%) 56.819 MB/sec [Average]
[info]   (min, avg, max) = (1310.601, 1333.307, 1346.235), stdev = 14.756
[info]   CI (99.9%): [1276.489, 1390.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245216.049 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (245216.047, 245216.049, 245216.052), stdev = 0.003
[info]   CI (99.9%): [245216.039, 245216.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.590 ±(99.9%) 38.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.590, 22.452), stdev = 9.987
[info]   CI (99.9%): [≈ 0, 43.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.869 ±(99.9%) 28.631 MB/sec [Average]
[info]   (min, avg, max) = (1345.186, 1356.869, 1362.092), stdev = 7.435
[info]   CI (99.9%): [1328.238, 1385.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   249572.448 ±(99.9%) 11377.287 B/op [Average]
[info]   (min, avg, max) = (248037.188, 249572.448, 254850.100), stdev = 2954.645
[info]   CI (99.9%): [238195.161, 260949.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   146.603 ±(99.9%) 1262.294 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 146.603, 733.014), stdev = 327.814
[info]   CI (99.9%): [≈ 0, 1408.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 28.49% complete, ETA 00:56:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74942.902 ops/s
[info] # Warmup Iteration   2: 77218.376 ops/s
[info] # Warmup Iteration   3: 80226.984 ops/s
[info] Iteration   1: 79946.743 ops/s
[info]                  ·gc.alloc.rate:            208.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6648.508 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 79949.973 ops/s
[info]                  ·gc.alloc.rate:            208.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6648.342 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 80239.437 ops/s
[info]                  ·gc.alloc.rate:      208.889 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79727.596 ops/s
[info]                  ·gc.alloc.rate:            207.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6666.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80250.069 ops/s
[info]                  ·gc.alloc.rate:      208.853 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   80022.764 ±(99.9%) 854.150 ops/s [Average]
[info]   (min, avg, max) = (79727.596, 80022.764, 80250.069), stdev = 221.820
[info]   CI (99.9%): [79168.614, 80876.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   208.274 ±(99.9%) 2.275 MB/sec [Average]
[info]   (min, avg, max) = (207.505, 208.274, 208.889), stdev = 0.591
[info]   CI (99.9%): [205.999, 210.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.636 ±(99.9%) 712.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.636, 337.779), stdev = 184.981
[info]   CI (99.9%): [≈ 0, 914.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3992.757 ±(99.9%) 14035.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3992.757, 6666.935), stdev = 3644.880
[info]   CI (99.9%): [≈ 0, 18027.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.76% complete, ETA 00:56:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2163.122 ops/s
[info] # Warmup Iteration   2: 4632.739 ops/s
[info] # Warmup Iteration   3: 4542.561 ops/s
[info] Iteration   1: 4759.156 ops/s
[info]                  ·gc.alloc.rate:            1271.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       420736.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 333737.950 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4706.708 ops/s
[info]                  ·gc.alloc.rate:                                  1258.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             420736.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.790 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       451235.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1336.333 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4732.042 ops/s
[info]                  ·gc.alloc.rate:                                  1264.849 MB/sec
[info]                  ·gc.alloc.rate.norm:                             420736.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       452839.498 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4589.521 ops/s
[info]                  ·gc.alloc.rate:                                  1226.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             420736.089 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350134.395 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4671.616 ops/s
[info]                  ·gc.alloc.rate:                                  1248.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             420736.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       458653.829 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4691.809 ±(99.9%) 252.847 ops/s [Average]
[info]   (min, avg, max) = (4589.521, 4691.809, 4759.156), stdev = 65.664
[info]   CI (99.9%): [4438.961, 4944.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1254.098 ±(99.9%) 67.143 MB/sec [Average]
[info]   (min, avg, max) = (1226.884, 1254.098, 1271.860), stdev = 17.437
[info]   CI (99.9%): [1186.955, 1321.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   420736.090 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (420736.086, 420736.090, 420736.094), stdev = 0.004
[info]   CI (99.9%): [420736.074, 420736.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.876 ±(99.9%) 51.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.876, 30.790), stdev = 13.462
[info]   CI (99.9%): [≈ 0, 60.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.376 ±(99.9%) 722.578 MB/sec [Average]
[info]   (min, avg, max) = (1008.870, 1220.376, 1361.360), stdev = 187.651
[info]   CI (99.9%): [497.797, 1942.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   409320.160 ±(99.9%) 238150.991 B/op [Average]
[info]   (min, avg, max) = (333737.950, 409320.160, 458653.829), stdev = 61847.056
[info]   CI (99.9%): [171169.168, 647471.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   267.267 ±(99.9%) 2301.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 267.267, 1336.333), stdev = 597.626
[info]   CI (99.9%): [≈ 0, 2568.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 14.000), stdev = 5.357
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 29.03% complete, ETA 00:56:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16464.847 ops/s
[info] # Warmup Iteration   2: 23493.468 ops/s
[info] # Warmup Iteration   3: 23758.420 ops/s
[info] Iteration   1: 24237.167 ops/s
[info]                  ·gc.alloc.rate:            1255.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       81552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87550.754 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 24057.537 ops/s
[info]                  ·gc.alloc.rate:                                  1246.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81550.322 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88423.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                217.900 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 24453.789 ops/s
[info]                  ·gc.alloc.rate:                                  1266.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.309 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87635.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24466.800 ops/s
[info]                  ·gc.alloc.rate:            1267.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       81552.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65691.337 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24484.131 ops/s
[info]                  ·gc.alloc.rate:                                  1268.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87524.067 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24339.885 ±(99.9%) 720.800 ops/s [Average]
[info]   (min, avg, max) = (24057.537, 24339.885, 24484.131), stdev = 187.190
[info]   CI (99.9%): [23619.085, 25060.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1260.990 ±(99.9%) 37.689 MB/sec [Average]
[info]   (min, avg, max) = (1246.190, 1260.990, 1268.433), stdev = 9.788
[info]   CI (99.9%): [1223.301, 1298.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81551.678 ±(99.9%) 2.919 B/op [Average]
[info]   (min, avg, max) = (81550.322, 81551.678, 81552.018), stdev = 0.758
[info]   CI (99.9%): [81548.759, 81554.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.058), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.102 ±(99.9%) 6.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.102, 3.777), stdev = 1.588
[info]   CI (99.9%): [≈ 0, 7.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.640 ±(99.9%) 576.322 MB/sec [Average]
[info]   (min, avg, max) = (1021.118, 1288.640, 1361.497), stdev = 149.669
[info]   CI (99.9%): [712.317, 1864.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   83364.957 ±(99.9%) 38070.745 B/op [Average]
[info]   (min, avg, max) = (65691.337, 83364.957, 88423.619), stdev = 9886.851
[info]   CI (99.9%): [45294.212, 121435.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.580 ±(99.9%) 375.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.580, 217.900), stdev = 97.448
[info]   CI (99.9%): [≈ 0, 418.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.980
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Run progress: 29.30% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11630.994 ops/s
[info] # Warmup Iteration   2: 24056.964 ops/s
[info] # Warmup Iteration   3: 24890.113 ops/s
[info] Iteration   1: 25124.584 ops/s
[info]                  ·gc.alloc.rate:            1276.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84279.943 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 24408.151 ops/s
[info]                  ·gc.alloc.rate:                                  1240.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65329.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                257.709 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 24558.656 ops/s
[info]                  ·gc.alloc.rate:                                  1248.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87256.823 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25442.521 ops/s
[info]                  ·gc.alloc.rate:                                  1293.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             79984.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84222.310 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25517.504 ops/s
[info]                  ·gc.alloc.rate:            1296.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       79984.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83974.821 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   25010.283 ±(99.9%) 1948.002 ops/s [Average]
[info]   (min, avg, max) = (24408.151, 25010.283, 25517.504), stdev = 505.890
[info]   CI (99.9%): [23062.282, 26958.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1271.224 ±(99.9%) 99.132 MB/sec [Average]
[info]   (min, avg, max) = (1240.513, 1271.224, 1296.972), stdev = 25.744
[info]   CI (99.9%): [1172.092, 1370.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   79984.017 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (79984.016, 79984.017, 79984.021), stdev = 0.002
[info]   CI (99.9%): [79984.009, 79984.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.079), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.657 ±(99.9%) 9.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.657, 5.088), stdev = 2.342
[info]   CI (99.9%): [≈ 0, 10.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.834 ±(99.9%) 593.884 MB/sec [Average]
[info]   (min, avg, max) = (1013.226, 1288.834, 1361.841), stdev = 154.230
[info]   CI (99.9%): [694.951, 1882.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   81012.638 ±(99.9%) 34155.281 B/op [Average]
[info]   (min, avg, max) = (65329.296, 81012.638, 87256.823), stdev = 8870.018
[info]   CI (99.9%): [46857.358, 115167.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   51.542 ±(99.9%) 443.791 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.542, 257.709), stdev = 115.251
[info]   CI (99.9%): [≈ 0, 495.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 29.57% complete, ETA 00:56:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294113.064 ops/s
[info] # Warmup Iteration   2: 324471.492 ops/s
[info] # Warmup Iteration   3: 347668.147 ops/s
[info] Iteration   1: 346612.294 ops/s
[info]                  ·gc.alloc.rate:            764.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3054.965 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 344213.466 ops/s
[info]                  ·gc.alloc.rate:            759.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3076.316 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 336908.857 ops/s
[info]                  ·gc.alloc.rate:                   743.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4717.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 340206.552 ops/s
[info]                  ·gc.alloc.rate:                   750.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3115.580 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 340996.826 ops/s
[info]                  ·gc.alloc.rate:                                  752.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3123.736 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.447 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   341787.599 ±(99.9%) 14419.320 ops/s [Average]
[info]   (min, avg, max) = (336908.857, 341787.599, 346612.294), stdev = 3744.652
[info]   CI (99.9%): [327368.279, 356206.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   753.876 ±(99.9%) 31.882 MB/sec [Average]
[info]   (min, avg, max) = (743.126, 753.876, 764.499), stdev = 8.280
[info]   CI (99.9%): [721.994, 785.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.034 ±(99.9%) 578.451 MB/sec [Average]
[info]   (min, avg, max) = (672.672, 741.034, 1009.743), stdev = 150.222
[info]   CI (99.9%): [162.583, 1319.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3417.655 ±(99.9%) 2800.506 B/op [Average]
[info]   (min, avg, max) = (3054.965, 3417.655, 4717.680), stdev = 727.283
[info]   CI (99.9%): [617.149, 6218.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.928 ±(99.9%) 29.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.928, 18.447), stdev = 7.714
[info]   CI (99.9%): [≈ 0, 34.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.84% complete, ETA 00:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345932.586 ops/s
[info] # Warmup Iteration   2: 379694.989 ops/s
[info] # Warmup Iteration   3: 352340.993 ops/s
[info] Iteration   1: 382162.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 381197.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 380572.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 381181.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 381117.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   381246.287 ±(99.9%) 2209.081 ops/s [Average]
[info]   (min, avg, max) = (380572.501, 381246.287, 382162.437), stdev = 573.691
[info]   CI (99.9%): [379037.206, 383455.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 30.11% complete, ETA 00:55:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17481.525 ops/s
[info] # Warmup Iteration   2: 25928.522 ops/s
[info] # Warmup Iteration   3: 25781.544 ops/s
[info] Iteration   1: 26111.245 ops/s
[info]                  ·gc.alloc.rate:            1373.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81104.439 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 25930.065 ops/s
[info]                  ·gc.alloc.rate:                                  1363.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.641 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82398.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                242.586 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 26359.060 ops/s
[info]                  ·gc.alloc.rate:            1386.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81296.061 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 26511.177 ops/s
[info]                  ·gc.alloc.rate:                                  1394.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82792.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80830.040 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25833.265 ops/s
[info]                  ·gc.alloc.rate:            1358.761 MB/sec
[info]                  ·gc.alloc.rate.norm:       82792.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82947.844 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   26148.962 ±(99.9%) 1096.494 ops/s [Average]
[info]   (min, avg, max) = (25833.265, 26148.962, 26511.177), stdev = 284.756
[info]   CI (99.9%): [25052.469, 27245.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1375.339 ±(99.9%) 57.589 MB/sec [Average]
[info]   (min, avg, max) = (1358.761, 1375.339, 1394.353), stdev = 14.956
[info]   CI (99.9%): [1317.750, 1432.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (82792.015, 82792.017, 82792.021), stdev = 0.002
[info]   CI (99.9%): [82792.009, 82792.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.422 ±(99.9%) 11.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.422, 6.641), stdev = 2.925
[info]   CI (99.9%): [≈ 0, 12.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.336 ±(99.9%) 26.822 MB/sec [Average]
[info]   (min, avg, max) = (1345.252, 1357.336, 1361.384), stdev = 6.966
[info]   CI (99.9%): [1330.514, 1384.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81715.321 ±(99.9%) 3507.124 B/op [Average]
[info]   (min, avg, max) = (80830.040, 81715.321, 82947.844), stdev = 910.789
[info]   CI (99.9%): [78208.197, 85222.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   48.517 ±(99.9%) 417.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.517, 242.586), stdev = 108.488
[info]   CI (99.9%): [≈ 0, 466.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 16.000), stdev = 5.505
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 30.38% complete, ETA 00:55:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101745.847 ops/s
[info] # Warmup Iteration   2: 122315.808 ops/s
[info] # Warmup Iteration   3: 121434.578 ops/s
[info] Iteration   1: 121087.778 ops/s
[info]                  ·gc.alloc.rate:                                  1970.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26546.228 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 123743.161 ops/s
[info]                  ·gc.alloc.rate:                                  2013.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25976.536 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 124255.056 ops/s
[info]                  ·gc.alloc.rate:                                  2022.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25869.099 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 121557.580 ops/s
[info]                  ·gc.alloc.rate:                                  1979.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26444.256 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 121294.547 ops/s
[info]                  ·gc.alloc.rate:                                  1973.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26501.805 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   122387.624 ±(99.9%) 5743.198 ops/s [Average]
[info]   (min, avg, max) = (121087.778, 122387.624, 124255.056), stdev = 1491.490
[info]   CI (99.9%): [116644.426, 128130.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1991.920 ±(99.9%) 92.772 MB/sec [Average]
[info]   (min, avg, max) = (1970.925, 1991.920, 2022.094), stdev = 24.092
[info]   CI (99.9%): [1899.149, 2084.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25616.003, 25616.003, 25616.004), stdev = 0.001
[info]   CI (99.9%): [25616.003, 25616.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.112), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.337 ±(99.9%) 2.411 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.337, 1.455), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.348 ±(99.9%) 1.554 MB/sec [Average]
[info]   (min, avg, max) = (2042.073, 2042.348, 2042.994), stdev = 0.404
[info]   CI (99.9%): [2040.794, 2043.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26267.585 ±(99.9%) 1228.613 B/op [Average]
[info]   (min, avg, max) = (25869.099, 26267.585, 26546.228), stdev = 319.067
[info]   CI (99.9%): [25038.972, 27496.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Run progress: 30.65% complete, ETA 00:55:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6554.977 ops/s
[info] # Warmup Iteration   2: 444445.679 ops/s
[info] # Warmup Iteration   3: 436267.851 ops/s
[info] Iteration   1: 436804.272 ops/s
[info]                  ·gc.alloc.rate:            452.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2404.952 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 438665.470 ops/s
[info]                  ·gc.alloc.rate:            455.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1197.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 436062.127 ops/s
[info]                  ·gc.alloc.rate:            452.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1204.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 452239.929 ops/s
[info]                  ·gc.alloc.rate:            468.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2322.905 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 454907.906 ops/s
[info]                  ·gc.alloc.rate:            471.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1154.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   443735.941 ±(99.9%) 34963.326 ops/s [Average]
[info]   (min, avg, max) = (436062.127, 443735.941, 454907.906), stdev = 9079.865
[info]   CI (99.9%): [408772.615, 478699.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   460.158 ±(99.9%) 35.978 MB/sec [Average]
[info]   (min, avg, max) = (452.307, 460.158, 471.695), stdev = 9.343
[info]   CI (99.9%): [424.180, 496.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.238 ±(99.9%) 703.581 MB/sec [Average]
[info]   (min, avg, max) = (333.732, 467.238, 667.447), stdev = 182.718
[info]   CI (99.9%): [≈ 0, 1170.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1656.889 ±(99.9%) 2488.935 B/op [Average]
[info]   (min, avg, max) = (1154.667, 1656.889, 2404.952), stdev = 646.368
[info]   CI (99.9%): [≈ 0, 4145.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.91% complete, ETA 00:55:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170510.735 ops/s
[info] # Warmup Iteration   2: 264392.672 ops/s
[info] # Warmup Iteration   3: 266046.770 ops/s
[info] Iteration   1: 265687.901 ops/s
[info]                  ·gc.alloc.rate:            380.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1992.733 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 264139.556 ops/s
[info]                  ·gc.alloc.rate:            378.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2004.409 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 263378.721 ops/s
[info]                  ·gc.alloc.rate:            377.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2010.200 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 263963.306 ops/s
[info]                  ·gc.alloc.rate:            378.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2005.715 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 264380.046 ops/s
[info]                  ·gc.alloc.rate:            378.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2002.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   264309.906 ±(99.9%) 3290.017 ops/s [Average]
[info]   (min, avg, max) = (263378.721, 264309.906, 265687.901), stdev = 854.407
[info]   CI (99.9%): [261019.889, 267599.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   378.847 ±(99.9%) 4.660 MB/sec [Average]
[info]   (min, avg, max) = (377.445, 378.847, 380.773), stdev = 1.210
[info]   CI (99.9%): [374.186, 383.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.002, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.380 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (336.321, 336.380, 336.491), stdev = 0.070
[info]   CI (99.9%): [336.111, 336.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2003.128 ±(99.9%) 24.859 B/op [Average]
[info]   (min, avg, max) = (1992.733, 2003.128, 2010.200), stdev = 6.456
[info]   CI (99.9%): [1978.269, 2027.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 31.18% complete, ETA 00:54:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559529.538 ops/s
[info] # Warmup Iteration   2: 591318.093 ops/s
[info] # Warmup Iteration   3: 593435.513 ops/s
[info] Iteration   1: 586434.389 ops/s
[info]                  ·gc.alloc.rate:            381.526 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 904.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 593457.031 ops/s
[info]                  ·gc.alloc.rate:            386.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 893.903 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 592964.990 ops/s
[info]                  ·gc.alloc.rate:            385.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 589839.557 ops/s
[info]                  ·gc.alloc.rate:            383.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 899.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 591125.737 ops/s
[info]                  ·gc.alloc.rate:            384.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1794.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   590764.341 ±(99.9%) 10861.914 ops/s [Average]
[info]   (min, avg, max) = (586434.389, 590764.341, 593457.031), stdev = 2820.805
[info]   CI (99.9%): [579902.427, 601626.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   384.325 ±(99.9%) 6.950 MB/sec [Average]
[info]   (min, avg, max) = (381.526, 384.325, 386.010), stdev = 1.805
[info]   CI (99.9%): [377.375, 391.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.429 ±(99.9%) 580.344 MB/sec [Average]
[info]   (min, avg, max) = (336.968, 404.429, 674.034), stdev = 150.713
[info]   CI (99.9%): [≈ 0, 984.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1077.478 ±(99.9%) 1544.281 B/op [Average]
[info]   (min, avg, max) = (893.903, 1077.478, 1794.848), stdev = 401.045
[info]   CI (99.9%): [≈ 0, 2621.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.45% complete, ETA 00:54:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36755.677 ops/s
[info] # Warmup Iteration   2: 65835.244 ops/s
[info] # Warmup Iteration   3: 66470.003 ops/s
[info] Iteration   1: 68410.442 ops/s
[info]                  ·gc.alloc.rate:                                  2995.227 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70479.240 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 66058.743 ops/s
[info]                  ·gc.alloc.rate:                                  2892.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.344 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72989.269 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 65521.517 ops/s
[info]                  ·gc.alloc.rate:                                  2869.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65410.994 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 68003.835 ops/s
[info]                  ·gc.alloc.rate:                                  2978.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.243 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70900.980 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 68503.126 ops/s
[info]                  ·gc.alloc.rate:                                  2999.863 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70384.602 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   67299.532 ±(99.9%) 5404.532 ops/s [Average]
[info]   (min, avg, max) = (65521.517, 67299.532, 68503.126), stdev = 1403.540
[info]   CI (99.9%): [61895.001, 72704.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2947.136 ±(99.9%) 235.824 MB/sec [Average]
[info]   (min, avg, max) = (2869.776, 2947.136, 2999.863), stdev = 61.243
[info]   CI (99.9%): [2711.312, 3182.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.007), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.010, 0.017), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.245 ±(99.9%) 0.479 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.245, 0.387), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.495 ±(99.9%) 585.139 MB/sec [Average]
[info]   (min, avg, max) = (2723.663, 2995.495, 3063.728), stdev = 151.959
[info]   CI (99.9%): [2410.356, 3580.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70033.017 ±(99.9%) 10750.576 B/op [Average]
[info]   (min, avg, max) = (65410.994, 70033.017, 72989.269), stdev = 2791.890
[info]   CI (99.9%): [59282.441, 80783.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 11.000), stdev = 1.732
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.72% complete, ETA 00:54:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183932.412 ops/s
[info] # Warmup Iteration   2: 240321.898 ops/s
[info] # Warmup Iteration   3: 236414.494 ops/s
[info] Iteration   1: 239856.972 ops/s
[info]                  ·gc.alloc.rate:            1425.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8846.714 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 242581.426 ops/s
[info]                  ·gc.alloc.rate:                                  1441.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11020.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.609 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 244566.394 ops/s
[info]                  ·gc.alloc.rate:            1453.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8762.139 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 244517.537 ops/s
[info]                  ·gc.alloc.rate:                                  1452.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8763.966 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 241816.957 ops/s
[info]                  ·gc.alloc.rate:                                  1437.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1700.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11069.840 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   242667.857 ±(99.9%) 7618.618 ops/s [Average]
[info]   (min, avg, max) = (239856.972, 242667.857, 244566.394), stdev = 1978.531
[info]   CI (99.9%): [235049.239, 250286.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1441.978 ±(99.9%) 44.767 MB/sec [Average]
[info]   (min, avg, max) = (1425.354, 1441.978, 1453.059), stdev = 11.626
[info]   CI (99.9%): [1397.211, 1486.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.145), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.193 ±(99.9%) 1.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.193, 0.940), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.220 ±(99.9%) 723.481 MB/sec [Average]
[info]   (min, avg, max) = (1348.342, 1494.220, 1700.988), stdev = 187.886
[info]   CI (99.9%): [770.739, 2217.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9692.694 ±(99.9%) 4756.976 B/op [Average]
[info]   (min, avg, max) = (8762.139, 9692.694, 11069.840), stdev = 1235.372
[info]   CI (99.9%): [4935.718, 14449.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.322 ±(99.9%) 37.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.322, 21.609), stdev = 9.664
[info]   CI (99.9%): [≈ 0, 41.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.834
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Run progress: 31.99% complete, ETA 00:54:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66699.820 ops/s
[info] # Warmup Iteration   2: 929301.659 ops/s
[info] # Warmup Iteration   3: 908239.231 ops/s
[info] Iteration   1: 915989.359 ops/s
[info]                  ·gc.alloc.rate:            498.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 573.454 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 914937.933 ops/s
[info]                  ·gc.alloc.rate:            497.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1148.198 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 914031.132 ops/s
[info]                  ·gc.alloc.rate:            497.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 574.656 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 905538.582 ops/s
[info]                  ·gc.alloc.rate:            492.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1160.121 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 911855.057 ops/s
[info]                  ·gc.alloc.rate:            495.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   912470.413 ±(99.9%) 16031.866 ops/s [Average]
[info]   (min, avg, max) = (905538.582, 912470.413, 915989.359), stdev = 4163.425
[info]   CI (99.9%): [896438.546, 928502.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   496.229 ±(99.9%) 8.757 MB/sec [Average]
[info]   (min, avg, max) = (492.457, 496.229, 498.210), stdev = 2.274
[info]   CI (99.9%): [487.473, 504.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.186 ±(99.9%) 703.749 MB/sec [Average]
[info]   (min, avg, max) = (333.691, 467.186, 667.417), stdev = 182.761
[info]   CI (99.9%): [≈ 0, 1170.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   806.492 ±(99.9%) 1222.215 B/op [Average]
[info]   (min, avg, max) = (573.454, 806.492, 1160.121), stdev = 317.405
[info]   CI (99.9%): [≈ 0, 2028.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 3.130
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 32.26% complete, ETA 00:53:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49232.446 ops/s
[info] # Warmup Iteration   2: 920916.193 ops/s
[info] # Warmup Iteration   3: 916379.409 ops/s
[info] Iteration   1: 919048.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 922238.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 922544.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 921776.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 923401.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc":
[info]   921801.808 ±(99.9%) 6350.602 ops/s [Average]
[info]   (min, avg, max) = (919048.783, 921801.808, 923401.188), stdev = 1649.231
[info]   CI (99.9%): [915451.206, 928152.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 32.53% complete, ETA 00:53:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538153.467 ops/s
[info] # Warmup Iteration   2: 793791.059 ops/s
[info] # Warmup Iteration   3: 792804.061 ops/s
[info] Iteration   1: 798962.692 ops/s
[info]                  ·gc.alloc.rate:            629.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 662.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 786122.865 ops/s
[info]                  ·gc.alloc.rate:            619.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1346.973 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 797369.179 ops/s
[info]                  ·gc.alloc.rate:            628.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1328.019 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 795394.024 ops/s
[info]                  ·gc.alloc.rate:            626.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1331.274 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 796187.569 ops/s
[info]                  ·gc.alloc.rate:                   627.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1328.628 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   794807.266 ±(99.9%) 19397.014 ops/s [Average]
[info]   (min, avg, max) = (786122.865, 794807.266, 798962.692), stdev = 5037.343
[info]   CI (99.9%): [775410.252, 814204.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   626.098 ±(99.9%) 15.180 MB/sec [Average]
[info]   (min, avg, max) = (619.287, 626.098, 629.323), stdev = 3.942
[info]   CI (99.9%): [610.918, 641.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.288 ±(99.9%) 578.993 MB/sec [Average]
[info]   (min, avg, max) = (336.311, 605.288, 672.751), stdev = 150.363
[info]   CI (99.9%): [26.295, 1184.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1199.510 ±(99.9%) 1156.000 B/op [Average]
[info]   (min, avg, max) = (662.658, 1199.510, 1346.973), stdev = 300.209
[info]   CI (99.9%): [43.511, 2355.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.263 ±(99.9%) 2.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 1.317), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 2.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.80% complete, ETA 00:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 839143.247 ops/s
[info] # Warmup Iteration   2: 913028.302 ops/s
[info] # Warmup Iteration   3: 921708.989 ops/s
[info] Iteration   1: 958632.433 ops/s
[info]                  ·gc.alloc.rate:            521.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 553.369 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 948490.793 ops/s
[info]                  ·gc.alloc.rate:                   515.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1117.503 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 935844.254 ops/s
[info]                  ·gc.alloc.rate:                   508.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        565.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.120 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 915613.896 ops/s
[info]                  ·gc.alloc.rate:            497.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1157.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 919279.731 ops/s
[info]                  ·gc.alloc.rate:            499.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 575.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   935572.222 ±(99.9%) 71068.035 ops/s [Average]
[info]   (min, avg, max) = (915613.896, 935572.222, 958632.433), stdev = 18456.143
[info]   CI (99.9%): [864504.186, 1006640.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   508.808 ±(99.9%) 38.621 MB/sec [Average]
[info]   (min, avg, max) = (497.940, 508.808, 521.391), stdev = 10.030
[info]   CI (99.9%): [470.188, 547.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.307 ±(99.9%) 710.195 MB/sec [Average]
[info]   (min, avg, max) = (336.387, 471.307, 673.401), stdev = 184.435
[info]   CI (99.9%): [≈ 0, 1181.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   794.032 ±(99.9%) 1209.201 B/op [Average]
[info]   (min, avg, max) = (553.369, 794.032, 1157.632), stdev = 314.026
[info]   CI (99.9%): [≈ 0, 2003.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 2.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 1.120), stdev = 0.610
[info]   CI (99.9%): [≈ 0, 2.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.06% complete, ETA 00:53:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 975479.782 ops/s
[info] # Warmup Iteration   2: 1070653.307 ops/s
[info] # Warmup Iteration   3: 1061275.667 ops/s
[info] Iteration   1: 1077396.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1079303.929 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1075391.149 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1076673.210 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1075771.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1076907.269 ±(99.9%) 5973.205 ops/s [Average]
[info]   (min, avg, max) = (1075391.149, 1076907.269, 1079303.929), stdev = 1551.222
[info]   CI (99.9%): [1070934.064, 1082880.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 33.33% complete, ETA 00:53:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18143.784 ops/s
[info] # Warmup Iteration   2: 29050.660 ops/s
[info] # Warmup Iteration   3: 29136.806 ops/s
[info] Iteration   1: 28533.015 ops/s
[info]                  ·gc.alloc.rate:                   1490.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        92776.452 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 220.459 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 29212.483 ops/s
[info]                  ·gc.alloc.rate:                                  1525.840 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82203.142 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.270 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73357.612 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 29294.288 ops/s
[info]                  ·gc.alloc.rate:                                  1529.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91440.380 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 29370.381 ops/s
[info]                  ·gc.alloc.rate:            1533.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72960.558 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 29288.745 ops/s
[info]                  ·gc.alloc.rate:            1529.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91455.987 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29139.782 ±(99.9%) 1323.705 ops/s [Average]
[info]   (min, avg, max) = (28533.015, 29139.782, 29370.381), stdev = 343.762
[info]   CI (99.9%): [27816.077, 30463.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1521.838 ±(99.9%) 69.001 MB/sec [Average]
[info]   (min, avg, max) = (1490.184, 1521.838, 1533.820), stdev = 17.919
[info]   CI (99.9%): [1452.837, 1590.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82203.841 ±(99.9%) 26.726 B/op [Average]
[info]   (min, avg, max) = (82200.014, 82203.841, 82216.018), stdev = 6.941
[info]   CI (99.9%): [82177.114, 82230.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.859 ±(99.9%) 15.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.859, 9.270), stdev = 4.143
[info]   CI (99.9%): [≈ 0, 17.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.642 ±(99.9%) 704.125 MB/sec [Average]
[info]   (min, avg, max) = (1361.415, 1561.642, 1701.786), stdev = 182.859
[info]   CI (99.9%): [857.517, 2265.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84398.198 ±(99.9%) 39565.906 B/op [Average]
[info]   (min, avg, max) = (72960.558, 84398.198, 92776.452), stdev = 10275.140
[info]   CI (99.9%): [44832.292, 123964.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.092 ±(99.9%) 379.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.092, 220.459), stdev = 98.592
[info]   CI (99.9%): [≈ 0, 423.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.301
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Run progress: 33.60% complete, ETA 00:52:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97211.973 ops/s
[info] # Warmup Iteration   2: 127348.124 ops/s
[info] # Warmup Iteration   3: 128382.513 ops/s
[info] Iteration   1: 125143.224 ops/s
[info]                  ·gc.alloc.rate:                                  1703.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.839 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21321.205 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.888 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 125696.767 ops/s
[info]                  ·gc.alloc.rate:                                  1711.530 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21310.656 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 126961.359 ops/s
[info]                  ·gc.alloc.rate:                                  1728.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21098.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 129846.755 ops/s
[info]                  ·gc.alloc.rate:                                  1768.464 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20629.339 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 128300.282 ops/s
[info]                  ·gc.alloc.rate:                                  1746.919 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21432.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20878.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   127189.677 ±(99.9%) 7397.443 ops/s [Average]
[info]   (min, avg, max) = (125143.224, 127189.677, 129846.755), stdev = 1921.093
[info]   CI (99.9%): [119792.234, 134587.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1731.945 ±(99.9%) 101.309 MB/sec [Average]
[info]   (min, avg, max) = (1703.932, 1731.945, 1768.464), stdev = 26.310
[info]   CI (99.9%): [1630.637, 1833.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21432.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21432.003, 21432.003, 21432.004), stdev = 0.001
[info]   CI (99.9%): [21432.003, 21432.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.016, 0.067), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.201 ±(99.9%) 1.381 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.201, 0.839), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.588 ±(99.9%) 11.785 MB/sec [Average]
[info]   (min, avg, max) = (1695.123, 1700.588, 1702.232), stdev = 3.060
[info]   CI (99.9%): [1688.804, 1712.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21047.552 ±(99.9%) 1139.595 B/op [Average]
[info]   (min, avg, max) = (20629.339, 21047.552, 21321.205), stdev = 295.949
[info]   CI (99.9%): [19907.957, 22187.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.378 ±(99.9%) 72.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.378, 41.888), stdev = 18.733
[info]   CI (99.9%): [≈ 0, 80.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 33.87% complete, ETA 00:52:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92210.352 ops/s
[info] # Warmup Iteration   2: 155918.944 ops/s
[info] # Warmup Iteration   3: 160745.563 ops/s
[info] Iteration   1: 162162.644 ops/s
[info]                  ·gc.alloc.rate:                   865.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9787.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 161782.245 ops/s
[info]                  ·gc.alloc.rate:            863.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6545.216 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 162825.113 ops/s
[info]                  ·gc.alloc.rate:            868.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9755.244 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 163933.127 ops/s
[info]                  ·gc.alloc.rate:                                  874.882 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6497.800 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.373 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 164743.122 ops/s
[info]                  ·gc.alloc.rate:                                  879.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9755.823 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   163089.250 ±(99.9%) 4748.973 ops/s [Average]
[info]   (min, avg, max) = (161782.245, 163089.250, 164743.122), stdev = 1233.293
[info]   CI (99.9%): [158340.278, 167838.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   870.418 ±(99.9%) 25.756 MB/sec [Average]
[info]   (min, avg, max) = (863.360, 870.418, 879.495), stdev = 6.689
[info]   CI (99.9%): [844.662, 896.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.056), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 1.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.199, 0.535), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.696 ±(99.9%) 713.709 MB/sec [Average]
[info]   (min, avg, max) = (672.723, 877.696, 1021.452), stdev = 185.348
[info]   CI (99.9%): [163.987, 1591.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8468.415 ±(99.9%) 6844.149 B/op [Average]
[info]   (min, avg, max) = (6497.800, 8468.415, 9787.994), stdev = 1777.404
[info]   CI (99.9%): [1624.266, 15312.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.968 ±(99.9%) 64.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.968, 38.373), stdev = 16.675
[info]   CI (99.9%): [≈ 0, 73.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.722
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 34.14% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236412.946 ops/s
[info] # Warmup Iteration   2: 258043.907 ops/s
[info] # Warmup Iteration   3: 252540.287 ops/s
[info] Iteration   1: 247590.054 ops/s
[info]                  ·gc.alloc.rate:            644.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4285.156 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 247625.997 ops/s
[info]                  ·gc.alloc.rate:            644.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4284.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 249315.561 ops/s
[info]                  ·gc.alloc.rate:            648.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4255.598 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 250632.885 ops/s
[info]                  ·gc.alloc.rate:            652.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4233.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 251048.539 ops/s
[info]                  ·gc.alloc.rate:            653.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4226.125 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   249242.608 ±(99.9%) 6251.798 ops/s [Average]
[info]   (min, avg, max) = (247590.054, 249242.608, 251048.539), stdev = 1623.572
[info]   CI (99.9%): [242990.810, 255494.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   648.640 ±(99.9%) 16.517 MB/sec [Average]
[info]   (min, avg, max) = (644.220, 648.640, 653.479), stdev = 4.289
[info]   CI (99.9%): [632.123, 665.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.103 ±(99.9%) 0.380 MB/sec [Average]
[info]   (min, avg, max) = (673.970, 674.103, 674.239), stdev = 0.099
[info]   CI (99.9%): [673.723, 674.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4256.938 ±(99.9%) 106.873 B/op [Average]
[info]   (min, avg, max) = (4226.125, 4256.938, 4285.156), stdev = 27.755
[info]   CI (99.9%): [4150.064, 4363.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 34.41% complete, ETA 00:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26859.917 ops/s
[info] # Warmup Iteration   2: 60952.140 ops/s
[info] # Warmup Iteration   3: 61447.078 ops/s
[info] Iteration   1: 62173.281 ops/s
[info]                  ·gc.alloc.rate:                                  2623.741 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68933.788 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 62053.214 ops/s
[info]                  ·gc.alloc.rate:                                  2618.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69067.071 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 62036.423 ops/s
[info]                  ·gc.alloc.rate:                                  2618.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60446.348 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 62981.459 ops/s
[info]                  ·gc.alloc.rate:                                  2658.867 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68049.573 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 62249.577 ops/s
[info]                  ·gc.alloc.rate:                                  2627.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68846.324 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   62298.791 ±(99.9%) 1507.854 ops/s [Average]
[info]   (min, avg, max) = (62036.423, 62298.791, 62981.459), stdev = 391.585
[info]   CI (99.9%): [60790.937, 63806.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2629.504 ±(99.9%) 64.747 MB/sec [Average]
[info]   (min, avg, max) = (2618.628, 2629.504, 2658.867), stdev = 16.814
[info]   CI (99.9%): [2564.757, 2694.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.007, 66432.008), stdev = 0.001
[info]   CI (99.9%): [66432.005, 66432.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.168 ±(99.9%) 0.309 B/op [Average]
[info]   (min, avg, max) = (0.088, 0.168, 0.298), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2654.898 ±(99.9%) 585.962 MB/sec [Average]
[info]   (min, avg, max) = (2382.684, 2654.898, 2723.609), stdev = 152.172
[info]   CI (99.9%): [2068.936, 3240.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67068.621 ±(99.9%) 14336.817 B/op [Average]
[info]   (min, avg, max) = (60446.348, 67068.621, 69067.071), stdev = 3723.226
[info]   CI (99.9%): [52731.804, 81405.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 14.000), stdev = 3.391
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Run progress: 34.68% complete, ETA 00:52:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136708.462 ops/s
[info] # Warmup Iteration   2: 170971.620 ops/s
[info] # Warmup Iteration   3: 179733.969 ops/s
[info] Iteration   1: 179642.628 ops/s
[info]                  ·gc.alloc.rate:            627.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2953.012 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 175973.370 ops/s
[info]                  ·gc.alloc.rate:            614.366 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6029.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 179515.180 ops/s
[info]                  ·gc.alloc.rate:            627.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5910.333 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 179500.950 ops/s
[info]                  ·gc.alloc.rate:            626.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5910.728 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 178583.065 ops/s
[info]                  ·gc.alloc.rate:            623.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5941.107 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   178643.039 ±(99.9%) 5973.636 ops/s [Average]
[info]   (min, avg, max) = (175973.370, 178643.039, 179642.628), stdev = 1551.334
[info]   CI (99.9%): [172669.403, 184616.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   623.824 ±(99.9%) 21.232 MB/sec [Average]
[info]   (min, avg, max) = (614.366, 623.824, 627.347), stdev = 5.514
[info]   CI (99.9%): [602.592, 645.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.704 ±(99.9%) 580.398 MB/sec [Average]
[info]   (min, avg, max) = (337.075, 606.704, 674.349), stdev = 150.727
[info]   CI (99.9%): [26.307, 1187.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5348.878 ±(99.9%) 5160.677 B/op [Average]
[info]   (min, avg, max) = (2953.012, 5348.878, 6029.209), stdev = 1340.211
[info]   CI (99.9%): [188.201, 10509.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 34.95% complete, ETA 00:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 327429.349 ops/s
[info] # Warmup Iteration   2: 523073.821 ops/s
[info] # Warmup Iteration   3: 539651.829 ops/s
[info] Iteration   1: 534566.296 ops/s
[info]                  ·gc.alloc.rate:            540.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 990.388 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 535484.691 ops/s
[info]                  ·gc.alloc.rate:            541.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1975.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 536996.330 ops/s
[info]                  ·gc.alloc.rate:                   543.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1969.910 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 528541.406 ops/s
[info]                  ·gc.alloc.rate:                   534.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        999.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 531230.708 ops/s
[info]                  ·gc.alloc.rate:            537.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1993.265 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   533363.886 ±(99.9%) 13191.618 ops/s [Average]
[info]   (min, avg, max) = (528541.406, 533363.886, 536996.330), stdev = 3425.821
[info]   CI (99.9%): [520172.268, 546555.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   539.526 ±(99.9%) 13.382 MB/sec [Average]
[info]   (min, avg, max) = (534.648, 539.526, 543.271), stdev = 3.475
[info]   CI (99.9%): [526.144, 552.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.855 ±(99.9%) 709.357 MB/sec [Average]
[info]   (min, avg, max) = (335.741, 537.855, 672.816), stdev = 184.218
[info]   CI (99.9%): [≈ 0, 1247.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1585.755 ±(99.9%) 2076.695 B/op [Average]
[info]   (min, avg, max) = (990.388, 1585.755, 1993.265), stdev = 539.311
[info]   CI (99.9%): [≈ 0, 3662.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.787 ±(99.9%) 4.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 1.984), stdev = 1.078
[info]   CI (99.9%): [≈ 0, 4.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 35.22% complete, ETA 00:51:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424838.693 ops/s
[info] # Warmup Iteration   2: 474619.908 ops/s
[info] # Warmup Iteration   3: 477532.020 ops/s
[info] Iteration   1: 479024.897 ops/s
[info]                  ·gc.alloc.rate:            367.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1107.420 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 473408.043 ops/s
[info]                  ·gc.alloc.rate:            363.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1118.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 476282.069 ops/s
[info]                  ·gc.alloc.rate:            365.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1111.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 477883.692 ops/s
[info]                  ·gc.alloc.rate:                   366.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1107.898 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.194 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 478598.849 ops/s
[info]                  ·gc.alloc.rate:            367.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1108.434 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   477039.510 ±(99.9%) 8790.779 ops/s [Average]
[info]   (min, avg, max) = (473408.043, 477039.510, 479024.897), stdev = 2282.937
[info]   CI (99.9%): [468248.731, 485830.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   366.121 ±(99.9%) 6.709 MB/sec [Average]
[info]   (min, avg, max) = (363.339, 366.121, 367.665), stdev = 1.742
[info]   CI (99.9%): [359.412, 372.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.639 ±(99.9%) 1.359 MB/sec [Average]
[info]   (min, avg, max) = (336.366, 336.639, 337.052), stdev = 0.353
[info]   CI (99.9%): [335.280, 337.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1110.742 ±(99.9%) 17.556 B/op [Average]
[info]   (min, avg, max) = (1107.420, 1110.742, 1118.355), stdev = 4.559
[info]   CI (99.9%): [1093.186, 1128.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.439 ±(99.9%) 3.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.439, 2.194), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 35.48% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 447248.436 ops/s
[info] # Warmup Iteration   2: 488150.931 ops/s
[info] # Warmup Iteration   3: 484168.015 ops/s
[info] Iteration   1: 488484.778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 493562.958 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 498184.030 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 499154.004 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 499568.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   495790.951 ±(99.9%) 18230.128 ops/s [Average]
[info]   (min, avg, max) = (488484.778, 495790.951, 499568.986), stdev = 4734.306
[info]   CI (99.9%): [477560.823, 514021.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 35.75% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155700.707 ops/s
[info] # Warmup Iteration   2: 286675.528 ops/s
[info] # Warmup Iteration   3: 287147.279 ops/s
[info] Iteration   1: 284127.074 ops/s
[info]                  ·gc.alloc.rate:            779.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5579.259 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 284338.106 ops/s
[info]                  ·gc.alloc.rate:                   780.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3716.759 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 283161.202 ops/s
[info]                  ·gc.alloc.rate:            777.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3735.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 284581.282 ops/s
[info]                  ·gc.alloc.rate:                   780.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5574.063 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 280887.515 ops/s
[info]                  ·gc.alloc.rate:                                  770.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3814.483 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   283419.036 ±(99.9%) 5830.865 ops/s [Average]
[info]   (min, avg, max) = (280887.515, 283419.036, 284581.282), stdev = 1514.257
[info]   CI (99.9%): [277588.171, 289249.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   777.848 ±(99.9%) 15.984 MB/sec [Average]
[info]   (min, avg, max) = (770.907, 777.848, 780.986), stdev = 4.151
[info]   CI (99.9%): [761.865, 793.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.002), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.162), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   807.805 ±(99.9%) 701.870 MB/sec [Average]
[info]   (min, avg, max) = (671.403, 807.805, 1007.700), stdev = 182.273
[info]   CI (99.9%): [105.935, 1509.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4484.095 ±(99.9%) 3843.119 B/op [Average]
[info]   (min, avg, max) = (3716.759, 4484.095, 5579.259), stdev = 998.046
[info]   CI (99.9%): [640.976, 8327.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.632 ±(99.9%) 49.550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.632, 29.473), stdev = 12.868
[info]   CI (99.9%): [≈ 0, 56.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 13.000), stdev = 4.099
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 36.02% complete, ETA 00:50:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6058.368 ops/s
[info] # Warmup Iteration   2: 8713.722 ops/s
[info] # Warmup Iteration   3: 8712.093 ops/s
[info] Iteration   1: 8846.704 ops/s
[info]                  ·gc.alloc.rate:            1131.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       201256.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 239837.024 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 9009.574 ops/s
[info]                  ·gc.alloc.rate:            1151.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       201256.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176624.320 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9008.812 ops/s
[info]                  ·gc.alloc.rate:                                  1152.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237270.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                581.831 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 9108.761 ops/s
[info]                  ·gc.alloc.rate:            1164.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       201256.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176431.457 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9168.820 ops/s
[info]                  ·gc.alloc.rate:                                  1172.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201256.048 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       233728.391 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9028.534 ±(99.9%) 471.319 ops/s [Average]
[info]   (min, avg, max) = (8846.704, 9028.534, 9168.820), stdev = 122.400
[info]   CI (99.9%): [8557.215, 9499.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1154.390 ±(99.9%) 60.515 MB/sec [Average]
[info]   (min, avg, max) = (1131.009, 1154.390, 1172.346), stdev = 15.716
[info]   CI (99.9%): [1093.875, 1214.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201256.047 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (201256.045, 201256.047, 201256.050), stdev = 0.002
[info]   CI (99.9%): [201256.038, 201256.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.806 ±(99.9%) 12.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.806, 7.228), stdev = 3.130
[info]   CI (99.9%): [≈ 0, 13.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1219.891 ±(99.9%) 717.341 MB/sec [Average]
[info]   (min, avg, max) = (1010.811, 1219.891, 1361.502), stdev = 186.291
[info]   CI (99.9%): [502.550, 1937.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   212778.382 ±(99.9%) 127699.260 B/op [Average]
[info]   (min, avg, max) = (176431.457, 212778.382, 239837.024), stdev = 33163.092
[info]   CI (99.9%): [85079.122, 340477.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   116.366 ±(99.9%) 1001.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.366, 581.831), stdev = 260.203
[info]   CI (99.9%): [≈ 0, 1118.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 4.266
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 36.29% complete, ETA 00:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4909.256 ops/s
[info] # Warmup Iteration   2: 8931.605 ops/s
[info] # Warmup Iteration   3: 9017.604 ops/s
[info] Iteration   1: 9010.338 ops/s
[info]                  ·gc.alloc.rate:            1085.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       189616.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176275.260 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 8791.820 ops/s
[info]                  ·gc.alloc.rate:            1059.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       189616.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 180645.058 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 8768.266 ops/s
[info]                  ·gc.alloc.rate:                                  1056.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             189616.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182454.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                836.948 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 9136.082 ops/s
[info]                  ·gc.alloc.rate:                                  1100.611 MB/sec
[info]                  ·gc.alloc.rate.norm:                             189616.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       175910.156 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 9119.021 ops/s
[info]                  ·gc.alloc.rate:                                  1099.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             189640.168 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       234984.031 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   8965.105 ±(99.9%) 677.271 ops/s [Average]
[info]   (min, avg, max) = (8768.266, 8965.105, 9136.082), stdev = 175.885
[info]   CI (99.9%): [8287.835, 9642.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1080.116 ±(99.9%) 82.111 MB/sec [Average]
[info]   (min, avg, max) = (1056.324, 1080.116, 1100.611), stdev = 21.324
[info]   CI (99.9%): [998.005, 1162.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   189620.871 ±(99.9%) 41.538 B/op [Average]
[info]   (min, avg, max) = (189616.045, 189620.871, 189640.168), stdev = 10.787
[info]   CI (99.9%): [189579.333, 189662.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.035), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.473 ±(99.9%) 10.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.473, 6.325), stdev = 2.729
[info]   CI (99.9%): [≈ 0, 11.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.489 ±(99.9%) 599.531 MB/sec [Average]
[info]   (min, avg, max) = (1008.934, 1083.489, 1361.856), stdev = 155.696
[info]   CI (99.9%): [483.958, 1683.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   190053.824 ±(99.9%) 97317.141 B/op [Average]
[info]   (min, avg, max) = (175910.156, 190053.824, 234984.031), stdev = 25272.952
[info]   CI (99.9%): [92736.683, 287370.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   167.390 ±(99.9%) 1441.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.390, 836.948), stdev = 374.294
[info]   CI (99.9%): [≈ 0, 1608.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 12.000), stdev = 4.561
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 36.56% complete, ETA 00:50:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136204.679 ops/s
[info] # Warmup Iteration   2: 145856.467 ops/s
[info] # Warmup Iteration   3: 146331.344 ops/s
[info] Iteration   1: 148518.232 ops/s
[info]                  ·gc.alloc.rate:            966.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10737.213 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 143711.966 ops/s
[info]                  ·gc.alloc.rate:            934.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7397.439 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 142797.694 ops/s
[info]                  ·gc.alloc.rate:                   929.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1013.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11167.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 144186.742 ops/s
[info]                  ·gc.alloc.rate:                                  938.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11146.787 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 147222.167 ops/s
[info]                  ·gc.alloc.rate:            957.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10917.177 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   145287.360 ±(99.9%) 9446.579 ops/s [Average]
[info]   (min, avg, max) = (142797.694, 145287.360, 148518.232), stdev = 2453.247
[info]   CI (99.9%): [135840.781, 154733.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   945.300 ±(99.9%) 61.347 MB/sec [Average]
[info]   (min, avg, max) = (929.249, 945.300, 966.417), stdev = 15.932
[info]   CI (99.9%): [883.953, 1006.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.400), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.904 ±(99.9%) 589.132 MB/sec [Average]
[info]   (min, avg, max) = (675.307, 948.904, 1021.446), stdev = 152.996
[info]   CI (99.9%): [359.772, 1538.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10273.220 ±(99.9%) 6227.729 B/op [Average]
[info]   (min, avg, max) = (7397.439, 10273.220, 11167.483), stdev = 1617.321
[info]   CI (99.9%): [4045.491, 16500.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.874 ±(99.9%) 50.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.874, 29.369), stdev = 13.134
[info]   CI (99.9%): [≈ 0, 56.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.83% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3548.958 ops/s
[info] # Warmup Iteration   2: 6654.034 ops/s
[info] # Warmup Iteration   3: 6798.163 ops/s
[info] Iteration   1: 6815.323 ops/s
[info]                  ·gc.alloc.rate:            1269.053 MB/sec
[info]                  ·gc.alloc.rate.norm:       293096.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 310666.401 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 6805.476 ops/s
[info]                  ·gc.alloc.rate:                                  1268.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       312649.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                923.178 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 6879.658 ops/s
[info]                  ·gc.alloc.rate:                                  1281.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       233609.506 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6866.108 ops/s
[info]                  ·gc.alloc.rate:                                  1278.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       312114.365 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6881.890 ops/s
[info]                  ·gc.alloc.rate:                                  1281.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293096.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.530 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       311388.834 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   6849.691 ±(99.9%) 140.699 ops/s [Average]
[info]   (min, avg, max) = (6805.476, 6849.691, 6881.890), stdev = 36.539
[info]   CI (99.9%): [6708.991, 6990.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1275.698 ±(99.9%) 25.344 MB/sec [Average]
[info]   (min, avg, max) = (1268.186, 1275.698, 1281.712), stdev = 6.582
[info]   CI (99.9%): [1250.354, 1301.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293096.061 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (293096.059, 293096.061, 293096.064), stdev = 0.002
[info]   CI (99.9%): [293096.052, 293096.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.707 ±(99.9%) 49.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.707, 29.394), stdev = 12.762
[info]   CI (99.9%): [≈ 0, 55.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.424 ±(99.9%) 576.123 MB/sec [Average]
[info]   (min, avg, max) = (1021.062, 1288.424, 1361.707), stdev = 149.617
[info]   CI (99.9%): [712.301, 1864.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   296085.724 ±(99.9%) 134515.614 B/op [Average]
[info]   (min, avg, max) = (233609.506, 296085.724, 312649.513), stdev = 34933.278
[info]   CI (99.9%): [161570.109, 430601.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.879 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.994), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   184.636 ±(99.9%) 1589.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 184.636, 923.178), stdev = 412.858
[info]   CI (99.9%): [≈ 0, 1774.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.857
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 37.10% complete, ETA 00:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15443.072 ops/s
[info] # Warmup Iteration   2: 21929.036 ops/s
[info] # Warmup Iteration   3: 21597.617 ops/s
[info] Iteration   1: 21963.248 ops/s
[info]                  ·gc.alloc.rate:            922.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       66096.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72460.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 21979.418 ops/s
[info]                  ·gc.alloc.rate:            923.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       66104.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48269.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 22022.926 ops/s
[info]                  ·gc.alloc.rate:            924.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       66085.390 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72263.058 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 22085.868 ops/s
[info]                  ·gc.alloc.rate:                                  927.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72531.649 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                237.342 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 21976.245 ops/s
[info]                  ·gc.alloc.rate:                                  922.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.480 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73133.167 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22005.541 ±(99.9%) 193.340 ops/s [Average]
[info]   (min, avg, max) = (21963.248, 22005.541, 22085.868), stdev = 50.210
[info]   CI (99.9%): [21812.202, 22198.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   924.057 ±(99.9%) 8.443 MB/sec [Average]
[info]   (min, avg, max) = (922.143, 924.057, 927.607), stdev = 2.193
[info]   CI (99.9%): [915.614, 932.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66089.262 ±(99.9%) 41.362 B/op [Average]
[info]   (min, avg, max) = (66080.019, 66089.262, 66104.026), stdev = 10.741
[info]   CI (99.9%): [66047.901, 66130.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.310 ±(99.9%) 18.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.310, 11.067), stdev = 4.900
[info]   CI (99.9%): [≈ 0, 21.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.088 ±(99.9%) 587.665 MB/sec [Average]
[info]   (min, avg, max) = (674.198, 947.088, 1021.094), stdev = 152.615
[info]   CI (99.9%): [359.423, 1534.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   67731.582 ±(99.9%) 41912.043 B/op [Average]
[info]   (min, avg, max) = (48269.601, 67731.582, 73133.167), stdev = 10884.424
[info]   CI (99.9%): [25819.539, 109643.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   47.468 ±(99.9%) 408.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.468, 237.342), stdev = 106.142
[info]   CI (99.9%): [≈ 0, 456.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.421
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 37.37% complete, ETA 00:49:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14378.780 ops/s
[info] # Warmup Iteration   2: 25230.385 ops/s
[info] # Warmup Iteration   3: 25312.096 ops/s
[info] Iteration   1: 25367.196 ops/s
[info]                  ·gc.alloc.rate:            975.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62612.038 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 25015.892 ops/s
[info]                  ·gc.alloc.rate:            962.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63492.911 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 25125.443 ops/s
[info]                  ·gc.alloc.rate:                                  966.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.667 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63423.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                292.082 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 25195.279 ops/s
[info]                  ·gc.alloc.rate:                                  969.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.857 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42525.582 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 25391.859 ops/s
[info]                  ·gc.alloc.rate:                                  976.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63293.578 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25219.134 ±(99.9%) 616.135 ops/s [Average]
[info]   (min, avg, max) = (25015.892, 25219.134, 25391.859), stdev = 160.008
[info]   CI (99.9%): [24602.999, 25835.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   970.313 ±(99.9%) 23.281 MB/sec [Average]
[info]   (min, avg, max) = (962.572, 970.313, 976.864), stdev = 6.046
[info]   CI (99.9%): [947.032, 993.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.020), stdev = 0.002
[info]   CI (99.9%): [60552.010, 60552.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.062), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.515 ±(99.9%) 7.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.515, 3.857), stdev = 2.053
[info]   CI (99.9%): [≈ 0, 9.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.591 ±(99.9%) 572.204 MB/sec [Average]
[info]   (min, avg, max) = (680.911, 946.591, 1021.093), stdev = 148.599
[info]   CI (99.9%): [374.387, 1518.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   59069.546 ±(99.9%) 35637.629 B/op [Average]
[info]   (min, avg, max) = (42525.582, 59069.546, 63492.911), stdev = 9254.979
[info]   CI (99.9%): [23431.917, 94707.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   58.416 ±(99.9%) 502.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.416, 292.082), stdev = 130.623
[info]   CI (99.9%): [≈ 0, 561.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.070
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 37.63% complete, ETA 00:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717016.053 ops/s
[info] # Warmup Iteration   2: 855791.123 ops/s
[info] # Warmup Iteration   3: 854084.092 ops/s
[info] Iteration   1: 861612.686 ops/s
[info]                  ·gc.alloc.rate:                                  1554.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1350.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2467.699 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.301 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 857612.377 ops/s
[info]                  ·gc.alloc.rate:                                  1547.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.125 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3123.505 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 853414.688 ops/s
[info]                  ·gc.alloc.rate:                                  1540.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2510.983 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 865377.000 ops/s
[info]                  ·gc.alloc.rate:                                  1561.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3095.482 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 869700.945 ops/s
[info]                  ·gc.alloc.rate:                                  1569.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3080.097 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   861543.539 ±(99.9%) 24563.949 ops/s [Average]
[info]   (min, avg, max) = (853414.688, 861543.539, 869700.945), stdev = 6379.180
[info]   CI (99.9%): [836979.590, 886107.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1554.638 ±(99.9%) 43.421 MB/sec [Average]
[info]   (min, avg, max) = (1540.389, 1554.638, 1569.195), stdev = 11.276
[info]   CI (99.9%): [1511.218, 1598.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.032, 0.086), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.058, 0.156), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.715 ±(99.9%) 729.171 MB/sec [Average]
[info]   (min, avg, max) = (1350.715, 1563.715, 1702.215), stdev = 189.363
[info]   CI (99.9%): [834.544, 2292.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2855.553 ±(99.9%) 1290.029 B/op [Average]
[info]   (min, avg, max) = (2467.699, 2855.553, 3123.505), stdev = 335.016
[info]   CI (99.9%): [1565.524, 4145.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.460 ±(99.9%) 12.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.460, 7.301), stdev = 3.265
[info]   CI (99.9%): [≈ 0, 14.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.90% complete, ETA 00:49:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465752.853 ops/s
[info] # Warmup Iteration   2: 505073.049 ops/s
[info] # Warmup Iteration   3: 505975.441 ops/s
[info] Iteration   1: 505874.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 504817.426 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 505964.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 506227.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 506252.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   505827.550 ±(99.9%) 2263.712 ops/s [Average]
[info]   (min, avg, max) = (504817.426, 505827.550, 506252.780), stdev = 587.879
[info]   CI (99.9%): [503563.838, 508091.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 38.17% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15962.881 ops/s
[info] # Warmup Iteration   2: 22943.804 ops/s
[info] # Warmup Iteration   3: 23196.271 ops/s
[info] Iteration   1: 22404.080 ops/s
[info]                  ·gc.alloc.rate:            945.129 MB/sec
[info]                  ·gc.alloc.rate.norm:       66408.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70893.995 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 22197.992 ops/s
[info]                  ·gc.alloc.rate:            936.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       66408.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71551.781 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 22923.059 ops/s
[info]                  ·gc.alloc.rate:                   967.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              66393.910 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        69286.141 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 274.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 23087.435 ops/s
[info]                  ·gc.alloc.rate:                                  973.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66392.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69611.424 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 23110.176 ops/s
[info]                  ·gc.alloc.rate:            975.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       66392.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69542.159 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   22744.549 ±(99.9%) 1608.264 ops/s [Average]
[info]   (min, avg, max) = (22197.992, 22744.549, 23110.176), stdev = 417.661
[info]   CI (99.9%): [21136.285, 24352.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   959.508 ±(99.9%) 67.885 MB/sec [Average]
[info]   (min, avg, max) = (936.454, 959.508, 975.180), stdev = 17.630
[info]   CI (99.9%): [891.622, 1027.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66398.798 ±(99.9%) 32.558 B/op [Average]
[info]   (min, avg, max) = (66392.018, 66398.798, 66408.025), stdev = 8.455
[info]   CI (99.9%): [66366.240, 66431.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.631 ±(99.9%) 14.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.631, 8.157), stdev = 3.648
[info]   CI (99.9%): [≈ 0, 15.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.906 ±(99.9%) 25.679 MB/sec [Average]
[info]   (min, avg, max) = (1008.975, 1013.906, 1021.450), stdev = 6.669
[info]   CI (99.9%): [988.227, 1039.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70177.100 ±(99.9%) 3812.251 B/op [Average]
[info]   (min, avg, max) = (69286.141, 70177.100, 71551.781), stdev = 990.029
[info]   CI (99.9%): [66364.849, 73989.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   54.880 ±(99.9%) 472.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.880, 274.401), stdev = 122.716
[info]   CI (99.9%): [≈ 0, 527.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 12.000), stdev = 5.215
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.44% complete, ETA 00:49:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16162.550 ops/s
[info] # Warmup Iteration   2: 23750.106 ops/s
[info] # Warmup Iteration   3: 24463.099 ops/s
[info] Iteration   1: 24700.350 ops/s
[info]                  ·gc.alloc.rate:                   1340.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              85416.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85948.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.444 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 24136.771 ops/s
[info]                  ·gc.alloc.rate:                                  1309.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88434.644 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                173.742 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 25007.973 ops/s
[info]                  ·gc.alloc.rate:                                  1357.056 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85690.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24914.606 ops/s
[info]                  ·gc.alloc.rate:                                  1352.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86010.247 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25019.108 ops/s
[info]                  ·gc.alloc.rate:                                  1357.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85416.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85652.773 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24755.762 ±(99.9%) 1420.586 ops/s [Average]
[info]   (min, avg, max) = (24136.771, 24755.762, 25019.108), stdev = 368.922
[info]   CI (99.9%): [23335.175, 26176.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1343.396 ±(99.9%) 77.535 MB/sec [Average]
[info]   (min, avg, max) = (1309.575, 1343.396, 1357.651), stdev = 20.135
[info]   CI (99.9%): [1265.861, 1420.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85416.018 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (85416.016, 85416.018, 85416.021), stdev = 0.002
[info]   CI (99.9%): [85416.010, 85416.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.180 ±(99.9%) 6.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.180, 4.000), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.830 ±(99.9%) 21.677 MB/sec [Average]
[info]   (min, avg, max) = (1348.765, 1357.830, 1361.701), stdev = 5.629
[info]   CI (99.9%): [1336.153, 1379.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   86347.392 ±(99.9%) 4532.978 B/op [Average]
[info]   (min, avg, max) = (85652.773, 86347.392, 88434.644), stdev = 1177.200
[info]   CI (99.9%): [81814.414, 90880.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.153
[info]   CI (99.9%): [≈ 0, 5.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.237 ±(99.9%) 289.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.237, 173.742), stdev = 75.234
[info]   CI (99.9%): [≈ 0, 332.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.71% complete, ETA 00:48:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13885.709 ops/s
[info] # Warmup Iteration   2: 24694.790 ops/s
[info] # Warmup Iteration   3: 24943.514 ops/s
[info] Iteration   1: 24924.804 ops/s
[info]                  ·gc.alloc.rate:            1138.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84966.245 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 25525.170 ops/s
[info]                  ·gc.alloc.rate:                   1166.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              71889.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        62226.983 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 246.443 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 26143.864 ops/s
[info]                  ·gc.alloc.rate:                                  1194.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.235 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81964.486 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25860.790 ops/s
[info]                  ·gc.alloc.rate:            1181.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62145.945 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 25599.087 ops/s
[info]                  ·gc.alloc.rate:            1169.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62776.967 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   25610.743 ±(99.9%) 1748.456 ops/s [Average]
[info]   (min, avg, max) = (24924.804, 25610.743, 26143.864), stdev = 454.068
[info]   CI (99.9%): [23862.287, 27359.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.856 ±(99.9%) 79.715 MB/sec [Average]
[info]   (min, avg, max) = (1138.418, 1169.856, 1194.050), stdev = 20.702
[info]   CI (99.9%): [1090.142, 1249.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.231 ±(99.9%) 1.849 B/op [Average]
[info]   (min, avg, max) = (71888.016, 71888.231, 71889.090), stdev = 0.480
[info]   CI (99.9%): [71886.382, 71890.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.847 ±(99.9%) 7.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.847, 4.235), stdev = 1.894
[info]   CI (99.9%): [≈ 0, 8.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.747 ±(99.9%) 709.668 MB/sec [Average]
[info]   (min, avg, max) = (1009.324, 1151.747, 1361.418), stdev = 184.299
[info]   CI (99.9%): [442.079, 1861.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   70816.125 ±(99.9%) 44661.050 B/op [Average]
[info]   (min, avg, max) = (62145.945, 70816.125, 84966.245), stdev = 11598.333
[info]   CI (99.9%): [26155.075, 115477.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.289 ±(99.9%) 424.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.289, 246.443), stdev = 110.213
[info]   CI (99.9%): [≈ 0, 473.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 16.000), stdev = 6.580
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.98% complete, ETA 00:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241723.278 ops/s
[info] # Warmup Iteration   2: 257043.134 ops/s
[info] # Warmup Iteration   3: 257085.239 ops/s
[info] Iteration   1: 263818.701 ops/s
[info]                  ·gc.alloc.rate:            686.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4029.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 267309.353 ops/s
[info]                  ·gc.alloc.rate:            695.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3976.989 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 266467.946 ops/s
[info]                  ·gc.alloc.rate:            693.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5984.354 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 268258.468 ops/s
[info]                  ·gc.alloc.rate:            698.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3962.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 267684.336 ops/s
[info]                  ·gc.alloc.rate:                   696.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3971.419 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   266707.761 ±(99.9%) 6704.015 ops/s [Average]
[info]   (min, avg, max) = (263818.701, 266707.761, 268258.468), stdev = 1741.012
[info]   CI (99.9%): [260003.745, 273411.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   694.095 ±(99.9%) 17.758 MB/sec [Average]
[info]   (min, avg, max) = (686.462, 694.095, 698.223), stdev = 4.612
[info]   CI (99.9%): [676.337, 711.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.980 ±(99.9%) 581.341 MB/sec [Average]
[info]   (min, avg, max) = (675.327, 742.980, 1013.048), stdev = 150.972
[info]   CI (99.9%): [161.639, 1324.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4385.031 ±(99.9%) 3444.129 B/op [Average]
[info]   (min, avg, max) = (3962.834, 4385.031, 5984.354), stdev = 894.429
[info]   CI (99.9%): [940.903, 7829.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.133 ±(99.9%) 26.978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.133, 15.666), stdev = 7.006
[info]   CI (99.9%): [≈ 0, 30.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.25% complete, ETA 00:48:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7692.386 ops/s
[info] # Warmup Iteration   2: 14796.200 ops/s
[info] # Warmup Iteration   3: 15330.760 ops/s
[info] Iteration   1: 15400.291 ops/s
[info]                  ·gc.alloc.rate:                                  1584.964 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.734 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       172300.581 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                408.457 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 15373.917 ops/s
[info]                  ·gc.alloc.rate:                                  1582.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.582 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.631 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       174228.502 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 15640.409 ops/s
[info]                  ·gc.alloc.rate:                                  1609.895 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       137012.679 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 15652.614 ops/s
[info]                  ·gc.alloc.rate:                                  1611.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       171123.638 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 15456.579 ops/s
[info]                  ·gc.alloc.rate:                                  1591.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173293.123 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15504.762 ±(99.9%) 511.631 ops/s [Average]
[info]   (min, avg, max) = (15373.917, 15504.762, 15652.614), stdev = 132.869
[info]   CI (99.9%): [14993.131, 16016.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1596.015 ±(99.9%) 52.581 MB/sec [Average]
[info]   (min, avg, max) = (1582.563, 1596.015, 1611.167), stdev = 13.655
[info]   CI (99.9%): [1543.435, 1648.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.139 ±(99.9%) 0.954 B/op [Average]
[info]   (min, avg, max) = (162024.026, 162024.139, 162024.582), stdev = 0.248
[info]   CI (99.9%): [162023.184, 162025.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.021, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.142 ±(99.9%) 14.414 B/op [Average]
[info]   (min, avg, max) = (0.046, 2.142, 8.734), stdev = 3.743
[info]   CI (99.9%): [≈ 0, 16.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.493 ±(99.9%) 579.933 MB/sec [Average]
[info]   (min, avg, max) = (1361.379, 1630.493, 1702.177), stdev = 150.607
[info]   CI (99.9%): [1050.561, 2210.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   165591.705 ±(99.9%) 61678.798 B/op [Average]
[info]   (min, avg, max) = (137012.679, 165591.705, 174228.502), stdev = 16017.788
[info]   CI (99.9%): [103912.907, 227270.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   81.691 ±(99.9%) 703.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.691, 408.457), stdev = 182.667
[info]   CI (99.9%): [≈ 0, 785.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 5.941
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.52% complete, ETA 00:48:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36169.136 ops/s
[info] # Warmup Iteration   2: 49053.665 ops/s
[info] # Warmup Iteration   3: 50510.821 ops/s
[info] Iteration   1: 51284.635 ops/s
[info]                  ·gc.alloc.rate:            1243.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41376.364 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 50627.178 ops/s
[info]                  ·gc.alloc.rate:                                  1227.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.642 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42016.761 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                103.541 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 52223.704 ops/s
[info]                  ·gc.alloc.rate:                                  1266.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.646 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30774.343 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 52147.807 ops/s
[info]                  ·gc.alloc.rate:            1265.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41093.033 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 52148.929 ops/s
[info]                  ·gc.alloc.rate:            1264.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41092.246 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   51686.451 ±(99.9%) 2722.061 ops/s [Average]
[info]   (min, avg, max) = (50627.178, 51686.451, 52223.704), stdev = 706.911
[info]   CI (99.9%): [48964.390, 54408.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1253.683 ±(99.9%) 66.592 MB/sec [Average]
[info]   (min, avg, max) = (1227.727, 1253.683, 1266.772), stdev = 17.294
[info]   CI (99.9%): [1187.092, 1320.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.009), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.258 ±(99.9%) 1.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 0.646), stdev = 0.353
[info]   CI (99.9%): [≈ 0, 1.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.780 ±(99.9%) 576.529 MB/sec [Average]
[info]   (min, avg, max) = (1021.167, 1288.780, 1361.660), stdev = 149.723
[info]   CI (99.9%): [712.251, 1865.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   39270.549 ±(99.9%) 18346.377 B/op [Average]
[info]   (min, avg, max) = (30774.343, 39270.549, 42016.761), stdev = 4764.496
[info]   CI (99.9%): [20924.172, 57616.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.708 ±(99.9%) 178.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.708, 103.541), stdev = 46.305
[info]   CI (99.9%): [≈ 0, 199.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 5.177
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Run progress: 39.78% complete, ETA 00:47:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68250.644 ops/s
[info] # Warmup Iteration   2: 107205.296 ops/s
[info] # Warmup Iteration   3: 112264.126 ops/s
[info] Iteration   1: 112151.270 ops/s
[info]                  ·gc.alloc.rate:            950.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14162.366 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 112170.701 ops/s
[info]                  ·gc.alloc.rate:            950.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9439.894 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 110767.078 ops/s
[info]                  ·gc.alloc.rate:                   938.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14339.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 113387.229 ops/s
[info]                  ·gc.alloc.rate:                                  960.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14174.444 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 113466.495 ops/s
[info]                  ·gc.alloc.rate:                                  961.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14164.202 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   112388.554 ±(99.9%) 4258.512 ops/s [Average]
[info]   (min, avg, max) = (110767.078, 112388.554, 113466.495), stdev = 1105.922
[info]   CI (99.9%): [108130.042, 116647.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   952.190 ±(99.9%) 36.145 MB/sec [Average]
[info]   (min, avg, max) = (938.409, 952.190, 961.361), stdev = 9.387
[info]   CI (99.9%): [916.044, 988.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.004, 13336.004, 13336.004), stdev = 0.001
[info]   CI (99.9%): [13336.003, 13336.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.151), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.427 ±(99.9%) 3.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.427, 2.090), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.567 ±(99.9%) 589.771 MB/sec [Average]
[info]   (min, avg, max) = (672.795, 946.567, 1021.064), stdev = 153.162
[info]   CI (99.9%): [356.796, 1536.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13256.040 ±(99.9%) 8219.581 B/op [Average]
[info]   (min, avg, max) = (9439.894, 13256.040, 14339.291), stdev = 2134.599
[info]   CI (99.9%): [5036.459, 21475.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.358 ±(99.9%) 97.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.358, 56.789), stdev = 25.397
[info]   CI (99.9%): [≈ 0, 109.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.263
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 40.05% complete, ETA 00:47:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1115337.875 ops/s
[info] # Warmup Iteration   2: 1383498.674 ops/s
[info] # Warmup Iteration   3: 1400265.196 ops/s
[info] Iteration   1: 1410725.217 ops/s
[info]                  ·gc.alloc.rate:                   1513.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1501.156 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.459 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1396245.547 ops/s
[info]                  ·gc.alloc.rate:                                  1497.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.178 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1918.500 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1384581.197 ops/s
[info]                  ·gc.alloc.rate:                                  1485.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1547.720 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1376354.348 ops/s
[info]                  ·gc.alloc.rate:                                  1475.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1946.227 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1393461.467 ops/s
[info]                  ·gc.alloc.rate:                                  1494.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1537.899 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1392273.555 ±(99.9%) 49844.842 ops/s [Average]
[info]   (min, avg, max) = (1376354.348, 1392273.555, 1410725.217), stdev = 12944.547
[info]   CI (99.9%): [1342428.713, 1442118.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1493.312 ±(99.9%) 53.609 MB/sec [Average]
[info]   (min, avg, max) = (1475.990, 1493.312, 1513.058), stdev = 13.922
[info]   CI (99.9%): [1439.704, 1546.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.200), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.608 ±(99.9%) 729.289 MB/sec [Average]
[info]   (min, avg, max) = (1345.578, 1494.608, 1702.120), stdev = 189.394
[info]   CI (99.9%): [765.319, 2223.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1690.300 ±(99.9%) 854.340 B/op [Average]
[info]   (min, avg, max) = (1501.156, 1690.300, 1946.227), stdev = 221.869
[info]   CI (99.9%): [835.960, 2544.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.892 ±(99.9%) 7.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.892, 4.459), stdev = 1.994
[info]   CI (99.9%): [≈ 0, 8.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.32% complete, ETA 00:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618620.109 ops/s
[info] # Warmup Iteration   2: 673629.421 ops/s
[info] # Warmup Iteration   3: 664325.559 ops/s
[info] Iteration   1: 674382.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 674018.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 671672.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 671795.607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 671646.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   672703.072 ±(99.9%) 5291.739 ops/s [Average]
[info]   (min, avg, max) = (671646.408, 672703.072, 674382.968), stdev = 1374.248
[info]   CI (99.9%): [667411.333, 677994.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.59% complete, ETA 00:47:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41559.734 ops/s
[info] # Warmup Iteration   2: 55755.651 ops/s
[info] # Warmup Iteration   3: 58365.410 ops/s
[info] Iteration   1: 57397.004 ops/s
[info]                  ·gc.alloc.rate:            1334.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36897.250 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 57000.847 ops/s
[info]                  ·gc.alloc.rate:                                  1325.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37373.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                110.355 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 58357.685 ops/s
[info]                  ·gc.alloc.rate:                                  1357.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36720.281 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 58924.931 ops/s
[info]                  ·gc.alloc.rate:                                  1370.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36365.769 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 58952.726 ops/s
[info]                  ·gc.alloc.rate:                                  1371.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36346.651 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   58126.638 ±(99.9%) 3429.478 ops/s [Average]
[info]   (min, avg, max) = (57000.847, 58126.638, 58952.726), stdev = 890.625
[info]   CI (99.9%): [54697.161, 61556.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1351.910 ±(99.9%) 79.716 MB/sec [Average]
[info]   (min, avg, max) = (1325.925, 1351.910, 1371.196), stdev = 20.702
[info]   CI (99.9%): [1272.194, 1431.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.008), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.124), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.856 ±(99.9%) 5.675 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 3.423), stdev = 1.474
[info]   CI (99.9%): [≈ 0, 6.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.626 ±(99.9%) 27.613 MB/sec [Average]
[info]   (min, avg, max) = (1345.287, 1356.626, 1361.406), stdev = 7.171
[info]   CI (99.9%): [1329.013, 1384.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36740.711 ±(99.9%) 1635.206 B/op [Average]
[info]   (min, avg, max) = (36346.651, 36740.711, 37373.602), stdev = 424.658
[info]   CI (99.9%): [35105.504, 38375.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.071 ±(99.9%) 190.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.071, 110.355), stdev = 49.352
[info]   CI (99.9%): [≈ 0, 212.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.86% complete, ETA 00:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9795.400 ops/s
[info] # Warmup Iteration   2: 13666.050 ops/s
[info] # Warmup Iteration   3: 13206.328 ops/s
[info] Iteration   1: 13591.127 ops/s
[info]                  ·gc.alloc.rate:            1212.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       140456.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156110.175 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13507.800 ops/s
[info]                  ·gc.alloc.rate:                   1205.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              140456.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        117888.161 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 465.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 13833.977 ops/s
[info]                  ·gc.alloc.rate:                                  1234.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       154895.522 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 14056.409 ops/s
[info]                  ·gc.alloc.rate:                                  1254.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       152449.630 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14026.339 ops/s
[info]                  ·gc.alloc.rate:                                  1252.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140456.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114573.557 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13803.130 ±(99.9%) 957.040 ops/s [Average]
[info]   (min, avg, max) = (13507.800, 13803.130, 14056.409), stdev = 248.540
[info]   CI (99.9%): [12846.090, 14760.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1231.769 ±(99.9%) 86.175 MB/sec [Average]
[info]   (min, avg, max) = (1205.077, 1231.769, 1254.353), stdev = 22.379
[info]   CI (99.9%): [1145.594, 1317.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140456.032 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (140456.029, 140456.032, 140456.036), stdev = 0.003
[info]   CI (99.9%): [140456.020, 140456.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.253 ±(99.9%) 6.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.253, 4.257), stdev = 1.759
[info]   CI (99.9%): [≈ 0, 8.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.737 ±(99.9%) 718.698 MB/sec [Average]
[info]   (min, avg, max) = (1011.450, 1220.737, 1361.463), stdev = 186.644
[info]   CI (99.9%): [502.038, 1939.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   139183.409 ±(99.9%) 80966.849 B/op [Average]
[info]   (min, avg, max) = (114573.557, 139183.409, 156110.175), stdev = 21026.833
[info]   CI (99.9%): [58216.560, 220150.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   93.131 ±(99.9%) 801.885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 93.131, 465.654), stdev = 208.247
[info]   CI (99.9%): [≈ 0, 895.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.13% complete, ETA 00:46:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7551.319 ops/s
[info] # Warmup Iteration   2: 14098.729 ops/s
[info] # Warmup Iteration   3: 14206.791 ops/s
[info] Iteration   1: 14137.766 ops/s
[info]                  ·gc.alloc.rate:            1142.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149785.978 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 14198.282 ops/s
[info]                  ·gc.alloc.rate:                   1147.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        111864.843 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 443.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 13995.705 ops/s
[info]                  ·gc.alloc.rate:                                  1130.864 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114835.477 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 14298.605 ops/s
[info]                  ·gc.alloc.rate:                                  1155.376 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       149859.414 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14309.363 ops/s
[info]                  ·gc.alloc.rate:            1156.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.194 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112316.029 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   14187.944 ±(99.9%) 496.752 ops/s [Average]
[info]   (min, avg, max) = (13995.705, 14187.944, 14309.363), stdev = 129.005
[info]   CI (99.9%): [13691.192, 14684.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1146.471 ±(99.9%) 40.310 MB/sec [Average]
[info]   (min, avg, max) = (1130.864, 1146.471, 1156.376), stdev = 10.468
[info]   CI (99.9%): [1106.161, 1186.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.031 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (127184.029, 127184.031, 127184.036), stdev = 0.003
[info]   CI (99.9%): [127184.020, 127184.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.881 ±(99.9%) 15.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.881, 9.162), stdev = 4.072
[info]   CI (99.9%): [≈ 0, 17.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1151.637 ±(99.9%) 709.767 MB/sec [Average]
[info]   (min, avg, max) = (1009.147, 1151.637, 1361.366), stdev = 184.324
[info]   CI (99.9%): [441.870, 1861.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   127732.348 ±(99.9%) 77772.988 B/op [Average]
[info]   (min, avg, max) = (111864.843, 127732.348, 149859.414), stdev = 20197.398
[info]   CI (99.9%): [49959.360, 205505.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   88.606 ±(99.9%) 762.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.606, 443.029), stdev = 198.129
[info]   CI (99.9%): [≈ 0, 851.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.40% complete, ETA 00:46:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242812.529 ops/s
[info] # Warmup Iteration   2: 259630.747 ops/s
[info] # Warmup Iteration   3: 253233.885 ops/s
[info] Iteration   1: 262439.593 ops/s
[info]                  ·gc.alloc.rate:            682.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4050.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 258716.494 ops/s
[info]                  ·gc.alloc.rate:            673.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4109.059 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 250336.752 ops/s
[info]                  ·gc.alloc.rate:            651.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4246.620 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 250556.354 ops/s
[info]                  ·gc.alloc.rate:            652.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4242.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 263212.818 ops/s
[info]                  ·gc.alloc.rate:            685.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4038.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   257052.402 ±(99.9%) 24127.315 ops/s [Average]
[info]   (min, avg, max) = (250336.752, 257052.402, 263212.818), stdev = 6265.787
[info]   CI (99.9%): [232925.087, 281179.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   668.918 ±(99.9%) 62.886 MB/sec [Average]
[info]   (min, avg, max) = (651.396, 668.918, 685.031), stdev = 16.331
[info]   CI (99.9%): [606.032, 731.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   675.391 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (675.349, 675.391, 675.489), stdev = 0.057
[info]   CI (99.9%): [675.173, 675.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4137.617 ±(99.9%) 390.139 B/op [Average]
[info]   (min, avg, max) = (4038.944, 4137.617, 4246.620), stdev = 101.318
[info]   CI (99.9%): [3747.478, 4527.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.67% complete, ETA 00:46:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5319.646 ops/s
[info] # Warmup Iteration   2: 9666.881 ops/s
[info] # Warmup Iteration   3: 10432.128 ops/s
[info] Iteration   1: 10014.226 ops/s
[info]                  ·gc.alloc.rate:            1382.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       217320.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211473.994 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 10454.710 ops/s
[info]                  ·gc.alloc.rate:                                  1443.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204360.513 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                601.650 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 10236.170 ops/s
[info]                  ·gc.alloc.rate:            1413.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       217320.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261683.110 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 10561.015 ops/s
[info]                  ·gc.alloc.rate:                                  1458.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202905.362 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10281.405 ops/s
[info]                  ·gc.alloc.rate:                                  1419.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       208410.088 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10309.505 ±(99.9%) 811.608 ops/s [Average]
[info]   (min, avg, max) = (10014.226, 10309.505, 10561.015), stdev = 210.772
[info]   CI (99.9%): [9497.897, 11121.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1423.431 ±(99.9%) 112.014 MB/sec [Average]
[info]   (min, avg, max) = (1382.728, 1423.431, 1458.071), stdev = 29.090
[info]   CI (99.9%): [1311.417, 1535.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.041 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (217320.039, 217320.041, 217320.044), stdev = 0.002
[info]   CI (99.9%): [217320.033, 217320.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.553 ±(99.9%) 19.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.553, 11.414), stdev = 4.965
[info]   CI (99.9%): [≈ 0, 21.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.490 ±(99.9%) 595.080 MB/sec [Average]
[info]   (min, avg, max) = (1345.532, 1425.490, 1701.696), stdev = 154.540
[info]   CI (99.9%): [830.410, 2020.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   217766.613 ±(99.9%) 95422.589 B/op [Average]
[info]   (min, avg, max) = (202905.362, 217766.613, 261683.110), stdev = 24780.943
[info]   CI (99.9%): [122344.025, 313189.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   120.330 ±(99.9%) 1036.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.330, 601.650), stdev = 269.066
[info]   CI (99.9%): [≈ 0, 1156.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.244
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 41.94% complete, ETA 00:46:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28593.236 ops/s
[info] # Warmup Iteration   2: 38227.698 ops/s
[info] # Warmup Iteration   3: 38403.038 ops/s
[info] Iteration   1: 38314.839 ops/s
[info]                  ·gc.alloc.rate:                   1190.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              48929.655 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        55411.441 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 38601.177 ops/s
[info]                  ·gc.alloc.rate:                   1199.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41228.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 135.798 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 38224.182 ops/s
[info]                  ·gc.alloc.rate:                                  1188.381 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.210 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56063.022 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 38099.396 ops/s
[info]                  ·gc.alloc.rate:                                  1184.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       42182.985 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 37354.198 ops/s
[info]                  ·gc.alloc.rate:            1161.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57365.488 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   38118.758 ±(99.9%) 1792.946 ops/s [Average]
[info]   (min, avg, max) = (37354.198, 38118.758, 38601.177), stdev = 465.622
[info]   CI (99.9%): [36325.812, 39911.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1184.930 ±(99.9%) 55.933 MB/sec [Average]
[info]   (min, avg, max) = (1161.054, 1184.930, 1199.951), stdev = 14.526
[info]   CI (99.9%): [1128.996, 1240.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.340 ±(99.9%) 2.831 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.340, 48929.655), stdev = 0.735
[info]   CI (99.9%): [48925.509, 48931.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.646 ±(99.9%) 5.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.646, 3.210), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.765 ±(99.9%) 719.872 MB/sec [Average]
[info]   (min, avg, max) = (1011.115, 1220.765, 1361.679), stdev = 186.948
[info]   CI (99.9%): [500.893, 1940.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   50450.227 ±(99.9%) 30885.129 B/op [Average]
[info]   (min, avg, max) = (41228.201, 50450.227, 57365.488), stdev = 8020.770
[info]   CI (99.9%): [19565.098, 81335.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   32.632 ±(99.9%) 226.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.632, 135.798), stdev = 58.876
[info]   CI (99.9%): [≈ 0, 259.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.775
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Run progress: 42.20% complete, ETA 00:46:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28907.010 ops/s
[info] # Warmup Iteration   2: 45223.806 ops/s
[info] # Warmup Iteration   3: 45058.416 ops/s
[info] Iteration   1: 44963.656 ops/s
[info]                  ·gc.alloc.rate:            1193.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46955.674 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 45179.099 ops/s
[info]                  ·gc.alloc.rate:                                  1198.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.469 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35295.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                139.235 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 45950.216 ops/s
[info]                  ·gc.alloc.rate:                                  1219.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.666 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46635.827 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 44774.447 ops/s
[info]                  ·gc.alloc.rate:            1187.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35893.779 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 43727.294 ops/s
[info]                  ·gc.alloc.rate:                                  1159.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       49006.273 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44918.942 ±(99.9%) 3088.994 ops/s [Average]
[info]   (min, avg, max) = (43727.294, 44918.942, 45950.216), stdev = 802.202
[info]   CI (99.9%): [41829.948, 48007.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1191.803 ±(99.9%) 82.432 MB/sec [Average]
[info]   (min, avg, max) = (1159.941, 1191.803, 1219.243), stdev = 21.407
[info]   CI (99.9%): [1109.371, 1274.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.010, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.107), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.243 ±(99.9%) 6.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.243, 3.666), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 7.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.000 ±(99.9%) 714.079 MB/sec [Average]
[info]   (min, avg, max) = (1013.113, 1220.000, 1361.860), stdev = 185.444
[info]   CI (99.9%): [505.921, 1934.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   42757.506 ±(99.9%) 25433.074 B/op [Average]
[info]   (min, avg, max) = (35295.979, 42757.506, 49006.273), stdev = 6604.889
[info]   CI (99.9%): [17324.432, 68190.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.847 ±(99.9%) 239.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.847, 139.235), stdev = 62.268
[info]   CI (99.9%): [≈ 0, 267.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.874
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1501244.611 ops/s
[info] # Warmup Iteration   2: 1630854.559 ops/s
[info] # Warmup Iteration   3: 1623479.262 ops/s
[info] Iteration   1: 1636302.323 ops/s
[info]                  ·gc.alloc.rate:                                  1488.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1622.342 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.485 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1688332.376 ops/s
[info]                  ·gc.alloc.rate:                                  1535.944 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1269.270 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 1698969.472 ops/s
[info]                  ·gc.alloc.rate:                                  1545.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1576.657 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1637284.181 ops/s
[info]                  ·gc.alloc.rate:            1489.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.837 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1630038.438 ops/s
[info]                  ·gc.alloc.rate:                                  1483.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1643.327 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1658185.358 ±(99.9%) 125960.239 ops/s [Average]
[info]   (min, avg, max) = (1630038.438, 1658185.358, 1698969.472), stdev = 32711.474
[info]   CI (99.9%): [1532225.119, 1784145.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1508.659 ±(99.9%) 114.124 MB/sec [Average]
[info]   (min, avg, max) = (1483.135, 1508.659, 1545.627), stdev = 29.638
[info]   CI (99.9%): [1394.535, 1622.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.066), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.062), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.695 ±(99.9%) 707.217 MB/sec [Average]
[info]   (min, avg, max) = (1361.402, 1562.695, 1702.008), stdev = 183.662
[info]   CI (99.9%): [855.478, 2269.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1484.087 ±(99.9%) 693.917 B/op [Average]
[info]   (min, avg, max) = (1269.270, 1484.087, 1643.327), stdev = 180.208
[info]   CI (99.9%): [790.170, 2178.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.897 ±(99.9%) 7.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.897, 4.485), stdev = 2.006
[info]   CI (99.9%): [≈ 0, 8.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.74% complete, ETA 00:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1596731.088 ops/s
[info] # Warmup Iteration   2: 1829421.247 ops/s
[info] # Warmup Iteration   3: 1829812.600 ops/s
[info] Iteration   1: 1829318.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1825307.800 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1823234.758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1822965.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1823403.026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1824845.898 ±(99.9%) 10265.246 ops/s [Average]
[info]   (min, avg, max) = (1822965.748, 1824845.898, 1829318.156), stdev = 2665.852
[info]   CI (99.9%): [1814580.652, 1835111.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.01% complete, ETA 00:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25009.008 ops/s
[info] # Warmup Iteration   2: 33777.535 ops/s
[info] # Warmup Iteration   3: 34485.475 ops/s
[info] Iteration   1: 34501.179 ops/s
[info]                  ·gc.alloc.rate:            1043.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       47623.494 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46035.489 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 34583.391 ops/s
[info]                  ·gc.alloc.rate:            1046.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45927.683 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 34420.476 ops/s
[info]                  ·gc.alloc.rate:                                  1041.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46326.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                182.748 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 35073.227 ops/s
[info]                  ·gc.alloc.rate:                                  1061.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       45824.197 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 35036.181 ops/s
[info]                  ·gc.alloc.rate:                                  1059.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61165.188 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34722.891 ±(99.9%) 1188.342 ops/s [Average]
[info]   (min, avg, max) = (34420.476, 34722.891, 35073.227), stdev = 308.609
[info]   CI (99.9%): [33534.548, 35911.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1050.380 ±(99.9%) 35.902 MB/sec [Average]
[info]   (min, avg, max) = (1041.271, 1050.380, 1061.028), stdev = 9.324
[info]   CI (99.9%): [1014.477, 1086.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.508 ±(99.9%) 12.885 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47617.508, 47623.494), stdev = 3.346
[info]   CI (99.9%): [47604.624, 47630.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.059), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.916 ±(99.9%) 4.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.916, 2.697), stdev = 1.279
[info]   CI (99.9%): [≈ 0, 5.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.689 ±(99.9%) 600.174 MB/sec [Average]
[info]   (min, avg, max) = (1008.950, 1082.689, 1361.365), stdev = 155.863
[info]   CI (99.9%): [482.515, 1682.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   49055.821 ±(99.9%) 26076.333 B/op [Average]
[info]   (min, avg, max) = (45824.197, 49055.821, 61165.188), stdev = 6771.941
[info]   CI (99.9%): [22979.488, 75132.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.550 ±(99.9%) 314.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.550, 182.748), stdev = 81.727
[info]   CI (99.9%): [≈ 0, 351.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.28% complete, ETA 00:45:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105443.244 ops/s
[info] # Warmup Iteration   2: 127675.009 ops/s
[info] # Warmup Iteration   3: 126796.806 ops/s
[info] Iteration   1: 129663.448 ops/s
[info]                  ·gc.alloc.rate:                                  2220.903 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26960.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24790.139 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 127361.296 ops/s
[info]                  ·gc.alloc.rate:                                  2181.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26960.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29444.254 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 127490.254 ops/s
[info]                  ·gc.alloc.rate:                                  2183.656 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26960.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25213.389 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 125164.251 ops/s
[info]                  ·gc.alloc.rate:                                  2143.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26960.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29962.904 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 126363.460 ops/s
[info]                  ·gc.alloc.rate:            2164.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       26960.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25437.825 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   127208.542 ±(99.9%) 6392.113 ops/s [Average]
[info]   (min, avg, max) = (125164.251, 127208.542, 129663.448), stdev = 1660.011
[info]   CI (99.9%): [120816.429, 133600.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2178.821 ±(99.9%) 109.499 MB/sec [Average]
[info]   (min, avg, max) = (2143.826, 2178.821, 2220.903), stdev = 28.436
[info]   CI (99.9%): [2069.322, 2288.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26960.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26960.003, 26960.003, 26960.003), stdev = 0.001
[info]   CI (99.9%): [26960.003, 26960.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.013), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.078, 0.156), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.295 ±(99.9%) 717.770 MB/sec [Average]
[info]   (min, avg, max) = (2042.154, 2178.295, 2382.613), stdev = 186.403
[info]   CI (99.9%): [1460.525, 2896.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26969.702 ±(99.9%) 9677.390 B/op [Average]
[info]   (min, avg, max) = (24790.139, 26969.702, 29962.904), stdev = 2513.188
[info]   CI (99.9%): [17292.312, 36647.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 9.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Run progress: 43.55% complete, ETA 00:44:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14398.770 ops/s
[info] # Warmup Iteration   2: 330936.614 ops/s
[info] # Warmup Iteration   3: 336369.399 ops/s
[info] Iteration   1: 337898.919 ops/s
[info]                  ·gc.alloc.rate:            676.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3109.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 336148.910 ops/s
[info]                  ·gc.alloc.rate:            673.113 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3125.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 335243.193 ops/s
[info]                  ·gc.alloc.rate:            671.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3133.653 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 327883.664 ops/s
[info]                  ·gc.alloc.rate:            656.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3203.926 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 334544.505 ops/s
[info]                  ·gc.alloc.rate:            669.882 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3140.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   334343.838 ±(99.9%) 14723.345 ops/s [Average]
[info]   (min, avg, max) = (327883.664, 334343.838, 337898.919), stdev = 3823.606
[info]   CI (99.9%): [319620.493, 349067.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   669.569 ±(99.9%) 28.984 MB/sec [Average]
[info]   (min, avg, max) = (656.879, 669.569, 676.623), stdev = 7.527
[info]   CI (99.9%): [640.585, 698.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.452 ±(99.9%) 0.548 MB/sec [Average]
[info]   (min, avg, max) = (667.354, 667.452, 667.700), stdev = 0.142
[info]   CI (99.9%): [666.904, 667.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3142.362 ±(99.9%) 139.949 B/op [Average]
[info]   (min, avg, max) = (3109.006, 3142.362, 3203.926), stdev = 36.344
[info]   CI (99.9%): [3002.412, 3282.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.82% complete, ETA 00:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135123.367 ops/s
[info] # Warmup Iteration   2: 222895.472 ops/s
[info] # Warmup Iteration   3: 221834.468 ops/s
[info] Iteration   1: 225910.376 ops/s
[info]                  ·gc.alloc.rate:            500.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4687.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 221340.177 ops/s
[info]                  ·gc.alloc.rate:            490.439 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2391.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 218142.610 ops/s
[info]                  ·gc.alloc.rate:            483.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4854.051 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 226046.892 ops/s
[info]                  ·gc.alloc.rate:            500.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2342.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 219541.952 ops/s
[info]                  ·gc.alloc.rate:            486.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4823.147 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   222196.401 ±(99.9%) 13994.367 ops/s [Average]
[info]   (min, avg, max) = (218142.610, 222196.401, 226046.892), stdev = 3634.293
[info]   CI (99.9%): [208202.035, 236190.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   492.343 ±(99.9%) 31.043 MB/sec [Average]
[info]   (min, avg, max) = (483.348, 492.343, 500.895), stdev = 8.062
[info]   CI (99.9%): [461.300, 523.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.129 ±(99.9%) 709.345 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 538.129, 672.670), stdev = 184.215
[info]   CI (99.9%): [≈ 0, 1247.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3819.680 ±(99.9%) 5112.460 B/op [Average]
[info]   (min, avg, max) = (2342.072, 3819.680, 4854.051), stdev = 1327.690
[info]   CI (99.9%): [≈ 0, 8932.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 11.000), stdev = 2.775
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.09% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 413741.017 ops/s
[info] # Warmup Iteration   2: 434845.143 ops/s
[info] # Warmup Iteration   3: 455223.414 ops/s
[info] Iteration   1: 449784.015 ops/s
[info]                  ·gc.alloc.rate:            566.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2358.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 452445.487 ops/s
[info]                  ·gc.alloc.rate:            570.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2344.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 452445.877 ops/s
[info]                  ·gc.alloc.rate:            570.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2344.978 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 454049.622 ops/s
[info]                  ·gc.alloc.rate:            572.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1168.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 453284.013 ops/s
[info]                  ·gc.alloc.rate:            571.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2340.773 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   452401.803 ±(99.9%) 6194.113 ops/s [Average]
[info]   (min, avg, max) = (449784.015, 452401.803, 454049.622), stdev = 1608.592
[info]   CI (99.9%): [446207.690, 458595.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   570.211 ±(99.9%) 7.925 MB/sec [Average]
[info]   (min, avg, max) = (566.868, 570.211, 572.336), stdev = 2.058
[info]   CI (99.9%): [562.286, 578.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.628 ±(99.9%) 580.268 MB/sec [Average]
[info]   (min, avg, max) = (337.058, 606.628, 674.137), stdev = 150.694
[info]   CI (99.9%): [26.359, 1186.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2111.603 ±(99.9%) 2030.460 B/op [Average]
[info]   (min, avg, max) = (1168.412, 2111.603, 2358.854), stdev = 527.304
[info]   CI (99.9%): [81.143, 4142.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.35% complete, ETA 00:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37474.131 ops/s
[info] # Warmup Iteration   2: 62242.971 ops/s
[info] # Warmup Iteration   3: 62223.641 ops/s
[info] Iteration   1: 65181.327 ops/s
[info]                  ·gc.alloc.rate:                                  2908.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65750.114 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 64447.440 ops/s
[info]                  ·gc.alloc.rate:                                  2876.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74818.106 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 64697.076 ops/s
[info]                  ·gc.alloc.rate:                                  2886.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.255 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66245.981 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 63314.807 ops/s
[info]                  ·gc.alloc.rate:                                  2826.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76154.397 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 62923.486 ops/s
[info]                  ·gc.alloc.rate:                                  2808.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68114.452 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   64112.827 ±(99.9%) 3676.494 ops/s [Average]
[info]   (min, avg, max) = (62923.486, 64112.827, 65181.327), stdev = 954.774
[info]   CI (99.9%): [60436.333, 67789.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2861.122 ±(99.9%) 162.629 MB/sec [Average]
[info]   (min, avg, max) = (2808.306, 2861.122, 2908.358), stdev = 42.234
[info]   CI (99.9%): [2698.493, 3023.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.007, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.006, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.014, 0.020), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.352 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (0.255, 0.352, 0.474), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.526 ±(99.9%) 719.479 MB/sec [Average]
[info]   (min, avg, max) = (2722.760, 2859.526, 3064.322), stdev = 186.846
[info]   CI (99.9%): [2140.047, 3579.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70216.610 ±(99.9%) 18919.718 B/op [Average]
[info]   (min, avg, max) = (65750.114, 70216.610, 76154.397), stdev = 4913.391
[info]   CI (99.9%): [51296.892, 89136.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.62% complete, ETA 00:44:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166587.089 ops/s
[info] # Warmup Iteration   2: 217613.118 ops/s
[info] # Warmup Iteration   3: 218824.810 ops/s
[info] Iteration   1: 214090.507 ops/s
[info]                  ·gc.alloc.rate:                                  1510.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.571 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12414.254 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.486 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 219074.822 ops/s
[info]                  ·gc.alloc.rate:                                  1545.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9781.975 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 221451.413 ops/s
[info]                  ·gc.alloc.rate:                                  1562.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12096.623 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 221679.418 ops/s
[info]                  ·gc.alloc.rate:                                  1563.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9667.303 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 221325.490 ops/s
[info]                  ·gc.alloc.rate:                                  1561.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12103.235 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   219524.330 ±(99.9%) 12377.698 ops/s [Average]
[info]   (min, avg, max) = (214090.507, 219524.330, 221679.418), stdev = 3214.449
[info]   CI (99.9%): [207146.632, 231902.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1548.566 ±(99.9%) 87.483 MB/sec [Average]
[info]   (min, avg, max) = (1510.174, 1548.566, 1563.838), stdev = 22.719
[info]   CI (99.9%): [1461.083, 1636.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.017, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 0.958 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.127, 0.571), stdev = 0.249
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.970 ±(99.9%) 708.748 MB/sec [Average]
[info]   (min, avg, max) = (1361.364, 1562.970, 1701.857), stdev = 184.060
[info]   CI (99.9%): [854.221, 2271.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11212.678 ±(99.9%) 5256.282 B/op [Average]
[info]   (min, avg, max) = (9667.303, 11212.678, 12414.254), stdev = 1365.040
[info]   CI (99.9%): [5956.396, 16468.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.897 ±(99.9%) 42.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.897, 24.486), stdev = 10.950
[info]   CI (99.9%): [≈ 0, 47.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 14.000), stdev = 4.722
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Run progress: 44.89% complete, ETA 00:43:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40000.674 ops/s
[info] # Warmup Iteration   2: 680647.060 ops/s
[info] # Warmup Iteration   3: 713729.501 ops/s
[info] Iteration   1: 679570.072 ops/s
[info]                  ·gc.alloc.rate:            532.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1545.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 677005.288 ops/s
[info]                  ·gc.alloc.rate:            529.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 678582.547 ops/s
[info]                  ·gc.alloc.rate:            531.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1548.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 682538.379 ops/s
[info]                  ·gc.alloc.rate:            534.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 678883.982 ops/s
[info]                  ·gc.alloc.rate:            531.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1547.381 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   679316.054 ±(99.9%) 7823.600 ops/s [Average]
[info]   (min, avg, max) = (677005.288, 679316.054, 682538.379), stdev = 2031.764
[info]   CI (99.9%): [671492.453, 687139.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   531.734 ±(99.9%) 6.104 MB/sec [Average]
[info]   (min, avg, max) = (529.957, 531.734, 534.225), stdev = 1.585
[info]   CI (99.9%): [525.630, 537.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.952 ±(99.9%) 703.846 MB/sec [Average]
[info]   (min, avg, max) = (333.700, 533.952, 667.614), stdev = 182.787
[info]   CI (99.9%): [≈ 0, 1237.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1237.353 ±(99.9%) 1633.330 B/op [Average]
[info]   (min, avg, max) = (769.560, 1237.353, 1548.133), stdev = 424.171
[info]   CI (99.9%): [≈ 0, 2870.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 45.16% complete, ETA 00:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55443.981 ops/s
[info] # Warmup Iteration   2: 759826.085 ops/s
[info] # Warmup Iteration   3: 766414.990 ops/s
[info] Iteration   1: 751217.951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 751655.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 752094.170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 751855.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 751588.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc":
[info]   751682.382 ±(99.9%) 1254.925 ops/s [Average]
[info]   (min, avg, max) = (751217.951, 751682.382, 752094.170), stdev = 325.900
[info]   CI (99.9%): [750427.457, 752937.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.43% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308072.513 ops/s
[info] # Warmup Iteration   2: 454184.610 ops/s
[info] # Warmup Iteration   3: 463250.614 ops/s
[info] Iteration   1: 460496.349 ops/s
[info]                  ·gc.alloc.rate:            472.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2299.319 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 460438.353 ops/s
[info]                  ·gc.alloc.rate:            472.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1149.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 462722.891 ops/s
[info]                  ·gc.alloc.rate:            475.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1144.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 458605.706 ops/s
[info]                  ·gc.alloc.rate:            470.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2308.974 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 462024.741 ops/s
[info]                  ·gc.alloc.rate:            474.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1145.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   460857.608 ±(99.9%) 6154.657 ops/s [Average]
[info]   (min, avg, max) = (458605.706, 460857.608, 462722.891), stdev = 1598.345
[info]   CI (99.9%): [454702.951, 467012.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.226 ±(99.9%) 6.407 MB/sec [Average]
[info]   (min, avg, max) = (470.833, 473.226, 475.083), stdev = 1.664
[info]   CI (99.9%): [466.818, 479.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.982 ±(99.9%) 709.466 MB/sec [Average]
[info]   (min, avg, max) = (336.383, 470.982, 672.892), stdev = 184.246
[info]   CI (99.9%): [≈ 0, 1180.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1609.668 ±(99.9%) 2441.239 B/op [Average]
[info]   (min, avg, max) = (1144.212, 1609.668, 2308.974), stdev = 633.982
[info]   CI (99.9%): [≈ 0, 4050.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 11.000), stdev = 3.194
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.70% complete, ETA 00:43:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504861.243 ops/s
[info] # Warmup Iteration   2: 553375.619 ops/s
[info] # Warmup Iteration   3: 584683.622 ops/s
[info] Iteration   1: 582036.915 ops/s
[info]                  ·gc.alloc.rate:            455.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1819.331 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 583211.755 ops/s
[info]                  ·gc.alloc.rate:            456.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 907.833 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 604490.454 ops/s
[info]                  ·gc.alloc.rate:                   473.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1753.457 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 606957.412 ops/s
[info]                  ·gc.alloc.rate:            475.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 872.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 604234.696 ops/s
[info]                  ·gc.alloc.rate:            473.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 876.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   596186.246 ±(99.9%) 47874.222 ops/s [Average]
[info]   (min, avg, max) = (582036.915, 596186.246, 606957.412), stdev = 12432.783
[info]   CI (99.9%): [548312.024, 644060.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   466.633 ±(99.9%) 37.595 MB/sec [Average]
[info]   (min, avg, max) = (455.514, 466.633, 475.056), stdev = 9.763
[info]   CI (99.9%): [429.038, 504.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.028 ±(99.9%) 709.942 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 471.028, 673.318), stdev = 184.370
[info]   CI (99.9%): [≈ 0, 1180.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1245.827 ±(99.9%) 1903.026 B/op [Average]
[info]   (min, avg, max) = (872.288, 1245.827, 1819.331), stdev = 494.210
[info]   CI (99.9%): [≈ 0, 3148.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.347 ±(99.9%) 2.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.347, 1.734), stdev = 0.776
[info]   CI (99.9%): [≈ 0, 3.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.97% complete, ETA 00:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 580046.520 ops/s
[info] # Warmup Iteration   2: 640397.782 ops/s
[info] # Warmup Iteration   3: 641733.651 ops/s
[info] Iteration   1: 641899.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 641503.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641577.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 641684.434 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 641750.065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   641682.869 ±(99.9%) 592.106 ops/s [Average]
[info]   (min, avg, max) = (641503.518, 641682.869, 641899.066), stdev = 153.768
[info]   CI (99.9%): [641090.763, 642274.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.24% complete, ETA 00:42:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18904.923 ops/s
[info] # Warmup Iteration   2: 26638.962 ops/s
[info] # Warmup Iteration   3: 27122.042 ops/s
[info] Iteration   1: 26032.502 ops/s
[info]                  ·gc.alloc.rate:            1334.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81353.646 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 26546.731 ops/s
[info]                  ·gc.alloc.rate:                                  1361.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80695.176 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80486.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                236.957 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27412.963 ops/s
[info]                  ·gc.alloc.rate:                                  1405.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78170.886 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27504.574 ops/s
[info]                  ·gc.alloc.rate:                                  1410.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77912.296 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 27184.829 ops/s
[info]                  ·gc.alloc.rate:                                  1393.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78826.383 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26936.320 ±(99.9%) 2420.494 ops/s [Average]
[info]   (min, avg, max) = (26032.502, 26936.320, 27504.574), stdev = 628.595
[info]   CI (99.9%): [24515.826, 29356.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1381.114 ±(99.9%) 124.157 MB/sec [Average]
[info]   (min, avg, max) = (1334.727, 1381.114, 1410.338), stdev = 32.243
[info]   CI (99.9%): [1256.957, 1505.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.648 ±(99.9%) 27.231 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80692.648, 80704.017), stdev = 7.072
[info]   CI (99.9%): [80665.417, 80719.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.142), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.820 ±(99.9%) 14.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.820, 8.445), stdev = 3.706
[info]   CI (99.9%): [≈ 0, 16.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.654 ±(99.9%) 27.046 MB/sec [Average]
[info]   (min, avg, max) = (1345.471, 1357.654, 1361.837), stdev = 7.024
[info]   CI (99.9%): [1330.608, 1384.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79349.948 ±(99.9%) 5788.076 B/op [Average]
[info]   (min, avg, max) = (77912.296, 79349.948, 81353.646), stdev = 1503.145
[info]   CI (99.9%): [73561.872, 85138.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   47.391 ±(99.9%) 408.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.391, 236.957), stdev = 105.971
[info]   CI (99.9%): [≈ 0, 455.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.639
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.51% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4339.729 ops/s
[info] # Warmup Iteration   2: 6576.009 ops/s
[info] # Warmup Iteration   3: 6618.858 ops/s
[info] Iteration   1: 6618.039 ops/s
[info]                  ·gc.alloc.rate:                   1018.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240602.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 6575.919 ops/s
[info]                  ·gc.alloc.rate:                   1012.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              242272.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242138.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 159.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6595.057 ops/s
[info]                  ·gc.alloc.rate:                                  1015.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       242235.838 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                794.737 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6391.050 ops/s
[info]                  ·gc.alloc.rate:                                  983.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       251441.734 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 6398.009 ops/s
[info]                  ·gc.alloc.rate:                                  984.931 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242272.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167444.480 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6515.615 ±(99.9%) 429.592 ops/s [Average]
[info]   (min, avg, max) = (6391.050, 6515.615, 6618.039), stdev = 111.564
[info]   CI (99.9%): [6086.023, 6945.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1002.973 ±(99.9%) 65.700 MB/sec [Average]
[info]   (min, avg, max) = (983.968, 1002.973, 1018.562), stdev = 17.062
[info]   CI (99.9%): [937.274, 1068.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242272.066 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (242272.062, 242272.066, 242272.069), stdev = 0.003
[info]   CI (99.9%): [242272.052, 242272.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.511 ±(99.9%) 17.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.511, 10.246), stdev = 4.596
[info]   CI (99.9%): [≈ 0, 21.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   948.035 ±(99.9%) 575.597 MB/sec [Average]
[info]   (min, avg, max) = (680.728, 948.035, 1021.209), stdev = 149.481
[info]   CI (99.9%): [372.438, 1523.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   228772.559 ±(99.9%) 133040.645 B/op [Average]
[info]   (min, avg, max) = (167444.480, 228772.559, 251441.734), stdev = 34550.233
[info]   CI (99.9%): [95731.914, 361813.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   222.508 ±(99.9%) 1269.192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 222.508, 794.737), stdev = 329.605
[info]   CI (99.9%): [≈ 0, 1491.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 3.899
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Run progress: 46.77% complete, ETA 00:42:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2639.368 ops/s
[info] # Warmup Iteration   2: 6201.922 ops/s
[info] # Warmup Iteration   3: 6413.193 ops/s
[info] Iteration   1: 6419.997 ops/s
[info]                  ·gc.alloc.rate:            925.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247405.800 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6335.147 ops/s
[info]                  ·gc.alloc.rate:            913.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250724.848 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 6266.321 ops/s
[info]                  ·gc.alloc.rate:            903.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 168963.267 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 6342.991 ops/s
[info]                  ·gc.alloc.rate:                                  914.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.528 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       252392.111 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                991.718 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 6519.912 ops/s
[info]                  ·gc.alloc.rate:                                  940.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.626 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       246506.212 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6376.874 ±(99.9%) 372.492 ops/s [Average]
[info]   (min, avg, max) = (6266.321, 6376.874, 6519.912), stdev = 96.735
[info]   CI (99.9%): [6004.382, 6749.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   919.171 ±(99.9%) 53.982 MB/sec [Average]
[info]   (min, avg, max) = (903.169, 919.171, 940.002), stdev = 14.019
[info]   CI (99.9%): [865.189, 973.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.066 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (226864.063, 226864.066, 226864.069), stdev = 0.003
[info]   CI (99.9%): [226864.054, 226864.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.831 ±(99.9%) 25.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.831, 15.528), stdev = 6.725
[info]   CI (99.9%): [≈ 0, 29.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.887 ±(99.9%) 588.489 MB/sec [Average]
[info]   (min, avg, max) = (672.660, 945.887, 1021.388), stdev = 152.829
[info]   CI (99.9%): [357.398, 1534.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   233198.448 ±(99.9%) 138578.722 B/op [Average]
[info]   (min, avg, max) = (168963.267, 233198.448, 252392.111), stdev = 35988.454
[info]   CI (99.9%): [94619.726, 371777.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   198.344 ±(99.9%) 1707.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.344, 991.718), stdev = 443.510
[info]   CI (99.9%): [≈ 0, 1906.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 4.037
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 47.04% complete, ETA 00:42:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88519.362 ops/s
[info] # Warmup Iteration   2: 97442.882 ops/s
[info] # Warmup Iteration   3: 98219.125 ops/s
[info] Iteration   1: 95820.628 ops/s
[info]                  ·gc.alloc.rate:            928.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11094.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 98294.517 ops/s
[info]                  ·gc.alloc.rate:            952.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16222.515 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 98026.223 ops/s
[info]                  ·gc.alloc.rate:                   949.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16267.190 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 98018.829 ops/s
[info]                  ·gc.alloc.rate:                                  949.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.381 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16396.869 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 94809.454 ops/s
[info]                  ·gc.alloc.rate:                                  918.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16951.218 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   96993.930 ±(99.9%) 6075.039 ops/s [Average]
[info]   (min, avg, max) = (94809.454, 96993.930, 98294.517), stdev = 1577.668
[info]   CI (99.9%): [90918.891, 103068.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   939.690 ±(99.9%) 58.947 MB/sec [Average]
[info]   (min, avg, max) = (918.590, 939.690, 952.344), stdev = 15.308
[info]   CI (99.9%): [880.743, 998.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.084 ±(99.9%) 0.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.381), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.821 ±(99.9%) 588.942 MB/sec [Average]
[info]   (min, avg, max) = (675.320, 948.821, 1021.396), stdev = 152.946
[info]   CI (99.9%): [359.879, 1537.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15386.396 ±(99.9%) 9307.025 B/op [Average]
[info]   (min, avg, max) = (11094.190, 15386.396, 16951.218), stdev = 2417.005
[info]   CI (99.9%): [6079.372, 24693.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.556 ±(99.9%) 73.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.556, 42.780), stdev = 19.132
[info]   CI (99.9%): [≈ 0, 82.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.31% complete, ETA 00:41:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2920.997 ops/s
[info] # Warmup Iteration   2: 6096.257 ops/s
[info] # Warmup Iteration   3: 6120.875 ops/s
[info] Iteration   1: 6276.564 ops/s
[info]                  ·gc.alloc.rate:            1141.346 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253041.198 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 6230.540 ops/s
[info]                  ·gc.alloc.rate:                   1133.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              286280.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        339878.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1009.540 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 6307.657 ops/s
[info]                  ·gc.alloc.rate:                                  1147.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254789.508 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6318.173 ops/s
[info]                  ·gc.alloc.rate:                                  1149.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254346.046 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6316.499 ops/s
[info]                  ·gc.alloc.rate:                                  1149.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       339235.414 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6289.887 ±(99.9%) 143.092 ops/s [Average]
[info]   (min, avg, max) = (6230.540, 6289.887, 6318.173), stdev = 37.161
[info]   CI (99.9%): [6146.794, 6432.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1144.034 ±(99.9%) 26.423 MB/sec [Average]
[info]   (min, avg, max) = (1133.160, 1144.034, 1149.085), stdev = 6.862
[info]   CI (99.9%): [1117.611, 1170.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.066 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (286280.065, 286280.066, 286280.071), stdev = 0.003
[info]   CI (99.9%): [286280.056, 286280.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.989 ±(99.9%) 38.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.989, 22.690), stdev = 9.912
[info]   CI (99.9%): [≈ 0, 43.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.592 ±(99.9%) 710.263 MB/sec [Average]
[info]   (min, avg, max) = (1008.829, 1151.592, 1361.640), stdev = 184.453
[info]   CI (99.9%): [441.329, 1861.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   288258.156 ±(99.9%) 180341.818 B/op [Average]
[info]   (min, avg, max) = (253041.198, 288258.156, 339878.614), stdev = 46834.197
[info]   CI (99.9%): [107916.338, 468599.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   201.908 ±(99.9%) 1738.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 201.908, 1009.540), stdev = 451.480
[info]   CI (99.9%): [≈ 0, 1940.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.542
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.58% complete, ETA 00:41:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13476.090 ops/s
[info] # Warmup Iteration   2: 17686.338 ops/s
[info] # Warmup Iteration   3: 18297.560 ops/s
[info] Iteration   1: 18140.350 ops/s
[info]                  ·gc.alloc.rate:            822.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       71389.806 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87728.085 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 17882.134 ops/s
[info]                  ·gc.alloc.rate:            811.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59332.341 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18172.379 ops/s
[info]                  ·gc.alloc.rate:            824.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87573.634 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 17853.527 ops/s
[info]                  ·gc.alloc.rate:                   810.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              71413.651 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        59428.703 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 293.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18372.991 ops/s
[info]                  ·gc.alloc.rate:                                  833.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71408.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58317.625 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18084.276 ±(99.9%) 835.619 ops/s [Average]
[info]   (min, avg, max) = (17853.527, 18084.276, 18372.991), stdev = 217.008
[info]   CI (99.9%): [17248.657, 18919.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   820.578 ±(99.9%) 37.531 MB/sec [Average]
[info]   (min, avg, max) = (810.111, 820.578, 833.616), stdev = 9.747
[info]   CI (99.9%): [783.046, 858.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71415.106 ±(99.9%) 68.478 B/op [Average]
[info]   (min, avg, max) = (71389.806, 71415.106, 71432.028), stdev = 17.783
[info]   CI (99.9%): [71346.628, 71483.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.922 ±(99.9%) 16.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.922, 9.609), stdev = 4.297
[info]   CI (99.9%): [≈ 0, 18.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.256 ±(99.9%) 705.919 MB/sec [Average]
[info]   (min, avg, max) = (674.155, 810.256, 1011.063), stdev = 183.325
[info]   CI (99.9%): [104.337, 1516.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70476.077 ±(99.9%) 60395.405 B/op [Average]
[info]   (min, avg, max) = (58317.625, 70476.077, 87728.085), stdev = 15684.495
[info]   CI (99.9%): [10080.672, 130871.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   58.724 ±(99.9%) 505.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.724, 293.620), stdev = 131.311
[info]   CI (99.9%): [≈ 0, 564.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 10.000), stdev = 3.271
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 47.85% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11919.500 ops/s
[info] # Warmup Iteration   2: 19947.835 ops/s
[info] # Warmup Iteration   3: 20114.390 ops/s
[info] Iteration   1: 20069.450 ops/s
[info]                  ·gc.alloc.rate:                   850.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        79080.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 19951.061 ops/s
[info]                  ·gc.alloc.rate:                   845.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53019.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 19175.771 ops/s
[info]                  ·gc.alloc.rate:            812.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82825.477 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 19878.136 ops/s
[info]                  ·gc.alloc.rate:                                  842.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53586.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                316.456 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 20257.395 ops/s
[info]                  ·gc.alloc.rate:                                  858.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79337.990 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   19866.363 ±(99.9%) 1585.769 ops/s [Average]
[info]   (min, avg, max) = (19175.771, 19866.363, 20257.395), stdev = 411.819
[info]   CI (99.9%): [18280.594, 21452.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   841.832 ±(99.9%) 67.383 MB/sec [Average]
[info]   (min, avg, max) = (812.479, 841.832, 858.339), stdev = 17.499
[info]   CI (99.9%): [774.449, 909.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.022, 66696.028), stdev = 0.004
[info]   CI (99.9%): [66696.008, 66696.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.177 ±(99.9%) 12.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.177, 7.275), stdev = 3.251
[info]   CI (99.9%): [≈ 0, 14.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.477 ±(99.9%) 714.153 MB/sec [Average]
[info]   (min, avg, max) = (672.082, 877.477, 1021.034), stdev = 185.463
[info]   CI (99.9%): [163.324, 1591.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   69570.114 ±(99.9%) 57468.524 B/op [Average]
[info]   (min, avg, max) = (53019.954, 69570.114, 82825.477), stdev = 14924.393
[info]   CI (99.9%): [12101.591, 127038.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   84.247 ±(99.9%) 509.922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84.247, 316.456), stdev = 132.425
[info]   CI (99.9%): [≈ 0, 594.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 48.12% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522791.665 ops/s
[info] # Warmup Iteration   2: 596052.293 ops/s
[info] # Warmup Iteration   3: 602268.979 ops/s
[info] Iteration   1: 610812.742 ops/s
[info]                  ·gc.alloc.rate:                   1384.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3468.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.716 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 600132.765 ops/s
[info]                  ·gc.alloc.rate:                                  1360.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3562.093 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.735 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 596122.961 ops/s
[info]                  ·gc.alloc.rate:                                  1351.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3594.893 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 608558.328 ops/s
[info]                  ·gc.alloc.rate:                                  1379.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3521.440 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 602619.970 ops/s
[info]                  ·gc.alloc.rate:                                  1366.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3556.205 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   603649.353 ±(99.9%) 23222.669 ops/s [Average]
[info]   (min, avg, max) = (596122.961, 603649.353, 610812.742), stdev = 6030.853
[info]   CI (99.9%): [580426.684, 626872.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1368.343 ±(99.9%) 52.740 MB/sec [Average]
[info]   (min, avg, max) = (1351.430, 1368.343, 1384.659), stdev = 13.696
[info]   CI (99.9%): [1315.603, 1421.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.349), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.724 ±(99.9%) 25.659 MB/sec [Average]
[info]   (min, avg, max) = (1346.150, 1357.724, 1361.616), stdev = 6.664
[info]   CI (99.9%): [1332.065, 1383.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3540.680 ±(99.9%) 184.467 B/op [Average]
[info]   (min, avg, max) = (3468.770, 3540.680, 3594.893), stdev = 47.906
[info]   CI (99.9%): [3356.213, 3725.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.090 ±(99.9%) 14.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.090, 8.735), stdev = 3.788
[info]   CI (99.9%): [≈ 0, 16.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.39% complete, ETA 00:41:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 377514.100 ops/s
[info] # Warmup Iteration   2: 408497.122 ops/s
[info] # Warmup Iteration   3: 409812.318 ops/s
[info] Iteration   1: 410794.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 407084.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 408132.367 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 409951.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 409564.199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   409105.530 ±(99.9%) 5714.847 ops/s [Average]
[info]   (min, avg, max) = (407084.631, 409105.530, 410794.521), stdev = 1484.128
[info]   CI (99.9%): [403390.683, 414820.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.66% complete, ETA 00:40:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13438.724 ops/s
[info] # Warmup Iteration   2: 18609.208 ops/s
[info] # Warmup Iteration   3: 18598.257 ops/s
[info] Iteration   1: 18665.947 ops/s
[info]                  ·gc.alloc.rate:            885.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       74614.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56728.360 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 18572.343 ops/s
[info]                  ·gc.alloc.rate:            880.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85523.157 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 18550.174 ops/s
[info]                  ·gc.alloc.rate:            879.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85624.570 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 18779.267 ops/s
[info]                  ·gc.alloc.rate:                                  890.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74610.609 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.903 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56719.013 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                334.955 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 18825.487 ops/s
[info]                  ·gc.alloc.rate:                                  892.351 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74608.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85371.874 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18678.644 ±(99.9%) 470.241 ops/s [Average]
[info]   (min, avg, max) = (18550.174, 18678.644, 18825.487), stdev = 122.120
[info]   CI (99.9%): [18208.403, 19148.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   885.480 ±(99.9%) 21.943 MB/sec [Average]
[info]   (min, avg, max) = (879.511, 885.480, 892.351), stdev = 5.699
[info]   CI (99.9%): [863.537, 907.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74616.306 ±(99.9%) 28.713 B/op [Average]
[info]   (min, avg, max) = (74608.022, 74616.306, 74624.028), stdev = 7.457
[info]   CI (99.9%): [74587.593, 74645.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.106), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.487 ±(99.9%) 18.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.487, 8.903), stdev = 4.776
[info]   CI (99.9%): [≈ 0, 21.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   877.756 ±(99.9%) 713.826 MB/sec [Average]
[info]   (min, avg, max) = (672.877, 877.756, 1021.092), stdev = 185.378
[info]   CI (99.9%): [163.930, 1591.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73993.395 ±(99.9%) 60706.446 B/op [Average]
[info]   (min, avg, max) = (56719.013, 73993.395, 85624.570), stdev = 15765.271
[info]   CI (99.9%): [13286.949, 134699.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   66.991 ±(99.9%) 576.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.991, 334.955), stdev = 149.796
[info]   CI (99.9%): [≈ 0, 643.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.266
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.92% complete, ETA 00:40:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7740.117 ops/s
[info] # Warmup Iteration   2: 11086.226 ops/s
[info] # Warmup Iteration   3: 10972.120 ops/s
[info] Iteration   1: 10855.358 ops/s
[info]                  ·gc.alloc.rate:            1090.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       158056.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 195461.211 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 11055.715 ops/s
[info]                  ·gc.alloc.rate:            1110.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       158056.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143944.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 11086.558 ops/s
[info]                  ·gc.alloc.rate:                                  1113.214 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158059.982 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.599 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       144487.702 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                472.800 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 10851.331 ops/s
[info]                  ·gc.alloc.rate:                                  1090.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.690 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       197301.790 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11073.644 ops/s
[info]                  ·gc.alloc.rate:                                  1112.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158088.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       145130.644 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   10984.521 ±(99.9%) 463.062 ops/s [Average]
[info]   (min, avg, max) = (10851.331, 10984.521, 11086.558), stdev = 120.256
[info]   CI (99.9%): [10521.459, 11447.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1103.336 ±(99.9%) 45.486 MB/sec [Average]
[info]   (min, avg, max) = (1090.214, 1103.336, 1113.214), stdev = 11.812
[info]   CI (99.9%): [1057.850, 1148.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158069.628 ±(99.9%) 65.012 B/op [Average]
[info]   (min, avg, max) = (158056.040, 158069.628, 158088.040), stdev = 16.884
[info]   CI (99.9%): [158004.615, 158134.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.054), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.041 ±(99.9%) 12.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.041, 7.599), stdev = 3.186
[info]   CI (99.9%): [≈ 0, 14.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1151.869 ±(99.9%) 713.408 MB/sec [Average]
[info]   (min, avg, max) = (1011.199, 1151.869, 1361.224), stdev = 185.270
[info]   CI (99.9%): [438.461, 1865.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   165265.171 ±(99.9%) 109418.926 B/op [Average]
[info]   (min, avg, max) = (143944.508, 165265.171, 197301.790), stdev = 28415.748
[info]   CI (99.9%): [55846.245, 274684.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   94.560 ±(99.9%) 814.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.560, 472.800), stdev = 211.443
[info]   CI (99.9%): [≈ 0, 908.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.506
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.19% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5854.730 ops/s
[info] # Warmup Iteration   2: 11026.914 ops/s
[info] # Warmup Iteration   3: 11111.665 ops/s
[info] Iteration   1: 10944.767 ops/s
[info]                  ·gc.alloc.rate:            1002.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145103.456 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 11037.855 ops/s
[info]                  ·gc.alloc.rate:            1010.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143894.261 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 11049.902 ops/s
[info]                  ·gc.alloc.rate:                                  1011.321 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144056.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.481 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       144307.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                569.260 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 10977.179 ops/s
[info]                  ·gc.alloc.rate:                                  1005.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144089.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       146412.880 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10739.647 ops/s
[info]                  ·gc.alloc.rate:            983.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149643.177 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   10949.870 ±(99.9%) 482.152 ops/s [Average]
[info]   (min, avg, max) = (10739.647, 10949.870, 11049.902), stdev = 125.213
[info]   CI (99.9%): [10467.718, 11432.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1002.418 ±(99.9%) 43.706 MB/sec [Average]
[info]   (min, avg, max) = (983.283, 1002.418, 1011.321), stdev = 11.350
[info]   CI (99.9%): [958.712, 1046.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144069.033 ±(99.9%) 68.529 B/op [Average]
[info]   (min, avg, max) = (144056.037, 144069.033, 144089.011), stdev = 17.797
[info]   CI (99.9%): [144000.503, 144137.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.031 ±(99.9%) 17.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.031, 10.481), stdev = 4.631
[info]   CI (99.9%): [≈ 0, 20.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.825 ±(99.9%) 23.447 MB/sec [Average]
[info]   (min, avg, max) = (1009.181, 1014.825, 1021.349), stdev = 6.089
[info]   CI (99.9%): [991.378, 1038.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   145872.212 ±(99.9%) 8920.035 B/op [Average]
[info]   (min, avg, max) = (143894.261, 145872.212, 149643.177), stdev = 2316.505
[info]   CI (99.9%): [136952.177, 154792.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   113.852 ±(99.9%) 980.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.852, 569.260), stdev = 254.581
[info]   CI (99.9%): [≈ 0, 1094.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.46% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161093.094 ops/s
[info] # Warmup Iteration   2: 172889.167 ops/s
[info] # Warmup Iteration   3: 172298.887 ops/s
[info] Iteration   1: 174749.277 ops/s
[info]                  ·gc.alloc.rate:            1010.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9107.149 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 172964.846 ops/s
[info]                  ·gc.alloc.rate:            1000.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9201.066 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 173770.101 ops/s
[info]                  ·gc.alloc.rate:                                  1005.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.324 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9188.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                30.165 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 175322.265 ops/s
[info]                  ·gc.alloc.rate:                                  1014.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9167.035 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 174942.237 ops/s
[info]                  ·gc.alloc.rate:                                  1012.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9187.048 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   174349.745 ±(99.9%) 3708.634 ops/s [Average]
[info]   (min, avg, max) = (172964.846, 174349.745, 175322.265), stdev = 963.120
[info]   CI (99.9%): [170641.112, 178058.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1008.513 ±(99.9%) 20.989 MB/sec [Average]
[info]   (min, avg, max) = (1000.792, 1008.513, 1014.004), stdev = 5.451
[info]   CI (99.9%): [987.524, 1029.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.124 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.324), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.827 ±(99.9%) 19.516 MB/sec [Average]
[info]   (min, avg, max) = (1010.923, 1015.827, 1021.352), stdev = 5.068
[info]   CI (99.9%): [996.311, 1035.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9170.108 ±(99.9%) 143.402 B/op [Average]
[info]   (min, avg, max) = (9107.149, 9170.108, 9201.066), stdev = 37.241
[info]   CI (99.9%): [9026.706, 9313.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.033 ±(99.9%) 51.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.033, 30.165), stdev = 13.490
[info]   CI (99.9%): [≈ 0, 57.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Run progress: 49.73% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3967.099 ops/s
[info] # Warmup Iteration   2: 9551.416 ops/s
[info] # Warmup Iteration   3: 10033.072 ops/s
[info] Iteration   1: 9865.438 ops/s
[info]                  ·gc.alloc.rate:            1266.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       202112.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160894.301 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 9670.565 ops/s
[info]                  ·gc.alloc.rate:                   1241.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              202112.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        219429.055 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 758.895 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 10150.458 ops/s
[info]                  ·gc.alloc.rate:                                  1303.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             202112.040 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.333 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       211099.118 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10030.763 ops/s
[info]                  ·gc.alloc.rate:                                  1287.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             202112.291 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213623.975 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 9748.742 ops/s
[info]                  ·gc.alloc.rate:            1252.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       202112.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164834.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   9893.193 ±(99.9%) 761.197 ops/s [Average]
[info]   (min, avg, max) = (9670.565, 9893.193, 10150.458), stdev = 197.680
[info]   CI (99.9%): [9131.996, 10654.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1270.454 ±(99.9%) 98.372 MB/sec [Average]
[info]   (min, avg, max) = (1241.663, 1270.454, 1303.974), stdev = 25.547
[info]   CI (99.9%): [1172.083, 1368.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202112.092 ±(99.9%) 0.429 B/op [Average]
[info]   (min, avg, max) = (202112.040, 202112.092, 202112.291), stdev = 0.111
[info]   CI (99.9%): [202111.663, 202112.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.178 ±(99.9%) 8.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.178, 5.333), stdev = 2.335
[info]   CI (99.9%): [≈ 0, 10.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.153 ±(99.9%) 722.666 MB/sec [Average]
[info]   (min, avg, max) = (1008.255, 1220.153, 1361.957), stdev = 187.674
[info]   CI (99.9%): [497.487, 1942.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   193976.210 ±(99.9%) 110109.603 B/op [Average]
[info]   (min, avg, max) = (160894.301, 193976.210, 219429.055), stdev = 28595.114
[info]   CI (99.9%): [83866.607, 304085.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   151.779 ±(99.9%) 1306.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.779, 758.895), stdev = 339.388
[info]   CI (99.9%): [≈ 0, 1458.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 15.000), stdev = 6.181
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:39:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21051.802 ops/s
[info] # Warmup Iteration   2: 27988.915 ops/s
[info] # Warmup Iteration   3: 28247.576 ops/s
[info] Iteration   1: 28214.836 ops/s
[info]                  ·gc.alloc.rate:            974.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       54336.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37603.080 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27581.612 ops/s
[info]                  ·gc.alloc.rate:            951.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       54314.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57700.949 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 28144.456 ops/s
[info]                  ·gc.alloc.rate:                   971.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56507.630 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 223.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 28260.246 ops/s
[info]                  ·gc.alloc.rate:                                  975.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56871.290 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28220.557 ops/s
[info]                  ·gc.alloc.rate:                                  973.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56951.887 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28084.341 ±(99.9%) 1094.011 ops/s [Average]
[info]   (min, avg, max) = (27581.612, 28084.341, 28260.246), stdev = 284.111
[info]   CI (99.9%): [26990.330, 29178.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   969.188 ±(99.9%) 37.752 MB/sec [Average]
[info]   (min, avg, max) = (951.858, 969.188, 975.120), stdev = 9.804
[info]   CI (99.9%): [931.437, 1006.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54317.221 ±(99.9%) 40.604 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54317.221, 54336.018), stdev = 10.545
[info]   CI (99.9%): [54276.617, 54357.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.170 ±(99.9%) 1.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.170, 0.649), stdev = 0.281
[info]   CI (99.9%): [≈ 0, 1.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.568 ±(99.9%) 588.877 MB/sec [Average]
[info]   (min, avg, max) = (674.155, 947.568, 1021.082), stdev = 152.930
[info]   CI (99.9%): [358.691, 1536.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53126.967 ±(99.9%) 33458.043 B/op [Average]
[info]   (min, avg, max) = (37603.080, 53126.967, 57700.949), stdev = 8688.947
[info]   CI (99.9%): [19668.924, 86585.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.700 ±(99.9%) 384.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.700, 223.498), stdev = 99.951
[info]   CI (99.9%): [≈ 0, 429.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Run progress: 50.27% complete, ETA 00:39:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52248.434 ops/s
[info] # Warmup Iteration   2: 85057.434 ops/s
[info] # Warmup Iteration   3: 85269.141 ops/s
[info] Iteration   1: 85219.402 ops/s
[info]                  ·gc.alloc.rate:            1356.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24850.105 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 82848.008 ops/s
[info]                  ·gc.alloc.rate:                                  1318.856 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.726 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25789.531 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                75.926 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 83407.435 ops/s
[info]                  ·gc.alloc.rate:                                  1328.287 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25692.444 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 86390.474 ops/s
[info]                  ·gc.alloc.rate:                                  1375.743 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24805.728 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 86380.288 ops/s
[info]                  ·gc.alloc.rate:                                  1375.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.603 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24806.590 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   84849.121 ±(99.9%) 6368.207 ops/s [Average]
[info]   (min, avg, max) = (82848.008, 84849.121, 86390.474), stdev = 1653.803
[info]   CI (99.9%): [78480.915, 91217.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1350.921 ±(99.9%) 101.530 MB/sec [Average]
[info]   (min, avg, max) = (1318.856, 1350.921, 1375.743), stdev = 26.367
[info]   CI (99.9%): [1249.391, 1452.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.756 ±(99.9%) 6.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.726), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.675 ±(99.9%) 27.686 MB/sec [Average]
[info]   (min, avg, max) = (1345.279, 1357.675, 1362.026), stdev = 7.190
[info]   CI (99.9%): [1329.990, 1385.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25188.879 ±(99.9%) 1946.459 B/op [Average]
[info]   (min, avg, max) = (24805.728, 25188.879, 25789.531), stdev = 505.489
[info]   CI (99.9%): [23242.420, 27135.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.185 ±(99.9%) 130.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.185, 75.926), stdev = 33.955
[info]   CI (99.9%): [≈ 0, 145.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.54% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 828436.850 ops/s
[info] # Warmup Iteration   2: 936807.981 ops/s
[info] # Warmup Iteration   3: 942765.259 ops/s
[info] Iteration   1: 945142.342 ops/s
[info]                  ·gc.alloc.rate:            1296.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1681.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 934731.419 ops/s
[info]                  ·gc.alloc.rate:                                  1282.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2279.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.730 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 922575.941 ops/s
[info]                  ·gc.alloc.rate:                                  1266.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2322.898 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 932917.953 ops/s
[info]                  ·gc.alloc.rate:            1280.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2297.044 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 940711.327 ops/s
[info]                  ·gc.alloc.rate:            1291.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2278.013 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   935215.796 ±(99.9%) 33013.395 ops/s [Average]
[info]   (min, avg, max) = (922575.941, 935215.796, 945142.342), stdev = 8573.474
[info]   CI (99.9%): [902202.401, 968229.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1283.554 ±(99.9%) 44.773 MB/sec [Average]
[info]   (min, avg, max) = (1266.319, 1283.554, 1296.926), stdev = 11.628
[info]   CI (99.9%): [1238.781, 1328.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.151), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.716 ±(99.9%) 602.988 MB/sec [Average]
[info]   (min, avg, max) = (1009.667, 1289.716, 1362.026), stdev = 156.594
[info]   CI (99.9%): [686.728, 1892.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2171.741 ±(99.9%) 1057.431 B/op [Average]
[info]   (min, avg, max) = (1681.576, 2171.741, 2322.898), stdev = 274.612
[info]   CI (99.9%): [1114.310, 3229.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.346 ±(99.9%) 11.589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.346, 6.730), stdev = 3.010
[info]   CI (99.9%): [≈ 0, 12.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.899
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.81% complete, ETA 00:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 995570.105 ops/s
[info] # Warmup Iteration   2: 1085508.615 ops/s
[info] # Warmup Iteration   3: 1065010.132 ops/s
[info] Iteration   1: 1092221.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1094303.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1092685.822 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1096376.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1083550.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1091827.564 ±(99.9%) 18885.568 ops/s [Average]
[info]   (min, avg, max) = (1083550.827, 1091827.564, 1096376.118), stdev = 4904.522
[info]   CI (99.9%): [1072941.996, 1110713.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Run progress: 51.08% complete, ETA 00:38:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36862.438 ops/s
[info] # Warmup Iteration   2: 68681.456 ops/s
[info] # Warmup Iteration   3: 68185.929 ops/s
[info] Iteration   1: 66488.404 ops/s
[info]                  ·gc.alloc.rate:                   1433.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              33944.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        31820.424 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 110.378 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 66869.748 ops/s
[info]                  ·gc.alloc.rate:                                  1442.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32045.353 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 69706.294 ops/s
[info]                  ·gc.alloc.rate:                                  1503.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38428.384 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 69811.130 ops/s
[info]                  ·gc.alloc.rate:                                  1505.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33944.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30696.916 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 67442.304 ops/s
[info]                  ·gc.alloc.rate:            1454.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       33944.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31773.146 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   68063.576 ±(99.9%) 6102.037 ops/s [Average]
[info]   (min, avg, max) = (66488.404, 68063.576, 69811.130), stdev = 1584.680
[info]   CI (99.9%): [61961.539, 74165.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1468.001 ±(99.9%) 131.870 MB/sec [Average]
[info]   (min, avg, max) = (1433.761, 1468.001, 1505.951), stdev = 34.246
[info]   CI (99.9%): [1336.132, 1599.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33944.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33944.006, 33944.006, 33944.007), stdev = 0.001
[info]   CI (99.9%): [33944.005, 33944.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.229 ±(99.9%) 1.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.007), stdev = 0.437
[info]   CI (99.9%): [≈ 0, 1.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1426.227 ±(99.9%) 594.039 MB/sec [Average]
[info]   (min, avg, max) = (1344.063, 1426.227, 1701.854), stdev = 154.270
[info]   CI (99.9%): [832.188, 2020.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   32952.845 ±(99.9%) 11956.910 B/op [Average]
[info]   (min, avg, max) = (30696.916, 32952.845, 38428.384), stdev = 3105.171
[info]   CI (99.9%): [20995.935, 44909.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.076 ±(99.9%) 190.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.076, 110.378), stdev = 49.363
[info]   CI (99.9%): [≈ 0, 212.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.301
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.34% complete, ETA 00:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11110.626 ops/s
[info] # Warmup Iteration   2: 25748.325 ops/s
[info] # Warmup Iteration   3: 25982.835 ops/s
[info] Iteration   1: 25937.482 ops/s
[info]                  ·gc.alloc.rate:            934.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       56728.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61355.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 25776.184 ops/s
[info]                  ·gc.alloc.rate:            928.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       56728.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61740.754 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 25832.995 ops/s
[info]                  ·gc.alloc.rate:            930.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       56728.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61604.550 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 25595.330 ops/s
[info]                  ·gc.alloc.rate:                                  922.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.308 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41656.320 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                204.800 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 25908.054 ops/s
[info]                  ·gc.alloc.rate:                                  933.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56728.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.396 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62033.227 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   25810.009 ±(99.9%) 522.404 ops/s [Average]
[info]   (min, avg, max) = (25595.330, 25810.009, 25937.482), stdev = 135.667
[info]   CI (99.9%): [25287.605, 26332.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   930.181 ±(99.9%) 18.917 MB/sec [Average]
[info]   (min, avg, max) = (922.476, 930.181, 934.800), stdev = 4.913
[info]   CI (99.9%): [911.264, 949.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56728.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (56728.016, 56728.017, 56728.021), stdev = 0.002
[info]   CI (99.9%): [56728.008, 56728.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.341 ±(99.9%) 10.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.341, 6.396), stdev = 2.829
[info]   CI (99.9%): [≈ 0, 12.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   946.301 ±(99.9%) 579.101 MB/sec [Average]
[info]   (min, avg, max) = (677.390, 946.301, 1021.169), stdev = 150.391
[info]   CI (99.9%): [367.200, 1525.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   57678.013 ±(99.9%) 34500.776 B/op [Average]
[info]   (min, avg, max) = (41656.320, 57678.013, 62033.227), stdev = 8959.742
[info]   CI (99.9%): [23177.237, 92178.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.960 ±(99.9%) 352.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.960, 204.800), stdev = 91.589
[info]   CI (99.9%): [≈ 0, 393.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.61% complete, ETA 00:38:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7142.901 ops/s
[info] # Warmup Iteration   2: 21435.767 ops/s
[info] # Warmup Iteration   3: 21912.343 ops/s
[info] Iteration   1: 21929.046 ops/s
[info]                  ·gc.alloc.rate:            601.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24142.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 21960.858 ops/s
[info]                  ·gc.alloc.rate:            602.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48215.878 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 21807.099 ops/s
[info]                  ·gc.alloc.rate:            597.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       43145.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48556.314 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 22781.267 ops/s
[info]                  ·gc.alloc.rate:            624.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46478.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 22371.063 ops/s
[info]                  ·gc.alloc.rate:            613.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       43144.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47332.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   22169.867 ±(99.9%) 1549.340 ops/s [Average]
[info]   (min, avg, max) = (21807.099, 22169.867, 22781.267), stdev = 402.359
[info]   CI (99.9%): [20620.527, 23719.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   607.730 ±(99.9%) 42.265 MB/sec [Average]
[info]   (min, avg, max) = (597.837, 607.730, 624.426), stdev = 10.976
[info]   CI (99.9%): [565.465, 649.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.270 ±(99.9%) 2.165 B/op [Average]
[info]   (min, avg, max) = (43144.018, 43144.270, 43145.276), stdev = 0.562
[info]   CI (99.9%): [43142.106, 43146.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.492 ±(99.9%) 579.339 MB/sec [Average]
[info]   (min, avg, max) = (336.354, 605.492, 672.893), stdev = 150.452
[info]   CI (99.9%): [26.153, 1184.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   42945.038 ±(99.9%) 40594.482 B/op [Average]
[info]   (min, avg, max) = (24142.011, 42945.038, 48556.314), stdev = 10542.258
[info]   CI (99.9%): [2350.555, 83539.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.88% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 147370.878 ops/s
[info] # Warmup Iteration   2: 155570.637 ops/s
[info] # Warmup Iteration   3: 153399.083 ops/s
[info] Iteration   1: 150189.452 ops/s
[info]                  ·gc.alloc.rate:            390.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3539.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 156685.588 ops/s
[info]                  ·gc.alloc.rate:            407.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3392.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 156192.879 ops/s
[info]                  ·gc.alloc.rate:            406.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6806.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 156744.648 ops/s
[info]                  ·gc.alloc.rate:            407.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3391.134 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 156420.480 ops/s
[info]                  ·gc.alloc.rate:            407.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3398.092 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   155246.609 ±(99.9%) 10918.972 ops/s [Average]
[info]   (min, avg, max) = (150189.452, 155246.609, 156744.648), stdev = 2835.622
[info]   CI (99.9%): [144327.637, 166165.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   404.016 ±(99.9%) 28.248 MB/sec [Average]
[info]   (min, avg, max) = (390.930, 404.016, 407.844), stdev = 7.336
[info]   CI (99.9%): [375.769, 432.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4096.003, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   405.260 ±(99.9%) 581.560 MB/sec [Average]
[info]   (min, avg, max) = (337.659, 405.260, 675.430), stdev = 151.029
[info]   CI (99.9%): [≈ 0, 986.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4105.394 ±(99.9%) 5818.538 B/op [Average]
[info]   (min, avg, max) = (3391.134, 4105.394, 6806.102), stdev = 1511.056
[info]   CI (99.9%): [≈ 0, 9923.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.15% complete, ETA 00:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3945.243 ops/s
[info] # Warmup Iteration   2: 19542.028 ops/s
[info] # Warmup Iteration   3: 19972.662 ops/s
[info] Iteration   1: 20263.270 ops/s
[info]                  ·gc.alloc.rate:            1267.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       98464.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104510.955 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 20363.981 ops/s
[info]                  ·gc.alloc.rate:            1274.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       98464.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77994.533 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 20486.076 ops/s
[info]                  ·gc.alloc.rate:                                  1281.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98464.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.864 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104299.765 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                307.065 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 20593.776 ops/s
[info]                  ·gc.alloc.rate:                                  1288.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98464.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       104058.326 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19939.649 ops/s
[info]                  ·gc.alloc.rate:                                  1247.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98464.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107465.370 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   20329.351 ±(99.9%) 966.344 ops/s [Average]
[info]   (min, avg, max) = (19939.649, 20329.351, 20593.776), stdev = 250.956
[info]   CI (99.9%): [19363.007, 21295.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1271.714 ±(99.9%) 60.590 MB/sec [Average]
[info]   (min, avg, max) = (1247.282, 1271.714, 1288.213), stdev = 15.735
[info]   CI (99.9%): [1211.124, 1332.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98464.022 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (98464.020, 98464.022, 98464.027), stdev = 0.003
[info]   CI (99.9%): [98464.011, 98464.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.887 ±(99.9%) 15.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.887, 8.864), stdev = 3.906
[info]   CI (99.9%): [≈ 0, 16.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1286.943 ±(99.9%) 598.429 MB/sec [Average]
[info]   (min, avg, max) = (1009.188, 1286.943, 1361.404), stdev = 155.410
[info]   CI (99.9%): [688.515, 1885.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   99665.790 ±(99.9%) 46952.622 B/op [Average]
[info]   (min, avg, max) = (77994.533, 99665.790, 107465.370), stdev = 12193.447
[info]   CI (99.9%): [52713.168, 146618.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   61.413 ±(99.9%) 528.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.413, 307.065), stdev = 137.324
[info]   CI (99.9%): [≈ 0, 590.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 17.000), stdev = 6.066
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.42% complete, ETA 00:37:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62962.072 ops/s
[info] # Warmup Iteration   2: 80917.506 ops/s
[info] # Warmup Iteration   3: 81688.697 ops/s
[info] Iteration   1: 84091.020 ops/s
[info]                  ·gc.alloc.rate:            1112.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       20832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25234.146 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 80938.576 ops/s
[info]                  ·gc.alloc.rate:            1071.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       20832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19663.229 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 84278.056 ops/s
[info]                  ·gc.alloc.rate:                                  1115.714 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20832.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19007.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                62.198 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 85096.844 ops/s
[info]                  ·gc.alloc.rate:                                  1126.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20832.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25183.171 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 82338.368 ops/s
[info]                  ·gc.alloc.rate:                                  1089.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20832.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19518.991 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   83348.573 ±(99.9%) 6472.123 ops/s [Average]
[info]   (min, avg, max) = (80938.576, 83348.573, 85096.844), stdev = 1680.790
[info]   CI (99.9%): [76876.450, 89820.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1103.215 ±(99.9%) 86.279 MB/sec [Average]
[info]   (min, avg, max) = (1071.142, 1103.215, 1126.679), stdev = 22.406
[info]   CI (99.9%): [1016.936, 1189.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20832.005, 20832.005, 20832.005), stdev = 0.001
[info]   CI (99.9%): [20832.004, 20832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.081), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.364 ±(99.9%) 2.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.515), stdev = 0.656
[info]   CI (99.9%): [≈ 0, 2.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.012 ±(99.9%) 713.824 MB/sec [Average]
[info]   (min, avg, max) = (1011.045, 1152.012, 1362.007), stdev = 185.378
[info]   CI (99.9%): [438.188, 1865.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21721.421 ±(99.9%) 12294.170 B/op [Average]
[info]   (min, avg, max) = (19007.570, 21721.421, 25234.146), stdev = 3192.757
[info]   CI (99.9%): [9427.251, 34015.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   12.440 ±(99.9%) 107.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.440, 62.198), stdev = 27.816
[info]   CI (99.9%): [≈ 0, 119.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 5.762
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.69% complete, ETA 00:37:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89722.146 ops/s
[info] # Warmup Iteration   2: 139435.503 ops/s
[info] # Warmup Iteration   3: 139950.091 ops/s
[info] Iteration   1: 140649.119 ops/s
[info]                  ·gc.alloc.rate:            1190.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11292.483 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 138175.507 ops/s
[info]                  ·gc.alloc.rate:                                  1169.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15371.922 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.524 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 136136.858 ops/s
[info]                  ·gc.alloc.rate:                                  1151.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13320.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11805.981 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 136249.960 ops/s
[info]                  ·gc.alloc.rate:            1152.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15727.678 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 140176.617 ops/s
[info]                  ·gc.alloc.rate:            1186.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       13320.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11465.446 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   138277.612 ±(99.9%) 8153.661 ops/s [Average]
[info]   (min, avg, max) = (136136.858, 138277.612, 140649.119), stdev = 2117.480
[info]   CI (99.9%): [130123.951, 146431.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1170.136 ±(99.9%) 69.322 MB/sec [Average]
[info]   (min, avg, max) = (1151.896, 1170.136, 1190.318), stdev = 18.003
[info]   CI (99.9%): [1100.814, 1239.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13320.003, 13320.003, 13320.003), stdev = 0.001
[info]   CI (99.9%): [13320.003, 13320.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.103), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.409 ±(99.9%) 2.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 1.191), stdev = 0.572
[info]   CI (99.9%): [≈ 0, 2.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.382 ±(99.9%) 713.855 MB/sec [Average]
[info]   (min, avg, max) = (1009.132, 1152.382, 1361.402), stdev = 185.386
[info]   CI (99.9%): [438.527, 1866.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   13132.702 ±(99.9%) 8539.914 B/op [Average]
[info]   (min, avg, max) = (11292.483, 13132.702, 15727.678), stdev = 2217.788
[info]   CI (99.9%): [4592.788, 21672.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.105 ±(99.9%) 78.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.105, 45.524), stdev = 20.359
[info]   CI (99.9%): [≈ 0, 87.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 5.215
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 52.96% complete, ETA 00:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390767.387 ops/s
[info] # Warmup Iteration   2: 445083.474 ops/s
[info] # Warmup Iteration   3: 448326.832 ops/s
[info] Iteration   1: 452457.733 ops/s
[info]                  ·gc.alloc.rate:            501.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1170.123 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 454426.201 ops/s
[info]                  ·gc.alloc.rate:            503.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2330.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 451412.783 ops/s
[info]                  ·gc.alloc.rate:            500.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1172.854 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 444636.094 ops/s
[info]                  ·gc.alloc.rate:            492.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2381.482 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 434345.105 ops/s
[info]                  ·gc.alloc.rate:            481.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       1744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1218.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   447455.583 ±(99.9%) 31583.768 ops/s [Average]
[info]   (min, avg, max) = (434345.105, 447455.583, 454426.201), stdev = 8202.204
[info]   CI (99.9%): [415871.815, 479039.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   495.789 ±(99.9%) 35.169 MB/sec [Average]
[info]   (min, avg, max) = (481.204, 495.789, 503.653), stdev = 9.133
[info]   CI (99.9%): [460.620, 530.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.938 ±(99.9%) 709.696 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 470.938, 672.936), stdev = 184.306
[info]   CI (99.9%): [≈ 0, 1180.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1654.718 ±(99.9%) 2466.631 B/op [Average]
[info]   (min, avg, max) = (1170.123, 1654.718, 2381.482), stdev = 640.576
[info]   CI (99.9%): [≈ 0, 4121.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.23% complete, ETA 00:37:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481396.683 ops/s
[info] # Warmup Iteration   2: 511630.931 ops/s
[info] # Warmup Iteration   3: 530901.948 ops/s
[info] Iteration   1: 532135.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 531176.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 509999.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 522218.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 530191.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   525144.285 ±(99.9%) 35950.390 ops/s [Average]
[info]   (min, avg, max) = (509999.411, 525144.285, 532135.225), stdev = 9336.202
[info]   CI (99.9%): [489193.896, 561094.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.49% complete, ETA 00:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72988.947 ops/s
[info] # Warmup Iteration   2: 96459.447 ops/s
[info] # Warmup Iteration   3: 98992.609 ops/s
[info] Iteration   1: 97033.986 ops/s
[info]                  ·gc.alloc.rate:            1183.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       19200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21824.850 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 98864.703 ops/s
[info]                  ·gc.alloc.rate:                   1205.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16065.539 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 98966.040 ops/s
[info]                  ·gc.alloc.rate:                                  1207.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21653.106 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 99300.311 ops/s
[info]                  ·gc.alloc.rate:                                  1211.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21580.287 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99516.137 ops/s
[info]                  ·gc.alloc.rate:                                  1213.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19200.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16149.929 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   98736.235 ±(99.9%) 3798.985 ops/s [Average]
[info]   (min, avg, max) = (97033.986, 98736.235, 99516.137), stdev = 986.584
[info]   CI (99.9%): [94937.250, 102535.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1204.293 ±(99.9%) 46.146 MB/sec [Average]
[info]   (min, avg, max) = (1183.655, 1204.293, 1213.823), stdev = 11.984
[info]   CI (99.9%): [1158.147, 1250.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.004, 19200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.385 ±(99.9%) 3.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.385, 1.913), stdev = 0.854
[info]   CI (99.9%): [≈ 0, 3.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.605 ±(99.9%) 720.183 MB/sec [Average]
[info]   (min, avg, max) = (1008.807, 1219.605, 1361.385), stdev = 187.029
[info]   CI (99.9%): [499.422, 1939.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   19454.742 ±(99.9%) 11770.733 B/op [Average]
[info]   (min, avg, max) = (16065.539, 19454.742, 21824.850), stdev = 3056.822
[info]   CI (99.9%): [7684.009, 31225.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   12.725 ±(99.9%) 109.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.725, 63.626), stdev = 28.454
[info]   CI (99.9%): [≈ 0, 122.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 16.000), stdev = 6.025
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 53.76% complete, ETA 00:36:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120643.764 ops/s
[info] # Warmup Iteration   2: 143759.828 ops/s
[info] # Warmup Iteration   3: 145170.828 ops/s
[info] Iteration   1: 150480.521 ops/s
[info]                  ·gc.alloc.rate:                                  2530.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24921.141 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 148072.139 ops/s
[info]                  ·gc.alloc.rate:                                  2490.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28945.376 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 144725.425 ops/s
[info]                  ·gc.alloc.rate:                                  2433.884 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25912.140 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 146858.284 ops/s
[info]                  ·gc.alloc.rate:                                  2469.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25535.847 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 148834.355 ops/s
[info]                  ·gc.alloc.rate:                                  2503.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26472.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28796.235 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147794.145 ±(99.9%) 8318.819 ops/s [Average]
[info]   (min, avg, max) = (144725.425, 147794.145, 150480.521), stdev = 2160.371
[info]   CI (99.9%): [139475.325, 156112.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2485.624 ±(99.9%) 139.839 MB/sec [Average]
[info]   (min, avg, max) = (2433.884, 2485.624, 2530.304), stdev = 36.316
[info]   CI (99.9%): [2345.785, 2625.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26472.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26472.003, 26472.003, 26472.003), stdev = 0.001
[info]   CI (99.9%): [26472.002, 26472.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
[info]   CI (99.9%): [0.001, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (0.069, 0.096, 0.124), stdev = 0.023
[info]   CI (99.9%): [0.007, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2518.716 ±(99.9%) 719.281 MB/sec [Average]
[info]   (min, avg, max) = (2382.066, 2518.716, 2723.544), stdev = 186.795
[info]   CI (99.9%): [1799.435, 3237.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   26822.148 ±(99.9%) 7331.819 B/op [Average]
[info]   (min, avg, max) = (24921.141, 26822.148, 28945.376), stdev = 1904.050
[info]   CI (99.9%): [19490.329, 34153.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Run progress: 54.03% complete, ETA 00:36:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23333.221 ops/s
[info] # Warmup Iteration   2: 536942.829 ops/s
[info] # Warmup Iteration   3: 532096.626 ops/s
[info] Iteration   1: 531163.222 ops/s
[info]                  ·gc.alloc.rate:            294.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 988.917 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 533858.992 ops/s
[info]                  ·gc.alloc.rate:            295.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 983.905 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 518257.694 ops/s
[info]                  ·gc.alloc.rate:            287.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1013.547 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 518024.695 ops/s
[info]                  ·gc.alloc.rate:            287.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1014.009 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 529176.745 ops/s
[info]                  ·gc.alloc.rate:            293.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 992.619 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   526096.270 ±(99.9%) 28687.736 ops/s [Average]
[info]   (min, avg, max) = (518024.695, 526096.270, 533858.992), stdev = 7450.114
[info]   CI (99.9%): [497408.534, 554784.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   291.462 ±(99.9%) 15.800 MB/sec [Average]
[info]   (min, avg, max) = (287.041, 291.462, 295.725), stdev = 4.103
[info]   CI (99.9%): [275.662, 307.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.724 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (333.676, 333.724, 333.787), stdev = 0.040
[info]   CI (99.9%): [333.569, 333.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   998.599 ±(99.9%) 54.670 B/op [Average]
[info]   (min, avg, max) = (983.905, 998.599, 1014.009), stdev = 14.198
[info]   CI (99.9%): [943.929, 1053.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.30% complete, ETA 00:36:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202915.292 ops/s
[info] # Warmup Iteration   2: 319019.556 ops/s
[info] # Warmup Iteration   3: 321331.613 ops/s
[info] Iteration   1: 322456.085 ops/s
[info]                  ·gc.alloc.rate:            336.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1641.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 322916.849 ops/s
[info]                  ·gc.alloc.rate:                   336.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1636.320 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.247 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 315387.092 ops/s
[info]                  ·gc.alloc.rate:            328.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1678.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 322568.604 ops/s
[info]                  ·gc.alloc.rate:            336.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1641.325 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 322622.907 ops/s
[info]                  ·gc.alloc.rate:            336.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1641.101 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   321190.307 ±(99.9%) 12509.036 ops/s [Average]
[info]   (min, avg, max) = (315387.092, 321190.307, 322916.849), stdev = 3248.557
[info]   CI (99.9%): [308681.272, 333699.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   334.688 ±(99.9%) 13.150 MB/sec [Average]
[info]   (min, avg, max) = (328.592, 334.688, 336.565), stdev = 3.415
[info]   CI (99.9%): [321.539, 347.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.267 ±(99.9%) 0.999 MB/sec [Average]
[info]   (min, avg, max) = (335.809, 336.267, 336.449), stdev = 0.260
[info]   CI (99.9%): [335.267, 337.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1647.878 ±(99.9%) 67.038 B/op [Average]
[info]   (min, avg, max) = (1636.320, 1647.878, 1678.764), stdev = 17.410
[info]   CI (99.9%): [1580.840, 1714.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.649 ±(99.9%) 5.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.649, 3.247), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.57% complete, ETA 00:36:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 695374.096 ops/s
[info] # Warmup Iteration   2: 732557.045 ops/s
[info] # Warmup Iteration   3: 720022.622 ops/s
[info] Iteration   1: 735306.817 ops/s
[info]                  ·gc.alloc.rate:            254.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 721.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 715839.490 ops/s
[info]                  ·gc.alloc.rate:      247.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 712953.673 ops/s
[info]                  ·gc.alloc.rate:            246.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 744.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 709910.343 ops/s
[info]                  ·gc.alloc.rate:            245.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 747.288 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 714712.092 ops/s
[info]                  ·gc.alloc.rate:      247.018 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   717744.483 ±(99.9%) 38774.358 ops/s [Average]
[info]   (min, avg, max) = (709910.343, 717744.483, 735306.817), stdev = 10069.578
[info]   CI (99.9%): [678970.125, 756518.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   248.080 ±(99.9%) 13.348 MB/sec [Average]
[info]   (min, avg, max) = (245.442, 248.080, 254.137), stdev = 3.466
[info]   CI (99.9%): [234.731, 261.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.001, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.242 ±(99.9%) 710.910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.242, 337.161), stdev = 184.621
[info]   CI (99.9%): [≈ 0, 913.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   442.563 ±(99.9%) 1556.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 442.563, 747.288), stdev = 404.126
[info]   CI (99.9%): [≈ 0, 1998.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 54.84% complete, ETA 00:35:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41186.769 ops/s
[info] # Warmup Iteration   2: 71279.376 ops/s
[info] # Warmup Iteration   3: 73784.733 ops/s
[info] Iteration   1: 72608.792 ops/s
[info]                  ·gc.alloc.rate:                                  3209.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66405.048 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 72379.000 ops/s
[info]                  ·gc.alloc.rate:                                  3199.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74018.834 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 73811.316 ops/s
[info]                  ·gc.alloc.rate:                                  3262.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65324.714 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 74076.709 ops/s
[info]                  ·gc.alloc.rate:                                  3275.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.279 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72323.395 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 72851.417 ops/s
[info]                  ·gc.alloc.rate:                                  3220.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             69576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66185.406 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   73145.447 ±(99.9%) 2902.402 ops/s [Average]
[info]   (min, avg, max) = (72379.000, 73145.447, 74076.709), stdev = 753.745
[info]   CI (99.9%): [70243.045, 76047.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3233.272 ±(99.9%) 129.551 MB/sec [Average]
[info]   (min, avg, max) = (3199.129, 3233.272, 3275.169), stdev = 33.644
[info]   CI (99.9%): [3103.721, 3362.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69576.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (69576.006, 69576.006, 69576.006), stdev = 0.001
[info]   CI (99.9%): [69576.005, 69576.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.025 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.011, 0.019), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.244 ±(99.9%) 0.532 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.244, 0.409), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3199.486 ±(99.9%) 718.740 MB/sec [Average]
[info]   (min, avg, max) = (3062.764, 3199.486, 3404.497), stdev = 186.654
[info]   CI (99.9%): [2480.746, 3918.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68851.479 ±(99.9%) 15437.048 B/op [Average]
[info]   (min, avg, max) = (65324.714, 68851.479, 74018.834), stdev = 4008.952
[info]   CI (99.9%): [53414.431, 84288.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.11% complete, ETA 00:35:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206585.268 ops/s
[info] # Warmup Iteration   2: 272382.318 ops/s
[info] # Warmup Iteration   3: 268432.424 ops/s
[info] Iteration   1: 271422.057 ops/s
[info]                  ·gc.alloc.rate:                                  1629.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9811.364 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.314 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 278195.033 ops/s
[info]                  ·gc.alloc.rate:                                  1669.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9629.091 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 272924.013 ops/s
[info]                  ·gc.alloc.rate:            1638.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       9448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7851.653 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 267512.491 ops/s
[info]                  ·gc.alloc.rate:            1605.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       9448.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10013.537 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 268104.342 ops/s
[info]                  ·gc.alloc.rate:                                  1609.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9448.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9991.093 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   271631.587 ±(99.9%) 16584.780 ops/s [Average]
[info]   (min, avg, max) = (267512.491, 271631.587, 278195.033), stdev = 4307.015
[info]   CI (99.9%): [255046.807, 288216.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1630.498 ±(99.9%) 99.094 MB/sec [Average]
[info]   (min, avg, max) = (1605.699, 1630.498, 1669.562), stdev = 25.734
[info]   CI (99.9%): [1531.404, 1729.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9448.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9448.001, 9448.002, 9448.002), stdev = 0.001
[info]   CI (99.9%): [9448.001, 9448.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.096), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.122 ±(99.9%) 0.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.554), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.798 ±(99.9%) 582.204 MB/sec [Average]
[info]   (min, avg, max) = (1361.428, 1631.798, 1701.849), stdev = 151.197
[info]   CI (99.9%): [1049.594, 2214.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9459.348 ±(99.9%) 3511.952 B/op [Average]
[info]   (min, avg, max) = (7851.653, 9459.348, 10013.537), stdev = 912.043
[info]   CI (99.9%): [5947.396, 12971.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.863 ±(99.9%) 33.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.863, 19.314), stdev = 8.637
[info]   CI (99.9%): [≈ 0, 37.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Run progress: 55.38% complete, ETA 00:35:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83311.352 ops/s
[info] # Warmup Iteration   2: 1196992.962 ops/s
[info] # Warmup Iteration   3: 1222059.179 ops/s
[info] Iteration   1: 1226008.971 ops/s
[info]                  ·gc.alloc.rate:            504.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1219270.070 ops/s
[info]                  ·gc.alloc.rate:            501.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 861.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1194936.128 ops/s
[info]                  ·gc.alloc.rate:            491.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 439.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1225295.225 ops/s
[info]                  ·gc.alloc.rate:            504.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 857.371 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1233225.828 ops/s
[info]                  ·gc.alloc.rate:            507.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.928 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1219747.244 ±(99.9%) 56706.557 ops/s [Average]
[info]   (min, avg, max) = (1194936.128, 1219747.244, 1233225.828), stdev = 14726.513
[info]   CI (99.9%): [1163040.688, 1276453.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   502.128 ±(99.9%) 23.332 MB/sec [Average]
[info]   (min, avg, max) = (491.926, 502.128, 507.684), stdev = 6.059
[info]   CI (99.9%): [478.795, 525.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.175 ±(99.9%) 703.791 MB/sec [Average]
[info]   (min, avg, max) = (333.691, 467.175, 667.413), stdev = 182.772
[info]   CI (99.9%): [≈ 0, 1170.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   602.590 ±(99.9%) 903.312 B/op [Average]
[info]   (min, avg, max) = (425.928, 602.590, 861.630), stdev = 234.587
[info]   CI (99.9%): [≈ 0, 1505.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 55.65% complete, ETA 00:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52461.918 ops/s
[info] # Warmup Iteration   2: 1244847.504 ops/s
[info] # Warmup Iteration   3: 1245605.487 ops/s
[info] Iteration   1: 1249743.085 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1250066.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1249387.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1248664.368 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1249525.868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc":
[info]   1249477.356 ±(99.9%) 2009.127 ops/s [Average]
[info]   (min, avg, max) = (1248664.368, 1249477.356, 1250066.333), stdev = 521.764
[info]   CI (99.9%): [1247468.229, 1251486.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.91% complete, ETA 00:35:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751392.244 ops/s
[info] # Warmup Iteration   2: 1237456.983 ops/s
[info] # Warmup Iteration   3: 1236581.257 ops/s
[info] Iteration   1: 1237529.056 ops/s
[info]                  ·gc.alloc.rate:            811.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 855.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1227100.122 ops/s
[info]                  ·gc.alloc.rate:            804.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1294.416 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1230718.963 ops/s
[info]                  ·gc.alloc.rate:            806.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 860.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1183132.722 ops/s
[info]                  ·gc.alloc.rate:                   775.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        894.984 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1169704.857 ops/s
[info]                  ·gc.alloc.rate:                                  767.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1032.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1374.054 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1209637.144 ±(99.9%) 119065.704 ops/s [Average]
[info]   (min, avg, max) = (1169704.857, 1209637.144, 1237529.056), stdev = 30920.985
[info]   CI (99.9%): [1090571.440, 1328702.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   793.189 ±(99.9%) 77.982 MB/sec [Average]
[info]   (min, avg, max) = (767.187, 793.189, 811.519), stdev = 20.252
[info]   CI (99.9%): [715.207, 871.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.187), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.804 ±(99.9%) 722.961 MB/sec [Average]
[info]   (min, avg, max) = (672.656, 809.804, 1021.469), stdev = 187.751
[info]   CI (99.9%): [86.843, 1532.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1055.896 ±(99.9%) 986.124 B/op [Average]
[info]   (min, avg, max) = (855.628, 1055.896, 1374.054), stdev = 256.093
[info]   CI (99.9%): [69.773, 2042.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.063 ±(99.9%) 9.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.063, 5.317), stdev = 2.378
[info]   CI (99.9%): [≈ 0, 10.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 3.194
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.18% complete, ETA 00:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1276713.429 ops/s
[info] # Warmup Iteration   2: 1432078.913 ops/s
[info] # Warmup Iteration   3: 1452960.989 ops/s
[info] Iteration   1: 1458345.411 ops/s
[info]                  ·gc.alloc.rate:            600.531 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 363.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1467136.389 ops/s
[info]                  ·gc.alloc.rate:            604.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 721.741 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1491981.841 ops/s
[info]                  ·gc.alloc.rate:            614.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 709.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1492073.536 ops/s
[info]                  ·gc.alloc.rate:            614.427 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 709.686 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1490170.028 ops/s
[info]                  ·gc.alloc.rate:            613.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 710.587 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1479941.441 ±(99.9%) 61704.717 ops/s [Average]
[info]   (min, avg, max) = (1458345.411, 1479941.441, 1492073.536), stdev = 16024.519
[info]   CI (99.9%): [1418236.725, 1541646.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   609.329 ±(99.9%) 25.282 MB/sec [Average]
[info]   (min, avg, max) = (600.531, 609.329, 614.427), stdev = 6.566
[info]   CI (99.9%): [584.047, 634.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.503 ±(99.9%) 579.206 MB/sec [Average]
[info]   (min, avg, max) = (336.428, 605.503, 672.917), stdev = 150.418
[info]   CI (99.9%): [26.297, 1184.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   642.951 ±(99.9%) 602.890 B/op [Average]
[info]   (min, avg, max) = (363.021, 642.951, 721.741), stdev = 156.569
[info]   CI (99.9%): [40.061, 1245.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.45% complete, ETA 00:34:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1431860.468 ops/s
[info] # Warmup Iteration   2: 1528927.997 ops/s
[info] # Warmup Iteration   3: 1490000.455 ops/s
[info] Iteration   1: 1517877.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1526930.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1537138.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1545091.563 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1546535.450 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1534714.655 ±(99.9%) 47057.081 ops/s [Average]
[info]   (min, avg, max) = (1517877.712, 1534714.655, 1546535.450), stdev = 12220.574
[info]   CI (99.9%): [1487657.575, 1581771.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.72% complete, ETA 00:34:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23171.991 ops/s
[info] # Warmup Iteration   2: 35464.067 ops/s
[info] # Warmup Iteration   3: 35611.335 ops/s
[info] Iteration   1: 34792.931 ops/s
[info]                  ·gc.alloc.rate:                                  1702.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76991.523 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.179 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76447.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                180.799 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 35786.195 ops/s
[info]                  ·gc.alloc.rate:                                  1750.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89822.698 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 35962.334 ops/s
[info]                  ·gc.alloc.rate:                                  1759.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.295 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74483.908 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 36242.449 ops/s
[info]                  ·gc.alloc.rate:                                  1772.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73908.568 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35716.786 ops/s
[info]                  ·gc.alloc.rate:                                  1746.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             76984.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74996.828 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   35700.139 ±(99.9%) 2103.414 ops/s [Average]
[info]   (min, avg, max) = (34792.931, 35700.139, 36242.449), stdev = 546.250
[info]   CI (99.9%): [33596.725, 37803.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1746.179 ±(99.9%) 101.970 MB/sec [Average]
[info]   (min, avg, max) = (1702.301, 1746.179, 1772.546), stdev = 26.481
[info]   CI (99.9%): [1644.210, 1848.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   76985.514 ±(99.9%) 12.935 B/op [Average]
[info]   (min, avg, max) = (76984.011, 76985.514, 76991.523), stdev = 3.359
[info]   CI (99.9%): [76972.578, 76998.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.040, 0.179), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.801 ±(99.9%) 13.516 B/op [Average]
[info]   (min, avg, max) = (0.015, 1.801, 8.074), stdev = 3.510
[info]   CI (99.9%): [≈ 0, 15.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.542 ±(99.9%) 590.961 MB/sec [Average]
[info]   (min, avg, max) = (1690.283, 1767.542, 2041.932), stdev = 153.471
[info]   CI (99.9%): [1176.580, 2358.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77931.999 ±(99.9%) 25851.243 B/op [Average]
[info]   (min, avg, max) = (73908.568, 77931.999, 89822.698), stdev = 6713.486
[info]   CI (99.9%): [52080.757, 103783.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.160 ±(99.9%) 311.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.160, 180.799), stdev = 80.856
[info]   CI (99.9%): [≈ 0, 347.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 56.99% complete, ETA 00:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35603.234 ops/s
[info] # Warmup Iteration   2: 45354.254 ops/s
[info] # Warmup Iteration   3: 45451.506 ops/s
[info] Iteration   1: 43468.702 ops/s
[info]                  ·gc.alloc.rate:            867.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36611.886 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 43237.374 ops/s
[info]                  ·gc.alloc.rate:            862.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24538.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 43169.572 ops/s
[info]                  ·gc.alloc.rate:            861.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       31400.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36865.423 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 43898.389 ops/s
[info]                  ·gc.alloc.rate:                                  875.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24288.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                119.414 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 44753.619 ops/s
[info]                  ·gc.alloc.rate:                                  892.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31400.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35911.421 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   43705.531 ±(99.9%) 2508.979 ops/s [Average]
[info]   (min, avg, max) = (43169.572, 43705.531, 44753.619), stdev = 651.574
[info]   CI (99.9%): [41196.552, 46214.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   871.993 ±(99.9%) 50.175 MB/sec [Average]
[info]   (min, avg, max) = (861.470, 871.993, 892.953), stdev = 13.030
[info]   CI (99.9%): [821.818, 922.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31400.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31400.009, 31400.009, 31400.010), stdev = 0.001
[info]   CI (99.9%): [31400.008, 31400.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.454 ±(99.9%) 2.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.454, 1.224), stdev = 0.625
[info]   CI (99.9%): [≈ 0, 2.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   879.052 ±(99.9%) 714.603 MB/sec [Average]
[info]   (min, avg, max) = (674.063, 879.052, 1021.249), stdev = 185.580
[info]   CI (99.9%): [164.449, 1593.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31643.176 ±(99.9%) 25450.925 B/op [Average]
[info]   (min, avg, max) = (24288.846, 31643.176, 36865.423), stdev = 6609.524
[info]   CI (99.9%): [6192.251, 57094.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   23.883 ±(99.9%) 205.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.883, 119.414), stdev = 53.404
[info]   CI (99.9%): [≈ 0, 229.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.26% complete, ETA 00:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49977.120 ops/s
[info] # Warmup Iteration   2: 77712.932 ops/s
[info] # Warmup Iteration   3: 76349.388 ops/s
[info] Iteration   1: 78847.971 ops/s
[info]                  ·gc.alloc.rate:                   831.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13416.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75567.077 ops/s
[info]                  ·gc.alloc.rate:            796.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21018.691 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 78325.632 ops/s
[info]                  ·gc.alloc.rate:                   825.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13505.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.385 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 75659.060 ops/s
[info]                  ·gc.alloc.rate:                                  797.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21077.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                83.144 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 76292.397 ops/s
[info]                  ·gc.alloc.rate:                                  804.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14044.778 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   76938.427 ±(99.9%) 5935.937 ops/s [Average]
[info]   (min, avg, max) = (75567.077, 76938.427, 78847.971), stdev = 1541.544
[info]   CI (99.9%): [71002.490, 82874.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   811.055 ±(99.9%) 62.507 MB/sec [Average]
[info]   (min, avg, max) = (796.640, 811.055, 831.049), stdev = 16.233
[info]   CI (99.9%): [748.549, 873.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.414 ±(99.9%) 2.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.414, 1.039), stdev = 0.567
[info]   CI (99.9%): [≈ 0, 2.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.447 ±(99.9%) 709.172 MB/sec [Average]
[info]   (min, avg, max) = (671.980, 809.447, 1013.123), stdev = 184.170
[info]   CI (99.9%): [100.275, 1518.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16612.398 ±(99.9%) 15619.107 B/op [Average]
[info]   (min, avg, max) = (13416.178, 16612.398, 21077.113), stdev = 4056.233
[info]   CI (99.9%): [993.291, 32231.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.965 ±(99.9%) 134.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.965, 83.144), stdev = 34.845
[info]   CI (99.9%): [≈ 0, 156.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 3.674
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.53% complete, ETA 00:33:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240314.211 ops/s
[info] # Warmup Iteration   2: 257938.488 ops/s
[info] # Warmup Iteration   3: 256098.092 ops/s
[info] Iteration   1: 258464.592 ops/s
[info]                  ·gc.alloc.rate:            840.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4104.952 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 259324.693 ops/s
[info]                  ·gc.alloc.rate:            843.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6137.036 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 259233.469 ops/s
[info]                  ·gc.alloc.rate:            843.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4092.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 257760.521 ops/s
[info]                  ·gc.alloc.rate:                                  838.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6194.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.337 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 263136.992 ops/s
[info]                  ·gc.alloc.rate:                                  856.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4071.923 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   259584.053 ±(99.9%) 8029.312 ops/s [Average]
[info]   (min, avg, max) = (257760.521, 259584.053, 263136.992), stdev = 2085.187
[info]   CI (99.9%): [251554.741, 267613.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   844.445 ±(99.9%) 26.202 MB/sec [Average]
[info]   (min, avg, max) = (838.460, 844.445, 856.047), stdev = 6.805
[info]   CI (99.9%): [818.243, 870.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.136), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.928 ±(99.9%) 709.588 MB/sec [Average]
[info]   (min, avg, max) = (674.106, 810.928, 1014.431), stdev = 184.278
[info]   CI (99.9%): [101.340, 1520.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4920.268 ±(99.9%) 4379.143 B/op [Average]
[info]   (min, avg, max) = (4071.923, 4920.268, 6194.556), stdev = 1137.249
[info]   CI (99.9%): [541.125, 9299.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.067 ±(99.9%) 35.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.067, 20.337), stdev = 9.095
[info]   CI (99.9%): [≈ 0, 39.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 57.80% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13364.608 ops/s
[info] # Warmup Iteration   2: 23725.886 ops/s
[info] # Warmup Iteration   3: 23770.762 ops/s
[info] Iteration   1: 23341.288 ops/s
[info]                  ·gc.alloc.rate:            1096.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       73961.613 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68045.603 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 23403.001 ops/s
[info]                  ·gc.alloc.rate:                   1099.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90487.163 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 268.774 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 23918.394 ops/s
[info]                  ·gc.alloc.rate:                                  1124.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.289 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67193.371 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24125.129 ops/s
[info]                  ·gc.alloc.rate:            1133.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66616.950 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 23429.553 ops/s
[info]                  ·gc.alloc.rate:                                  1100.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91452.865 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23643.473 ±(99.9%) 1364.778 ops/s [Average]
[info]   (min, avg, max) = (23341.288, 23643.473, 24125.129), stdev = 354.428
[info]   CI (99.9%): [22278.695, 25008.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1111.024 ±(99.9%) 64.215 MB/sec [Average]
[info]   (min, avg, max) = (1096.648, 1111.024, 1133.559), stdev = 16.676
[info]   CI (99.9%): [1046.810, 1175.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.337 ±(99.9%) 2.745 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.337, 73961.613), stdev = 0.713
[info]   CI (99.9%): [73957.593, 73963.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.058 ±(99.9%) 0.496 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.289), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.835 ±(99.9%) 32.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.835, 18.998), stdev = 8.477
[info]   CI (99.9%): [≈ 0, 36.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.636 ±(99.9%) 710.095 MB/sec [Average]
[info]   (min, avg, max) = (1008.930, 1151.636, 1361.325), stdev = 184.409
[info]   CI (99.9%): [441.541, 1861.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76759.190 ±(99.9%) 50008.653 B/op [Average]
[info]   (min, avg, max) = (66616.950, 76759.190, 91452.865), stdev = 12987.088
[info]   CI (99.9%): [26750.537, 126767.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   53.755 ±(99.9%) 462.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.755, 268.774), stdev = 120.199
[info]   CI (99.9%): [≈ 0, 516.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 17.000), stdev = 6.731
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.06% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44828.379 ops/s
[info] # Warmup Iteration   2: 56660.242 ops/s
[info] # Warmup Iteration   3: 56977.515 ops/s
[info] Iteration   1: 57250.069 ops/s
[info]                  ·gc.alloc.rate:            849.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18532.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 56495.746 ops/s
[info]                  ·gc.alloc.rate:            838.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28169.868 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 56681.310 ops/s
[info]                  ·gc.alloc.rate:            841.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18717.966 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 56792.027 ops/s
[info]                  ·gc.alloc.rate:                                  842.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28115.867 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                92.304 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 57565.244 ops/s
[info]                  ·gc.alloc.rate:                                  854.080 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.987 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18613.344 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   56956.879 ±(99.9%) 1691.466 ops/s [Average]
[info]   (min, avg, max) = (56495.746, 56956.879, 57565.244), stdev = 439.268
[info]   CI (99.9%): [55265.413, 58648.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   845.021 ±(99.9%) 25.222 MB/sec [Average]
[info]   (min, avg, max) = (838.027, 845.021, 854.080), stdev = 6.550
[info]   CI (99.9%): [819.799, 870.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.008), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.395 ±(99.9%) 2.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 0.987), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.874 ±(99.9%) 709.511 MB/sec [Average]
[info]   (min, avg, max) = (674.064, 810.874, 1014.459), stdev = 184.258
[info]   CI (99.9%): [101.363, 1520.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22429.867 ±(99.9%) 20083.736 B/op [Average]
[info]   (min, avg, max) = (18532.290, 22429.867, 28169.868), stdev = 5215.682
[info]   CI (99.9%): [2346.131, 42513.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.461 ±(99.9%) 158.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.461, 92.304), stdev = 41.280
[info]   CI (99.9%): [≈ 0, 177.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.400, 9.000), stdev = 3.130
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.33% complete, ETA 00:33:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53369.627 ops/s
[info] # Warmup Iteration   2: 87639.418 ops/s
[info] # Warmup Iteration   3: 88464.516 ops/s
[info] Iteration   1: 88568.898 ops/s
[info]                  ·gc.alloc.rate:                   1213.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23898.527 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.837 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 87886.635 ops/s
[info]                  ·gc.alloc.rate:                                  1203.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.995 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18143.889 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                71.574 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 89531.204 ops/s
[info]                  ·gc.alloc.rate:                                  1226.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23933.996 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 89765.725 ops/s
[info]                  ·gc.alloc.rate:            1229.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17904.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 89720.078 ops/s
[info]                  ·gc.alloc.rate:                                  1228.903 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23884.387 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   89094.508 ±(99.9%) 3203.100 ops/s [Average]
[info]   (min, avg, max) = (87886.635, 89094.508, 89765.725), stdev = 831.835
[info]   CI (99.9%): [85891.408, 92297.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1220.401 ±(99.9%) 43.530 MB/sec [Average]
[info]   (min, avg, max) = (1203.906, 1220.401, 1229.494), stdev = 11.305
[info]   CI (99.9%): [1176.871, 1263.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21560.005, 21560.005, 21560.005), stdev = 0.001
[info]   CI (99.9%): [21560.004, 21560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.622 ±(99.9%) 3.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.622, 2.079), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 4.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.379 ±(99.9%) 715.165 MB/sec [Average]
[info]   (min, avg, max) = (1013.151, 1220.379, 1361.391), stdev = 185.726
[info]   CI (99.9%): [505.214, 1935.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21552.982 ±(99.9%) 12409.358 B/op [Average]
[info]   (min, avg, max) = (17904.112, 21552.982, 23933.996), stdev = 3222.671
[info]   CI (99.9%): [9143.625, 33962.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.682 ±(99.9%) 119.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.682, 71.574), stdev = 31.110
[info]   CI (99.9%): [≈ 0, 136.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 16.000), stdev = 5.874
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 58.60% complete, ETA 00:32:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254154.035 ops/s
[info] # Warmup Iteration   2: 283963.841 ops/s
[info] # Warmup Iteration   3: 287051.758 ops/s
[info] Iteration   1: 288463.447 ops/s
[info]                  ·gc.alloc.rate:            919.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5506.024 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 284582.019 ops/s
[info]                  ·gc.alloc.rate:            906.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5581.275 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 282553.107 ops/s
[info]                  ·gc.alloc.rate:                   900.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5621.407 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 292009.408 ops/s
[info]                  ·gc.alloc.rate:                                  930.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3669.400 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 290188.695 ops/s
[info]                  ·gc.alloc.rate:                                  924.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5538.502 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   287559.335 ±(99.9%) 15093.940 ops/s [Average]
[info]   (min, avg, max) = (282553.107, 287559.335, 292009.408), stdev = 3919.848
[info]   CI (99.9%): [272465.395, 302653.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   916.375 ±(99.9%) 48.753 MB/sec [Average]
[info]   (min, avg, max) = (900.288, 916.375, 930.953), stdev = 12.661
[info]   CI (99.9%): [867.622, 965.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.111), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 0.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.596), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.784 ±(99.9%) 570.260 MB/sec [Average]
[info]   (min, avg, max) = (681.029, 945.784, 1021.028), stdev = 148.095
[info]   CI (99.9%): [375.523, 1516.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5183.321 ±(99.9%) 3263.141 B/op [Average]
[info]   (min, avg, max) = (3669.400, 5183.321, 5621.407), stdev = 847.427
[info]   CI (99.9%): [1920.180, 8446.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.453 ±(99.9%) 38.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.453, 22.263), stdev = 9.956
[info]   CI (99.9%): [≈ 0, 42.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 58.87% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295146.764 ops/s
[info] # Warmup Iteration   2: 321975.038 ops/s
[info] # Warmup Iteration   3: 322680.601 ops/s
[info] Iteration   1: 323538.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 323301.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 323507.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 323276.837 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 323438.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   323412.467 ±(99.9%) 456.623 ops/s [Average]
[info]   (min, avg, max) = (323276.837, 323412.467, 323538.454), stdev = 118.584
[info]   CI (99.9%): [322955.844, 323869.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.14% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57654.758 ops/s
[info] # Warmup Iteration   2: 74958.056 ops/s
[info] # Warmup Iteration   3: 76900.701 ops/s
[info] Iteration   1: 77853.553 ops/s
[info]                  ·gc.alloc.rate:            1153.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20401.097 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 77121.806 ops/s
[info]                  ·gc.alloc.rate:                   1142.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              23327.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27459.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 81.562 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 77700.505 ops/s
[info]                  ·gc.alloc.rate:                                  1151.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20684.926 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 78111.878 ops/s
[info]                  ·gc.alloc.rate:            1157.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20575.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 77837.583 ops/s
[info]                  ·gc.alloc.rate:                                  1153.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27530.659 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   77725.065 ±(99.9%) 1419.158 ops/s [Average]
[info]   (min, avg, max) = (77121.806, 77725.065, 78111.878), stdev = 368.551
[info]   CI (99.9%): [76305.907, 79144.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1151.804 ±(99.9%) 21.347 MB/sec [Average]
[info]   (min, avg, max) = (1142.700, 1151.804, 1157.596), stdev = 5.544
[info]   CI (99.9%): [1130.457, 1173.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.005 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (23327.979, 23328.005, 23328.031), stdev = 0.018
[info]   CI (99.9%): [23327.935, 23328.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.101), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.462 ±(99.9%) 3.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.462, 2.046), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.482 ±(99.9%) 709.656 MB/sec [Average]
[info]   (min, avg, max) = (1008.925, 1151.482, 1361.327), stdev = 184.295
[info]   CI (99.9%): [441.826, 1861.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23330.353 ±(99.9%) 14644.659 B/op [Average]
[info]   (min, avg, max) = (20401.097, 23330.353, 27530.659), stdev = 3803.171
[info]   CI (99.9%): [8685.694, 37975.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.312 ±(99.9%) 140.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.312, 81.562), stdev = 36.476
[info]   CI (99.9%): [≈ 0, 156.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 15.000), stdev = 5.196
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 59.41% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44655.098 ops/s
[info] # Warmup Iteration   2: 69242.537 ops/s
[info] # Warmup Iteration   3: 70096.618 ops/s
[info] Iteration   1: 70544.444 ops/s
[info]                  ·gc.alloc.rate:            1431.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       31936.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30020.885 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 69970.049 ops/s
[info]                  ·gc.alloc.rate:                                  1419.538 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31936.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.450 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30536.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.901 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 70194.277 ops/s
[info]                  ·gc.alloc.rate:            1424.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       31936.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30528.578 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 72234.419 ops/s
[info]                  ·gc.alloc.rate:                                  1465.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31936.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37083.184 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 69648.120 ops/s
[info]                  ·gc.alloc.rate:                                  1413.609 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31936.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30768.747 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70518.262 ±(99.9%) 3902.535 ops/s [Average]
[info]   (min, avg, max) = (69648.120, 70518.262, 72234.419), stdev = 1013.476
[info]   CI (99.9%): [66615.727, 74420.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1430.858 ±(99.9%) 79.200 MB/sec [Average]
[info]   (min, avg, max) = (1413.609, 1430.858, 1465.809), stdev = 20.568
[info]   CI (99.9%): [1351.658, 1510.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31936.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31936.006, 31936.006, 31936.006), stdev = 0.001
[info]   CI (99.9%): [31936.005, 31936.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.551 ±(99.9%) 4.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 2.450), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.614 ±(99.9%) 595.617 MB/sec [Average]
[info]   (min, avg, max) = (1345.348, 1425.614, 1702.055), stdev = 154.680
[info]   CI (99.9%): [829.996, 2021.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31787.557 ±(99.9%) 11447.687 B/op [Average]
[info]   (min, avg, max) = (30020.885, 31787.557, 37083.184), stdev = 2972.928
[info]   CI (99.9%): [20339.870, 43235.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.980 ±(99.9%) 154.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.980, 89.901), stdev = 40.205
[info]   CI (99.9%): [≈ 0, 172.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 59.68% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38990.273 ops/s
[info] # Warmup Iteration   2: 78996.489 ops/s
[info] # Warmup Iteration   3: 79360.381 ops/s
[info] Iteration   1: 76661.358 ops/s
[info]                  ·gc.alloc.rate:            867.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20678.034 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 77263.679 ops/s
[info]                  ·gc.alloc.rate:                   874.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13650.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.569 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 77939.214 ops/s
[info]                  ·gc.alloc.rate:            881.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20339.280 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 78731.006 ops/s
[info]                  ·gc.alloc.rate:                                  890.723 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20321.137 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                93.216 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 79267.077 ops/s
[info]                  ·gc.alloc.rate:                                  896.790 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13517.384 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   77972.467 ±(99.9%) 4072.359 ops/s [Average]
[info]   (min, avg, max) = (76661.358, 77972.467, 79267.077), stdev = 1057.579
[info]   CI (99.9%): [73900.108, 82044.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   882.158 ±(99.9%) 45.913 MB/sec [Average]
[info]   (min, avg, max) = (867.460, 882.158, 896.790), stdev = 11.924
[info]   CI (99.9%): [836.245, 928.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17808.005, 17808.005, 17808.006), stdev = 0.001
[info]   CI (99.9%): [17808.005, 17808.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.382 ±(99.9%) 3.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.823), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 3.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.301 ±(99.9%) 706.560 MB/sec [Average]
[info]   (min, avg, max) = (670.043, 876.301, 1016.425), stdev = 183.491
[info]   CI (99.9%): [169.741, 1582.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17701.332 ±(99.9%) 14484.122 B/op [Average]
[info]   (min, avg, max) = (13517.384, 17701.332, 20678.034), stdev = 3761.480
[info]   CI (99.9%): [3217.210, 32185.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.357 ±(99.9%) 156.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.357, 93.216), stdev = 40.598
[info]   CI (99.9%): [≈ 0, 177.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 14.000), stdev = 4.868
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 59.95% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80075.355 ops/s
[info] # Warmup Iteration   2: 100243.350 ops/s
[info] # Warmup Iteration   3: 98966.887 ops/s
[info] Iteration   1: 100163.064 ops/s
[info]                  ·gc.alloc.rate:            1054.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15858.175 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 100355.270 ops/s
[info]                  ·gc.alloc.rate:            1056.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21103.574 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 100073.087 ops/s
[info]                  ·gc.alloc.rate:                                  1053.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.445 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15998.157 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                62.861 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 100309.551 ops/s
[info]                  ·gc.alloc.rate:                                  1056.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16023.076 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 100289.661 ops/s
[info]                  ·gc.alloc.rate:                                  1056.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16026.271 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   100238.126 ±(99.9%) 448.861 ops/s [Average]
[info]   (min, avg, max) = (100073.087, 100238.126, 100355.270), stdev = 116.568
[info]   CI (99.9%): [99789.265, 100686.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1055.709 ±(99.9%) 5.012 MB/sec [Average]
[info]   (min, avg, max) = (1053.865, 1055.709, 1056.863), stdev = 1.302
[info]   CI (99.9%): [1050.697, 1060.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.332 ±(99.9%) 2.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.445), stdev = 0.629
[info]   CI (99.9%): [≈ 0, 2.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.904 ±(99.9%) 565.659 MB/sec [Average]
[info]   (min, avg, max) = (1009.149, 1082.904, 1345.535), stdev = 146.900
[info]   CI (99.9%): [517.244, 1648.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17001.850 ±(99.9%) 8833.281 B/op [Average]
[info]   (min, avg, max) = (15858.175, 17001.850, 21103.574), stdev = 2293.975
[info]   CI (99.9%): [8168.569, 25835.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.572 ±(99.9%) 108.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.572, 62.861), stdev = 28.112
[info]   CI (99.9%): [≈ 0, 120.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.561
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 60.22% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22744.440 ops/s
[info] # Warmup Iteration   2: 41693.888 ops/s
[info] # Warmup Iteration   3: 43011.084 ops/s
[info] Iteration   1: 42838.166 ops/s
[info]                  ·gc.alloc.rate:                                  2046.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75192.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.479 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75036.387 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 43261.874 ops/s
[info]                  ·gc.alloc.rate:                                  2066.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75192.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.550 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74301.094 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 42631.492 ops/s
[info]                  ·gc.alloc.rate:                                  2036.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75192.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75398.907 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 42331.093 ops/s
[info]                  ·gc.alloc.rate:                                  2021.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75192.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.530 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75933.159 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 42223.580 ops/s
[info]                  ·gc.alloc.rate:                                  2016.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75192.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.733 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76127.348 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   42657.241 ±(99.9%) 1603.242 ops/s [Average]
[info]   (min, avg, max) = (42223.580, 42657.241, 43261.874), stdev = 416.357
[info]   CI (99.9%): [41053.999, 44260.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2037.714 ±(99.9%) 77.283 MB/sec [Average]
[info]   (min, avg, max) = (2016.886, 2037.714, 2066.953), stdev = 20.070
[info]   CI (99.9%): [1960.431, 2114.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75192.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75192.010, 75192.010, 75192.010), stdev = 0.001
[info]   CI (99.9%): [75192.008, 75192.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.030, 0.095), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.101 ±(99.9%) 5.171 B/op [Average]
[info]   (min, avg, max) = (0.211, 1.101, 3.479), stdev = 1.343
[info]   CI (99.9%): [≈ 0, 6.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.093 ±(99.9%) 0.869 MB/sec [Average]
[info]   (min, avg, max) = (2041.884, 2042.093, 2042.463), stdev = 0.226
[info]   CI (99.9%): [2041.224, 2042.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75359.379 ±(99.9%) 2819.695 B/op [Average]
[info]   (min, avg, max) = (74301.094, 75359.379, 76127.348), stdev = 732.266
[info]   CI (99.9%): [72539.684, 78179.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 60.48% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93764.943 ops/s
[info] # Warmup Iteration   2: 129330.049 ops/s
[info] # Warmup Iteration   3: 127649.569 ops/s
[info] Iteration   1: 130279.010 ops/s
[info]                  ·gc.alloc.rate:            578.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8127.872 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 127986.587 ops/s
[info]                  ·gc.alloc.rate:            567.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8273.468 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 129643.535 ops/s
[info]                  ·gc.alloc.rate:                   575.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4075.751 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 125877.482 ops/s
[info]                  ·gc.alloc.rate:            558.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8412.062 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 129562.140 ops/s
[info]                  ·gc.alloc.rate:            574.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8172.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   128669.751 ±(99.9%) 6833.621 ops/s [Average]
[info]   (min, avg, max) = (125877.482, 128669.751, 130279.010), stdev = 1774.670
[info]   CI (99.9%): [121836.129, 135503.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   570.977 ±(99.9%) 30.186 MB/sec [Average]
[info]   (min, avg, max) = (558.711, 570.977, 578.177), stdev = 7.839
[info]   CI (99.9%): [540.790, 601.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   605.402 ±(99.9%) 580.617 MB/sec [Average]
[info]   (min, avg, max) = (335.670, 605.402, 672.954), stdev = 150.785
[info]   CI (99.9%): [24.784, 1186.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7412.374 ±(99.9%) 7194.619 B/op [Average]
[info]   (min, avg, max) = (4075.751, 7412.374, 8412.062), stdev = 1868.420
[info]   CI (99.9%): [217.755, 14606.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.617 ±(99.9%) 13.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.617, 8.087), stdev = 3.617
[info]   CI (99.9%): [≈ 0, 15.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 60.75% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112693.787 ops/s
[info] # Warmup Iteration   2: 164387.180 ops/s
[info] # Warmup Iteration   3: 163778.449 ops/s
[info] Iteration   1: 165024.720 ops/s
[info]                  ·gc.alloc.rate:            244.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3201.895 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 163102.169 ops/s
[info]                  ·gc.alloc.rate:            242.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3239.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 164742.869 ops/s
[info]                  ·gc.alloc.rate:            244.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3207.375 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 168433.381 ops/s
[info]                  ·gc.alloc.rate:      250.009 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 166744.729 ops/s
[info]                  ·gc.alloc.rate:            247.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3168.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   165609.574 ±(99.9%) 7854.459 ops/s [Average]
[info]   (min, avg, max) = (163102.169, 165609.574, 168433.381), stdev = 2039.778
[info]   CI (99.9%): [157755.115, 173464.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   245.786 ±(99.9%) 11.699 MB/sec [Average]
[info]   (min, avg, max) = (242.065, 245.786, 250.009), stdev = 3.038
[info]   CI (99.9%): [234.088, 257.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.553 ±(99.9%) 578.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.553, 335.711), stdev = 150.126
[info]   CI (99.9%): [≈ 0, 846.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2563.552 ±(99.9%) 5519.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2563.552, 3239.639), stdev = 1433.289
[info]   CI (99.9%): [≈ 0, 8082.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 61.02% complete, ETA 00:31:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658916.704 ops/s
[info] # Warmup Iteration   2: 734337.573 ops/s
[info] # Warmup Iteration   3: 740749.691 ops/s
[info] Iteration   1: 746951.801 ops/s
[info]                  ·gc.alloc.rate:            926.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2126.456 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 734306.795 ops/s
[info]                  ·gc.alloc.rate:            910.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2163.037 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 738964.565 ops/s
[info]                  ·gc.alloc.rate:                   916.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2149.413 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 704384.265 ops/s
[info]                  ·gc.alloc.rate:                                  873.815 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1521.149 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 695586.233 ops/s
[info]                  ·gc.alloc.rate:                                  863.068 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2310.545 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   724038.732 ±(99.9%) 87152.780 ops/s [Average]
[info]   (min, avg, max) = (695586.233, 724038.732, 746951.801), stdev = 22633.300
[info]   CI (99.9%): [636885.952, 811191.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   898.131 ±(99.9%) 107.633 MB/sec [Average]
[info]   (min, avg, max) = (863.068, 898.131, 926.607), stdev = 27.952
[info]   CI (99.9%): [790.498, 1005.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.044 ±(99.9%) 0.278 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.166), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.053 ±(99.9%) 571.040 MB/sec [Average]
[info]   (min, avg, max) = (680.944, 946.053, 1021.597), stdev = 148.297
[info]   CI (99.9%): [375.013, 1517.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2054.120 ±(99.9%) 1180.567 B/op [Average]
[info]   (min, avg, max) = (1521.149, 2054.120, 2310.545), stdev = 306.590
[info]   CI (99.9%): [873.553, 3234.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.703 ±(99.9%) 14.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.703, 8.513), stdev = 3.807
[info]   CI (99.9%): [≈ 0, 16.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 4.037
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 61.29% complete, ETA 00:30:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 715231.215 ops/s
[info] # Warmup Iteration   2: 772764.554 ops/s
[info] # Warmup Iteration   3: 730477.796 ops/s
[info] Iteration   1: 770340.806 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 770371.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 770368.557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 770882.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 771525.641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   770697.652 ±(99.9%) 1983.880 ops/s [Average]
[info]   (min, avg, max) = (770340.806, 770697.652, 771525.641), stdev = 515.207
[info]   CI (99.9%): [768713.772, 772681.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 61.56% complete, ETA 00:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146777.616 ops/s
[info] # Warmup Iteration   2: 191193.922 ops/s
[info] # Warmup Iteration   3: 195268.764 ops/s
[info] Iteration   1: 191722.425 ops/s
[info]                  ·gc.alloc.rate:            624.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5512.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 189276.059 ops/s
[info]                  ·gc.alloc.rate:            616.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2791.653 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 187875.341 ops/s
[info]                  ·gc.alloc.rate:            612.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5624.905 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 188978.653 ops/s
[info]                  ·gc.alloc.rate:            615.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5592.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 188294.098 ops/s
[info]                  ·gc.alloc.rate:            613.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5612.450 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   189229.315 ±(99.9%) 5772.271 ops/s [Average]
[info]   (min, avg, max) = (187875.341, 189229.315, 191722.425), stdev = 1499.040
[info]   CI (99.9%): [183457.044, 195001.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   616.444 ±(99.9%) 18.728 MB/sec [Average]
[info]   (min, avg, max) = (612.058, 616.444, 624.536), stdev = 4.864
[info]   CI (99.9%): [597.716, 635.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   604.207 ±(99.9%) 578.024 MB/sec [Average]
[info]   (min, avg, max) = (335.680, 604.207, 671.366), stdev = 150.111
[info]   CI (99.9%): [26.183, 1182.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5026.635 ±(99.9%) 4813.938 B/op [Average]
[info]   (min, avg, max) = (2791.653, 5026.635, 5624.905), stdev = 1250.165
[info]   CI (99.9%): [212.697, 9840.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Run progress: 61.83% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91542.416 ops/s
[info] # Warmup Iteration   2: 123822.264 ops/s
[info] # Warmup Iteration   3: 119169.946 ops/s
[info] Iteration   1: 120625.809 ops/s
[info]                  ·gc.alloc.rate:                   1484.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              19360.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17591.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 123325.745 ops/s
[info]                  ·gc.alloc.rate:                                  1516.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19360.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21721.001 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 121925.345 ops/s
[info]                  ·gc.alloc.rate:            1499.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       19360.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17576.301 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 122364.475 ops/s
[info]                  ·gc.alloc.rate:                                  1505.001 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19360.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21891.029 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 124301.037 ops/s
[info]                  ·gc.alloc.rate:                                  1528.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19360.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17239.269 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   122508.482 ±(99.9%) 5372.448 ops/s [Average]
[info]   (min, avg, max) = (120625.809, 122508.482, 124301.037), stdev = 1395.208
[info]   CI (99.9%): [117136.034, 127880.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1506.833 ±(99.9%) 65.417 MB/sec [Average]
[info]   (min, avg, max) = (1484.067, 1506.833, 1528.745), stdev = 16.989
[info]   CI (99.9%): [1441.417, 1572.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19360.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19360.003, 19360.003, 19360.004), stdev = 0.001
[info]   CI (99.9%): [19360.003, 19360.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.300 ±(99.9%) 2.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.463), stdev = 0.650
[info]   CI (99.9%): [≈ 0, 2.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.939 ±(99.9%) 727.327 MB/sec [Average]
[info]   (min, avg, max) = (1348.483, 1494.939, 1701.788), stdev = 188.885
[info]   CI (99.9%): [767.612, 2222.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19203.776 ±(99.9%) 9166.200 B/op [Average]
[info]   (min, avg, max) = (17239.269, 19203.776, 21891.029), stdev = 2380.433
[info]   CI (99.9%): [10037.576, 28369.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.691 ±(99.9%) 74.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.691, 43.457), stdev = 19.434
[info]   CI (99.9%): [≈ 0, 83.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.219
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 62.10% complete, ETA 00:30:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103346.362 ops/s
[info] # Warmup Iteration   2: 159767.903 ops/s
[info] # Warmup Iteration   3: 163083.594 ops/s
[info] Iteration   1: 163356.673 ops/s
[info]                  ·gc.alloc.rate:            871.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9722.823 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 163372.775 ops/s
[info]                  ·gc.alloc.rate:            871.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6481.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 162814.307 ops/s
[info]                  ·gc.alloc.rate:            868.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9755.483 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 159588.422 ops/s
[info]                  ·gc.alloc.rate:                                  851.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.419 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10031.548 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                39.417 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 163620.739 ops/s
[info]                  ·gc.alloc.rate:                                  873.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6548.514 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   162550.583 ±(99.9%) 6476.344 ops/s [Average]
[info]   (min, avg, max) = (159588.422, 162550.583, 163620.739), stdev = 1681.886
[info]   CI (99.9%): [156074.240, 169026.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   867.480 ±(99.9%) 34.610 MB/sec [Average]
[info]   (min, avg, max) = (851.681, 867.480, 873.482), stdev = 8.988
[info]   CI (99.9%): [832.870, 902.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.144 ±(99.9%) 0.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.419), stdev = 0.201
[info]   CI (99.9%): [≈ 0, 0.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.728 ±(99.9%) 706.485 MB/sec [Average]
[info]   (min, avg, max) = (672.654, 877.728, 1017.104), stdev = 183.472
[info]   CI (99.9%): [171.243, 1584.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8507.955 ±(99.9%) 7021.456 B/op [Average]
[info]   (min, avg, max) = (6481.406, 8507.955, 10031.548), stdev = 1823.450
[info]   CI (99.9%): [1486.499, 15529.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.883 ±(99.9%) 67.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.883, 39.417), stdev = 17.628
[info]   CI (99.9%): [≈ 0, 75.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.200, 13.000), stdev = 4.764
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 62.37% complete, ETA 00:29:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300142.686 ops/s
[info] # Warmup Iteration   2: 306676.055 ops/s
[info] # Warmup Iteration   3: 315997.707 ops/s
[info] Iteration   1: 316283.248 ops/s
[info]                  ·gc.alloc.rate:            614.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3354.563 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 314309.614 ops/s
[info]                  ·gc.alloc.rate:            610.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3375.585 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 315709.716 ops/s
[info]                  ·gc.alloc.rate:            612.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1680.320 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 315169.763 ops/s
[info]                  ·gc.alloc.rate:            612.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3366.386 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 312118.085 ops/s
[info]                  ·gc.alloc.rate:            606.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3399.287 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   314718.085 ±(99.9%) 6257.720 ops/s [Average]
[info]   (min, avg, max) = (312118.085, 314718.085, 316283.248), stdev = 1625.110
[info]   CI (99.9%): [308460.365, 320975.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   611.039 ±(99.9%) 12.030 MB/sec [Average]
[info]   (min, avg, max) = (606.061, 611.039, 614.002), stdev = 3.124
[info]   CI (99.9%): [599.009, 623.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.659 ±(99.9%) 580.379 MB/sec [Average]
[info]   (min, avg, max) = (337.038, 606.659, 674.174), stdev = 150.722
[info]   CI (99.9%): [26.280, 1187.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3035.228 ±(99.9%) 2917.227 B/op [Average]
[info]   (min, avg, max) = (1680.320, 3035.228, 3399.287), stdev = 757.595
[info]   CI (99.9%): [118.001, 5952.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Run progress: 62.63% complete, ETA 00:29:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23288.935 ops/s
[info] # Warmup Iteration   2: 59280.363 ops/s
[info] # Warmup Iteration   3: 60355.158 ops/s
[info] Iteration   1: 61741.540 ops/s
[info]                  ·gc.alloc.rate:                                  2606.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60739.026 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 61559.412 ops/s
[info]                  ·gc.alloc.rate:                                  2598.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69621.223 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 61733.932 ops/s
[info]                  ·gc.alloc.rate:                                  2605.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60746.896 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 61322.800 ops/s
[info]                  ·gc.alloc.rate:                                  2587.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69890.250 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 59784.666 ops/s
[info]                  ·gc.alloc.rate:                                  2523.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.281 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71687.912 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   61228.470 ±(99.9%) 3176.327 ops/s [Average]
[info]   (min, avg, max) = (59784.666, 61228.470, 61741.540), stdev = 824.882
[info]   CI (99.9%): [58052.143, 64404.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2584.274 ±(99.9%) 132.900 MB/sec [Average]
[info]   (min, avg, max) = (2523.949, 2584.274, 2606.065), stdev = 34.514
[info]   CI (99.9%): [2451.374, 2717.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.007, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.186, 0.281), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2586.841 ±(99.9%) 717.988 MB/sec [Average]
[info]   (min, avg, max) = (2382.437, 2586.841, 2723.636), stdev = 186.459
[info]   CI (99.9%): [1868.853, 3304.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66537.061 ±(99.9%) 20595.583 B/op [Average]
[info]   (min, avg, max) = (60739.026, 66537.061, 71687.912), stdev = 5348.608
[info]   CI (99.9%): [45941.478, 87132.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.342
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Run progress: 62.90% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140604.413 ops/s
[info] # Warmup Iteration   2: 178731.054 ops/s
[info] # Warmup Iteration   3: 181935.976 ops/s
[info] Iteration   1: 182828.475 ops/s
[info]                  ·gc.alloc.rate:            629.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5803.376 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 180253.337 ops/s
[info]                  ·gc.alloc.rate:            620.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2943.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 178944.501 ops/s
[info]                  ·gc.alloc.rate:            615.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5929.223 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 181824.921 ops/s
[info]                  ·gc.alloc.rate:            625.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5835.353 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 182008.550 ops/s
[info]                  ·gc.alloc.rate:            626.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5829.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   181171.957 ±(99.9%) 5988.873 ops/s [Average]
[info]   (min, avg, max) = (178944.501, 181171.957, 182828.475), stdev = 1555.291
[info]   CI (99.9%): [175183.083, 187160.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   623.418 ±(99.9%) 20.351 MB/sec [Average]
[info]   (min, avg, max) = (615.867, 623.418, 629.089), stdev = 5.285
[info]   CI (99.9%): [603.067, 643.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.002, 5416.002, 5416.002), stdev = 0.001
[info]   CI (99.9%): [5416.002, 5416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.693 ±(99.9%) 580.386 MB/sec [Average]
[info]   (min, avg, max) = (337.069, 606.693, 674.226), stdev = 150.724
[info]   CI (99.9%): [26.307, 1187.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5268.089 ±(99.9%) 5008.074 B/op [Average]
[info]   (min, avg, max) = (2943.102, 5268.089, 5929.223), stdev = 1300.581
[info]   CI (99.9%): [260.015, 10276.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 63.17% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198144.887 ops/s
[info] # Warmup Iteration   2: 291111.054 ops/s
[info] # Warmup Iteration   3: 293529.504 ops/s
[info] Iteration   1: 301261.449 ops/s
[info]                  ·gc.alloc.rate:            297.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1757.365 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 294711.984 ops/s
[info]                  ·gc.alloc.rate:            290.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1796.475 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 303755.795 ops/s
[info]                  ·gc.alloc.rate:      299.530 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 305276.310 ops/s
[info]                  ·gc.alloc.rate:            300.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1734.302 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 303087.678 ops/s
[info]                  ·gc.alloc.rate:            298.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1746.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   301618.643 ±(99.9%) 15868.852 ops/s [Average]
[info]   (min, avg, max) = (294711.984, 301618.643, 305276.310), stdev = 4121.090
[info]   CI (99.9%): [285749.791, 317487.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   297.407 ±(99.9%) 15.608 MB/sec [Average]
[info]   (min, avg, max) = (290.611, 297.407, 300.998), stdev = 4.053
[info]   CI (99.9%): [281.799, 313.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.092 ±(99.9%) 579.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.092, 336.389), stdev = 150.427
[info]   CI (99.9%): [≈ 0, 848.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1406.993 ±(99.9%) 3029.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1406.993, 1796.475), stdev = 786.877
[info]   CI (99.9%): [≈ 0, 4436.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 63.44% complete, ETA 00:29:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1338837.792 ops/s
[info] # Warmup Iteration   2: 1462297.425 ops/s
[info] # Warmup Iteration   3: 1483650.878 ops/s
[info] Iteration   1: 1479643.636 ops/s
[info]                  ·gc.alloc.rate:            1097.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1074.183 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1471262.909 ops/s
[info]                  ·gc.alloc.rate:                   1092.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1439.433 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.276 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1522683.396 ops/s
[info]                  ·gc.alloc.rate:                                  1130.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1055.521 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1527809.089 ops/s
[info]                  ·gc.alloc.rate:                                  1133.715 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1051.966 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1503399.816 ops/s
[info]                  ·gc.alloc.rate:                                  1115.672 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1425.409 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1500959.769 ±(99.9%) 96938.322 ops/s [Average]
[info]   (min, avg, max) = (1471262.909, 1500959.769, 1527809.089), stdev = 25174.574
[info]   CI (99.9%): [1404021.447, 1597898.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1113.863 ±(99.9%) 71.755 MB/sec [Average]
[info]   (min, avg, max) = (1092.121, 1113.863, 1133.715), stdev = 18.634
[info]   CI (99.9%): [1042.108, 1185.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.125), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.872 ±(99.9%) 710.123 MB/sec [Average]
[info]   (min, avg, max) = (1009.617, 1151.872, 1361.548), stdev = 184.417
[info]   CI (99.9%): [441.749, 1861.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1209.302 ±(99.9%) 785.198 B/op [Average]
[info]   (min, avg, max) = (1051.966, 1209.302, 1439.433), stdev = 203.914
[info]   CI (99.9%): [424.104, 1994.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.855 ±(99.9%) 7.363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.855, 4.276), stdev = 1.912
[info]   CI (99.9%): [≈ 0, 8.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.71% complete, ETA 00:28:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1454510.417 ops/s
[info] # Warmup Iteration   2: 1611949.308 ops/s
[info] # Warmup Iteration   3: 1611714.323 ops/s
[info] Iteration   1: 1610962.161 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1568356.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1558790.160 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1585023.243 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1617584.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1588143.406 ±(99.9%) 99118.128 ops/s [Average]
[info]   (min, avg, max) = (1558790.160, 1588143.406, 1617584.517), stdev = 25740.663
[info]   CI (99.9%): [1489025.278, 1687261.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Run progress: 63.98% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150355.501 ops/s
[info] # Warmup Iteration   2: 289133.137 ops/s
[info] # Warmup Iteration   3: 284578.970 ops/s
[info] Iteration   1: 289333.760 ops/s
[info]                  ·gc.alloc.rate:                   786.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5486.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 291255.941 ops/s
[info]                  ·gc.alloc.rate:            791.968 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3635.739 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 290974.936 ops/s
[info]                  ·gc.alloc.rate:                   791.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3635.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 290184.375 ops/s
[info]                  ·gc.alloc.rate:                   789.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5473.772 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.678 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 293828.695 ops/s
[info]                  ·gc.alloc.rate:                                  799.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.165 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3646.638 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   291115.541 ±(99.9%) 6512.742 ops/s [Average]
[info]   (min, avg, max) = (289333.760, 291115.541, 293828.695), stdev = 1691.338
[info]   CI (99.9%): [284602.800, 297628.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   791.631 ±(99.9%) 17.952 MB/sec [Average]
[info]   (min, avg, max) = (786.719, 791.631, 799.128), stdev = 4.662
[info]   CI (99.9%): [773.679, 809.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.002), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.165), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.673 ±(99.9%) 703.657 MB/sec [Average]
[info]   (min, avg, max) = (672.107, 808.673, 1009.214), stdev = 182.738
[info]   CI (99.9%): [105.016, 1512.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4375.584 ±(99.9%) 3882.050 B/op [Average]
[info]   (min, avg, max) = (3635.659, 4375.584, 5486.113), stdev = 1008.156
[info]   CI (99.9%): [493.534, 8257.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.781 ±(99.9%) 34.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.781, 21.678), stdev = 9.069
[info]   CI (99.9%): [≈ 0, 40.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 14.000), stdev = 4.764
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 64.25% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2649.585 ops/s
[info] # Warmup Iteration   2: 4265.864 ops/s
[info] # Warmup Iteration   3: 4358.790 ops/s
[info] Iteration   1: 4291.110 ops/s
[info]                  ·gc.alloc.rate:            846.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       310616.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 370042.544 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4320.712 ops/s
[info]                  ·gc.alloc.rate:                   852.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              310616.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244797.127 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 242.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4260.971 ops/s
[info]                  ·gc.alloc.rate:                   840.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              310616.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        372488.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 246.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 4370.559 ops/s
[info]                  ·gc.alloc.rate:                   862.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              310616.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        242237.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1439.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 4354.817 ops/s
[info]                  ·gc.alloc.rate:                                  859.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310616.094 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.206 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 74.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       369023.647 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4319.634 ±(99.9%) 173.143 ops/s [Average]
[info]   (min, avg, max) = (4260.971, 4319.634, 4370.559), stdev = 44.965
[info]   CI (99.9%): [4146.490, 4492.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   852.429 ±(99.9%) 34.294 MB/sec [Average]
[info]   (min, avg, max) = (840.822, 852.429, 862.518), stdev = 8.906
[info]   CI (99.9%): [818.135, 886.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310616.100 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (310616.094, 310616.100, 310616.108), stdev = 0.006
[info]   CI (99.9%): [310616.078, 310616.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.206), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   14.867 ±(99.9%) 128.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.867, 74.336), stdev = 33.244
[info]   CI (99.9%): [≈ 0, 142.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   876.540 ±(99.9%) 718.243 MB/sec [Average]
[info]   (min, avg, max) = (671.932, 876.540, 1021.025), stdev = 186.526
[info]   CI (99.9%): [158.297, 1594.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   319717.746 ±(99.9%) 267922.028 B/op [Average]
[info]   (min, avg, max) = (242237.365, 319717.746, 372488.049), stdev = 69578.500
[info]   CI (99.9%): [51795.718, 587639.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   385.535 ±(99.9%) 2316.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 385.535, 1439.034), stdev = 601.461
[info]   CI (99.9%): [≈ 0, 2701.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Run progress: 64.52% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1773.884 ops/s
[info] # Warmup Iteration   2: 4229.964 ops/s
[info] # Warmup Iteration   3: 4287.328 ops/s
[info] Iteration   1: 4360.036 ops/s
[info]                  ·gc.alloc.rate:                   819.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.596 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        363070.342 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 240.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 4371.708 ops/s
[info]                  ·gc.alloc.rate:            821.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       295816.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 241702.403 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 4366.252 ops/s
[info]                  ·gc.alloc.rate:                   820.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        362488.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 480.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 4385.933 ops/s
[info]                  ·gc.alloc.rate:                   824.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              295816.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240692.052 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1673.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4442.164 ops/s
[info]                  ·gc.alloc.rate:                                  834.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             295816.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.638 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       361480.295 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                235.953 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4385.219 ±(99.9%) 127.997 ops/s [Average]
[info]   (min, avg, max) = (4360.036, 4385.219, 4442.164), stdev = 33.240
[info]   CI (99.9%): [4257.222, 4513.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   824.303 ±(99.9%) 24.033 MB/sec [Average]
[info]   (min, avg, max) = (819.322, 824.303, 834.978), stdev = 6.241
[info]   CI (99.9%): [800.270, 848.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   295816.094 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (295816.092, 295816.094, 295816.101), stdev = 0.003
[info]   CI (99.9%): [295816.081, 295816.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.328 ±(99.9%) 20.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.328, 11.638), stdev = 5.205
[info]   CI (99.9%): [≈ 0, 22.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   874.843 ±(99.9%) 716.445 MB/sec [Average]
[info]   (min, avg, max) = (670.764, 874.843, 1020.324), stdev = 186.059
[info]   CI (99.9%): [158.398, 1591.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   313886.718 ±(99.9%) 255526.893 B/op [Average]
[info]   (min, avg, max) = (240692.052, 313886.718, 363070.342), stdev = 66359.523
[info]   CI (99.9%): [58359.825, 569413.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 7.117 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 4.663), stdev = 1.848
[info]   CI (99.9%): [≈ 0, 8.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   525.929 ±(99.9%) 2554.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 525.929, 1673.132), stdev = 663.393
[info]   CI (99.9%): [≈ 0, 3080.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 14.000), stdev = 3.962
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 64.78% complete, ETA 00:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16765.828 ops/s
[info] # Warmup Iteration   2: 27597.070 ops/s
[info] # Warmup Iteration   3: 29876.822 ops/s
[info] Iteration   1: 29711.880 ops/s
[info]                  ·gc.alloc.rate:            504.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35637.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 29397.081 ops/s
[info]                  ·gc.alloc.rate:            499.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18009.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 29986.646 ops/s
[info]                  ·gc.alloc.rate:            509.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35310.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 30128.952 ops/s
[info]                  ·gc.alloc.rate:            512.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17572.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 30106.106 ops/s
[info]                  ·gc.alloc.rate:            511.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       26744.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35171.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   29866.133 ±(99.9%) 1194.613 ops/s [Average]
[info]   (min, avg, max) = (29397.081, 29866.133, 30128.952), stdev = 310.237
[info]   CI (99.9%): [28671.520, 31060.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   507.552 ±(99.9%) 20.345 MB/sec [Average]
[info]   (min, avg, max) = (499.534, 507.552, 512.013), stdev = 5.284
[info]   CI (99.9%): [487.207, 527.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (26744.014, 26744.015, 26744.018), stdev = 0.002
[info]   CI (99.9%): [26744.007, 26744.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.281 ±(99.9%) 709.619 MB/sec [Average]
[info]   (min, avg, max) = (336.386, 538.281, 672.915), stdev = 184.286
[info]   CI (99.9%): [≈ 0, 1247.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28340.245 ±(99.9%) 37092.630 B/op [Average]
[info]   (min, avg, max) = (17572.539, 28340.245, 35637.047), stdev = 9632.838
[info]   CI (99.9%): [≈ 0, 65432.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.05% complete, ETA 00:27:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1401.171 ops/s
[info] # Warmup Iteration   2: 3688.245 ops/s
[info] # Warmup Iteration   3: 3639.920 ops/s
[info] Iteration   1: 3685.249 ops/s
[info]                  ·gc.alloc.rate:                   940.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.629 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        429725.613 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 284.398 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 3674.034 ops/s
[info]                  ·gc.alloc.rate:            938.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       401792.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 431414.126 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 3711.261 ops/s
[info]                  ·gc.alloc.rate:                   947.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              401792.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        426831.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1977.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 3639.595 ops/s
[info]                  ·gc.alloc.rate:                                  929.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             401792.112 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            679.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294039.027 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                287.991 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3697.199 ops/s
[info]                  ·gc.alloc.rate:                                  943.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             401792.110 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434685.508 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3681.468 ±(99.9%) 104.714 ops/s [Average]
[info]   (min, avg, max) = (3639.595, 3681.468, 3711.261), stdev = 27.194
[info]   CI (99.9%): [3576.753, 3786.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   939.818 ±(99.9%) 26.631 MB/sec [Average]
[info]   (min, avg, max) = (929.160, 939.818, 947.460), stdev = 6.916
[info]   CI (99.9%): [913.187, 966.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   401792.216 ±(99.9%) 0.889 B/op [Average]
[info]   (min, avg, max) = (401792.110, 401792.216, 401792.629), stdev = 0.231
[info]   CI (99.9%): [401791.327, 401793.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.781 ±(99.9%) 17.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.781, 10.221), stdev = 4.455
[info]   CI (99.9%): [≈ 0, 19.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   944.153 ±(99.9%) 569.168 MB/sec [Average]
[info]   (min, avg, max) = (679.977, 944.153, 1020.986), stdev = 147.811
[info]   CI (99.9%): [374.986, 1513.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   403339.144 ±(99.9%) 235531.089 B/op [Average]
[info]   (min, avg, max) = (294039.027, 403339.144, 434685.508), stdev = 61166.676
[info]   CI (99.9%): [167808.056, 638870.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   509.954 ±(99.9%) 3206.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 509.954, 1977.379), stdev = 832.704
[info]   CI (99.9%): [≈ 0, 3716.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 14.000), stdev = 6.140
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 65.32% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10390.925 ops/s
[info] # Warmup Iteration   2: 14276.464 ops/s
[info] # Warmup Iteration   3: 13858.673 ops/s
[info] Iteration   1: 13877.921 ops/s
[info]                  ·gc.alloc.rate:            772.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       87584.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76290.287 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 14010.461 ops/s
[info]                  ·gc.alloc.rate:                   779.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              87606.813 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        113215.977 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 14029.460 ops/s
[info]                  ·gc.alloc.rate:            781.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75474.755 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 14318.903 ops/s
[info]                  ·gc.alloc.rate:                   797.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              87648.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73878.443 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 14075.524 ops/s
[info]                  ·gc.alloc.rate:                                  783.758 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87648.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.229 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.599 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113736.010 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                446.900 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14062.454 ±(99.9%) 620.245 ops/s [Average]
[info]   (min, avg, max) = (13877.921, 14062.454, 14318.903), stdev = 161.076
[info]   CI (99.9%): [13442.209, 14682.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   782.848 ±(99.9%) 35.354 MB/sec [Average]
[info]   (min, avg, max) = (772.163, 782.848, 797.341), stdev = 9.181
[info]   CI (99.9%): [747.494, 818.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87626.987 ±(99.9%) 115.213 B/op [Average]
[info]   (min, avg, max) = (87584.029, 87626.987, 87648.036), stdev = 29.921
[info]   CI (99.9%): [87511.774, 87742.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.229), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.120 ±(99.9%) 44.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.120, 25.599), stdev = 11.448
[info]   CI (99.9%): [≈ 0, 49.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.426 ±(99.9%) 717.018 MB/sec [Average]
[info]   (min, avg, max) = (672.078, 808.426, 1017.039), stdev = 186.207
[info]   CI (99.9%): [91.408, 1525.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90519.094 ±(99.9%) 80768.945 B/op [Average]
[info]   (min, avg, max) = (73878.443, 90519.094, 113736.010), stdev = 20975.438
[info]   CI (99.9%): [9750.150, 171288.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   118.990 ±(99.9%) 720.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.990, 446.900), stdev = 187.008
[info]   CI (99.9%): [≈ 0, 839.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 11.000), stdev = 1.732
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Run progress: 65.59% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9758.145 ops/s
[info] # Warmup Iteration   2: 15766.354 ops/s
[info] # Warmup Iteration   3: 16401.967 ops/s
[info] Iteration   1: 16405.712 ops/s
[info]                  ·gc.alloc.rate:                   849.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        96556.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 15882.600 ops/s
[info]                  ·gc.alloc.rate:            822.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66538.534 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 15846.322 ops/s
[info]                  ·gc.alloc.rate:                   820.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        66619.308 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 66.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 16050.180 ops/s
[info]                  ·gc.alloc.rate:                                  831.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99220.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                457.237 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 16729.673 ops/s
[info]                  ·gc.alloc.rate:                                  866.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.484 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64043.786 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16182.897 ±(99.9%) 1453.185 ops/s [Average]
[info]   (min, avg, max) = (15846.322, 16182.897, 16729.673), stdev = 377.387
[info]   CI (99.9%): [14729.713, 17636.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   838.349 ±(99.9%) 75.070 MB/sec [Average]
[info]   (min, avg, max) = (820.918, 838.349, 866.587), stdev = 19.495
[info]   CI (99.9%): [763.279, 913.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.025 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (81536.009, 81536.025, 81536.044), stdev = 0.015
[info]   CI (99.9%): [81535.969, 81536.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.058), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.930 ±(99.9%) 10.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.930, 5.484), stdev = 2.684
[info]   CI (99.9%): [≈ 0, 12.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.249 ±(99.9%) 706.593 MB/sec [Average]
[info]   (min, avg, max) = (670.734, 808.249, 1012.044), stdev = 183.500
[info]   CI (99.9%): [101.656, 1514.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   78595.762 ±(99.9%) 68030.830 B/op [Average]
[info]   (min, avg, max) = (64043.786, 78595.762, 99220.516), stdev = 17667.391
[info]   CI (99.9%): [10564.932, 146626.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   117.459 ±(99.9%) 742.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117.459, 457.237), stdev = 192.706
[info]   CI (99.9%): [≈ 0, 859.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.037
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 65.86% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234072.136 ops/s
[info] # Warmup Iteration   2: 252624.661 ops/s
[info] # Warmup Iteration   3: 262012.341 ops/s
[info] Iteration   1: 263004.625 ops/s
[info]                  ·gc.alloc.rate:            927.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6039.335 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 255061.965 ops/s
[info]                  ·gc.alloc.rate:                   899.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6223.271 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 262847.667 ops/s
[info]                  ·gc.alloc.rate:                   927.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6043.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 268683.185 ops/s
[info]                  ·gc.alloc.rate:                                  947.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3987.856 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 259641.050 ops/s
[info]                  ·gc.alloc.rate:                                  915.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6190.160 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   261847.698 ±(99.9%) 19251.080 ops/s [Average]
[info]   (min, avg, max) = (255061.965, 261847.698, 268683.185), stdev = 4999.444
[info]   CI (99.9%): [242596.619, 281098.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   923.586 ±(99.9%) 67.693 MB/sec [Average]
[info]   (min, avg, max) = (899.827, 923.586, 947.728), stdev = 17.580
[info]   CI (99.9%): [855.894, 991.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.169), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.227 ±(99.9%) 1.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.227, 0.989), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 1.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.681 ±(99.9%) 570.692 MB/sec [Average]
[info]   (min, avg, max) = (680.728, 945.681, 1021.031), stdev = 148.207
[info]   CI (99.9%): [374.989, 1516.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5696.745 ±(99.9%) 3692.565 B/op [Average]
[info]   (min, avg, max) = (3987.856, 5696.745, 6223.271), stdev = 958.947
[info]   CI (99.9%): [2004.180, 9389.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.609 ±(99.9%) 40.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.609, 23.933), stdev = 10.397
[info]   CI (99.9%): [≈ 0, 45.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.13% complete, ETA 00:26:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250426.693 ops/s
[info] # Warmup Iteration   2: 273827.559 ops/s
[info] # Warmup Iteration   3: 275940.940 ops/s
[info] Iteration   1: 275435.226 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 276302.458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 275346.147 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 274951.376 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 276709.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   275748.970 ±(99.9%) 2807.340 ops/s [Average]
[info]   (min, avg, max) = (274951.376, 275748.970, 276709.642), stdev = 729.057
[info]   CI (99.9%): [272941.630, 278556.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 66.40% complete, ETA 00:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9569.002 ops/s
[info] # Warmup Iteration   2: 14912.420 ops/s
[info] # Warmup Iteration   3: 14762.240 ops/s
[info] Iteration   1: 14608.560 ops/s
[info]                  ·gc.alloc.rate:            830.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       89464.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108510.500 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 14784.147 ops/s
[info]                  ·gc.alloc.rate:            830.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       88454.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71479.313 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 14666.021 ops/s
[info]                  ·gc.alloc.rate:            814.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       87392.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108081.458 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 14857.353 ops/s
[info]                  ·gc.alloc.rate:                   825.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71128.170 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 493.946 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 15466.679 ops/s
[info]                  ·gc.alloc.rate:                                  860.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87525.880 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.239 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103901.946 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14876.552 ±(99.9%) 1324.560 ops/s [Average]
[info]   (min, avg, max) = (14608.560, 14876.552, 15466.679), stdev = 343.984
[info]   CI (99.9%): [13551.992, 16201.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   832.187 ±(99.9%) 65.052 MB/sec [Average]
[info]   (min, avg, max) = (814.653, 832.187, 860.097), stdev = 16.894
[info]   CI (99.9%): [767.134, 897.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   88045.601 ±(99.9%) 3499.228 B/op [Average]
[info]   (min, avg, max) = (87392.010, 88045.601, 89464.048), stdev = 908.738
[info]   CI (99.9%): [84546.373, 91544.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.048 ±(99.9%) 0.411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.239), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.855 ±(99.9%) 41.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.855, 24.277), stdev = 10.857
[info]   CI (99.9%): [≈ 0, 46.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   875.695 ±(99.9%) 718.173 MB/sec [Average]
[info]   (min, avg, max) = (671.365, 875.695, 1021.021), stdev = 186.507
[info]   CI (99.9%): [157.522, 1593.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   92620.278 ±(99.9%) 75252.124 B/op [Average]
[info]   (min, avg, max) = (71128.170, 92620.278, 108510.500), stdev = 19542.738
[info]   CI (99.9%): [17368.154, 167872.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   98.789 ±(99.9%) 850.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.789, 493.946), stdev = 220.899
[info]   CI (99.9%): [≈ 0, 949.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 12.000), stdev = 3.701
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 66.67% complete, ETA 00:26:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 537564.398 ops/s
[info] # Warmup Iteration   2: 825953.890 ops/s
[info] # Warmup Iteration   3: 835677.510 ops/s
[info] Iteration   1: 842194.103 ops/s
[info]                  ·gc.alloc.rate:                                  2713.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5089.051 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 839527.517 ops/s
[info]                  ·gc.alloc.rate:                                  2705.643 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5105.221 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 838609.048 ops/s
[info]                  ·gc.alloc.rate:                                  2702.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2721.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5108.434 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 830524.591 ops/s
[info]                  ·gc.alloc.rate:                                  2676.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4515.518 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 812834.573 ops/s
[info]                  ·gc.alloc.rate:                                  2619.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5272.882 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   832737.966 ±(99.9%) 46007.953 ops/s [Average]
[info]   (min, avg, max) = (812834.573, 832737.966, 842194.103), stdev = 11948.119
[info]   CI (99.9%): [786730.013, 878745.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2683.576 ±(99.9%) 148.036 MB/sec [Average]
[info]   (min, avg, max) = (2619.328, 2683.576, 2713.545), stdev = 38.444
[info]   CI (99.9%): [2535.541, 2831.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5072.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5072.000, 5072.000, 5072.001), stdev = 0.001
[info]   CI (99.9%): [5072.000, 5072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.006, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2654.835 ±(99.9%) 584.630 MB/sec [Average]
[info]   (min, avg, max) = (2383.241, 2654.835, 2723.365), stdev = 151.827
[info]   CI (99.9%): [2070.204, 3239.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5018.221 ±(99.9%) 1119.814 B/op [Average]
[info]   (min, avg, max) = (4515.518, 5018.221, 5272.882), stdev = 290.812
[info]   CI (99.9%): [3898.407, 6138.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 66.94% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 588135.864 ops/s
[info] # Warmup Iteration   2: 1344662.928 ops/s
[info] # Warmup Iteration   3: 1372467.290 ops/s
[info] Iteration   1: 1371076.122 ops/s
[info]                  ·gc.alloc.rate:                   1288.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1543.829 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 1364117.274 ops/s
[info]                  ·gc.alloc.rate:                                  1282.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1168.975 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.611 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 1385937.166 ops/s
[info]                  ·gc.alloc.rate:                                  1303.573 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1546.206 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1384060.824 ops/s
[info]                  ·gc.alloc.rate:            1301.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       1480.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1548.341 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1387927.141 ops/s
[info]                  ·gc.alloc.rate:                                  1305.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1480.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1543.993 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1378623.706 ±(99.9%) 40248.230 ops/s [Average]
[info]   (min, avg, max) = (1364117.274, 1378623.706, 1387927.141), stdev = 10452.338
[info]   CI (99.9%): [1338375.475, 1418871.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1296.404 ±(99.9%) 38.038 MB/sec [Average]
[info]   (min, avg, max) = (1282.899, 1296.404, 1305.109), stdev = 9.878
[info]   CI (99.9%): [1258.366, 1334.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.066), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.076), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.570 ±(99.9%) 593.236 MB/sec [Average]
[info]   (min, avg, max) = (1013.295, 1288.570, 1361.887), stdev = 154.061
[info]   CI (99.9%): [695.334, 1881.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1470.269 ±(99.9%) 648.597 B/op [Average]
[info]   (min, avg, max) = (1168.975, 1470.269, 1548.341), stdev = 168.439
[info]   CI (99.9%): [821.672, 2118.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.075 ±(99.9%) 7.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.075, 4.611), stdev = 2.004
[info]   CI (99.9%): [≈ 0, 8.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 6.387
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 67.20% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6777141.499 ops/s
[info] # Warmup Iteration   2: 7777712.895 ops/s
[info] # Warmup Iteration   3: 7812332.677 ops/s
[info] Iteration   1: 7631663.052 ops/s
[info]                  ·gc.alloc.rate:                                  1901.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       421.208 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7413663.987 ops/s
[info]                  ·gc.alloc.rate:                                  1846.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       361.318 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7658705.445 ops/s
[info]                  ·gc.alloc.rate:                                  1907.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       419.708 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7645832.182 ops/s
[info]                  ·gc.alloc.rate:                                  1904.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350.355 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7437794.303 ops/s
[info]                  ·gc.alloc.rate:                                  1852.038 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       432.184 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7557531.794 ±(99.9%) 465926.015 ops/s [Average]
[info]   (min, avg, max) = (7413663.987, 7557531.794, 7658705.445), stdev = 120999.506
[info]   CI (99.9%): [7091605.779, 8023457.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1882.390 ±(99.9%) 117.368 MB/sec [Average]
[info]   (min, avg, max) = (1846.319, 1882.390, 1907.874), stdev = 30.480
[info]   CI (99.9%): [1765.022, 1999.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.034, 0.157), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1906.290 ±(99.9%) 717.942 MB/sec [Average]
[info]   (min, avg, max) = (1701.805, 1906.290, 2042.736), stdev = 186.447
[info]   CI (99.9%): [1188.348, 2624.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   396.955 ±(99.9%) 146.483 B/op [Average]
[info]   (min, avg, max) = (350.355, 396.955, 432.184), stdev = 38.041
[info]   CI (99.9%): [250.472, 543.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 67.47% complete, ETA 00:25:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51782.385 ops/s
[info] # Warmup Iteration   2: 278527.520 ops/s
[info] # Warmup Iteration   3: 279611.657 ops/s
[info] Iteration   1: 287473.923 ops/s
[info]                  ·gc.alloc.rate:                   1708.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9197.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 288853.303 ops/s
[info]                  ·gc.alloc.rate:                                  1716.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.949 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9273.395 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 288588.331 ops/s
[info]                  ·gc.alloc.rate:            1714.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11138.522 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 287816.251 ops/s
[info]                  ·gc.alloc.rate:                                  1710.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9306.898 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 293549.436 ops/s
[info]                  ·gc.alloc.rate:                                  1744.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9124.884 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   289256.249 ±(99.9%) 9488.970 ops/s [Average]
[info]   (min, avg, max) = (287473.923, 289256.249, 293549.436), stdev = 2464.255
[info]   CI (99.9%): [279767.279, 298745.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1718.863 ±(99.9%) 57.406 MB/sec [Average]
[info]   (min, avg, max) = (1708.152, 1718.863, 1744.877), stdev = 14.908
[info]   CI (99.9%): [1661.457, 1776.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.001, 9352.001, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.001, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.192 ±(99.9%) 1.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.949), stdev = 0.423
[info]   CI (99.9%): [≈ 0, 1.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1765.722 ±(99.9%) 596.154 MB/sec [Average]
[info]   (min, avg, max) = (1679.954, 1765.722, 2042.136), stdev = 154.819
[info]   CI (99.9%): [1169.567, 2361.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9608.264 ±(99.9%) 3305.130 B/op [Average]
[info]   (min, avg, max) = (9124.884, 9608.264, 11138.522), stdev = 858.332
[info]   CI (99.9%): [6303.134, 12913.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.106 ±(99.9%) 43.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.106, 25.529), stdev = 11.417
[info]   CI (99.9%): [≈ 0, 49.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 22.000), stdev = 7.842
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 67.74% complete, ETA 00:25:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 480042.849 ops/s
[info] # Warmup Iteration   2: 963022.914 ops/s
[info] # Warmup Iteration   3: 975317.745 ops/s
[info] Iteration   1: 988282.438 ops/s
[info]                  ·gc.alloc.rate:                                  2125.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3247.193 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.304 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 984035.303 ops/s
[info]                  ·gc.alloc.rate:                                  2116.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3811.005 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 988247.989 ops/s
[info]                  ·gc.alloc.rate:                                  2125.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3252.724 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 974063.581 ops/s
[info]                  ·gc.alloc.rate:                                  2094.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3300.103 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 959139.741 ops/s
[info]                  ·gc.alloc.rate:                                  2061.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3384.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3351.431 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   978753.810 ±(99.9%) 47767.322 ops/s [Average]
[info]   (min, avg, max) = (959139.741, 978753.810, 988282.438), stdev = 12405.022
[info]   CI (99.9%): [930986.488, 1026521.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2104.633 ±(99.9%) 103.996 MB/sec [Average]
[info]   (min, avg, max) = (2061.830, 2104.633, 2125.353), stdev = 27.007
[info]   CI (99.9%): [2000.637, 2208.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3384.000, 3384.000, 3384.000), stdev = 0.001
[info]   CI (99.9%): [3384.000, 3384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.036, 0.172), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.058, 0.273), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2110.007 ±(99.9%) 587.899 MB/sec [Average]
[info]   (min, avg, max) = (2039.328, 2110.007, 2383.110), stdev = 152.676
[info]   CI (99.9%): [1522.108, 2697.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3392.491 ±(99.9%) 915.331 B/op [Average]
[info]   (min, avg, max) = (3247.193, 3392.491, 3811.005), stdev = 237.708
[info]   CI (99.9%): [2477.160, 4307.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.061 ±(99.9%) 9.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.061, 5.304), stdev = 2.372
[info]   CI (99.9%): [≈ 0, 10.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 68.01% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 960553.571 ops/s
[info] # Warmup Iteration   2: 2795872.760 ops/s
[info] # Warmup Iteration   3: 2870820.032 ops/s
[info] Iteration   1: 2854395.933 ops/s
[info]                  ·gc.alloc.rate:                   1624.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        927.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.571 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 2903623.524 ops/s
[info]                  ·gc.alloc.rate:                                  1652.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       738.003 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 2880870.038 ops/s
[info]                  ·gc.alloc.rate:            1640.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       896.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 929.795 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2901987.066 ops/s
[info]                  ·gc.alloc.rate:                                  1652.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       923.052 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2873536.293 ops/s
[info]                  ·gc.alloc.rate:                                  1635.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             896.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       932.236 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   2882882.571 ±(99.9%) 79337.764 ops/s [Average]
[info]   (min, avg, max) = (2854395.933, 2882882.571, 2903623.524), stdev = 20603.765
[info]   CI (99.9%): [2803544.807, 2962220.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1641.276 ±(99.9%) 45.852 MB/sec [Average]
[info]   (min, avg, max) = (1624.574, 1641.276, 1652.719), stdev = 11.908
[info]   CI (99.9%): [1595.424, 1687.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.100 ±(99.9%) 579.617 MB/sec [Average]
[info]   (min, avg, max) = (1361.286, 1630.100, 1702.484), stdev = 150.525
[info]   CI (99.9%): [1050.483, 2209.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   890.173 ±(99.9%) 327.815 B/op [Average]
[info]   (min, avg, max) = (738.003, 890.173, 932.236), stdev = 85.132
[info]   CI (99.9%): [562.359, 1217.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.514 ±(99.9%) 4.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.514, 2.571), stdev = 1.150
[info]   CI (99.9%): [≈ 0, 4.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 19.000), stdev = 6.870
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 68.28% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9403789.969 ops/s
[info] # Warmup Iteration   2: 14035424.388 ops/s
[info] # Warmup Iteration   3: 14349012.783 ops/s
[info] Iteration   1: 13872974.000 ops/s
[info]                  ·gc.alloc.rate:            845.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.592 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114.565 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 13817411.922 ops/s
[info]                  ·gc.alloc.rate:                   842.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14086978.695 ops/s
[info]                  ·gc.alloc.rate:                   859.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 13733302.760 ops/s
[info]                  ·gc.alloc.rate:                                  837.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77.638 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.382 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 13986858.397 ops/s
[info]                  ·gc.alloc.rate:                                  853.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             96.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114.909 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   13899505.155 ±(99.9%) 537172.951 ops/s [Average]
[info]   (min, avg, max) = (13733302.760, 13899505.155, 14086978.695), stdev = 139502.109
[info]   CI (99.9%): [13362332.204, 14436678.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   847.681 ±(99.9%) 32.779 MB/sec [Average]
[info]   (min, avg, max) = (837.596, 847.681, 859.088), stdev = 8.513
[info]   CI (99.9%): [814.903, 880.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.057), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.089 ±(99.9%) 712.922 MB/sec [Average]
[info]   (min, avg, max) = (673.307, 878.089, 1021.148), stdev = 185.143
[info]   CI (99.9%): [165.167, 1591.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   99.315 ±(99.9%) 77.901 B/op [Average]
[info]   (min, avg, max) = (76.711, 99.315, 114.909), stdev = 20.231
[info]   CI (99.9%): [21.414, 177.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.382), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.114
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 68.55% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90708.742 ops/s
[info] # Warmup Iteration   2: 427335.069 ops/s
[info] # Warmup Iteration   3: 437008.875 ops/s
[info] Iteration   1: 435721.066 ops/s
[info]                  ·gc.alloc.rate:                   1514.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6068.351 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 444040.488 ops/s
[info]                  ·gc.alloc.rate:                                  1543.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.694 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1696.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6013.909 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.528 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 448506.309 ops/s
[info]                  ·gc.alloc.rate:                                  1559.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4778.102 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 448359.615 ops/s
[info]                  ·gc.alloc.rate:                                  1558.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5472.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5974.585 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 443838.381 ops/s
[info]                  ·gc.alloc.rate:            1543.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       5472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4828.163 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   444093.172 ±(99.9%) 19993.536 ops/s [Average]
[info]   (min, avg, max) = (435721.066, 444093.172, 448506.309), stdev = 5192.258
[info]   CI (99.9%): [424099.636, 464086.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1543.857 ±(99.9%) 69.590 MB/sec [Average]
[info]   (min, avg, max) = (1514.657, 1543.857, 1559.189), stdev = 18.072
[info]   CI (99.9%): [1474.267, 1613.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 1.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.694), stdev = 0.310
[info]   CI (99.9%): [≈ 0, 1.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.220 ±(99.9%) 699.136 MB/sec [Average]
[info]   (min, avg, max) = (1361.470, 1560.220, 1701.783), stdev = 181.563
[info]   CI (99.9%): [861.084, 2259.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5532.622 ±(99.9%) 2568.366 B/op [Average]
[info]   (min, avg, max) = (4778.102, 5532.622, 6068.351), stdev = 666.997
[info]   CI (99.9%): [2964.256, 8100.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.787 ±(99.9%) 27.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.787, 16.528), stdev = 7.198
[info]   CI (99.9%): [≈ 0, 31.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 22.000), stdev = 8.142
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 68.82% complete, ETA 00:24:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 978925.890 ops/s
[info] # Warmup Iteration   2: 1945900.509 ops/s
[info] # Warmup Iteration   3: 1939635.926 ops/s
[info] Iteration   1: 1911039.648 ops/s
[info]                  ·gc.alloc.rate:            1214.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 829.466 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1948445.280 ops/s
[info]                  ·gc.alloc.rate:                   1237.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1088.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.767 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 1994412.807 ops/s
[info]                  ·gc.alloc.rate:                                  1267.097 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1074.506 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1995439.644 ops/s
[info]                  ·gc.alloc.rate:                                  1267.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       805.439 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1983201.330 ops/s
[info]                  ·gc.alloc.rate:            1259.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1080.548 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   1966507.742 ±(99.9%) 140130.978 ops/s [Average]
[info]   (min, avg, max) = (1911039.648, 1966507.742, 1995439.644), stdev = 36391.570
[info]   CI (99.9%): [1826376.764, 2106638.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1249.362 ±(99.9%) 88.538 MB/sec [Average]
[info]   (min, avg, max) = (1214.313, 1249.362, 1267.602), stdev = 22.993
[info]   CI (99.9%): [1160.824, 1337.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.719 ±(99.9%) 723.337 MB/sec [Average]
[info]   (min, avg, max) = (1007.231, 1219.719, 1361.503), stdev = 187.848
[info]   CI (99.9%): [496.383, 1943.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   975.700 ±(99.9%) 557.553 B/op [Average]
[info]   (min, avg, max) = (805.439, 975.700, 1088.541), stdev = 144.795
[info]   CI (99.9%): [418.147, 1533.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.753 ±(99.9%) 6.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.753, 3.767), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 15.000), stdev = 5.550
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 69.09% complete, ETA 00:24:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7299305.627 ops/s
[info] # Warmup Iteration   2: 8461747.718 ops/s
[info] # Warmup Iteration   3: 8727014.121 ops/s
[info] Iteration   1: 8560064.946 ops/s
[info]                  ·gc.alloc.rate:            1131.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247.891 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 8696774.603 ops/s
[info]                  ·gc.alloc.rate:                   1149.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        183.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8573054.656 ops/s
[info]                  ·gc.alloc.rate:                                  1133.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             208.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 8569364.381 ops/s
[info]                  ·gc.alloc.rate:            1132.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 250.085 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 8583518.632 ops/s
[info]                  ·gc.alloc.rate:            1134.199 MB/sec
[info]                  ·gc.alloc.rate.norm:       208.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.249 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   8596555.443 ±(99.9%) 218140.216 ops/s [Average]
[info]   (min, avg, max) = (8560064.946, 8596555.443, 8696774.603), stdev = 56650.321
[info]   CI (99.9%): [8378415.227, 8814695.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1136.033 ±(99.9%) 28.488 MB/sec [Average]
[info]   (min, avg, max) = (1131.189, 1136.033, 1149.117), stdev = 7.398
[info]   CI (99.9%): [1107.545, 1164.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.639 ±(99.9%) 711.107 MB/sec [Average]
[info]   (min, avg, max) = (1011.032, 1152.639, 1361.508), stdev = 184.672
[info]   CI (99.9%): [441.532, 1863.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   211.142 ±(99.9%) 133.241 B/op [Average]
[info]   (min, avg, max) = (183.005, 211.142, 250.085), stdev = 34.602
[info]   CI (99.9%): [77.901, 344.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.121 ±(99.9%) 1.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.603), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.147
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 69.35% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101194.259 ops/s
[info] # Warmup Iteration   2: 328337.660 ops/s
[info] # Warmup Iteration   3: 329286.065 ops/s
[info] Iteration   1: 328931.160 ops/s
[info]                  ·gc.alloc.rate:                   1516.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              7256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6435.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 324009.048 ops/s
[info]                  ·gc.alloc.rate:                                  1493.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8244.835 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 337045.915 ops/s
[info]                  ·gc.alloc.rate:            1554.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6358.136 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 337928.798 ops/s
[info]                  ·gc.alloc.rate:            1557.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       7256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7926.577 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 337537.755 ops/s
[info]                  ·gc.alloc.rate:                                  1556.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7936.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   333090.535 ±(99.9%) 24247.241 ops/s [Average]
[info]   (min, avg, max) = (324009.048, 333090.535, 337928.798), stdev = 6296.932
[info]   CI (99.9%): [308843.294, 357337.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1535.657 ±(99.9%) 112.832 MB/sec [Average]
[info]   (min, avg, max) = (1493.566, 1535.657, 1557.849), stdev = 29.302
[info]   CI (99.9%): [1422.825, 1648.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7256.001, 7256.001, 7256.001), stdev = 0.001
[info]   CI (99.9%): [7256.001, 7256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.076), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.370), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.579 ±(99.9%) 732.901 MB/sec [Average]
[info]   (min, avg, max) = (1344.542, 1561.579, 1702.567), stdev = 190.332
[info]   CI (99.9%): [828.678, 2294.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   7380.171 ±(99.9%) 3493.591 B/op [Average]
[info]   (min, avg, max) = (6358.136, 7380.171, 8244.835), stdev = 907.274
[info]   CI (99.9%): [3886.580, 10873.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.520 ±(99.9%) 32.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.520, 19.415), stdev = 8.440
[info]   CI (99.9%): [≈ 0, 37.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.914
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 69.62% complete, ETA 00:24:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1112402.213 ops/s
[info] # Warmup Iteration   2: 2267868.121 ops/s
[info] # Warmup Iteration   3: 2315425.242 ops/s
[info] Iteration   1: 2291282.319 ops/s
[info]                  ·gc.alloc.rate:            1211.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 922.422 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 2309826.906 ops/s
[info]                  ·gc.alloc.rate:                   1220.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        917.766 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.177 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 2339707.177 ops/s
[info]                  ·gc.alloc.rate:                                  1236.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       686.928 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2242968.429 ops/s
[info]                  ·gc.alloc.rate:                                  1185.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             832.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       955.406 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2233223.851 ops/s
[info]                  ·gc.alloc.rate:            1180.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 719.676 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2283401.736 ±(99.9%) 173100.989 ops/s [Average]
[info]   (min, avg, max) = (2233223.851, 2283401.736, 2339707.177), stdev = 44953.777
[info]   CI (99.9%): [2110300.747, 2456502.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1206.945 ±(99.9%) 91.639 MB/sec [Average]
[info]   (min, avg, max) = (1180.436, 1206.945, 1236.862), stdev = 23.798
[info]   CI (99.9%): [1115.306, 1298.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1218.600 ±(99.9%) 694.633 MB/sec [Average]
[info]   (min, avg, max) = (1021.072, 1218.600, 1361.345), stdev = 180.394
[info]   CI (99.9%): [523.967, 1913.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   840.440 ±(99.9%) 487.327 B/op [Average]
[info]   (min, avg, max) = (686.928, 840.440, 955.406), stdev = 126.557
[info]   CI (99.9%): [353.112, 1327.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.635 ±(99.9%) 5.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.177), stdev = 1.421
[info]   CI (99.9%): [≈ 0, 6.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 7.382
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 69.89% complete, ETA 00:23:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5324843.842 ops/s
[info] # Warmup Iteration   2: 6122751.233 ops/s
[info] # Warmup Iteration   3: 6194171.357 ops/s
[info] Iteration   1: 6466895.481 ops/s
[info]                  ·gc.alloc.rate:                   986.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.581 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163.896 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6428178.113 ops/s
[info]                  ·gc.alloc.rate:            980.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247.263 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6461502.140 ops/s
[info]                  ·gc.alloc.rate:                   985.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        245.989 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 6407672.679 ops/s
[info]                  ·gc.alloc.rate:                                  977.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       250.833 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6342707.278 ops/s
[info]                  ·gc.alloc.rate:            967.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 253.396 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6421391.138 ±(99.9%) 193539.841 ops/s [Average]
[info]   (min, avg, max) = (6342707.278, 6421391.138, 6466895.481), stdev = 50261.682
[info]   CI (99.9%): [6227851.297, 6614930.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   979.204 ±(99.9%) 29.487 MB/sec [Average]
[info]   (min, avg, max) = (967.212, 979.204, 986.356), stdev = 7.658
[info]   CI (99.9%): [949.717, 1008.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.117 ±(99.9%) 589.228 MB/sec [Average]
[info]   (min, avg, max) = (673.581, 947.117, 1021.398), stdev = 153.021
[info]   CI (99.9%): [357.888, 1536.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   232.275 ±(99.9%) 147.622 B/op [Average]
[info]   (min, avg, max) = (163.896, 232.275, 253.396), stdev = 38.337
[info]   CI (99.9%): [84.653, 379.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 1.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.136), stdev = 0.495
[info]   CI (99.9%): [≈ 0, 2.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 70.16% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161115.863 ops/s
[info] # Warmup Iteration   2: 548892.177 ops/s
[info] # Warmup Iteration   3: 550624.380 ops/s
[info] Iteration   1: 552234.185 ops/s
[info]                  ·gc.alloc.rate:                   1599.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3831.209 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.188 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 577376.986 ops/s
[info]                  ·gc.alloc.rate:                                  1672.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4639.468 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 573647.403 ops/s
[info]                  ·gc.alloc.rate:                                  1661.799 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4669.663 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 570918.254 ops/s
[info]                  ·gc.alloc.rate:                                  1653.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4691.882 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 580173.981 ops/s
[info]                  ·gc.alloc.rate:                                  1680.765 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4560.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4617.136 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   570870.162 ±(99.9%) 42353.357 ops/s [Average]
[info]   (min, avg, max) = (552234.185, 570870.162, 580173.981), stdev = 10999.032
[info]   CI (99.9%): [528516.805, 613223.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1653.778 ±(99.9%) 123.095 MB/sec [Average]
[info]   (min, avg, max) = (1599.599, 1653.778, 1680.765), stdev = 31.967
[info]   CI (99.9%): [1530.683, 1776.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.181), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.250 ±(99.9%) 616.288 MB/sec [Average]
[info]   (min, avg, max) = (1343.947, 1630.250, 1701.893), stdev = 160.048
[info]   CI (99.9%): [1013.962, 2246.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4489.872 ±(99.9%) 1422.063 B/op [Average]
[info]   (min, avg, max) = (3831.209, 4489.872, 4691.882), stdev = 369.305
[info]   CI (99.9%): [3067.809, 5911.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.038 ±(99.9%) 26.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.038, 15.188), stdev = 6.792
[info]   CI (99.9%): [≈ 0, 29.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 19.000), stdev = 6.611
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 70.43% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 353761.029 ops/s
[info] # Warmup Iteration   2: 671533.962 ops/s
[info] # Warmup Iteration   3: 650314.302 ops/s
[info] Iteration   1: 679870.937 ops/s
[info]                  ·gc.alloc.rate:                                  2212.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4727.976 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 678614.831 ops/s
[info]                  ·gc.alloc.rate:                                  2207.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5526.310 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 686099.797 ops/s
[info]                  ·gc.alloc.rate:                                  2231.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4685.175 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 681770.686 ops/s
[info]                  ·gc.alloc.rate:                                  2217.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5500.514 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 684943.015 ops/s
[info]                  ·gc.alloc.rate:                                  2228.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4692.971 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   682259.853 ±(99.9%) 12354.646 ops/s [Average]
[info]   (min, avg, max) = (678614.831, 682259.853, 686099.797), stdev = 3208.462
[info]   CI (99.9%): [669905.207, 694614.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2219.437 ±(99.9%) 40.183 MB/sec [Average]
[info]   (min, avg, max) = (2207.222, 2219.437, 2231.737), stdev = 10.435
[info]   CI (99.9%): [2179.254, 2259.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.446 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.058, 0.266), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.476 ±(99.9%) 716.857 MB/sec [Average]
[info]   (min, avg, max) = (2042.202, 2178.476, 2382.439), stdev = 186.166
[info]   CI (99.9%): [1461.619, 2895.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5026.589 ±(99.9%) 1712.736 B/op [Average]
[info]   (min, avg, max) = (4685.175, 5026.589, 5526.310), stdev = 444.792
[info]   CI (99.9%): [3313.853, 6739.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 70.70% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.897 ops/s
[info] # Warmup Iteration   2: 5064285.840 ops/s
[info] # Warmup Iteration   3: 5208783.032 ops/s
[info] Iteration   1: 5263956.704 ops/s
[info]                  ·gc.alloc.rate:            321.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 5299602.904 ops/s
[info]                  ·gc.alloc.rate:            323.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.114 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5122404.263 ops/s
[info]                  ·gc.alloc.rate:            312.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5286331.377 ops/s
[info]                  ·gc.alloc.rate:            322.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.360 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 5288752.351 ops/s
[info]                  ·gc.alloc.rate:            322.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5252209.520 ±(99.9%) 283834.603 ops/s [Average]
[info]   (min, avg, max) = (5122404.263, 5252209.520, 5299602.904), stdev = 73710.945
[info]   CI (99.9%): [4968374.917, 5536044.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   320.405 ±(99.9%) 17.175 MB/sec [Average]
[info]   (min, avg, max) = (312.557, 320.405, 323.222), stdev = 4.460
[info]   CI (99.9%): [303.230, 337.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.780 ±(99.9%) 0.290 MB/sec [Average]
[info]   (min, avg, max) = (333.708, 333.780, 333.862), stdev = 0.075
[info]   CI (99.9%): [333.490, 334.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   100.024 ±(99.9%) 5.504 B/op [Average]
[info]   (min, avg, max) = (99.114, 100.024, 102.543), stdev = 1.429
[info]   CI (99.9%): [94.519, 105.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 70.97% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161559.523 ops/s
[info] # Warmup Iteration   2: 754228.876 ops/s
[info] # Warmup Iteration   3: 755773.678 ops/s
[info] Iteration   1: 747061.304 ops/s
[info]                  ·gc.alloc.rate:            926.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1417.336 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 752607.727 ops/s
[info]                  ·gc.alloc.rate:                   933.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2109.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 772959.393 ops/s
[info]                  ·gc.alloc.rate:            958.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2054.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 772988.689 ops/s
[info]                  ·gc.alloc.rate:                                  958.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.331 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2069.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.494 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 777269.257 ops/s
[info]                  ·gc.alloc.rate:                                  963.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2067.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   764577.274 ±(99.9%) 52803.601 ops/s [Average]
[info]   (min, avg, max) = (747061.304, 764577.274, 777269.257), stdev = 13712.927
[info]   CI (99.9%): [711773.673, 817380.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   948.141 ±(99.9%) 65.672 MB/sec [Average]
[info]   (min, avg, max) = (926.369, 948.141, 963.902), stdev = 17.055
[info]   CI (99.9%): [882.469, 1013.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.162), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.331), stdev = 0.144
[info]   CI (99.9%): [≈ 0, 0.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.525 ±(99.9%) 587.773 MB/sec [Average]
[info]   (min, avg, max) = (672.631, 945.525, 1021.072), stdev = 152.643
[info]   CI (99.9%): [357.753, 1533.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1943.782 ±(99.9%) 1135.898 B/op [Average]
[info]   (min, avg, max) = (1417.336, 1943.782, 2109.082), stdev = 294.989
[info]   CI (99.9%): [807.884, 3079.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.177 ±(99.9%) 15.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.177, 9.494), stdev = 4.135
[info]   CI (99.9%): [≈ 0, 18.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 14.000), stdev = 4.868
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 71.24% complete, ETA 00:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7323598.589 ops/s
[info] # Warmup Iteration   2: 7519432.452 ops/s
[info] # Warmup Iteration   3: 7681011.249 ops/s
[info] Iteration   1: 7627055.527 ops/s
[info]                  ·gc.alloc.rate:            348.853 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.693 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 7643810.139 ops/s
[info]                  ·gc.alloc.rate:            349.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7643098.422 ops/s
[info]                  ·gc.alloc.rate:            349.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 7662863.745 ops/s
[info]                  ·gc.alloc.rate:            350.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7617993.467 ops/s
[info]                  ·gc.alloc.rate:            348.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.637 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7638964.260 ±(99.9%) 66510.089 ops/s [Average]
[info]   (min, avg, max) = (7617993.467, 7638964.260, 7662863.745), stdev = 17272.459
[info]   CI (99.9%): [7572454.171, 7705474.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   349.406 ±(99.9%) 3.047 MB/sec [Average]
[info]   (min, avg, max) = (348.461, 349.406, 350.515), stdev = 0.791
[info]   CI (99.9%): [346.359, 352.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.142 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (336.990, 337.142, 337.675), stdev = 0.298
[info]   CI (99.9%): [335.995, 338.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   69.473 ±(99.9%) 0.734 B/op [Average]
[info]   (min, avg, max) = (69.227, 69.473, 69.693), stdev = 0.191
[info]   CI (99.9%): [68.740, 70.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 71.51% complete, ETA 00:22:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25099.274 ops/s
[info] # Warmup Iteration   2: 243563.485 ops/s
[info] # Warmup Iteration   3: 253170.410 ops/s
[info] Iteration   1: 258094.908 ops/s
[info]                  ·gc.alloc.rate:            1426.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8189.176 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 258187.794 ops/s
[info]                  ·gc.alloc.rate:                                  1426.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10293.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.485 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 254825.323 ops/s
[info]                  ·gc.alloc.rate:                                  1407.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8409.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 254363.260 ops/s
[info]                  ·gc.alloc.rate:            1405.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8424.747 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 255431.162 ops/s
[info]                  ·gc.alloc.rate:                                  1411.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8389.593 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   256180.489 ±(99.9%) 7046.404 ops/s [Average]
[info]   (min, avg, max) = (254363.260, 256180.489, 258187.794), stdev = 1829.929
[info]   CI (99.9%): [249134.085, 263226.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1415.506 ±(99.9%) 39.217 MB/sec [Average]
[info]   (min, avg, max) = (1405.667, 1415.506, 1426.744), stdev = 10.184
[info]   CI (99.9%): [1376.289, 1454.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8696.002, 8696.002, 8696.002), stdev = 0.001
[info]   CI (99.9%): [8696.001, 8696.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.132), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.206 ±(99.9%) 1.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.804), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.305 ±(99.9%) 572.490 MB/sec [Average]
[info]   (min, avg, max) = (1343.049, 1423.305, 1688.875), stdev = 148.674
[info]   CI (99.9%): [850.815, 1995.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8741.264 ±(99.9%) 3361.887 B/op [Average]
[info]   (min, avg, max) = (8189.176, 8741.264, 10293.692), stdev = 873.071
[info]   CI (99.9%): [5379.377, 12103.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.497 ±(99.9%) 55.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.497, 32.485), stdev = 14.528
[info]   CI (99.9%): [≈ 0, 62.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 19.000), stdev = 8.246
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 71.77% complete, ETA 00:22:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4970.307 ops/s
[info] # Warmup Iteration   2: 7193.194 ops/s
[info] # Warmup Iteration   3: 7660.860 ops/s
[info] Iteration   1: 7739.504 ops/s
[info]                  ·gc.alloc.rate:                                  1823.116 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370784.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.594 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       344739.171 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                677.287 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 7778.810 ops/s
[info]                  ·gc.alloc.rate:                                  1832.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370784.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.496 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       344314.571 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7553.019 ops/s
[info]                  ·gc.alloc.rate:                                  1779.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370784.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.204 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 42.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       425537.262 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7767.373 ops/s
[info]                  ·gc.alloc.rate:                                  1829.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370784.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.999 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       344846.400 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7739.051 ops/s
[info]                  ·gc.alloc.rate:                                  1822.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             370784.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.555 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       346093.745 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7715.552 ±(99.9%) 356.210 ops/s [Average]
[info]   (min, avg, max) = (7553.019, 7715.552, 7778.810), stdev = 92.507
[info]   CI (99.9%): [7359.342, 8071.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1817.521 ±(99.9%) 82.658 MB/sec [Average]
[info]   (min, avg, max) = (1779.806, 1817.521, 1832.132), stdev = 21.466
[info]   CI (99.9%): [1734.863, 1900.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   370784.055 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (370784.052, 370784.055, 370784.057), stdev = 0.002
[info]   CI (99.9%): [370784.046, 370784.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.135 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (0.101, 0.135, 0.204), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   27.622 ±(99.9%) 34.500 B/op [Average]
[info]   (min, avg, max) = (20.555, 27.622, 42.466), stdev = 8.960
[info]   CI (99.9%): [≈ 0, 62.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.440 ±(99.9%) 590.308 MB/sec [Average]
[info]   (min, avg, max) = (1695.055, 1768.440, 2042.628), stdev = 153.301
[info]   CI (99.9%): [1178.131, 2358.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   361106.230 ±(99.9%) 138716.142 B/op [Average]
[info]   (min, avg, max) = (344314.571, 361106.230, 425537.262), stdev = 36024.142
[info]   CI (99.9%): [222390.087, 499822.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   135.457 ±(99.9%) 1166.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 135.457, 677.287), stdev = 302.892
[info]   CI (99.9%): [≈ 0, 1301.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 72.04% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 503.735 ops/s
[info] # Warmup Iteration   2: 10567.479 ops/s
[info] # Warmup Iteration   3: 10571.890 ops/s
[info] Iteration   1: 10578.199 ops/s
[info]                  ·gc.alloc.rate:            243.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49649.048 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 10605.469 ops/s
[info]                  ·gc.alloc.rate:            244.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49522.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11288.183 ops/s
[info]                  ·gc.alloc.rate:      260.315 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 10686.396 ops/s
[info]                  ·gc.alloc.rate:            246.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49147.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 11230.786 ops/s
[info]                  ·gc.alloc.rate:            258.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46767.255 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   10877.806 ±(99.9%) 1352.632 ops/s [Average]
[info]   (min, avg, max) = (10578.199, 10877.806, 11288.183), stdev = 351.274
[info]   CI (99.9%): [9525.175, 12230.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   250.779 ±(99.9%) 31.295 MB/sec [Average]
[info]   (min, avg, max) = (243.873, 250.779, 260.315), stdev = 8.127
[info]   CI (99.9%): [219.484, 282.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.039 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.039, 36280.042), stdev = 0.002
[info]   CI (99.9%): [36280.031, 36280.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.977 ±(99.9%) 574.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.977, 333.744), stdev = 149.245
[info]   CI (99.9%): [≈ 0, 841.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   39017.277 ±(99.9%) 84108.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39017.277, 49649.048), stdev = 21842.776
[info]   CI (99.9%): [≈ 0, 123126.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 72.31% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6214.465 ops/s
[info] # Warmup Iteration   2: 12738.246 ops/s
[info] # Warmup Iteration   3: 13138.470 ops/s
[info] Iteration   1: 12860.834 ops/s
[info]                  ·gc.alloc.rate:            325.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41085.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 12781.081 ops/s
[info]                  ·gc.alloc.rate:            323.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41342.588 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13053.849 ops/s
[info]                  ·gc.alloc.rate:            330.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40475.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 13062.700 ops/s
[info]                  ·gc.alloc.rate:            331.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40450.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 13062.687 ops/s
[info]                  ·gc.alloc.rate:            331.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       39888.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40450.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12964.230 ±(99.9%) 515.382 ops/s [Average]
[info]   (min, avg, max) = (12781.081, 12964.230, 13062.700), stdev = 133.843
[info]   CI (99.9%): [12448.848, 13479.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   328.539 ±(99.9%) 13.103 MB/sec [Average]
[info]   (min, avg, max) = (323.891, 328.539, 331.068), stdev = 3.403
[info]   CI (99.9%): [315.436, 341.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39888.032 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (39888.031, 39888.032, 39888.034), stdev = 0.001
[info]   CI (99.9%): [39888.027, 39888.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.698 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (335.668, 335.698, 335.734), stdev = 0.025
[info]   CI (99.9%): [335.603, 335.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40760.707 ±(99.9%) 1631.939 B/op [Average]
[info]   (min, avg, max) = (40450.234, 40760.707, 41342.588), stdev = 423.809
[info]   CI (99.9%): [39128.768, 42392.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 72.58% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18175.124 ops/s
[info] # Warmup Iteration   2: 21687.280 ops/s
[info] # Warmup Iteration   3: 22887.934 ops/s
[info] Iteration   1: 22927.701 ops/s
[info]                  ·gc.alloc.rate:            391.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23137.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 22243.126 ops/s
[info]                  ·gc.alloc.rate:            380.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23849.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 22814.573 ops/s
[info]                  ·gc.alloc.rate:            389.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23251.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 23020.879 ops/s
[info]                  ·gc.alloc.rate:            393.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23043.625 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 22920.135 ops/s
[info]                  ·gc.alloc.rate:            391.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       26896.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46290.303 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22785.283 ±(99.9%) 1200.459 ops/s [Average]
[info]   (min, avg, max) = (22243.126, 22785.283, 23020.879), stdev = 311.755
[info]   CI (99.9%): [21584.824, 23985.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   389.366 ±(99.9%) 20.309 MB/sec [Average]
[info]   (min, avg, max) = (380.196, 389.366, 393.359), stdev = 5.274
[info]   CI (99.9%): [369.057, 409.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (26896.018, 26896.019, 26896.024), stdev = 0.003
[info]   CI (99.9%): [26896.008, 26896.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.458 ±(99.9%) 580.480 MB/sec [Average]
[info]   (min, avg, max) = (336.989, 404.458, 674.126), stdev = 150.749
[info]   CI (99.9%): [≈ 0, 984.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   27914.428 ±(99.9%) 39573.954 B/op [Average]
[info]   (min, avg, max) = (23043.625, 27914.428, 46290.303), stdev = 10277.230
[info]   CI (99.9%): [≈ 0, 67488.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 72.85% complete, ETA 00:21:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646.667 ops/s
[info] # Warmup Iteration   2: 1995.036 ops/s
[info] # Warmup Iteration   3: 1993.858 ops/s
[info] Iteration   1: 2017.960 ops/s
[info]                  ·gc.alloc.rate:            1282.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000117.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1341.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1046499.612 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2050.021 ops/s
[info]                  ·gc.alloc.rate:                   1302.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000112.215 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1033749.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3578.758 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 2024.537 ops/s
[info]                  ·gc.alloc.rate:                                  1286.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000112.201 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 44.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1058414.491 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2065.691 ops/s
[info]                  ·gc.alloc.rate:                                  1312.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000112.197 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 43.580 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1036908.246 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2040.783 ops/s
[info]                  ·gc.alloc.rate:                                  1297.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000112.200 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.640 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1049603.009 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2039.798 ±(99.9%) 74.212 ops/s [Average]
[info]   (min, avg, max) = (2017.960, 2039.798, 2065.691), stdev = 19.273
[info]   CI (99.9%): [1965.586, 2114.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1296.376 ±(99.9%) 47.720 MB/sec [Average]
[info]   (min, avg, max) = (1282.400, 1296.376, 1312.967), stdev = 12.393
[info]   CI (99.9%): [1248.656, 1344.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1000113.245 ±(99.9%) 8.966 B/op [Average]
[info]   (min, avg, max) = (1000112.197, 1000113.245, 1000117.410), stdev = 2.328
[info]   CI (99.9%): [1000104.279, 1000122.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.058), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   23.209 ±(99.9%) 85.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.209, 44.824), stdev = 22.244
[info]   CI (99.9%): [≈ 0, 108.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1354.533 ±(99.9%) 36.668 MB/sec [Average]
[info]   (min, avg, max) = (1341.873, 1354.533, 1361.537), stdev = 9.523
[info]   CI (99.9%): [1317.865, 1391.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1045035.015 ±(99.9%) 38285.563 B/op [Average]
[info]   (min, avg, max) = (1033749.718, 1045035.015, 1058414.491), stdev = 9942.639
[info]   CI (99.9%): [1006749.452, 1083320.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   715.752 ±(99.9%) 6162.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 715.752, 3578.758), stdev = 1600.469
[info]   CI (99.9%): [≈ 0, 6878.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 19.000), stdev = 7.662
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 73.12% complete, ETA 00:21:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5265.072 ops/s
[info] # Warmup Iteration   2: 7075.175 ops/s
[info] # Warmup Iteration   3: 7209.163 ops/s
[info] Iteration   1: 7217.434 ops/s
[info]                  ·gc.alloc.rate:                   1478.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              322368.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        293990.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 726.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 7279.543 ops/s
[info]                  ·gc.alloc.rate:                                  1490.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.896 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294367.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7169.581 ops/s
[info]                  ·gc.alloc.rate:                                  1468.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.950 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       373603.637 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7316.939 ops/s
[info]                  ·gc.alloc.rate:                                  1499.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       292839.096 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7259.348 ops/s
[info]                  ·gc.alloc.rate:                                  1486.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             322368.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.866 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       295137.613 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7248.569 ±(99.9%) 219.170 ops/s [Average]
[info]   (min, avg, max) = (7169.581, 7248.569, 7316.939), stdev = 56.918
[info]   CI (99.9%): [7029.399, 7467.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1484.634 ±(99.9%) 45.714 MB/sec [Average]
[info]   (min, avg, max) = (1468.352, 1484.634, 1499.209), stdev = 11.872
[info]   CI (99.9%): [1438.920, 1530.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   322368.059 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (322368.056, 322368.059, 322368.065), stdev = 0.004
[info]   CI (99.9%): [322368.042, 322368.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.080 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.194), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   17.377 ±(99.9%) 59.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.377, 41.896), stdev = 15.470
[info]   CI (99.9%): [≈ 0, 76.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1426.806 ±(99.9%) 592.214 MB/sec [Average]
[info]   (min, avg, max) = (1347.919, 1426.806, 1701.724), stdev = 153.796
[info]   CI (99.9%): [834.592, 2019.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   309987.669 ±(99.9%) 136975.369 B/op [Average]
[info]   (min, avg, max) = (292839.096, 309987.669, 373603.637), stdev = 35572.068
[info]   CI (99.9%): [173012.299, 446963.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   145.252 ±(99.9%) 1250.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.252, 726.261), stdev = 324.794
[info]   CI (99.9%): [≈ 0, 1395.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 73.39% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4424.921 ops/s
[info] # Warmup Iteration   2: 53397.912 ops/s
[info] # Warmup Iteration   3: 51258.889 ops/s
[info] Iteration   1: 54297.563 ops/s
[info]                  ·gc.alloc.rate:            507.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9673.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 54479.274 ops/s
[info]                  ·gc.alloc.rate:            509.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19282.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 54257.838 ops/s
[info]                  ·gc.alloc.rate:            507.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9680.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 52728.050 ops/s
[info]                  ·gc.alloc.rate:                   492.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19903.001 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 52545.159 ops/s
[info]                  ·gc.alloc.rate:            491.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9996.129 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53661.577 ±(99.9%) 3625.794 ops/s [Average]
[info]   (min, avg, max) = (52545.159, 53661.577, 54479.274), stdev = 941.607
[info]   CI (99.9%): [50035.783, 57287.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   501.642 ±(99.9%) 33.689 MB/sec [Average]
[info]   (min, avg, max) = (491.276, 501.642, 509.162), stdev = 8.749
[info]   CI (99.9%): [467.953, 535.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.007, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.102 ±(99.9%) 703.049 MB/sec [Average]
[info]   (min, avg, max) = (333.695, 467.102, 667.334), stdev = 182.580
[info]   CI (99.9%): [≈ 0, 1170.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13706.989 ±(99.9%) 20712.266 B/op [Average]
[info]   (min, avg, max) = (9673.103, 13706.989, 19903.001), stdev = 5378.910
[info]   CI (99.9%): [≈ 0, 34419.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.977 ±(99.9%) 34.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.977, 19.883), stdev = 8.892
[info]   CI (99.9%): [≈ 0, 38.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 2.049
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 73.66% complete, ETA 00:20:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3885.325 ops/s
[info] # Warmup Iteration   2: 55496.871 ops/s
[info] # Warmup Iteration   3: 56192.404 ops/s
[info] Iteration   1: 55740.651 ops/s
[info]                  ·gc.alloc.rate:            101.987 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9498.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 56423.119 ops/s
[info]                  ·gc.alloc.rate:      103.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56344.428 ops/s
[info]                  ·gc.alloc.rate:      103.107 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56517.309 ops/s
[info]                  ·gc.alloc.rate:      103.410 MB/sec
[info]                  ·gc.alloc.rate.norm: 2880.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56197.544 ops/s
[info]                  ·gc.alloc.rate:            102.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       2880.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9346.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc":
[info]   56244.610 ±(99.9%) 1174.894 ops/s [Average]
[info]   (min, avg, max) = (55740.651, 56244.610, 56517.309), stdev = 305.116
[info]   CI (99.9%): [55069.716, 57419.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   102.914 ±(99.9%) 2.163 MB/sec [Average]
[info]   (min, avg, max) = (101.987, 102.914, 103.410), stdev = 0.562
[info]   CI (99.9%): [100.752, 105.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   2880.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2880.007, 2880.007, 2880.008), stdev = 0.001
[info]   CI (99.9%): [2880.006, 2880.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   134.009 ±(99.9%) 706.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.009, 336.354), stdev = 183.501
[info]   CI (99.9%): [≈ 0, 840.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3768.955 ±(99.9%) 19873.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3768.955, 9498.312), stdev = 5161.133
[info]   CI (99.9%): [≈ 0, 23642.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 6.000), stdev = 2.828
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 73.92% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19218.492 ops/s
[info] # Warmup Iteration   2: 35613.408 ops/s
[info] # Warmup Iteration   3: 36616.677 ops/s
[info] Iteration   1: 34419.298 ops/s
[info]                  ·gc.alloc.rate:            498.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30704.294 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 36142.043 ops/s
[info]                  ·gc.alloc.rate:            523.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.742 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29239.111 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 36593.844 ops/s
[info]                  ·gc.alloc.rate:                   530.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.938 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14410.758 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35115.907 ops/s
[info]                  ·gc.alloc.rate:            508.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30094.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 34948.401 ops/s
[info]                  ·gc.alloc.rate:            506.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       22807.713 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15118.501 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   35443.899 ±(99.9%) 3450.940 ops/s [Average]
[info]   (min, avg, max) = (34419.298, 35443.899, 36593.844), stdev = 896.198
[info]   CI (99.9%): [31992.959, 38894.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   513.571 ±(99.9%) 50.130 MB/sec [Average]
[info]   (min, avg, max) = (498.656, 513.571, 530.211), stdev = 13.018
[info]   CI (99.9%): [463.442, 563.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.809 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (22807.713, 22807.809, 22807.938), stdev = 0.092
[info]   CI (99.9%): [22807.454, 22808.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   536.963 ±(99.9%) 708.736 MB/sec [Average]
[info]   (min, avg, max) = (335.003, 536.963, 671.487), stdev = 184.057
[info]   CI (99.9%): [≈ 0, 1245.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23913.350 ±(99.9%) 32235.825 B/op [Average]
[info]   (min, avg, max) = (14410.758, 23913.350, 30704.294), stdev = 8371.541
[info]   CI (99.9%): [≈ 0, 56149.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.730 ±(99.9%) 49.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.730, 28.650), stdev = 12.812
[info]   CI (99.9%): [≈ 0, 55.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 74.19% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46095.178 ops/s
[info] # Warmup Iteration   2: 55452.118 ops/s
[info] # Warmup Iteration   3: 55448.202 ops/s
[info] Iteration   1: 53913.516 ops/s
[info]                  ·gc.alloc.rate:            407.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9820.494 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 55535.515 ops/s
[info]                  ·gc.alloc.rate:            419.387 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19066.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 55634.466 ops/s
[info]                  ·gc.alloc.rate:            420.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9516.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 55427.202 ops/s
[info]                  ·gc.alloc.rate:            418.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9552.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 55693.791 ops/s
[info]                  ·gc.alloc.rate:            420.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       11888.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9506.497 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   55240.898 ±(99.9%) 2883.783 ops/s [Average]
[info]   (min, avg, max) = (53913.516, 55240.898, 55693.791), stdev = 748.909
[info]   CI (99.9%): [52357.115, 58124.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   417.192 ±(99.9%) 21.731 MB/sec [Average]
[info]   (min, avg, max) = (407.193, 417.192, 420.625), stdev = 5.643
[info]   CI (99.9%): [395.461, 438.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.007, 11888.008, 11888.008), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.615 ±(99.9%) 579.097 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 403.615, 672.640), stdev = 150.390
[info]   CI (99.9%): [≈ 0, 982.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11492.517 ±(99.9%) 16311.641 B/op [Average]
[info]   (min, avg, max) = (9506.497, 11492.517, 19066.734), stdev = 4236.081
[info]   CI (99.9%): [≈ 0, 27804.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 74.46% complete, ETA 00:20:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58980.435 ops/s
[info] # Warmup Iteration   2: 70200.846 ops/s
[info] # Warmup Iteration   3: 68372.377 ops/s
[info] Iteration   1: 70259.983 ops/s
[info]                  ·gc.alloc.rate:      1.071 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 70344.566 ops/s
[info]                  ·gc.alloc.rate:      1.073 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 66553.684 ops/s
[info]                  ·gc.alloc.rate:      1.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 70292.662 ops/s
[info]                  ·gc.alloc.rate:      1.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 70050.704 ops/s
[info]                  ·gc.alloc.rate:      1.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   69500.320 ±(99.9%) 6357.421 ops/s [Average]
[info]   (min, avg, max) = (66553.684, 69500.320, 70344.566), stdev = 1651.002
[info]   CI (99.9%): [63142.899, 75857.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.060 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (1.015, 1.060, 1.073), stdev = 0.025
[info]   CI (99.9%): [0.964, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.006, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 74.73% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1402.087 ops/s
[info] # Warmup Iteration   2: 4612.765 ops/s
[info] # Warmup Iteration   3: 4636.975 ops/s
[info] Iteration   1: 4709.464 ops/s
[info]                  ·gc.alloc.rate:            1421.924 MB/sec
[info]                  ·gc.alloc.rate.norm:       475278.356 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 448721.973 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 4816.703 ops/s
[info]                  ·gc.alloc.rate:                                  1454.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475280.254 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       552798.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1523.460 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 4845.530 ops/s
[info]                  ·gc.alloc.rate:                                  1463.082 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475280.117 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.688 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       442188.848 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4881.576 ops/s
[info]                  ·gc.alloc.rate:                                  1474.167 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475280.356 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       438928.803 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4872.759 ops/s
[info]                  ·gc.alloc.rate:                                  1471.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             475280.484 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       549674.124 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   4825.206 ±(99.9%) 267.615 ops/s [Average]
[info]   (min, avg, max) = (4709.464, 4825.206, 4881.576), stdev = 69.499
[info]   CI (99.9%): [4557.591, 5092.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1456.999 ±(99.9%) 81.145 MB/sec [Average]
[info]   (min, avg, max) = (1421.924, 1456.999, 1474.167), stdev = 21.073
[info]   CI (99.9%): [1375.854, 1538.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   475279.913 ±(99.9%) 3.392 B/op [Average]
[info]   (min, avg, max) = (475278.356, 475279.913, 475280.484), stdev = 0.881
[info]   CI (99.9%): [475276.521, 475283.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.031), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.355 ±(99.9%) 15.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.355, 10.056), stdev = 4.046
[info]   CI (99.9%): [≈ 0, 20.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1491.691 ±(99.9%) 721.285 MB/sec [Average]
[info]   (min, avg, max) = (1342.473, 1491.691, 1701.719), stdev = 187.315
[info]   CI (99.9%): [770.405, 2212.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   486462.444 ±(99.9%) 228133.403 B/op [Average]
[info]   (min, avg, max) = (438928.803, 486462.444, 552798.472), stdev = 59245.520
[info]   CI (99.9%): [258329.041, 714595.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   304.692 ±(99.9%) 2623.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 304.692, 1523.460), stdev = 681.312
[info]   CI (99.9%): [≈ 0, 2928.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 19.000), stdev = 6.943
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 75.00% complete, ETA 00:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4441206.056 ops/s
[info] # Warmup Iteration   2: 5041485.068 ops/s
[info] # Warmup Iteration   3: 5024504.026 ops/s
[info] Iteration   1: 4933540.386 ops/s
[info]                  ·gc.alloc.rate:                                  1479.362 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       538.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.063 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 4907382.115 ops/s
[info]                  ·gc.alloc.rate:                                  1471.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       436.665 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4919315.684 ops/s
[info]                  ·gc.alloc.rate:                                  1475.139 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       544.536 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4941291.646 ops/s
[info]                  ·gc.alloc.rate:                                  1481.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       433.694 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4926177.297 ops/s
[info]                  ·gc.alloc.rate:            1477.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       472.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 434.998 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   4925541.426 ±(99.9%) 50242.329 ops/s [Average]
[info]   (min, avg, max) = (4907382.115, 4925541.426, 4941291.646), stdev = 13047.773
[info]   CI (99.9%): [4875299.097, 4975783.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1476.963 ±(99.9%) 15.307 MB/sec [Average]
[info]   (min, avg, max) = (1471.406, 1476.963, 1481.782), stdev = 3.975
[info]   CI (99.9%): [1461.656, 1492.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.071), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.865 ±(99.9%) 704.126 MB/sec [Average]
[info]   (min, avg, max) = (1361.254, 1494.865, 1701.837), stdev = 182.859
[info]   CI (99.9%): [790.740, 2198.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   477.717 ±(99.9%) 224.783 B/op [Average]
[info]   (min, avg, max) = (433.694, 477.717, 544.536), stdev = 58.375
[info]   CI (99.9%): [252.934, 702.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 1.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.213, 1.063), stdev = 0.475
[info]   CI (99.9%): [≈ 0, 2.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 75.27% complete, ETA 00:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86716.938 ops/s
[info] # Warmup Iteration   2: 279424.556 ops/s
[info] # Warmup Iteration   3: 287608.551 ops/s
[info] Iteration   1: 291748.726 ops/s
[info]                  ·gc.alloc.rate:                   1612.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              8696.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9070.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.155 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 289677.138 ops/s
[info]                  ·gc.alloc.rate:                                  1600.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.478 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9246.893 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 297549.873 ops/s
[info]                  ·gc.alloc.rate:                                  1643.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9002.633 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 301588.783 ops/s
[info]                  ·gc.alloc.rate:                                  1666.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8696.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8882.289 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 298548.073 ops/s
[info]                  ·gc.alloc.rate:            1650.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       8696.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7178.203 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   295822.519 ±(99.9%) 19062.018 ops/s [Average]
[info]   (min, avg, max) = (289677.138, 295822.519, 301588.783), stdev = 4950.346
[info]   CI (99.9%): [276760.500, 314884.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1634.591 ±(99.9%) 104.993 MB/sec [Average]
[info]   (min, avg, max) = (1600.797, 1634.591, 1666.104), stdev = 27.266
[info]   CI (99.9%): [1529.598, 1739.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8696.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8696.001, 8696.001, 8696.002), stdev = 0.001
[info]   CI (99.9%): [8696.001, 8696.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.478), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.877 ±(99.9%) 577.407 MB/sec [Average]
[info]   (min, avg, max) = (1362.112, 1629.877, 1702.208), stdev = 149.951
[info]   CI (99.9%): [1052.470, 2207.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8676.052 ±(99.9%) 3263.967 B/op [Average]
[info]   (min, avg, max) = (7178.203, 8676.052, 9246.893), stdev = 847.642
[info]   CI (99.9%): [5412.085, 11940.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.031 ±(99.9%) 43.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.031, 25.155), stdev = 11.250
[info]   CI (99.9%): [≈ 0, 48.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 23.000), stdev = 8.526
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 75.54% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2538048.648 ops/s
[info] # Warmup Iteration   2: 3060401.895 ops/s
[info] # Warmup Iteration   3: 3097284.353 ops/s
[info] Iteration   1: 3111059.674 ops/s
[info]                  ·gc.alloc.rate:            505.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170.178 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 3093698.899 ops/s
[info]                  ·gc.alloc.rate:                   503.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        342.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3103084.919 ops/s
[info]                  ·gc.alloc.rate:            504.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170.963 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 3072742.225 ops/s
[info]                  ·gc.alloc.rate:            499.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.617 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 3081993.985 ops/s
[info]                  ·gc.alloc.rate:            501.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       256.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171.791 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3092515.940 ±(99.9%) 59613.021 ops/s [Average]
[info]   (min, avg, max) = (3072742.225, 3092515.940, 3111059.674), stdev = 15481.312
[info]   CI (99.9%): [3032902.919, 3152128.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   502.941 ±(99.9%) 9.568 MB/sec [Average]
[info]   (min, avg, max) = (499.760, 502.941, 505.911), stdev = 2.485
[info]   CI (99.9%): [493.373, 512.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.036 ±(99.9%) 709.057 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 471.036, 672.758), stdev = 184.140
[info]   CI (99.9%): [≈ 0, 1180.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   239.967 ±(99.9%) 363.781 B/op [Average]
[info]   (min, avg, max) = (170.178, 239.967, 344.617), stdev = 94.473
[info]   CI (99.9%): [≈ 0, 603.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.339), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 75.81% complete, ETA 00:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75082.358 ops/s
[info] # Warmup Iteration   2: 348830.812 ops/s
[info] # Warmup Iteration   3: 352695.188 ops/s
[info] Iteration   1: 347703.917 ops/s
[info]                  ·gc.alloc.rate:            1364.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1343.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6084.854 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 347608.101 ops/s
[info]                  ·gc.alloc.rate:                                  1364.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.735 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6119.571 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 356423.233 ops/s
[info]                  ·gc.alloc.rate:                                  1398.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6012.504 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 356695.577 ops/s
[info]                  ·gc.alloc.rate:                                  1399.469 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6176.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6007.937 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 358401.219 ops/s
[info]                  ·gc.alloc.rate:            1406.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       6176.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5979.326 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   353366.409 ±(99.9%) 20284.414 ops/s [Average]
[info]   (min, avg, max) = (347608.101, 353366.409, 358401.219), stdev = 5267.798
[info]   CI (99.9%): [333081.996, 373650.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1386.473 ±(99.9%) 79.497 MB/sec [Average]
[info]   (min, avg, max) = (1364.071, 1386.473, 1406.243), stdev = 20.645
[info]   CI (99.9%): [1306.976, 1465.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6176.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6176.001, 6176.001, 6176.001), stdev = 0.001
[info]   CI (99.9%): [6176.001, 6176.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.162), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.181 ±(99.9%) 1.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.735), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.976 ±(99.9%) 30.561 MB/sec [Average]
[info]   (min, avg, max) = (1343.990, 1355.976, 1361.461), stdev = 7.937
[info]   CI (99.9%): [1325.415, 1386.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6040.838 ±(99.9%) 226.218 B/op [Average]
[info]   (min, avg, max) = (5979.326, 6040.838, 6119.571), stdev = 58.748
[info]   CI (99.9%): [5814.620, 6267.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.222 ±(99.9%) 36.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.222, 21.112), stdev = 9.442
[info]   CI (99.9%): [≈ 0, 40.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.723
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 76.08% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4465757.881 ops/s
[info] # Warmup Iteration   2: 6420876.379 ops/s
[info] # Warmup Iteration   3: 6449735.073 ops/s
[info] Iteration   1: 6454911.417 ops/s
[info]                  ·gc.alloc.rate:                                  3903.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       912.967 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 6413508.958 ops/s
[info]                  ·gc.alloc.rate:                                  3880.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4086.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1002.415 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 6442905.975 ops/s
[info]                  ·gc.alloc.rate:                                  3896.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       914.706 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   4: 6394626.193 ops/s
[info]                  ·gc.alloc.rate:            3868.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       952.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3745.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 921.591 B/op
[info]                  ·gc.count:                 11.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 6393564.585 ops/s
[info]                  ·gc.alloc.rate:                                  3866.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             952.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1005.511 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6419903.426 ±(99.9%) 107684.532 ops/s [Average]
[info]   (min, avg, max) = (6393564.585, 6419903.426, 6454911.417), stdev = 27965.331
[info]   CI (99.9%): [6312218.894, 6527587.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3883.350 ±(99.9%) 63.798 MB/sec [Average]
[info]   (min, avg, max) = (3866.539, 3883.350, 3903.821), stdev = 16.568
[info]   CI (99.9%): [3819.552, 3947.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (952.000, 952.000, 952.000), stdev = 0.001
[info]   CI (99.9%): [952.000, 952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3880.659 ±(99.9%) 718.429 MB/sec [Average]
[info]   (min, avg, max) = (3743.759, 3880.659, 4086.200), stdev = 186.574
[info]   CI (99.9%): [3162.230, 4599.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   951.438 ±(99.9%) 185.099 B/op [Average]
[info]   (min, avg, max) = (912.967, 951.438, 1005.511), stdev = 48.070
[info]   CI (99.9%): [766.339, 1136.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   57.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.400, 12.000), stdev = 0.548
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 16.000), stdev = 3.209
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 76.34% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.869 ops/s
[info] # Warmup Iteration   2: 36407901.882 ops/s
[info] # Warmup Iteration   3: 37879592.472 ops/s
[info] Iteration   1: 37901316.672 ops/s
[info]                  ·gc.alloc.rate:            385.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37455024.419 ops/s
[info]                  ·gc.alloc.rate:            380.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 38024573.255 ops/s
[info]                  ·gc.alloc.rate:            386.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.814 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 36139683.118 ops/s
[info]                  ·gc.alloc.rate:            367.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37499270.733 ops/s
[info]                  ·gc.alloc.rate:            381.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.014 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   37403973.639 ±(99.9%) 2883237.761 ops/s [Average]
[info]   (min, avg, max) = (36139683.118, 37403973.639, 38024573.255), stdev = 748767.690
[info]   CI (99.9%): [34520735.878, 40287211.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   380.296 ±(99.9%) 29.403 MB/sec [Average]
[info]   (min, avg, max) = (367.388, 380.296, 386.597), stdev = 7.636
[info]   CI (99.9%): [350.894, 409.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   400.534 ±(99.9%) 574.785 MB/sec [Average]
[info]   (min, avg, max) = (333.728, 400.534, 667.555), stdev = 149.270
[info]   CI (99.9%): [≈ 0, 975.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16.849 ±(99.9%) 24.060 B/op [Average]
[info]   (min, avg, max) = (13.814, 16.849, 28.014), stdev = 6.248
[info]   CI (99.9%): [≈ 0, 40.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 76.61% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2875826.119 ops/s
[info] # Warmup Iteration   2: 6786925.531 ops/s
[info] # Warmup Iteration   3: 6692528.345 ops/s
[info] Iteration   1: 6948176.195 ops/s
[info]                  ·gc.alloc.rate:                                  2614.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       616.853 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 6995765.356 ops/s
[info]                  ·gc.alloc.rate:                                  2631.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       536.076 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7050301.533 ops/s
[info]                  ·gc.alloc.rate:                                  2651.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       607.928 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 6950991.184 ops/s
[info]                  ·gc.alloc.rate:                                  2613.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       616.588 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 6853380.494 ops/s
[info]                  ·gc.alloc.rate:                                  2577.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       547.194 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   6959722.952 ±(99.9%) 279150.598 ops/s [Average]
[info]   (min, avg, max) = (6853380.494, 6959722.952, 7050301.533), stdev = 72494.524
[info]   CI (99.9%): [6680572.354, 7238873.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2617.654 ±(99.9%) 105.183 MB/sec [Average]
[info]   (min, avg, max) = (2577.450, 2617.654, 2651.607), stdev = 27.316
[info]   CI (99.9%): [2512.471, 2722.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2586.853 ±(99.9%) 718.063 MB/sec [Average]
[info]   (min, avg, max) = (2382.375, 2586.853, 2723.760), stdev = 186.479
[info]   CI (99.9%): [1868.790, 3304.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   584.928 ±(99.9%) 153.554 B/op [Average]
[info]   (min, avg, max) = (536.076, 584.928, 616.853), stdev = 39.878
[info]   CI (99.9%): [431.373, 738.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 76.88% complete, ETA 00:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33200735.763 ops/s
[info] # Warmup Iteration   2: 34812257.886 ops/s
[info] # Warmup Iteration   3: 35316319.793 ops/s
[info] Iteration   1: 35060490.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35316741.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35218099.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35216718.228 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35141077.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35190625.306 ±(99.9%) 368995.376 ops/s [Average]
[info]   (min, avg, max) = (35060490.105, 35190625.306, 35316741.797), stdev = 95826.927
[info]   CI (99.9%): [34821629.930, 35559620.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 77.15% complete, ETA 00:18:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21806392.511 ops/s
[info] # Warmup Iteration   2: 26931278.239 ops/s
[info] # Warmup Iteration   3: 28303121.295 ops/s
[info] Iteration   1: 28388608.237 ops/s
[info]                  ·gc.alloc.rate:            1010.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.062 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 27843241.475 ops/s
[info]                  ·gc.alloc.rate:            990.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57.160 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 26466029.562 ops/s
[info]                  ·gc.alloc.rate:                   941.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 24838254.218 ops/s
[info]                  ·gc.alloc.rate:                                  883.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64.706 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24862818.160 ops/s
[info]                  ·gc.alloc.rate:            884.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64.642 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26479790.331 ±(99.9%) 6330771.883 ops/s [Average]
[info]   (min, avg, max) = (24838254.218, 26479790.331, 28388608.237), stdev = 1644081.354
[info]   CI (99.9%): [20149018.448, 32810562.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   942.176 ±(99.9%) 225.384 MB/sec [Average]
[info]   (min, avg, max) = (883.923, 942.176, 1010.080), stdev = 58.532
[info]   CI (99.9%): [716.792, 1167.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.109), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   947.788 ±(99.9%) 589.714 MB/sec [Average]
[info]   (min, avg, max) = (673.973, 947.788, 1021.347), stdev = 153.147
[info]   CI (99.9%): [358.074, 1537.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.532 ±(99.9%) 38.679 B/op [Average]
[info]   (min, avg, max) = (40.089, 56.532, 64.706), stdev = 10.045
[info]   CI (99.9%): [17.853, 95.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.198), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 8.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 77.42% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3026957.089 ops/s
[info] # Warmup Iteration   2: 5764465.520 ops/s
[info] # Warmup Iteration   3: 5782363.644 ops/s
[info] Iteration   1: 5929776.285 ops/s
[info]                  ·gc.alloc.rate:                                  2862.788 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       813.102 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 5954664.625 ops/s
[info]                  ·gc.alloc.rate:                                  2874.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       719.770 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5951080.556 ops/s
[info]                  ·gc.alloc.rate:                                  2873.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       810.235 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 5854012.211 ops/s
[info]                  ·gc.alloc.rate:            2827.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 732.116 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5976878.862 ops/s
[info]                  ·gc.alloc.rate:                                  2885.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       806.701 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   5933282.508 ±(99.9%) 182354.328 ops/s [Average]
[info]   (min, avg, max) = (5854012.211, 5933282.508, 5976878.862), stdev = 47356.840
[info]   CI (99.9%): [5750928.180, 6115636.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2864.705 ±(99.9%) 86.368 MB/sec [Average]
[info]   (min, avg, max) = (2827.246, 2864.705, 2885.463), stdev = 22.429
[info]   CI (99.9%): [2778.337, 2951.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2926.972 ±(99.9%) 716.742 MB/sec [Average]
[info]   (min, avg, max) = (2722.629, 2926.972, 3063.136), stdev = 186.136
[info]   CI (99.9%): [2210.231, 3643.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   776.385 ±(99.9%) 178.319 B/op [Average]
[info]   (min, avg, max) = (719.770, 776.385, 813.102), stdev = 46.309
[info]   CI (99.9%): [598.065, 954.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 77.69% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14493672.724 ops/s
[info] # Warmup Iteration   2: 21273828.373 ops/s
[info] # Warmup Iteration   3: 21000411.290 ops/s
[info] Iteration   1: 21105045.407 ops/s
[info]                  ·gc.alloc.rate:                                  1931.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151.987 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.248 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 21579128.644 ops/s
[info]                  ·gc.alloc.rate:                                  1974.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       124.133 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 21370890.970 ops/s
[info]                  ·gc.alloc.rate:                                  1954.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.410 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 21406496.916 ops/s
[info]                  ·gc.alloc.rate:                                  1958.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.162 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 21406762.418 ops/s
[info]                  ·gc.alloc.rate:                                  1958.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.152 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   21373664.871 ±(99.9%) 657301.828 ops/s [Average]
[info]   (min, avg, max) = (21105045.407, 21373664.871, 21579128.644), stdev = 170699.197
[info]   CI (99.9%): [20716363.043, 22030966.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1955.675 ±(99.9%) 60.223 MB/sec [Average]
[info]   (min, avg, max) = (1931.313, 1955.675, 1974.831), stdev = 15.640
[info]   CI (99.9%): [1895.452, 2015.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.024, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.008), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1973.511 ±(99.9%) 583.676 MB/sec [Average]
[info]   (min, avg, max) = (1702.375, 1973.511, 2042.550), stdev = 151.579
[info]   CI (99.9%): [1389.836, 2557.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   145.369 ±(99.9%) 45.806 B/op [Average]
[info]   (min, avg, max) = (124.133, 145.369, 151.987), stdev = 11.896
[info]   CI (99.9%): [99.563, 191.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.248), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 77.96% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.889 ops/s
[info] # Warmup Iteration   2: 52327490.992 ops/s
[info] # Warmup Iteration   3: 50829021.937 ops/s
[info] Iteration   1: 52763363.909 ops/s
[info]                  ·gc.alloc.rate:            1608.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1668.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.774 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 52074288.677 ops/s
[info]                  ·gc.alloc.rate:                                  1587.882 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.623 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.201 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 52327720.795 ops/s
[info]                  ·gc.alloc.rate:                                  1596.245 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40.954 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 52632529.038 ops/s
[info]                  ·gc.alloc.rate:            1605.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.893 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 52604939.269 ops/s
[info]                  ·gc.alloc.rate:            1604.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.922 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   52480568.338 ±(99.9%) 1066703.176 ops/s [Average]
[info]   (min, avg, max) = (52074288.677, 52480568.338, 52763363.909), stdev = 277019.427
[info]   CI (99.9%): [51413865.162, 53547271.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1600.506 ±(99.9%) 32.509 MB/sec [Average]
[info]   (min, avg, max) = (1587.882, 1600.506, 1608.970), stdev = 8.443
[info]   CI (99.9%): [1567.996, 1633.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.125 ±(99.9%) 1.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.623), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1625.312 ±(99.9%) 569.423 MB/sec [Average]
[info]   (min, avg, max) = (1361.916, 1625.312, 1701.964), stdev = 147.877
[info]   CI (99.9%): [1055.889, 2194.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   48.740 ±(99.9%) 16.888 B/op [Average]
[info]   (min, avg, max) = (40.954, 48.740, 51.158), stdev = 4.386
[info]   CI (99.9%): [31.852, 65.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.660), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.201), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 24.000), stdev = 8.706
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 78.23% complete, ETA 00:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.895 ops/s
[info] # Warmup Iteration   2: 65400543.181 ops/s
[info] # Warmup Iteration   3: 69175949.304 ops/s
[info] Iteration   1: 71295785.060 ops/s
[info]                  ·gc.alloc.rate:            724.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 72863329.389 ops/s
[info]                  ·gc.alloc.rate:            740.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.418 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 73132076.172 ops/s
[info]                  ·gc.alloc.rate:            743.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 72076856.288 ops/s
[info]                  ·gc.alloc.rate:            732.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21.862 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 72410008.124 ops/s
[info]                  ·gc.alloc.rate:                   736.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14.508 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc":
[info]   72355611.006 ±(99.9%) 2766420.614 ops/s [Average]
[info]   (min, avg, max) = (71295785.060, 72355611.006, 73132076.172), stdev = 718430.648
[info]   CI (99.9%): [69589190.392, 75122031.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   735.556 ±(99.9%) 28.326 MB/sec [Average]
[info]   (min, avg, max) = (724.692, 735.556, 743.379), stdev = 7.356
[info]   CI (99.9%): [707.229, 763.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen":
[info]   734.208 ±(99.9%) 574.759 MB/sec [Average]
[info]   (min, avg, max) = (667.370, 734.208, 1001.218), stdev = 149.263
[info]   CI (99.9%): [159.450, 1308.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   15.977 ±(99.9%) 12.680 B/op [Average]
[info]   (min, avg, max) = (14.365, 15.977, 21.862), stdev = 3.293
[info]   CI (99.9%): [3.298, 28.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJavaPrealloc:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.400, 14.000), stdev = 2.074
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 78.49% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3131887.259 ops/s
[info] # Warmup Iteration   2: 10964447.421 ops/s
[info] # Warmup Iteration   3: 10855423.651 ops/s
[info] Iteration   1: 10910199.585 ops/s
[info]                  ·gc.alloc.rate:                                  2162.325 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2378.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       343.158 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.577 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 10629725.501 ops/s
[info]                  ·gc.alloc.rate:            2107.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 302.408 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 10815319.532 ops/s
[info]                  ·gc.alloc.rate:                                  2143.739 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       297.219 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 11100712.344 ops/s
[info]                  ·gc.alloc.rate:                                  2200.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       337.831 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 10917224.178 ops/s
[info]                  ·gc.alloc.rate:            2163.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 294.434 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   10874636.228 ±(99.9%) 660496.651 ops/s [Average]
[info]   (min, avg, max) = (10629725.501, 10874636.228, 11100712.344), stdev = 171528.883
[info]   CI (99.9%): [10214139.577, 11535132.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2155.565 ±(99.9%) 131.568 MB/sec [Average]
[info]   (min, avg, max) = (2107.006, 2155.565, 2200.930), stdev = 34.168
[info]   CI (99.9%): [2023.996, 2287.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2177.564 ±(99.9%) 714.111 MB/sec [Average]
[info]   (min, avg, max) = (2042.001, 2177.564, 2383.150), stdev = 185.452
[info]   CI (99.9%): [1463.453, 2891.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   315.010 ±(99.9%) 90.548 B/op [Average]
[info]   (min, avg, max) = (294.434, 315.010, 343.158), stdev = 23.515
[info]   CI (99.9%): [224.462, 405.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.115 ±(99.9%) 0.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.115, 0.577), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 78.76% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30858432.681 ops/s
[info] # Warmup Iteration   2: 43069069.025 ops/s
[info] # Warmup Iteration   3: 43948696.664 ops/s
[info] Iteration   1: 44310436.316 ops/s
[info]                  ·gc.alloc.rate:            900.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.898 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 43838533.465 ops/s
[info]                  ·gc.alloc.rate:                   891.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 43384438.870 ops/s
[info]                  ·gc.alloc.rate:                   881.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36.660 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 38413749.557 ops/s
[info]                  ·gc.alloc.rate:                                  780.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.136 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 35924693.268 ops/s
[info]                  ·gc.alloc.rate:                                  730.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29.826 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41174370.295 ±(99.9%) 14535506.867 ops/s [Average]
[info]   (min, avg, max) = (35924693.268, 41174370.295, 44310436.316), stdev = 3774824.974
[info]   CI (99.9%): [26638863.429, 55709877.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   837.008 ±(99.9%) 295.319 MB/sec [Average]
[info]   (min, avg, max) = (730.329, 837.008, 900.778), stdev = 76.693
[info]   CI (99.9%): [541.689, 1132.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.142 ±(99.9%) 702.486 MB/sec [Average]
[info]   (min, avg, max) = (672.699, 810.142, 1010.357), stdev = 182.433
[info]   CI (99.9%): [107.657, 1512.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30.879 ±(99.9%) 21.261 B/op [Average]
[info]   (min, avg, max) = (23.898, 30.879, 36.660), stdev = 5.521
[info]   CI (99.9%): [9.619, 52.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.136), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.082
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 79.03% complete, ETA 00:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35678617.527 ops/s
[info] # Warmup Iteration   2: 49300635.089 ops/s
[info] # Warmup Iteration   3: 48239616.523 ops/s
[info] Iteration   1: 48270488.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48277471.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48254465.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48251990.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48264865.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   48263856.126 ±(99.9%) 41263.901 ops/s [Average]
[info]   (min, avg, max) = (48251990.419, 48263856.126, 48277471.013), stdev = 10716.104
[info]   CI (99.9%): [48222592.225, 48305120.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 79.30% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40401470.489 ops/s
[info] # Warmup Iteration   2: 39463657.682 ops/s
[info] # Warmup Iteration   3: 39741022.490 ops/s
[info] Iteration   1: 39530204.713 ops/s
[info]                  ·gc.alloc.rate:                                  2009.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.313 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 39885858.809 ops/s
[info]                  ·gc.alloc.rate:                                  2027.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67.157 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39891059.737 ops/s
[info]                  ·gc.alloc.rate:                                  2027.667 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.580 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 40240660.283 ops/s
[info]                  ·gc.alloc.rate:                                  2045.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.880 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 38513585.852 ops/s
[info]                  ·gc.alloc.rate:                                  1957.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83.462 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   39612273.879 ±(99.9%) 2555164.458 ops/s [Average]
[info]   (min, avg, max) = (38513585.852, 39612273.879, 40240660.283), stdev = 663568.096
[info]   CI (99.9%): [37057109.421, 42167438.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2013.456 ±(99.9%) 130.464 MB/sec [Average]
[info]   (min, avg, max) = (1957.308, 2013.456, 2045.655), stdev = 33.881
[info]   CI (99.9%): [1882.991, 2143.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   1974.233 ±(99.9%) 586.764 MB/sec [Average]
[info]   (min, avg, max) = (1701.646, 1974.233, 2042.577), stdev = 152.381
[info]   CI (99.9%): [1387.468, 2560.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   78.478 ±(99.9%) 24.913 B/op [Average]
[info]   (min, avg, max) = (67.157, 78.478, 83.462), stdev = 6.470
[info]   CI (99.9%): [53.566, 103.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 79.57% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1390531.957 ops/s
[info] # Warmup Iteration   2: 2073701.540 ops/s
[info] # Warmup Iteration   3: 2086822.617 ops/s
[info] Iteration   1: 2107538.030 ops/s
[info]                  ·gc.alloc.rate:                                  1724.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1262.074 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.985 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 2112321.185 ops/s
[info]                  ·gc.alloc.rate:                                  1728.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1268.150 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2082016.745 ops/s
[info]                  ·gc.alloc.rate:            1703.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       1288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1286.617 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2102259.785 ops/s
[info]                  ·gc.alloc.rate:                                  1720.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1274.212 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2085562.711 ops/s
[info]                  ·gc.alloc.rate:                                  1707.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1288.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1284.388 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2097939.691 ±(99.9%) 51817.583 ops/s [Average]
[info]   (min, avg, max) = (2082016.745, 2097939.691, 2112321.185), stdev = 13456.862
[info]   CI (99.9%): [2046122.108, 2149757.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1717.019 ±(99.9%) 42.480 MB/sec [Average]
[info]   (min, avg, max) = (1703.814, 1717.019, 1728.984), stdev = 11.032
[info]   CI (99.9%): [1674.539, 1759.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.181), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.135), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.740 ±(99.9%) 21.305 MB/sec [Average]
[info]   (min, avg, max) = (1689.845, 1699.740, 1702.337), stdev = 5.533
[info]   CI (99.9%): [1678.434, 1721.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1275.088 ±(99.9%) 40.279 B/op [Average]
[info]   (min, avg, max) = (1262.074, 1275.088, 1286.617), stdev = 10.460
[info]   CI (99.9%): [1234.809, 1315.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 5.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 2.985), stdev = 1.335
[info]   CI (99.9%): [≈ 0, 5.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 13.000), stdev = 4.025
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 79.84% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399861.209 ops/s
[info] # Warmup Iteration   2: 563209.539 ops/s
[info] # Warmup Iteration   3: 559008.023 ops/s
[info] Iteration   1: 567380.489 ops/s
[info]                  ·gc.alloc.rate:                                  2041.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5665.531 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 573549.865 ops/s
[info]                  ·gc.alloc.rate:            2063.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       5664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5604.582 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 563053.902 ops/s
[info]                  ·gc.alloc.rate:                                  2026.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5708.973 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 562288.434 ops/s
[info]                  ·gc.alloc.rate:                                  2023.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5716.820 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 568188.168 ops/s
[info]                  ·gc.alloc.rate:                                  2044.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.833 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5657.336 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   566892.172 ±(99.9%) 17452.558 ops/s [Average]
[info]   (min, avg, max) = (562288.434, 566892.172, 573549.865), stdev = 4532.374
[info]   CI (99.9%): [549439.613, 584344.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2039.932 ±(99.9%) 61.881 MB/sec [Average]
[info]   (min, avg, max) = (2023.299, 2039.932, 2063.678), stdev = 16.070
[info]   CI (99.9%): [1978.051, 2101.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5664.001, 5664.001, 5664.001), stdev = 0.001
[info]   CI (99.9%): [5664.001, 5664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.248), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.224 ±(99.9%) 1.631 MB/sec [Average]
[info]   (min, avg, max) = (2041.833, 2042.224, 2042.943), stdev = 0.424
[info]   CI (99.9%): [2040.593, 2043.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5670.649 ±(99.9%) 174.013 B/op [Average]
[info]   (min, avg, max) = (5604.582, 5670.649, 5716.820), stdev = 45.191
[info]   CI (99.9%): [5496.635, 5844.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 80.11% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217621.018 ops/s
[info] # Warmup Iteration   2: 577300.002 ops/s
[info] # Warmup Iteration   3: 577805.989 ops/s
[info] Iteration   1: 583342.206 ops/s
[info]                  ·gc.alloc.rate:            696.664 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1811.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 570388.830 ops/s
[info]                  ·gc.alloc.rate:            681.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2779.219 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 576917.548 ops/s
[info]                  ·gc.alloc.rate:            689.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1831.799 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 578456.509 ops/s
[info]                  ·gc.alloc.rate:            690.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1826.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 574118.912 ops/s
[info]                  ·gc.alloc.rate:                   685.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1840.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.957 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   576644.801 ±(99.9%) 18639.782 ops/s [Average]
[info]   (min, avg, max) = (570388.830, 576644.801, 583342.206), stdev = 4840.692
[info]   CI (99.9%): [558005.019, 595284.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   688.761 ±(99.9%) 21.979 MB/sec [Average]
[info]   (min, avg, max) = (681.406, 688.761, 696.664), stdev = 5.708
[info]   CI (99.9%): [666.782, 710.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1880.001, 1880.001, 1880.001), stdev = 0.001
[info]   CI (99.9%): [1880.001, 1880.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.579 ±(99.9%) 578.501 MB/sec [Average]
[info]   (min, avg, max) = (671.321, 738.579, 1007.327), stdev = 150.235
[info]   CI (99.9%): [160.078, 1317.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2018.063 ±(99.9%) 1638.949 B/op [Average]
[info]   (min, avg, max) = (1811.611, 2018.063, 2779.219), stdev = 425.630
[info]   CI (99.9%): [379.114, 3657.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.191 ±(99.9%) 18.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.191, 10.957), stdev = 4.900
[info]   CI (99.9%): [≈ 0, 21.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.400, 15.000), stdev = 2.608
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 80.38% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2904941.936 ops/s
[info] # Warmup Iteration   2: 3450256.790 ops/s
[info] # Warmup Iteration   3: 3534270.952 ops/s
[info] Iteration   1: 3446461.822 ops/s
[info]                  ·gc.alloc.rate:            1366.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       624.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 615.693 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3417739.476 ops/s
[info]                  ·gc.alloc.rate:                                  1355.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       625.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.534 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3448469.181 ops/s
[info]                  ·gc.alloc.rate:                                  1367.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       621.425 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3473112.705 ops/s
[info]                  ·gc.alloc.rate:                                  1377.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       616.998 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3533541.447 ops/s
[info]                  ·gc.alloc.rate:                                  1400.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             624.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       606.432 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3463864.926 ±(99.9%) 167931.711 ops/s [Average]
[info]   (min, avg, max) = (3417739.476, 3463864.926, 3533541.447), stdev = 43611.332
[info]   CI (99.9%): [3295933.215, 3631796.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1373.339 ±(99.9%) 66.355 MB/sec [Average]
[info]   (min, avg, max) = (1355.236, 1373.339, 1400.814), stdev = 17.232
[info]   CI (99.9%): [1306.983, 1439.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.245 ±(99.9%) 22.517 MB/sec [Average]
[info]   (min, avg, max) = (1348.063, 1358.245, 1361.858), stdev = 5.848
[info]   CI (99.9%): [1335.728, 1380.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   617.209 ±(99.9%) 27.564 B/op [Average]
[info]   (min, avg, max) = (606.432, 617.209, 625.498), stdev = 7.158
[info]   CI (99.9%): [589.645, 644.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 2.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 1.534), stdev = 0.686
[info]   CI (99.9%): [≈ 0, 2.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:15:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42786.381 ops/s
[info] # Warmup Iteration   2: 207562.592 ops/s
[info] # Warmup Iteration   3: 214840.019 ops/s
[info] Iteration   1: 214957.598 ops/s
[info]                  ·gc.alloc.rate:                   1500.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              10992.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12300.498 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.755 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 218867.486 ops/s
[info]                  ·gc.alloc.rate:                                  1528.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9757.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                33.530 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 219278.587 ops/s
[info]                  ·gc.alloc.rate:                                  1531.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12215.816 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 215647.874 ops/s
[info]                  ·gc.alloc.rate:            1505.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       10992.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9937.450 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 217087.068 ops/s
[info]                  ·gc.alloc.rate:                                  1515.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10992.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12339.200 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   217167.723 ±(99.9%) 7343.037 ops/s [Average]
[info]   (min, avg, max) = (214957.598, 217167.723, 219278.587), stdev = 1906.963
[info]   CI (99.9%): [209824.686, 224510.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1516.533 ±(99.9%) 51.846 MB/sec [Average]
[info]   (min, avg, max) = (1500.926, 1516.533, 1531.239), stdev = 13.464
[info]   CI (99.9%): [1464.687, 1568.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10992.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10992.002, 10992.002, 10992.002), stdev = 0.001
[info]   CI (99.9%): [10992.002, 10992.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.348), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1560.280 ±(99.9%) 707.475 MB/sec [Average]
[info]   (min, avg, max) = (1357.111, 1560.280, 1701.722), stdev = 183.729
[info]   CI (99.9%): [852.805, 2267.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11310.060 ±(99.9%) 5150.190 B/op [Average]
[info]   (min, avg, max) = (9757.337, 11310.060, 12339.200), stdev = 1337.488
[info]   CI (99.9%): [6159.870, 16460.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.781 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.657 ±(99.9%) 55.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.657, 33.530), stdev = 14.532
[info]   CI (99.9%): [≈ 0, 64.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 24.000), stdev = 8.820
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.91% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505705.805 ops/s
[info] # Warmup Iteration   2: 790102.721 ops/s
[info] # Warmup Iteration   3: 812730.730 ops/s
[info] Iteration   1: 820621.600 ops/s
[info]                  ·gc.alloc.rate:                                  1839.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3251.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.388 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 824265.861 ops/s
[info]                  ·gc.alloc.rate:                                  1847.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3249.768 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 826516.678 ops/s
[info]                  ·gc.alloc.rate:                                  1852.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3889.121 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 827733.876 ops/s
[info]                  ·gc.alloc.rate:                                  1855.327 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3236.127 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 833420.157 ops/s
[info]                  ·gc.alloc.rate:                                  1867.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3528.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3856.895 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   826511.634 ±(99.9%) 18159.123 ops/s [Average]
[info]   (min, avg, max) = (820621.600, 826511.634, 833420.157), stdev = 4715.866
[info]   CI (99.9%): [808352.512, 844670.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1852.639 ±(99.9%) 39.990 MB/sec [Average]
[info]   (min, avg, max) = (1839.844, 1852.639, 1867.831), stdev = 10.385
[info]   CI (99.9%): [1812.649, 1892.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3528.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3528.000, 3528.001, 3528.001), stdev = 0.001
[info]   CI (99.9%): [3528.000, 3528.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.019, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.037, 0.163), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1836.725 ±(99.9%) 722.715 MB/sec [Average]
[info]   (min, avg, max) = (1695.649, 1836.725, 2042.657), stdev = 187.687
[info]   CI (99.9%): [1114.010, 2559.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3496.682 ±(99.9%) 1323.765 B/op [Average]
[info]   (min, avg, max) = (3236.127, 3496.682, 3889.121), stdev = 343.777
[info]   CI (99.9%): [2172.917, 4820.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.278 ±(99.9%) 11.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 6.388), stdev = 2.857
[info]   CI (99.9%): [≈ 0, 12.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 15.000), stdev = 5.310
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 81.18% complete, ETA 00:14:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 510436.776 ops/s
[info] # Warmup Iteration   2: 1296556.535 ops/s
[info] # Warmup Iteration   3: 1315704.674 ops/s
[info] Iteration   1: 1305256.336 ops/s
[info]                  ·gc.alloc.rate:                   782.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        808.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1304988.141 ops/s
[info]                  ·gc.alloc.rate:                   782.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1212.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.803 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1325428.809 ops/s
[info]                  ·gc.alloc.rate:            795.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 797.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1344815.427 ops/s
[info]                  ·gc.alloc.rate:                   806.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1177.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   5: 1354164.332 ops/s
[info]                  ·gc.alloc.rate:                                  812.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             944.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.206 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       790.460 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.774 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1326930.609 ±(99.9%) 86426.239 ops/s [Average]
[info]   (min, avg, max) = (1304988.141, 1326930.609, 1354164.332), stdev = 22444.620
[info]   CI (99.9%): [1240504.370, 1413356.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   795.960 ±(99.9%) 51.927 MB/sec [Average]
[info]   (min, avg, max) = (782.764, 795.960, 812.152), stdev = 13.485
[info]   CI (99.9%): [744.033, 847.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.206), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.240), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   806.915 ±(99.9%) 700.148 MB/sec [Average]
[info]   (min, avg, max) = (670.785, 806.915, 1006.870), stdev = 181.826
[info]   CI (99.9%): [106.766, 1507.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   957.391 ±(99.9%) 837.441 B/op [Average]
[info]   (min, avg, max) = (790.460, 957.391, 1212.302), stdev = 217.481
[info]   CI (99.9%): [119.950, 1794.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.333 ±(99.9%) 7.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.333, 4.665), stdev = 1.885
[info]   CI (99.9%): [≈ 0, 8.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.568 ±(99.9%) 8.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.568, 5.457), stdev = 2.201
[info]   CI (99.9%): [≈ 0, 10.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 15.000), stdev = 4.796
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 81.45% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5633208.599 ops/s
[info] # Warmup Iteration   2: 6297518.994 ops/s
[info] # Warmup Iteration   3: 6342589.640 ops/s
[info] Iteration   1: 6359674.752 ops/s
[info]                  ·gc.alloc.rate:            710.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166.499 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 6349802.229 ops/s
[info]                  ·gc.alloc.rate:                   709.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        250.145 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 6401565.322 ops/s
[info]                  ·gc.alloc.rate:            715.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165.574 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 6451969.971 ops/s
[info]                  ·gc.alloc.rate:            721.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 164.120 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6414202.177 ops/s
[info]                  ·gc.alloc.rate:                   717.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        165.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6395442.890 ±(99.9%) 160474.580 ops/s [Average]
[info]   (min, avg, max) = (6349802.229, 6395442.890, 6451969.971), stdev = 41674.739
[info]   CI (99.9%): [6234968.310, 6555917.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   715.130 ±(99.9%) 18.304 MB/sec [Average]
[info]   (min, avg, max) = (709.958, 715.130, 721.532), stdev = 4.753
[info]   CI (99.9%): [696.826, 733.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   740.151 ±(99.9%) 578.825 MB/sec [Average]
[info]   (min, avg, max) = (672.615, 740.151, 1009.049), stdev = 150.319
[info]   CI (99.9%): [161.327, 1318.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   182.284 ±(99.9%) 146.114 B/op [Average]
[info]   (min, avg, max) = (164.120, 182.284, 250.145), stdev = 37.945
[info]   CI (99.9%): [36.171, 328.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 1.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.981), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 9.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.72% complete, ETA 00:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 103413.441 ops/s
[info] # Warmup Iteration   2: 477529.094 ops/s
[info] # Warmup Iteration   3: 481016.776 ops/s
[info] Iteration   1: 474692.190 ops/s
[info]                  ·gc.alloc.rate:                   1609.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              5336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5567.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 485454.897 ops/s
[info]                  ·gc.alloc.rate:                                  1646.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5515.684 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.160 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 484595.929 ops/s
[info]                  ·gc.alloc.rate:                                  1642.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5527.486 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 487093.073 ops/s
[info]                  ·gc.alloc.rate:                                  1651.229 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5499.336 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 477308.090 ops/s
[info]                  ·gc.alloc.rate:                                  1618.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5336.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5612.127 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   481828.836 ±(99.9%) 21080.841 ops/s [Average]
[info]   (min, avg, max) = (474692.190, 481828.836, 487093.073), stdev = 5474.628
[info]   CI (99.9%): [460747.995, 502909.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1633.496 ±(99.9%) 71.800 MB/sec [Average]
[info]   (min, avg, max) = (1609.038, 1633.496, 1651.229), stdev = 18.646
[info]   CI (99.9%): [1561.696, 1705.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5336.001, 5336.001, 5336.001), stdev = 0.001
[info]   CI (99.9%): [5336.001, 5336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.286), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.212 ±(99.9%) 39.313 MB/sec [Average]
[info]   (min, avg, max) = (1678.951, 1697.212, 1702.019), stdev = 10.209
[info]   CI (99.9%): [1657.900, 1736.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5544.497 ±(99.9%) 175.176 B/op [Average]
[info]   (min, avg, max) = (5499.336, 5544.497, 5612.127), stdev = 45.493
[info]   CI (99.9%): [5369.321, 5719.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.524 ±(99.9%) 25.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.524, 15.460), stdev = 6.738
[info]   CI (99.9%): [≈ 0, 29.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 23.000), stdev = 8.396
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.99% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351485.126 ops/s
[info] # Warmup Iteration   2: 586333.676 ops/s
[info] # Warmup Iteration   3: 595980.128 ops/s
[info] Iteration   1: 598592.998 ops/s
[info]                  ·gc.alloc.rate:                                  2071.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2379.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6256.537 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.758 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 585161.031 ops/s
[info]                  ·gc.alloc.rate:                                  2024.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4577.761 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 602366.401 ops/s
[info]                  ·gc.alloc.rate:                                  2084.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6225.714 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 599925.648 ops/s
[info]                  ·gc.alloc.rate:                                  2077.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5358.009 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 596905.596 ops/s
[info]                  ·gc.alloc.rate:                                  2065.827 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5448.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5385.194 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   596590.335 ±(99.9%) 25775.330 ops/s [Average]
[info]   (min, avg, max) = (585161.031, 596590.335, 602366.401), stdev = 6693.771
[info]   CI (99.9%): [570815.005, 622365.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2064.883 ±(99.9%) 90.141 MB/sec [Average]
[info]   (min, avg, max) = (2024.920, 2064.883, 2084.703), stdev = 23.409
[info]   CI (99.9%): [1974.742, 2155.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.504 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.068, 0.302), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2109.574 ±(99.9%) 1093.394 MB/sec [Average]
[info]   (min, avg, max) = (1701.468, 2109.574, 2382.299), stdev = 283.951
[info]   CI (99.9%): [1016.180, 3202.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5560.643 ±(99.9%) 2698.535 B/op [Average]
[info]   (min, avg, max) = (4577.761, 5560.643, 6256.537), stdev = 700.801
[info]   CI (99.9%): [2862.108, 8259.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.752 ±(99.9%) 15.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.752, 8.758), stdev = 3.917
[info]   CI (99.9%): [≈ 0, 16.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala
[info] # Run progress: 82.26% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61279.231 ops/s
[info] # Warmup Iteration   2: 577737.113 ops/s
[info] # Warmup Iteration   3: 589545.272 ops/s
[info] Iteration   1: 588431.014 ops/s
[info]                  ·gc.alloc.rate:            908.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2693.942 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 589477.585 ops/s
[info]                  ·gc.alloc.rate:            910.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2689.149 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 598926.387 ops/s
[info]                  ·gc.alloc.rate:            925.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1764.472 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 599910.663 ops/s
[info]                  ·gc.alloc.rate:                   926.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2652.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 613837.361 ops/s
[info]                  ·gc.alloc.rate:                                  948.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.213 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.547 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2618.259 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala":
[info]   598116.602 ±(99.9%) 39431.981 ops/s [Average]
[info]   (min, avg, max) = (588431.014, 598116.602, 613837.361), stdev = 10240.360
[info]   CI (99.9%): [558684.621, 637548.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   924.158 ±(99.9%) 61.153 MB/sec [Average]
[info]   (min, avg, max) = (908.976, 924.158, 948.434), stdev = 15.881
[info]   CI (99.9%): [863.005, 985.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.001, 2432.001, 2432.001), stdev = 0.001
[info]   CI (99.9%): [2432.001, 2432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.213), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.547), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   943.538 ±(99.9%) 585.702 MB/sec [Average]
[info]   (min, avg, max) = (671.639, 943.538, 1021.072), stdev = 152.105
[info]   CI (99.9%): [357.835, 1529.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2483.726 ±(99.9%) 1552.726 B/op [Average]
[info]   (min, avg, max) = (1764.472, 2483.726, 2693.942), stdev = 403.238
[info]   CI (99.9%): [931.000, 4036.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.447 ±(99.9%) 21.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.447, 12.233), stdev = 5.471
[info]   CI (99.9%): [≈ 0, 23.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.000, 14.000), stdev = 4.743
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 82.53% complete, ETA 00:13:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4237827.675 ops/s
[info] # Warmup Iteration   2: 4885067.426 ops/s
[info] # Warmup Iteration   3: 4946642.393 ops/s
[info] Iteration   1: 4954677.197 ops/s
[info]                  ·gc.alloc.rate:            1234.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.274 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 5145618.007 ops/s
[info]                  ·gc.alloc.rate:                                  1281.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       310.313 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.019 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 5076612.803 ops/s
[info]                  ·gc.alloc.rate:                                  1264.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       422.122 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4996921.961 ops/s
[info]                  ·gc.alloc.rate:            1244.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       392.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 428.846 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5101400.753 ops/s
[info]                  ·gc.alloc.rate:                                  1270.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             392.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       420.072 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5055046.144 ±(99.9%) 299939.452 ops/s [Average]
[info]   (min, avg, max) = (4954677.197, 5055046.144, 5145618.007), stdev = 77893.323
[info]   CI (99.9%): [4755106.693, 5354985.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1259.093 ±(99.9%) 74.300 MB/sec [Average]
[info]   (min, avg, max) = (1234.256, 1259.093, 1281.312), stdev = 19.295
[info]   CI (99.9%): [1184.793, 1333.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.070), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.564 ±(99.9%) 592.925 MB/sec [Average]
[info]   (min, avg, max) = (1014.306, 1289.564, 1361.852), stdev = 153.981
[info]   CI (99.9%): [696.640, 1882.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   401.925 ±(99.9%) 197.746 B/op [Average]
[info]   (min, avg, max) = (310.313, 401.925, 428.846), stdev = 51.354
[info]   CI (99.9%): [204.179, 599.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.204 ±(99.9%) 1.754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.204, 1.019), stdev = 0.456
[info]   CI (99.9%): [≈ 0, 1.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.80% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86121.621 ops/s
[info] # Warmup Iteration   2: 315233.889 ops/s
[info] # Warmup Iteration   3: 311883.594 ops/s
[info] Iteration   1: 315242.480 ops/s
[info]                  ·gc.alloc.rate:                   1719.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              8584.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8410.717 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 322459.400 ops/s
[info]                  ·gc.alloc.rate:                                  1758.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8306.834 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 314703.980 ops/s
[info]                  ·gc.alloc.rate:                                  1716.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8511.737 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 314836.400 ops/s
[info]                  ·gc.alloc.rate:                                  1717.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10209.867 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 326287.845 ops/s
[info]                  ·gc.alloc.rate:                                  1779.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8584.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8209.572 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   318706.021 ±(99.9%) 20607.091 ops/s [Average]
[info]   (min, avg, max) = (314703.980, 318706.021, 326287.845), stdev = 5351.596
[info]   CI (99.9%): [298098.930, 339313.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1738.091 ±(99.9%) 112.047 MB/sec [Average]
[info]   (min, avg, max) = (1716.209, 1738.091, 1779.319), stdev = 29.098
[info]   CI (99.9%): [1626.044, 1850.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8584.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8584.001, 8584.001, 8584.001), stdev = 0.001
[info]   CI (99.9%): [8584.001, 8584.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.322), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1766.438 ±(99.9%) 595.270 MB/sec [Average]
[info]   (min, avg, max) = (1684.354, 1766.438, 2042.649), stdev = 154.590
[info]   CI (99.9%): [1171.168, 2361.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8729.745 ±(99.9%) 3215.635 B/op [Average]
[info]   (min, avg, max) = (8209.572, 8729.745, 10209.867), stdev = 835.090
[info]   CI (99.9%): [5514.111, 11945.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.656 ±(99.9%) 40.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.656, 23.280), stdev = 10.411
[info]   CI (99.9%): [≈ 0, 44.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 20.000), stdev = 6.950
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 83.06% complete, ETA 00:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202893.683 ops/s
[info] # Warmup Iteration   2: 421710.636 ops/s
[info] # Warmup Iteration   3: 433411.800 ops/s
[info] Iteration   1: 439332.375 ops/s
[info]                  ·gc.alloc.rate:            1094.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4829.959 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 439202.567 ops/s
[info]                  ·gc.alloc.rate:            1093.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3623.640 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 432722.221 ops/s
[info]                  ·gc.alloc.rate:                                  1077.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3690.028 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.114 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 441705.739 ops/s
[info]                  ·gc.alloc.rate:                                  1099.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3920.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3638.713 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 439238.291 ops/s
[info]                  ·gc.alloc.rate:            1094.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       3920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4879.018 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   438440.239 ±(99.9%) 12968.893 ops/s [Average]
[info]   (min, avg, max) = (432722.221, 438440.239, 441705.739), stdev = 3367.980
[info]   CI (99.9%): [425471.346, 451409.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1091.905 ±(99.9%) 32.305 MB/sec [Average]
[info]   (min, avg, max) = (1077.622, 1091.905, 1099.922), stdev = 8.389
[info]   CI (99.9%): [1059.601, 1124.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3920.001, 3920.001, 3920.001), stdev = 0.001
[info]   CI (99.9%): [3920.001, 3920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.121), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.430), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1151.273 ±(99.9%) 716.464 MB/sec [Average]
[info]   (min, avg, max) = (1010.995, 1151.273, 1361.937), stdev = 186.063
[info]   CI (99.9%): [434.809, 1867.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4132.272 ±(99.9%) 2541.340 B/op [Average]
[info]   (min, avg, max) = (3623.640, 4132.272, 4879.018), stdev = 659.978
[info]   CI (99.9%): [1590.931, 6673.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.423 ±(99.9%) 20.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.423, 12.114), stdev = 5.418
[info]   CI (99.9%): [≈ 0, 23.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 4.658
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 83.33% complete, ETA 00:13:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2575166.942 ops/s
[info] # Warmup Iteration   2: 3152419.446 ops/s
[info] # Warmup Iteration   3: 3233564.272 ops/s
[info] Iteration   1: 3212987.960 ops/s
[info]                  ·gc.alloc.rate:            587.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 329.564 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 3172635.972 ops/s
[info]                  ·gc.alloc.rate:                   580.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        334.086 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.330 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3067071.182 ops/s
[info]                  ·gc.alloc.rate:            561.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3156941.789 ops/s
[info]                  ·gc.alloc.rate:            577.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3187506.304 ops/s
[info]                  ·gc.alloc.rate:            583.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       288.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 332.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3159428.641 ±(99.9%) 214113.411 ops/s [Average]
[info]   (min, avg, max) = (3067071.182, 3159428.641, 3212987.960), stdev = 55604.573
[info]   CI (99.9%): [2945315.230, 3373542.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.154 ±(99.9%) 39.312 MB/sec [Average]
[info]   (min, avg, max) = (561.157, 578.154, 587.879), stdev = 10.209
[info]   CI (99.9%): [538.841, 617.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (288.000, 288.000, 288.000), stdev = 0.001
[info]   CI (99.9%): [288.000, 288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.660 ±(99.9%) 579.538 MB/sec [Average]
[info]   (min, avg, max) = (336.430, 605.660, 673.558), stdev = 150.504
[info]   CI (99.9%): [26.121, 1185.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   301.762 ±(99.9%) 289.470 B/op [Average]
[info]   (min, avg, max) = (167.711, 301.762, 345.241), stdev = 75.174
[info]   CI (99.9%): [12.292, 591.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.066 ±(99.9%) 0.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.330), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.60% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73165.904 ops/s
[info] # Warmup Iteration   2: 326707.290 ops/s
[info] # Warmup Iteration   3: 336258.728 ops/s
[info] Iteration   1: 338512.183 ops/s
[info]                  ·gc.alloc.rate:                   1223.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4682.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 334080.394 ops/s
[info]                  ·gc.alloc.rate:                   1207.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6332.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.829 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 339718.422 ops/s
[info]                  ·gc.alloc.rate:                                  1227.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.196 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4727.764 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.086 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 339628.776 ops/s
[info]                  ·gc.alloc.rate:            1227.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       5688.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6309.694 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 335273.947 ops/s
[info]                  ·gc.alloc.rate:                                  1211.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5688.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6391.602 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   337442.745 ±(99.9%) 10024.665 ops/s [Average]
[info]   (min, avg, max) = (334080.394, 337442.745, 339718.422), stdev = 2603.374
[info]   CI (99.9%): [327418.079, 347467.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1219.516 ±(99.9%) 36.273 MB/sec [Average]
[info]   (min, avg, max) = (1207.338, 1219.516, 1227.771), stdev = 9.420
[info]   CI (99.9%): [1183.244, 1255.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5688.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5688.001, 5688.001, 5688.001), stdev = 0.001
[info]   CI (99.9%): [5688.001, 5688.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.196), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.183 ±(99.9%) 1.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.909), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.020 ±(99.9%) 722.698 MB/sec [Average]
[info]   (min, avg, max) = (1006.934, 1219.020, 1361.965), stdev = 187.682
[info]   CI (99.9%): [496.322, 1941.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5688.897 ±(99.9%) 3460.363 B/op [Average]
[info]   (min, avg, max) = (4682.595, 5688.897, 6391.602), stdev = 898.645
[info]   CI (99.9%): [2228.534, 9149.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.002 ±(99.9%) 30.352 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.002, 18.829), stdev = 7.882
[info]   CI (99.9%): [≈ 0, 35.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 19.000), stdev = 7.430
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.87% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1086314.763 ops/s
[info] # Warmup Iteration   2: 1964238.104 ops/s
[info] # Warmup Iteration   3: 2008727.808 ops/s
[info] Iteration   1: 2013862.120 ops/s
[info]                  ·gc.alloc.rate:                                  2875.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2128.176 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 2053438.996 ops/s
[info]                  ·gc.alloc.rate:                                  2932.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2348.055 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2049198.002 ops/s
[info]                  ·gc.alloc.rate:                                  2926.519 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2352.981 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2018290.671 ops/s
[info]                  ·gc.alloc.rate:                                  2882.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2123.525 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 2038928.764 ops/s
[info]                  ·gc.alloc.rate:                                  2912.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2248.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2364.765 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2034743.710 ±(99.9%) 68954.976 ops/s [Average]
[info]   (min, avg, max) = (2013862.120, 2034743.710, 2053438.996), stdev = 17907.388
[info]   CI (99.9%): [1965788.734, 2103698.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2906.079 ±(99.9%) 98.860 MB/sec [Average]
[info]   (min, avg, max) = (2875.971, 2906.079, 2932.690), stdev = 25.674
[info]   CI (99.9%): [2807.219, 3004.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2248.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2248.000, 2248.000, 2248.000), stdev = 0.001
[info]   CI (99.9%): [2248.000, 2248.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2927.197 ±(99.9%) 718.659 MB/sec [Average]
[info]   (min, avg, max) = (2722.675, 2927.197, 3064.078), stdev = 186.633
[info]   CI (99.9%): [2208.538, 3645.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2263.500 ±(99.9%) 484.465 B/op [Average]
[info]   (min, avg, max) = (2123.525, 2263.500, 2364.765), stdev = 125.814
[info]   CI (99.9%): [1779.035, 2747.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 84.14% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.843 ops/s
[info] # Warmup Iteration   2: 810184.920 ops/s
[info] # Warmup Iteration   3: 828234.012 ops/s
[info] Iteration   1: 858002.931 ops/s
[info]                  ·gc.alloc.rate:            510.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 612.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 869160.710 ops/s
[info]                  ·gc.alloc.rate:            516.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1208.682 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 835554.627 ops/s
[info]                  ·gc.alloc.rate:                   496.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        627.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.255 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 842736.848 ops/s
[info]                  ·gc.alloc.rate:            501.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1246.610 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 843588.125 ops/s
[info]                  ·gc.alloc.rate:                   501.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        621.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.243 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   849808.648 ±(99.9%) 52144.990 ops/s [Average]
[info]   (min, avg, max) = (835554.627, 849808.648, 869160.710), stdev = 13541.888
[info]   CI (99.9%): [797663.658, 901953.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   505.372 ±(99.9%) 31.046 MB/sec [Average]
[info]   (min, avg, max) = (496.876, 505.372, 516.913), stdev = 8.062
[info]   CI (99.9%): [474.326, 536.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.001), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.965 ±(99.9%) 704.983 MB/sec [Average]
[info]   (min, avg, max) = (333.024, 466.965, 667.539), stdev = 183.082
[info]   CI (99.9%): [≈ 0, 1171.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   863.252 ±(99.9%) 1282.107 B/op [Average]
[info]   (min, avg, max) = (612.185, 863.252, 1246.610), stdev = 332.959
[info]   CI (99.9%): [≈ 0, 2145.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.500 ±(99.9%) 2.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.500, 1.255), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 3.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 84.41% complete, ETA 00:12:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32463.566 ops/s
[info] # Warmup Iteration   2: 289712.546 ops/s
[info] # Warmup Iteration   3: 292997.761 ops/s
[info] Iteration   1: 309661.050 ops/s
[info]                  ·gc.alloc.rate:            596.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3419.538 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 310174.238 ops/s
[info]                  ·gc.alloc.rate:                   597.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3410.558 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.380 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 311651.576 ops/s
[info]                  ·gc.alloc.rate:            600.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1698.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 308969.661 ops/s
[info]                  ·gc.alloc.rate:                   595.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3423.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.393 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 307586.193 ops/s
[info]                  ·gc.alloc.rate:            592.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3442.670 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   309608.544 ±(99.9%) 5774.304 ops/s [Average]
[info]   (min, avg, max) = (307586.193, 309608.544, 311651.576), stdev = 1499.569
[info]   CI (99.9%): [303834.239, 315382.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   596.387 ±(99.9%) 11.368 MB/sec [Average]
[info]   (min, avg, max) = (592.428, 596.387, 600.413), stdev = 2.952
[info]   CI (99.9%): [585.018, 607.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3032.001, 3032.001, 3032.001), stdev = 0.001
[info]   CI (99.9%): [3032.001, 3032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.186 ±(99.9%) 578.539 MB/sec [Average]
[info]   (min, avg, max) = (336.420, 605.186, 672.670), stdev = 150.245
[info]   CI (99.9%): [26.647, 1183.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3079.098 ±(99.9%) 2971.376 B/op [Average]
[info]   (min, avg, max) = (1698.875, 3079.098, 3442.670), stdev = 771.657
[info]   CI (99.9%): [107.722, 6050.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.355 ±(99.9%) 7.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.355, 3.393), stdev = 1.855
[info]   CI (99.9%): [≈ 0, 8.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 9.000), stdev = 1.643
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.68% complete, ETA 00:12:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687990.417 ops/s
[info] # Warmup Iteration   2: 742863.157 ops/s
[info] # Warmup Iteration   3: 747466.471 ops/s
[info] Iteration   1: 781559.635 ops/s
[info]                  ·gc.alloc.rate:            587.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1357.496 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 771831.071 ops/s
[info]                  ·gc.alloc.rate:            580.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1374.638 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 776749.093 ops/s
[info]                  ·gc.alloc.rate:            584.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1365.936 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 760529.424 ops/s
[info]                  ·gc.alloc.rate:            572.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 697.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 743282.666 ops/s
[info]                  ·gc.alloc.rate:            559.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1427.467 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   766790.378 ±(99.9%) 58857.178 ops/s [Average]
[info]   (min, avg, max) = (743282.666, 766790.378, 781559.635), stdev = 15285.022
[info]   CI (99.9%): [707933.199, 825647.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   576.730 ±(99.9%) 44.262 MB/sec [Average]
[info]   (min, avg, max) = (559.041, 576.730, 587.848), stdev = 11.495
[info]   CI (99.9%): [532.468, 620.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.589 ±(99.9%) 580.279 MB/sec [Average]
[info]   (min, avg, max) = (337.015, 606.589, 673.996), stdev = 150.697
[info]   CI (99.9%): [26.310, 1186.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1244.614 ±(99.9%) 1182.316 B/op [Average]
[info]   (min, avg, max) = (697.531, 1244.614, 1427.467), stdev = 307.044
[info]   CI (99.9%): [62.298, 2426.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.95% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3640157.509 ops/s
[info] # Warmup Iteration   2: 4047519.887 ops/s
[info] # Warmup Iteration   3: 3991030.064 ops/s
[info] Iteration   1: 4042214.253 ops/s
[info]                  ·gc.alloc.rate:            1294.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 393.705 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 4013415.241 ops/s
[info]                  ·gc.alloc.rate:                                  1285.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       531.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.306 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 3990419.087 ops/s
[info]                  ·gc.alloc.rate:                                  1277.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       537.053 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4036260.916 ops/s
[info]                  ·gc.alloc.rate:                                  1292.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       530.939 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4034473.740 ops/s
[info]                  ·gc.alloc.rate:            1291.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531.169 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4023356.647 ±(99.9%) 82349.637 ops/s [Average]
[info]   (min, avg, max) = (3990419.087, 4023356.647, 4042214.253), stdev = 21385.939
[info]   CI (99.9%): [3941007.010, 4105706.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1288.325 ±(99.9%) 26.475 MB/sec [Average]
[info]   (min, avg, max) = (1277.586, 1288.325, 1294.257), stdev = 6.875
[info]   CI (99.9%): [1261.851, 1314.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.182), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1290.129 ±(99.9%) 600.893 MB/sec [Average]
[info]   (min, avg, max) = (1011.021, 1290.129, 1361.685), stdev = 156.050
[info]   CI (99.9%): [689.236, 1891.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   504.842 ±(99.9%) 239.435 B/op [Average]
[info]   (min, avg, max) = (393.705, 504.842, 537.053), stdev = 62.181
[info]   CI (99.9%): [265.407, 744.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 2.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 1.306), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 2.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 85.22% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7200195.145 ops/s
[info] # Warmup Iteration   2: 7419686.498 ops/s
[info] # Warmup Iteration   3: 7614588.106 ops/s
[info] Iteration   1: 7712807.054 ops/s
[info]                  ·gc.alloc.rate:            627.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 137.557 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7675277.525 ops/s
[info]                  ·gc.alloc.rate:            624.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7731681.573 ops/s
[info]                  ·gc.alloc.rate:            628.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.612 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7375562.394 ops/s
[info]                  ·gc.alloc.rate:            599.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 143.852 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 7548640.236 ops/s
[info]                  ·gc.alloc.rate:            613.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7608793.756 ±(99.9%) 572295.557 ops/s [Average]
[info]   (min, avg, max) = (7375562.394, 7608793.756, 7731681.573), stdev = 148623.339
[info]   CI (99.9%): [7036498.199, 8181089.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   618.744 ±(99.9%) 46.290 MB/sec [Average]
[info]   (min, avg, max) = (599.865, 618.744, 628.706), stdev = 12.021
[info]   CI (99.9%): [572.454, 665.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.645 ±(99.9%) 580.421 MB/sec [Average]
[info]   (min, avg, max) = (337.004, 606.645, 674.153), stdev = 150.733
[info]   CI (99.9%): [26.224, 1187.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   125.761 ±(99.9%) 123.382 B/op [Average]
[info]   (min, avg, max) = (68.612, 125.761, 143.852), stdev = 32.042
[info]   CI (99.9%): [2.379, 249.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.48% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18044.708 ops/s
[info] # Warmup Iteration   2: 175377.787 ops/s
[info] # Warmup Iteration   3: 187229.316 ops/s
[info] Iteration   1: 191319.063 ops/s
[info]                  ·gc.alloc.rate:                   1299.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11058.350 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 186719.376 ops/s
[info]                  ·gc.alloc.rate:                   1268.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11330.736 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.304 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 186800.906 ops/s
[info]                  ·gc.alloc.rate:                                  1269.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.169 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11466.195 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.612 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 190924.818 ops/s
[info]                  ·gc.alloc.rate:            1297.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8418.129 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 188627.033 ops/s
[info]                  ·gc.alloc.rate:            1282.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11360.412 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   188878.239 ±(99.9%) 8433.088 ops/s [Average]
[info]   (min, avg, max) = (186719.376, 188878.239, 191319.063), stdev = 2190.046
[info]   CI (99.9%): [180445.151, 197311.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1283.572 ±(99.9%) 57.459 MB/sec [Average]
[info]   (min, avg, max) = (1268.632, 1283.572, 1299.849), stdev = 14.922
[info]   CI (99.9%): [1226.113, 1341.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10696.002, 10696.002), stdev = 0.001
[info]   CI (99.9%): [10696.002, 10696.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.169), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.286 ±(99.9%) 2.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.428), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1286.374 ±(99.9%) 571.483 MB/sec [Average]
[info]   (min, avg, max) = (1021.346, 1286.374, 1361.912), stdev = 148.412
[info]   CI (99.9%): [714.890, 1857.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10726.765 ±(99.9%) 5003.169 B/op [Average]
[info]   (min, avg, max) = (8418.129, 10726.765, 11466.195), stdev = 1299.307
[info]   CI (99.9%): [5723.596, 15729.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.662), stdev = 1.942
[info]   CI (99.9%): [≈ 0, 8.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   11.175 ±(99.9%) 63.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.175, 39.304), stdev = 16.371
[info]   CI (99.9%): [≈ 0, 74.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 8.325
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.75% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431280.753 ops/s
[info] # Warmup Iteration   2: 639293.905 ops/s
[info] # Warmup Iteration   3: 652535.838 ops/s
[info] Iteration   1: 669031.226 ops/s
[info]                  ·gc.alloc.rate:                                  2546.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6406.140 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 668262.988 ops/s
[info]                  ·gc.alloc.rate:                                  2544.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5611.578 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 663173.335 ops/s
[info]                  ·gc.alloc.rate:                                  2524.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5654.802 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 663392.672 ops/s
[info]                  ·gc.alloc.rate:                                  2525.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6460.488 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 664068.860 ops/s
[info]                  ·gc.alloc.rate:                                  2528.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5992.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5647.233 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   665585.816 ±(99.9%) 10886.023 ops/s [Average]
[info]   (min, avg, max) = (663173.335, 665585.816, 669031.226), stdev = 2827.066
[info]   CI (99.9%): [654699.793, 676471.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2534.071 ±(99.9%) 42.129 MB/sec [Average]
[info]   (min, avg, max) = (2524.221, 2534.071, 2546.993), stdev = 10.941
[info]   CI (99.9%): [2491.942, 2576.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5992.001, 5992.001, 5992.001), stdev = 0.001
[info]   CI (99.9%): [5992.001, 5992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.008, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2518.951 ±(99.9%) 717.634 MB/sec [Average]
[info]   (min, avg, max) = (2382.171, 2518.951, 2723.182), stdev = 186.367
[info]   CI (99.9%): [1801.317, 3236.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5956.048 ±(99.9%) 1680.463 B/op [Average]
[info]   (min, avg, max) = (5611.578, 5956.048, 6460.488), stdev = 436.411
[info]   CI (99.9%): [4275.585, 7636.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 86.02% complete, ETA 00:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2717349.561 ops/s
[info] # Warmup Iteration   2: 3159043.912 ops/s
[info] # Warmup Iteration   3: 3238707.239 ops/s
[info] Iteration   1: 3370405.609 ops/s
[info]                  ·gc.alloc.rate:                                  2175.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       953.718 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 3300337.943 ops/s
[info]                  ·gc.alloc.rate:                                  2130.509 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.830 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1136.327 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3202400.554 ops/s
[info]                  ·gc.alloc.rate:                                  2067.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1003.807 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3280972.345 ops/s
[info]                  ·gc.alloc.rate:                                  2118.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1016.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       979.740 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3330956.200 ops/s
[info]                  ·gc.alloc.rate:            2150.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       1016.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 965.021 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3297014.530 ±(99.9%) 241691.094 ops/s [Average]
[info]   (min, avg, max) = (3202400.554, 3297014.530, 3370405.609), stdev = 62766.410
[info]   CI (99.9%): [3055323.436, 3538705.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2128.378 ±(99.9%) 155.940 MB/sec [Average]
[info]   (min, avg, max) = (2067.000, 2128.378, 2175.190), stdev = 40.497
[info]   CI (99.9%): [1972.438, 2284.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2110.508 ±(99.9%) 586.197 MB/sec [Average]
[info]   (min, avg, max) = (2041.847, 2110.508, 2382.830), stdev = 152.233
[info]   CI (99.9%): [1524.311, 2696.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1007.723 ±(99.9%) 286.074 B/op [Average]
[info]   (min, avg, max) = (953.718, 1007.723, 1136.327), stdev = 74.293
[info]   CI (99.9%): [721.649, 1293.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.29% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37571.658 ops/s
[info] # Warmup Iteration   2: 226426.971 ops/s
[info] # Warmup Iteration   3: 227185.449 ops/s
[info] Iteration   1: 230297.167 ops/s
[info]                  ·gc.alloc.rate:                   1661.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              11352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11485.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.419 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 241866.611 ops/s
[info]                  ·gc.alloc.rate:                                  1744.267 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.707 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11074.920 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 242360.986 ops/s
[info]                  ·gc.alloc.rate:            1747.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       11352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11052.031 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 242662.283 ops/s
[info]                  ·gc.alloc.rate:                                  1750.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11038.643 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 240582.423 ops/s
[info]                  ·gc.alloc.rate:                                  1735.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13360.709 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   239553.894 ±(99.9%) 20159.453 ops/s [Average]
[info]   (min, avg, max) = (230297.167, 239553.894, 242662.283), stdev = 5235.346
[info]   CI (99.9%): [219394.441, 259713.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1727.911 ±(99.9%) 145.078 MB/sec [Average]
[info]   (min, avg, max) = (1661.270, 1727.911, 1750.521), stdev = 37.676
[info]   CI (99.9%): [1582.834, 1872.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11352.002, 11352.002, 11352.002), stdev = 0.001
[info]   CI (99.9%): [11352.001, 11352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.147 ±(99.9%) 1.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.707), stdev = 0.314
[info]   CI (99.9%): [≈ 0, 1.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1765.830 ±(99.9%) 597.074 MB/sec [Average]
[info]   (min, avg, max) = (1680.835, 1765.830, 2042.728), stdev = 155.058
[info]   CI (99.9%): [1168.756, 2362.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11602.399 ±(99.9%) 3852.682 B/op [Average]
[info]   (min, avg, max) = (11038.643, 11602.399, 13360.709), stdev = 1000.529
[info]   CI (99.9%): [7749.717, 15455.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.284 ±(99.9%) 62.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.284, 36.419), stdev = 16.287
[info]   CI (99.9%): [≈ 0, 70.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.800, 23.000), stdev = 8.289
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.56% complete, ETA 00:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 465773.692 ops/s
[info] # Warmup Iteration   2: 770525.952 ops/s
[info] # Warmup Iteration   3: 765469.247 ops/s
[info] Iteration   1: 757624.505 ops/s
[info]                  ·gc.alloc.rate:                                  1609.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3507.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.919 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 781867.292 ops/s
[info]                  ·gc.alloc.rate:                                  1661.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3426.158 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 779134.087 ops/s
[info]                  ·gc.alloc.rate:                                  1655.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3438.126 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 777156.582 ops/s
[info]                  ·gc.alloc.rate:                                  1651.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3446.689 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 767359.768 ops/s
[info]                  ·gc.alloc.rate:                                  1630.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3344.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2792.618 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   772628.447 ±(99.9%) 38557.470 ops/s [Average]
[info]   (min, avg, max) = (757624.505, 772628.447, 781867.292), stdev = 10013.252
[info]   CI (99.9%): [734070.977, 811185.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1641.650 ±(99.9%) 82.552 MB/sec [Average]
[info]   (min, avg, max) = (1609.582, 1641.650, 1661.193), stdev = 21.438
[info]   CI (99.9%): [1559.098, 1724.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3344.001, 3344.001, 3344.001), stdev = 0.001
[info]   CI (99.9%): [3344.000, 3344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.028, 0.072), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.058, 0.145), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.293 ±(99.9%) 581.467 MB/sec [Average]
[info]   (min, avg, max) = (1361.377, 1631.293, 1702.339), stdev = 151.005
[info]   CI (99.9%): [1049.825, 2212.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3322.291 ±(99.9%) 1146.613 B/op [Average]
[info]   (min, avg, max) = (2792.618, 3322.291, 3507.864), stdev = 297.772
[info]   CI (99.9%): [2175.678, 4468.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.384 ±(99.9%) 11.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.384, 6.919), stdev = 3.094
[info]   CI (99.9%): [≈ 0, 13.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 15.000), stdev = 5.167
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.83% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 571535.192 ops/s
[info] # Warmup Iteration   2: 1377778.509 ops/s
[info] # Warmup Iteration   3: 1370734.222 ops/s
[info] Iteration   1: 1371854.576 ops/s
[info]                  ·gc.alloc.rate:            683.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1155.526 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1375048.469 ops/s
[info]                  ·gc.alloc.rate:                   684.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        767.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1332461.898 ops/s
[info]                  ·gc.alloc.rate:            663.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 793.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1386515.097 ops/s
[info]                  ·gc.alloc.rate:            690.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 762.219 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1375078.884 ops/s
[info]                  ·gc.alloc.rate:                   684.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              784.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        768.552 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1368191.785 ±(99.9%) 79854.010 ops/s [Average]
[info]   (min, avg, max) = (1332461.898, 1368191.785, 1386515.097), stdev = 20737.833
[info]   CI (99.9%): [1288337.774, 1448045.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   681.481 ±(99.9%) 39.610 MB/sec [Average]
[info]   (min, avg, max) = (663.769, 681.481, 690.604), stdev = 10.286
[info]   CI (99.9%): [641.871, 721.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   784.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (784.000, 784.000, 784.000), stdev = 0.001
[info]   CI (99.9%): [784.000, 784.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   738.417 ±(99.9%) 578.298 MB/sec [Average]
[info]   (min, avg, max) = (670.721, 738.417, 1007.071), stdev = 150.182
[info]   CI (99.9%): [160.119, 1316.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   849.444 ±(99.9%) 660.459 B/op [Average]
[info]   (min, avg, max) = (762.219, 849.444, 1155.526), stdev = 171.519
[info]   CI (99.9%): [188.985, 1509.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.067 ±(99.9%) 7.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.067, 4.575), stdev = 1.988
[info]   CI (99.9%): [≈ 0, 8.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 14.000), stdev = 2.168
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.10% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3871473.733 ops/s
[info] # Warmup Iteration   2: 4424985.819 ops/s
[info] # Warmup Iteration   3: 4512803.061 ops/s
[info] Iteration   1: 4441760.125 ops/s
[info]                  ·gc.alloc.rate:            338.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 119.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 4519849.729 ops/s
[info]                  ·gc.alloc.rate:            344.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 4509724.922 ops/s
[info]                  ·gc.alloc.rate:            343.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 234.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 4514957.930 ops/s
[info]                  ·gc.alloc.rate:            344.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117.269 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4485694.303 ops/s
[info]                  ·gc.alloc.rate:            341.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 118.033 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4494397.402 ±(99.9%) 124058.820 ops/s [Average]
[info]   (min, avg, max) = (4441760.125, 4494397.402, 4519849.729), stdev = 32217.682
[info]   CI (99.9%): [4370338.581, 4618456.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   342.634 ±(99.9%) 9.526 MB/sec [Average]
[info]   (min, avg, max) = (338.598, 342.634, 344.541), stdev = 2.474
[info]   CI (99.9%): [333.108, 352.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.779 ±(99.9%) 579.174 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 403.779, 672.840), stdev = 150.410
[info]   CI (99.9%): [≈ 0, 982.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   141.336 ±(99.9%) 201.235 B/op [Average]
[info]   (min, avg, max) = (117.139, 141.336, 234.808), stdev = 52.260
[info]   CI (99.9%): [≈ 0, 342.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.37% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110358.139 ops/s
[info] # Warmup Iteration   2: 470686.506 ops/s
[info] # Warmup Iteration   3: 472995.960 ops/s
[info] Iteration   1: 470824.421 ops/s
[info]                  ·gc.alloc.rate:                   1576.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              5272.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5615.968 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.361 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 482652.114 ops/s
[info]                  ·gc.alloc.rate:                                  1617.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5547.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.172 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 485963.988 ops/s
[info]                  ·gc.alloc.rate:                                  1627.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4409.616 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 483654.819 ops/s
[info]                  ·gc.alloc.rate:                                  1619.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5538.410 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 480089.152 ops/s
[info]                  ·gc.alloc.rate:                                  1607.849 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5272.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5579.565 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   480636.899 ±(99.9%) 22628.191 ops/s [Average]
[info]   (min, avg, max) = (470824.421, 480636.899, 485963.988), stdev = 5876.469
[info]   CI (99.9%): [458008.708, 503265.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1609.866 ±(99.9%) 76.298 MB/sec [Average]
[info]   (min, avg, max) = (1576.812, 1609.866, 1627.885), stdev = 19.814
[info]   CI (99.9%): [1533.568, 1686.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5272.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5272.001, 5272.001, 5272.001), stdev = 0.001
[info]   CI (99.9%): [5272.001, 5272.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.246), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.228 ±(99.9%) 577.252 MB/sec [Average]
[info]   (min, avg, max) = (1361.598, 1629.228, 1701.650), stdev = 149.911
[info]   CI (99.9%): [1051.975, 2206.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5338.256 ±(99.9%) 2002.394 B/op [Average]
[info]   (min, avg, max) = (4409.616, 5338.256, 5615.968), stdev = 520.015
[info]   CI (99.9%): [3335.862, 7340.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.107 ±(99.9%) 22.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.107, 13.361), stdev = 5.809
[info]   CI (99.9%): [≈ 0, 25.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 23.000), stdev = 8.289
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala
[info] # Run progress: 87.63% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48068.182 ops/s
[info] # Warmup Iteration   2: 574985.264 ops/s
[info] # Warmup Iteration   3: 580944.871 ops/s
[info] Iteration   1: 589261.828 ops/s
[info]                  ·gc.alloc.rate:            979.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1793.414 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 581693.592 ops/s
[info]                  ·gc.alloc.rate:                   967.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2723.391 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.802 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 586426.361 ops/s
[info]                  ·gc.alloc.rate:            974.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       2616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2703.133 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 565083.097 ops/s
[info]                  ·gc.alloc.rate:                                  939.098 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.211 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.588 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2829.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.987 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 575619.377 ops/s
[info]                  ·gc.alloc.rate:                                  956.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.128 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2792.060 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala":
[info]   579616.851 ±(99.9%) 37080.206 ops/s [Average]
[info]   (min, avg, max) = (565083.097, 579616.851, 589261.828), stdev = 9629.612
[info]   CI (99.9%): [542536.646, 616697.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   963.318 ±(99.9%) 61.644 MB/sec [Average]
[info]   (min, avg, max) = (939.098, 963.318, 979.188), stdev = 16.009
[info]   CI (99.9%): [901.674, 1024.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2616.001, 2616.001, 2616.001), stdev = 0.001
[info]   CI (99.9%): [2616.001, 2616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.052 ±(99.9%) 0.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.211), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.143 ±(99.9%) 0.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.588), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.366 ±(99.9%) 588.273 MB/sec [Average]
[info]   (min, avg, max) = (671.288, 944.366, 1020.970), stdev = 152.773
[info]   CI (99.9%): [356.093, 1532.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2568.274 ±(99.9%) 1679.459 B/op [Average]
[info]   (min, avg, max) = (1793.414, 2568.274, 2829.371), stdev = 436.150
[info]   CI (99.9%): [888.814, 4247.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.958 ±(99.9%) 21.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.958, 12.987), stdev = 5.661
[info]   CI (99.9%): [≈ 0, 24.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 14.000), stdev = 4.980
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.90% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2492690.420 ops/s
[info] # Warmup Iteration   2: 3076168.893 ops/s
[info] # Warmup Iteration   3: 3112961.513 ops/s
[info] Iteration   1: 3073583.154 ops/s
[info]                  ·gc.alloc.rate:                   1452.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        690.395 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.706 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 3083459.830 ops/s
[info]                  ·gc.alloc.rate:                                  1457.275 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       694.997 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 3109169.855 ops/s
[info]                  ·gc.alloc.rate:            1469.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 861.566 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3084462.779 ops/s
[info]                  ·gc.alloc.rate:            1457.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 694.767 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3079966.165 ops/s
[info]                  ·gc.alloc.rate:            1456.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 695.781 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3086128.357 ±(99.9%) 52238.373 ops/s [Average]
[info]   (min, avg, max) = (3073583.154, 3086128.357, 3109169.855), stdev = 13566.140
[info]   CI (99.9%): [3033889.984, 3138366.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1458.669 ±(99.9%) 24.479 MB/sec [Average]
[info]   (min, avg, max) = (1452.630, 1458.669, 1469.436), stdev = 6.357
[info]   CI (99.9%): [1434.191, 1483.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.103), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1426.811 ±(99.9%) 592.007 MB/sec [Average]
[info]   (min, avg, max) = (1347.969, 1426.811, 1701.634), stdev = 153.742
[info]   CI (99.9%): [834.805, 2018.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   727.501 ±(99.9%) 288.698 B/op [Average]
[info]   (min, avg, max) = (690.395, 727.501, 861.566), stdev = 74.974
[info]   CI (99.9%): [438.803, 1016.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.341 ±(99.9%) 2.937 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.341, 1.706), stdev = 0.763
[info]   CI (99.9%): [≈ 0, 3.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.17% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87504.046 ops/s
[info] # Warmup Iteration   2: 275719.839 ops/s
[info] # Warmup Iteration   3: 275696.987 ops/s
[info] Iteration   1: 278384.457 ops/s
[info]                  ·gc.alloc.rate:                   1488.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              8416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7596.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 281959.708 ops/s
[info]                  ·gc.alloc.rate:                                  1507.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9474.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.028 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 280935.987 ops/s
[info]                  ·gc.alloc.rate:                                  1502.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7627.717 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 283553.787 ops/s
[info]                  ·gc.alloc.rate:            1515.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       8416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7557.438 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 283420.520 ops/s
[info]                  ·gc.alloc.rate:                                  1515.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8416.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9451.230 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   281650.892 ±(99.9%) 8174.947 ops/s [Average]
[info]   (min, avg, max) = (278384.457, 281650.892, 283553.787), stdev = 2123.008
[info]   CI (99.9%): [273475.945, 289825.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1505.953 ±(99.9%) 42.952 MB/sec [Average]
[info]   (min, avg, max) = (1488.868, 1505.953, 1515.942), stdev = 11.155
[info]   CI (99.9%): [1463.001, 1548.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8416.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8416.001, 8416.001, 8416.002), stdev = 0.001
[info]   CI (99.9%): [8416.001, 8416.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.074 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.359), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.067 ±(99.9%) 725.924 MB/sec [Average]
[info]   (min, avg, max) = (1343.817, 1493.067, 1701.759), stdev = 188.520
[info]   CI (99.9%): [767.144, 2218.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8341.347 ±(99.9%) 3943.172 B/op [Average]
[info]   (min, avg, max) = (7557.438, 8341.347, 9474.267), stdev = 1024.029
[info]   CI (99.9%): [4398.175, 12284.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.959 ±(99.9%) 43.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.959, 26.028), stdev = 11.337
[info]   CI (99.9%): [≈ 0, 49.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 23.000), stdev = 8.414
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.44% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217569.580 ops/s
[info] # Warmup Iteration   2: 430639.616 ops/s
[info] # Warmup Iteration   3: 436025.129 ops/s
[info] Iteration   1: 438822.099 ops/s
[info]                  ·gc.alloc.rate:            1088.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3626.720 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 437489.050 ops/s
[info]                  ·gc.alloc.rate:            1085.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       3904.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3637.843 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 425548.712 ops/s
[info]                  ·gc.alloc.rate:                                  1055.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3904.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3752.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.318 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 431469.386 ops/s
[info]                  ·gc.alloc.rate:                                  1070.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3904.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3724.894 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 439994.822 ops/s
[info]                  ·gc.alloc.rate:                                  1091.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3904.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4870.404 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   434664.814 ±(99.9%) 23341.889 ops/s [Average]
[info]   (min, avg, max) = (425548.712, 434664.814, 439994.822), stdev = 6061.815
[info]   CI (99.9%): [411322.925, 458006.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1078.095 ±(99.9%) 57.493 MB/sec [Average]
[info]   (min, avg, max) = (1055.774, 1078.095, 1091.309), stdev = 14.931
[info]   CI (99.9%): [1020.601, 1135.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3904.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3904.001, 3904.001, 3904.001), stdev = 0.001
[info]   CI (99.9%): [3904.001, 3904.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.113), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.412), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.837 ±(99.9%) 597.790 MB/sec [Average]
[info]   (min, avg, max) = (1011.048, 1083.837, 1361.453), stdev = 155.244
[info]   CI (99.9%): [486.047, 1681.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3922.400 ±(99.9%) 2051.266 B/op [Average]
[info]   (min, avg, max) = (3626.720, 3922.400, 4870.404), stdev = 532.707
[info]   CI (99.9%): [1871.134, 5973.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.464 ±(99.9%) 21.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.464, 12.318), stdev = 5.509
[info]   CI (99.9%): [≈ 0, 23.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.71% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2150742.029 ops/s
[info] # Warmup Iteration   2: 2677331.404 ops/s
[info] # Warmup Iteration   3: 2675890.848 ops/s
[info] Iteration   1: 2687073.076 ops/s
[info]                  ·gc.alloc.rate:            546.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 394.060 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2682106.841 ops/s
[info]                  ·gc.alloc.rate:            545.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2670341.974 ops/s
[info]                  ·gc.alloc.rate:            542.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396.536 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2665585.352 ops/s
[info]                  ·gc.alloc.rate:            541.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 397.256 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2669812.679 ops/s
[info]                  ·gc.alloc.rate:            542.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 198.312 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2674983.984 ±(99.9%) 35160.522 ops/s [Average]
[info]   (min, avg, max) = (2665585.352, 2674983.984, 2687073.076), stdev = 9131.076
[info]   CI (99.9%): [2639823.463, 2710144.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   543.821 ±(99.9%) 6.968 MB/sec [Average]
[info]   (min, avg, max) = (541.965, 543.821, 546.192), stdev = 1.809
[info]   CI (99.9%): [536.853, 550.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.176 ±(99.9%) 709.359 MB/sec [Average]
[info]   (min, avg, max) = (336.363, 538.176, 672.808), stdev = 184.218
[info]   CI (99.9%): [≈ 0, 1247.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   316.713 ±(99.9%) 417.824 B/op [Average]
[info]   (min, avg, max) = (197.400, 316.713, 397.256), stdev = 108.508
[info]   CI (99.9%): [≈ 0, 734.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.98% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76888.872 ops/s
[info] # Warmup Iteration   2: 346653.815 ops/s
[info] # Warmup Iteration   3: 354398.532 ops/s
[info] Iteration   1: 348735.714 ops/s
[info]                  ·gc.alloc.rate:            1323.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6060.924 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 343631.492 ops/s
[info]                  ·gc.alloc.rate:                   1304.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6172.204 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.408 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 358994.355 ops/s
[info]                  ·gc.alloc.rate:                                  1362.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.209 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.918 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5969.317 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 357104.121 ops/s
[info]                  ·gc.alloc.rate:                                  1355.830 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5976.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6000.855 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 356303.001 ops/s
[info]                  ·gc.alloc.rate:            1352.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       5976.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6014.461 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   352953.737 ±(99.9%) 25075.668 ops/s [Average]
[info]   (min, avg, max) = (343631.492, 352953.737, 358994.355), stdev = 6512.071
[info]   CI (99.9%): [327878.068, 378029.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1340.070 ±(99.9%) 94.849 MB/sec [Average]
[info]   (min, avg, max) = (1304.944, 1340.070, 1362.945), stdev = 24.632
[info]   CI (99.9%): [1245.222, 1434.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5976.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5976.001, 5976.001, 5976.001), stdev = 0.001
[info]   CI (99.9%): [5976.001, 5976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.360 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.209), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.184 ±(99.9%) 1.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.184, 0.918), stdev = 0.410
[info]   CI (99.9%): [≈ 0, 1.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1354.966 ±(99.9%) 34.830 MB/sec [Average]
[info]   (min, avg, max) = (1342.720, 1354.966, 1361.469), stdev = 9.045
[info]   CI (99.9%): [1320.136, 1389.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   6043.552 ±(99.9%) 304.622 B/op [Average]
[info]   (min, avg, max) = (5969.317, 6043.552, 6172.204), stdev = 79.109
[info]   CI (99.9%): [5738.930, 6348.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.882 ±(99.9%) 42.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.882, 24.408), stdev = 10.916
[info]   CI (99.9%): [≈ 0, 46.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 7.155
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.25% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253640.858 ops/s
[info] # Warmup Iteration   2: 608398.017 ops/s
[info] # Warmup Iteration   3: 614523.799 ops/s
[info] Iteration   1: 605167.184 ops/s
[info]                  ·gc.alloc.rate:                                  1863.806 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.255 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5285.881 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.663 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 622979.946 ops/s
[info]                  ·gc.alloc.rate:                                  1918.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4299.891 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 609412.124 ops/s
[info]                  ·gc.alloc.rate:                                  1876.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5274.621 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 615346.522 ops/s
[info]                  ·gc.alloc.rate:                                  1895.265 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4353.073 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 602354.663 ops/s
[info]                  ·gc.alloc.rate:                                  1855.863 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4848.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5336.672 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   611052.088 ±(99.9%) 31851.292 ops/s [Average]
[info]   (min, avg, max) = (602354.663, 611052.088, 622979.946), stdev = 8271.680
[info]   CI (99.9%): [579200.795, 642903.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1882.032 ±(99.9%) 97.083 MB/sec [Average]
[info]   (min, avg, max) = (1855.863, 1882.032, 1918.409), stdev = 25.212
[info]   CI (99.9%): [1784.949, 1979.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4848.001, 4848.001, 4848.001), stdev = 0.001
[info]   CI (99.9%): [4848.001, 4848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.021, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.055, 0.255), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.070 ±(99.9%) 711.729 MB/sec [Average]
[info]   (min, avg, max) = (1701.516, 1904.070, 2042.931), stdev = 184.834
[info]   CI (99.9%): [1192.341, 2615.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4910.027 ±(99.9%) 2054.495 B/op [Average]
[info]   (min, avg, max) = (4299.891, 4910.027, 5336.672), stdev = 533.546
[info]   CI (99.9%): [2855.533, 6964.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.733 ±(99.9%) 14.917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.733, 8.663), stdev = 3.874
[info]   CI (99.9%): [≈ 0, 16.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.52% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312075.305 ops/s
[info] # Warmup Iteration   2: 1304973.751 ops/s
[info] # Warmup Iteration   3: 1325852.210 ops/s
[info] Iteration   1: 1324299.186 ops/s
[info]                  ·gc.alloc.rate:            1002.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1199.352 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1319197.214 ops/s
[info]                  ·gc.alloc.rate:            998.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1203.221 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 1294424.764 ops/s
[info]                  ·gc.alloc.rate:                   980.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1226.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1284222.610 ops/s
[info]                  ·gc.alloc.rate:                                  972.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1251.533 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1285081.015 ops/s
[info]                  ·gc.alloc.rate:            973.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1250.670 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1301444.958 ±(99.9%) 73342.621 ops/s [Average]
[info]   (min, avg, max) = (1284222.610, 1301444.958, 1324299.186), stdev = 19046.846
[info]   CI (99.9%): [1228102.337, 1374787.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   985.579 ±(99.9%) 55.064 MB/sec [Average]
[info]   (min, avg, max) = (972.534, 985.579, 1002.739), stdev = 14.300
[info]   CI (99.9%): [930.515, 1040.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.238), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.623 ±(99.9%) 26.861 MB/sec [Average]
[info]   (min, avg, max) = (1008.335, 1013.623, 1021.411), stdev = 6.976
[info]   CI (99.9%): [986.762, 1040.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1226.200 ±(99.9%) 96.062 B/op [Average]
[info]   (min, avg, max) = (1199.352, 1226.200, 1251.533), stdev = 24.947
[info]   CI (99.9%): [1130.138, 1322.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.134 ±(99.9%) 9.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.134, 5.669), stdev = 2.535
[info]   CI (99.9%): [≈ 0, 10.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 14.000), stdev = 5.675
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.78% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5615125.142 ops/s
[info] # Warmup Iteration   2: 5973105.761 ops/s
[info] # Warmup Iteration   3: 6165646.280 ops/s
[info] Iteration   1: 6025664.559 ops/s
[info]                  ·gc.alloc.rate:            183.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 88.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 6133577.903 ops/s
[info]                  ·gc.alloc.rate:      187.031 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6130667.844 ops/s
[info]                  ·gc.alloc.rate:            186.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86.531 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 6156329.132 ops/s
[info]                  ·gc.alloc.rate:      187.770 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6094007.118 ops/s
[info]                  ·gc.alloc.rate:            185.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6108049.311 ±(99.9%) 197086.386 ops/s [Average]
[info]   (min, avg, max) = (6025664.559, 6108049.311, 6156329.132), stdev = 51182.709
[info]   CI (99.9%): [5910962.925, 6305135.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   186.273 ±(99.9%) 5.949 MB/sec [Average]
[info]   (min, avg, max) = (183.806, 186.273, 187.770), stdev = 1.545
[info]   CI (99.9%): [180.324, 192.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.355 ±(99.9%) 711.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.355, 337.791), stdev = 184.724
[info]   CI (99.9%): [≈ 0, 913.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   52.359 ±(99.9%) 184.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.359, 88.212), stdev = 47.801
[info]   CI (99.9%): [≈ 0, 236.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.05% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17839.086 ops/s
[info] # Warmup Iteration   2: 198539.940 ops/s
[info] # Warmup Iteration   3: 204727.529 ops/s
[info] Iteration   1: 202974.992 ops/s
[info]                  ·gc.alloc.rate:                   1413.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13032.109 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 205287.003 ops/s
[info]                  ·gc.alloc.rate:                                  1429.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10367.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                35.750 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 205669.396 ops/s
[info]                  ·gc.alloc.rate:                                  1432.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10419.339 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 205633.045 ops/s
[info]                  ·gc.alloc.rate:                                  1432.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10421.214 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 206028.160 ops/s
[info]                  ·gc.alloc.rate:                                  1434.947 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10401.439 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   205118.519 ±(99.9%) 4723.418 ops/s [Average]
[info]   (min, avg, max) = (202974.992, 205118.519, 206028.160), stdev = 1226.657
[info]   CI (99.9%): [200395.102, 209841.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1428.536 ±(99.9%) 33.539 MB/sec [Average]
[info]   (min, avg, max) = (1413.302, 1428.536, 1434.947), stdev = 8.710
[info]   CI (99.9%): [1394.998, 1462.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.094), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.189 ±(99.9%) 1.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.718), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.677 ±(99.9%) 553.054 MB/sec [Average]
[info]   (min, avg, max) = (1352.485, 1423.677, 1680.502), stdev = 143.626
[info]   CI (99.9%): [870.623, 1976.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10928.316 ±(99.9%) 4529.335 B/op [Average]
[info]   (min, avg, max) = (10367.479, 10928.316, 13032.109), stdev = 1176.254
[info]   CI (99.9%): [6398.981, 15457.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.183 ±(99.9%) 59.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.183, 35.750), stdev = 15.572
[info]   CI (99.9%): [≈ 0, 68.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 23.000), stdev = 8.614
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.32% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351424.028 ops/s
[info] # Warmup Iteration   2: 828825.975 ops/s
[info] # Warmup Iteration   3: 827782.408 ops/s
[info] Iteration   1: 811670.708 ops/s
[info]                  ·gc.alloc.rate:            1266.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       2456.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2614.288 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 822349.608 ops/s
[info]                  ·gc.alloc.rate:                   1282.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1935.280 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 843494.501 ops/s
[info]                  ·gc.alloc.rate:                                  1315.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.202 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2540.532 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 835416.464 ops/s
[info]                  ·gc.alloc.rate:                                  1303.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2565.096 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 820412.482 ops/s
[info]                  ·gc.alloc.rate:                                  1280.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2456.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2612.047 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   826668.753 ±(99.9%) 48797.153 ops/s [Average]
[info]   (min, avg, max) = (811670.708, 826668.753, 843494.501), stdev = 12672.466
[info]   CI (99.9%): [777871.600, 875465.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1289.884 ±(99.9%) 75.933 MB/sec [Average]
[info]   (min, avg, max) = (1266.428, 1289.884, 1315.996), stdev = 19.720
[info]   CI (99.9%): [1213.951, 1365.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.001, 2456.001), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.378), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 0.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.717 ±(99.9%) 598.366 MB/sec [Average]
[info]   (min, avg, max) = (1010.937, 1288.717, 1361.846), stdev = 155.394
[info]   CI (99.9%): [690.352, 1887.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2453.449 ±(99.9%) 1121.937 B/op [Average]
[info]   (min, avg, max) = (1935.280, 2453.449, 2614.288), stdev = 291.363
[info]   CI (99.9%): [1331.512, 3575.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.275 ±(99.9%) 10.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.275, 6.374), stdev = 2.851
[info]   CI (99.9%): [≈ 0, 12.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 13.000), stdev = 4.550
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.59% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 560516.910 ops/s
[info] # Warmup Iteration   2: 2107442.981 ops/s
[info] # Warmup Iteration   3: 2123121.718 ops/s
[info] Iteration   1: 2101463.390 ops/s
[info]                  ·gc.alloc.rate:                   865.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        754.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 2110075.647 ops/s
[info]                  ·gc.alloc.rate:            868.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 751.270 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 2113955.288 ops/s
[info]                  ·gc.alloc.rate:            870.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 499.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2071791.064 ops/s
[info]                  ·gc.alloc.rate:                   852.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        768.175 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2125707.998 ops/s
[info]                  ·gc.alloc.rate:                                  875.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       504.054 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2104598.677 ±(99.9%) 78190.744 ops/s [Average]
[info]   (min, avg, max) = (2071791.064, 2104598.677, 2125707.998), stdev = 20305.888
[info]   CI (99.9%): [2026407.934, 2182789.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   866.407 ±(99.9%) 32.295 MB/sec [Average]
[info]   (min, avg, max) = (852.876, 866.407, 875.113), stdev = 8.387
[info]   CI (99.9%): [834.111, 898.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.596 ±(99.9%) 701.396 MB/sec [Average]
[info]   (min, avg, max) = (671.482, 875.596, 1011.045), stdev = 182.150
[info]   CI (99.9%): [174.200, 1576.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   655.654 ±(99.9%) 540.729 B/op [Average]
[info]   (min, avg, max) = (499.923, 655.654, 768.175), stdev = 140.426
[info]   CI (99.9%): [114.925, 1196.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.808 ±(99.9%) 5.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.542), stdev = 1.544
[info]   CI (99.9%): [≈ 0, 6.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 13.000), stdev = 4.506
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 90.86% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3691576.871 ops/s
[info] # Warmup Iteration   2: 5520007.007 ops/s
[info] # Warmup Iteration   3: 5682497.857 ops/s
[info] Iteration   1: 5643459.396 ops/s
[info]                  ·gc.alloc.rate:            630.952 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 93.813 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5593705.257 ops/s
[info]                  ·gc.alloc.rate:                   625.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        189.487 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5424121.008 ops/s
[info]                  ·gc.alloc.rate:                   606.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        195.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5664791.161 ops/s
[info]                  ·gc.alloc.rate:            633.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 187.300 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5636756.280 ops/s
[info]                  ·gc.alloc.rate:                   630.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        188.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5592566.620 ±(99.9%) 375977.502 ops/s [Average]
[info]   (min, avg, max) = (5424121.008, 5592566.620, 5664791.161), stdev = 97640.163
[info]   CI (99.9%): [5216589.119, 5968544.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   625.377 ±(99.9%) 41.870 MB/sec [Average]
[info]   (min, avg, max) = (606.577, 625.377, 633.388), stdev = 10.873
[info]   CI (99.9%): [583.507, 667.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.055 ±(99.9%) 580.637 MB/sec [Average]
[info]   (min, avg, max) = (336.315, 606.055, 674.055), stdev = 150.790
[info]   CI (99.9%): [25.417, 1186.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   170.775 ±(99.9%) 166.100 B/op [Average]
[info]   (min, avg, max) = (93.813, 170.775, 195.229), stdev = 43.136
[info]   CI (99.9%): [4.676, 336.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.113 ±(99.9%) 0.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.193), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.13% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3545500.715 ops/s
[info] # Warmup Iteration   2: 5329059.216 ops/s
[info] # Warmup Iteration   3: 5362253.002 ops/s
[info] Iteration   1: 5358918.739 ops/s
[info]                  ·gc.alloc.rate:            326.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5383460.584 ops/s
[info]                  ·gc.alloc.rate:            328.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.348 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5377405.757 ops/s
[info]                  ·gc.alloc.rate:            327.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.456 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 5385349.969 ops/s
[info]                  ·gc.alloc.rate:                   328.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5397413.133 ops/s
[info]                  ·gc.alloc.rate:            329.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5380509.636 ±(99.9%) 54240.323 ops/s [Average]
[info]   (min, avg, max) = (5358918.739, 5380509.636, 5397413.133), stdev = 14086.040
[info]   CI (99.9%): [5326269.313, 5434749.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   328.184 ±(99.9%) 3.482 MB/sec [Average]
[info]   (min, avg, max) = (326.810, 328.184, 329.285), stdev = 0.904
[info]   CI (99.9%): [324.702, 331.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.659 ±(99.9%) 1.449 MB/sec [Average]
[info]   (min, avg, max) = (336.352, 336.659, 337.137), stdev = 0.376
[info]   CI (99.9%): [335.210, 338.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   98.480 ±(99.9%) 1.129 B/op [Average]
[info]   (min, avg, max) = (98.289, 98.480, 98.992), stdev = 0.293
[info]   CI (99.9%): [97.351, 99.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.40% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32690.329 ops/s
[info] # Warmup Iteration   2: 286611.836 ops/s
[info] # Warmup Iteration   3: 287002.171 ops/s
[info] Iteration   1: 292002.760 ops/s
[info]                  ·gc.alloc.rate:                   1687.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              9096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9051.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.133 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 295419.229 ops/s
[info]                  ·gc.alloc.rate:                                  1707.327 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.132 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.704 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9067.196 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 285663.728 ops/s
[info]                  ·gc.alloc.rate:                                  1650.847 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9377.360 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 286672.871 ops/s
[info]                  ·gc.alloc.rate:                                  1656.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9344.456 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 292674.436 ops/s
[info]                  ·gc.alloc.rate:                                  1691.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9152.597 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   290486.605 ±(99.9%) 16018.496 ops/s [Average]
[info]   (min, avg, max) = (285663.728, 290486.605, 295419.229), stdev = 4159.952
[info]   CI (99.9%): [274468.109, 306505.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1678.807 ±(99.9%) 93.124 MB/sec [Average]
[info]   (min, avg, max) = (1650.847, 1678.807, 1707.327), stdev = 24.184
[info]   CI (99.9%): [1585.683, 1771.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9096.001, 9096.001, 9096.002), stdev = 0.001
[info]   CI (99.9%): [9096.001, 9096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.143 ±(99.9%) 1.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.704), stdev = 0.313
[info]   CI (99.9%): [≈ 0, 1.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.437 ±(99.9%) 38.444 MB/sec [Average]
[info]   (min, avg, max) = (1679.579, 1697.437, 1702.081), stdev = 9.984
[info]   CI (99.9%): [1658.993, 1735.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9198.601 ±(99.9%) 591.175 B/op [Average]
[info]   (min, avg, max) = (9051.396, 9198.601, 9377.360), stdev = 153.526
[info]   CI (99.9%): [8607.426, 9789.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.027 ±(99.9%) 43.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.027, 25.133), stdev = 11.240
[info]   CI (99.9%): [≈ 0, 48.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 22.000), stdev = 8.081
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 91.67% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3421105.636 ops/s
[info] # Warmup Iteration   2: 4963239.712 ops/s
[info] # Warmup Iteration   3: 5042716.663 ops/s
[info] Iteration   1: 5018134.517 ops/s
[info]                  ·gc.alloc.rate:                                  3623.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3745.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1174.345 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 4888485.315 ops/s
[info]                  ·gc.alloc.rate:                                  3527.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1095.948 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 4891791.992 ops/s
[info]                  ·gc.alloc.rate:                                  3530.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1204.695 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 4899666.763 ops/s
[info]                  ·gc.alloc.rate:                                  3537.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3405.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1093.436 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 4996093.991 ops/s
[info]                  ·gc.alloc.rate:                                  3605.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1136.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1179.514 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4938834.516 ±(99.9%) 242386.425 ops/s [Average]
[info]   (min, avg, max) = (4888485.315, 4938834.516, 5018134.517), stdev = 62946.985
[info]   CI (99.9%): [4696448.090, 5181220.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3564.811 ±(99.9%) 175.777 MB/sec [Average]
[info]   (min, avg, max) = (3527.690, 3564.811, 3623.019), stdev = 45.649
[info]   CI (99.9%): [3389.034, 3740.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1136.000, 1136.000, 1136.000), stdev = 0.001
[info]   CI (99.9%): [1136.000, 1136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.001 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3608.197 ±(99.9%) 716.719 MB/sec [Average]
[info]   (min, avg, max) = (3403.312, 3608.197, 3745.312), stdev = 186.130
[info]   CI (99.9%): [2891.478, 4324.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1149.587 ±(99.9%) 197.996 B/op [Average]
[info]   (min, avg, max) = (1093.436, 1149.587, 1204.695), stdev = 51.419
[info]   CI (99.9%): [951.592, 1347.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 91.94% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.870 ops/s
[info] # Warmup Iteration   2: 7458500.670 ops/s
[info] # Warmup Iteration   3: 7572307.595 ops/s
[info] Iteration   1: 7691424.623 ops/s
[info]                  ·gc.alloc.rate:            820.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204.878 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7496255.813 ops/s
[info]                  ·gc.alloc.rate:            800.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140.138 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 7454253.892 ops/s
[info]                  ·gc.alloc.rate:            795.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 211.390 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 7534875.860 ops/s
[info]                  ·gc.alloc.rate:            804.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 7389569.732 ops/s
[info]                  ·gc.alloc.rate:                   788.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        143.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7513275.984 ±(99.9%) 435990.945 ops/s [Average]
[info]   (min, avg, max) = (7389569.732, 7513275.984, 7691424.623), stdev = 113225.464
[info]   CI (99.9%): [7077285.040, 7949266.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   801.960 ±(99.9%) 46.239 MB/sec [Average]
[info]   (min, avg, max) = (788.960, 801.960, 820.886), stdev = 12.008
[info]   CI (99.9%): [755.721, 848.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.720 ±(99.9%) 700.833 MB/sec [Average]
[info]   (min, avg, max) = (667.350, 801.720, 1001.094), stdev = 182.004
[info]   CI (99.9%): [100.888, 1502.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   167.767 ±(99.9%) 142.268 B/op [Average]
[info]   (min, avg, max) = (139.419, 167.767, 211.390), stdev = 36.946
[info]   CI (99.9%): [25.499, 310.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.333 ±(99.9%) 11.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.333, 6.663), stdev = 2.980
[info]   CI (99.9%): [≈ 0, 12.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.284 ±(99.9%) 2.443 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.419), stdev = 0.634
[info]   CI (99.9%): [≈ 0, 2.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.000, 14.000), stdev = 2.828
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.20% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1518882.163 ops/s
[info] # Warmup Iteration   2: 4007979.344 ops/s
[info] # Warmup Iteration   3: 4029965.448 ops/s
[info] Iteration   1: 4106060.481 ops/s
[info]                  ·gc.alloc.rate:                                  2128.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2378.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       911.818 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.532 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 4103043.571 ops/s
[info]                  ·gc.alloc.rate:                                  2127.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       783.443 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 4116567.662 ops/s
[info]                  ·gc.alloc.rate:                                  2134.972 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       780.852 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 4129085.906 ops/s
[info]                  ·gc.alloc.rate:            2140.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.481 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4110725.108 ops/s
[info]                  ·gc.alloc.rate:            2131.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       816.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2383.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 912.232 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4113096.546 ±(99.9%) 39640.154 ops/s [Average]
[info]   (min, avg, max) = (4103043.571, 4113096.546, 4129085.906), stdev = 10294.422
[info]   CI (99.9%): [4073456.392, 4152736.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2132.515 ±(99.9%) 20.732 MB/sec [Average]
[info]   (min, avg, max) = (2127.025, 2132.515, 2140.443), stdev = 5.384
[info]   CI (99.9%): [2111.783, 2153.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2177.731 ±(99.9%) 713.595 MB/sec [Average]
[info]   (min, avg, max) = (2042.026, 2177.731, 2383.027), stdev = 185.318
[info]   CI (99.9%): [1464.136, 2891.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   833.365 ±(99.9%) 276.584 B/op [Average]
[info]   (min, avg, max) = (778.481, 833.365, 912.232), stdev = 71.828
[info]   CI (99.9%): [556.782, 1109.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 2.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.532), stdev = 0.685
[info]   CI (99.9%): [≈ 0, 2.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.47% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6932003.818 ops/s
[info] # Warmup Iteration   2: 7326721.655 ops/s
[info] # Warmup Iteration   3: 7677814.884 ops/s
[info] Iteration   1: 7755898.569 ops/s
[info]                  ·gc.alloc.rate:            827.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.191 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7763029.427 ops/s
[info]                  ·gc.alloc.rate:            828.599 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.671 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7687961.608 ops/s
[info]                  ·gc.alloc.rate:            820.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207.014 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 7578193.404 ops/s
[info]                  ·gc.alloc.rate:                   808.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.692 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7279028.938 ops/s
[info]                  ·gc.alloc.rate:                                  776.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       220.806 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7612822.389 ±(99.9%) 773241.720 ops/s [Average]
[info]   (min, avg, max) = (7279028.938, 7612822.389, 7763029.427), stdev = 200808.419
[info]   CI (99.9%): [6839580.670, 8386064.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   812.571 ±(99.9%) 82.539 MB/sec [Average]
[info]   (min, avg, max) = (776.958, 812.571, 828.599), stdev = 21.435
[info]   CI (99.9%): [730.032, 895.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.318 ±(99.9%) 718.110 MB/sec [Average]
[info]   (min, avg, max) = (674.074, 878.318, 1021.174), stdev = 186.491
[info]   CI (99.9%): [160.208, 1596.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   181.938 ±(99.9%) 155.078 B/op [Average]
[info]   (min, avg, max) = (136.671, 181.938, 220.806), stdev = 40.273
[info]   CI (99.9%): [26.860, 337.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.138 ±(99.9%) 1.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.138, 0.692), stdev = 0.309
[info]   CI (99.9%): [≈ 0, 1.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 92.74% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2438579.713 ops/s
[info] # Warmup Iteration   2: 4449194.533 ops/s
[info] # Warmup Iteration   3: 4501629.600 ops/s
[info] Iteration   1: 4590457.853 ops/s
[info]                  ·gc.alloc.rate:                                  2472.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       816.921 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4630176.803 ops/s
[info]                  ·gc.alloc.rate:                                  2495.405 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       809.947 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4519611.664 ops/s
[info]                  ·gc.alloc.rate:                                  2435.266 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       948.289 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4599015.334 ops/s
[info]                  ·gc.alloc.rate:                                  2477.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       815.421 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4580547.055 ops/s
[info]                  ·gc.alloc.rate:                                  2467.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       818.717 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4583961.742 ±(99.9%) 155906.321 ops/s [Average]
[info]   (min, avg, max) = (4519611.664, 4583961.742, 4630176.803), stdev = 40488.377
[info]   CI (99.9%): [4428055.420, 4739868.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2469.655 ±(99.9%) 84.303 MB/sec [Average]
[info]   (min, avg, max) = (2435.266, 2469.655, 2495.405), stdev = 21.893
[info]   CI (99.9%): [2385.352, 2553.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2450.660 ±(99.9%) 586.827 MB/sec [Average]
[info]   (min, avg, max) = (2382.076, 2450.660, 2723.274), stdev = 152.397
[info]   CI (99.9%): [1863.832, 3037.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   841.859 ±(99.9%) 229.446 B/op [Average]
[info]   (min, avg, max) = (809.947, 841.859, 948.289), stdev = 59.586
[info]   CI (99.9%): [612.413, 1071.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.01% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2001955.546 ops/s
[info] # Warmup Iteration   2: 3149086.126 ops/s
[info] # Warmup Iteration   3: 3164363.899 ops/s
[info] Iteration   1: 3237312.207 ops/s
[info]                  ·gc.alloc.rate:            773.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 491.630 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 3228655.281 ops/s
[info]                  ·gc.alloc.rate:            771.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 328.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 3205161.918 ops/s
[info]                  ·gc.alloc.rate:            765.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 331.024 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 3213528.228 ops/s
[info]                  ·gc.alloc.rate:            767.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 495.255 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 3223221.521 ops/s
[info]                  ·gc.alloc.rate:                                  769.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       330.812 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.626 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3221575.831 ±(99.9%) 48502.866 ops/s [Average]
[info]   (min, avg, max) = (3205161.918, 3221575.831, 3237312.207), stdev = 12596.040
[info]   CI (99.9%): [3173072.965, 3270078.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   769.644 ±(99.9%) 11.397 MB/sec [Average]
[info]   (min, avg, max) = (765.797, 769.644, 773.452), stdev = 2.960
[info]   CI (99.9%): [758.247, 781.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   809.665 ±(99.9%) 708.954 MB/sec [Average]
[info]   (min, avg, max) = (674.048, 809.665, 1011.383), stdev = 184.113
[info]   CI (99.9%): [100.711, 1518.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   395.471 ±(99.9%) 344.439 B/op [Average]
[info]   (min, avg, max) = (328.632, 395.471, 495.255), stdev = 89.450
[info]   CI (99.9%): [51.032, 739.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.325 ±(99.9%) 2.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.626), stdev = 0.727
[info]   CI (99.9%): [≈ 0, 3.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 93.28% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.900 ops/s
[info] # Warmup Iteration   2: 7633724.301 ops/s
[info] # Warmup Iteration   3: 7767615.354 ops/s
[info] Iteration   1: 8082243.703 ops/s
[info]                  ·gc.alloc.rate:            780.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.977 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 7960190.795 ops/s
[info]                  ·gc.alloc.rate:            768.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.949 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 8033623.465 ops/s
[info]                  ·gc.alloc.rate:            775.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 7994202.792 ops/s
[info]                  ·gc.alloc.rate:            771.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131.412 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 7783730.722 ops/s
[info]                  ·gc.alloc.rate:                   752.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        203.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.347 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7970798.295 ±(99.9%) 439132.333 ops/s [Average]
[info]   (min, avg, max) = (7783730.722, 7970798.295, 8082243.703), stdev = 114041.272
[info]   CI (99.9%): [7531665.963, 8409930.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   769.772 ±(99.9%) 41.805 MB/sec [Average]
[info]   (min, avg, max) = (752.010, 769.772, 780.429), stdev = 10.857
[info]   CI (99.9%): [727.967, 811.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.759 ±(99.9%) 708.458 MB/sec [Average]
[info]   (min, avg, max) = (667.355, 801.759, 1005.597), stdev = 183.984
[info]   CI (99.9%): [93.301, 1510.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   158.672 ±(99.9%) 147.580 B/op [Average]
[info]   (min, avg, max) = (129.977, 158.672, 203.256), stdev = 38.326
[info]   CI (99.9%): [11.092, 306.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.333 ±(99.9%) 11.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.333, 6.664), stdev = 2.980
[info]   CI (99.9%): [≈ 0, 12.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 2.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.347), stdev = 0.602
[info]   CI (99.9%): [≈ 0, 2.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.800, 17.000), stdev = 3.271
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 93.55% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.864 ops/s
[info] # Warmup Iteration   2: 8277530.853 ops/s
[info] # Warmup Iteration   3: 8450136.564 ops/s
[info] Iteration   1: 8632797.412 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8611023.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8611870.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8606969.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8610917.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc":
[info]   8614715.564 ±(99.9%) 39603.221 ops/s [Average]
[info]   (min, avg, max) = (8606969.392, 8614715.564, 8632797.412), stdev = 10284.831
[info]   CI (99.9%): [8575112.343, 8654318.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.82% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894797.141 ops/s
[info] # Warmup Iteration   2: 1736773.634 ops/s
[info] # Warmup Iteration   3: 1799358.141 ops/s
[info] Iteration   1: 1896166.416 ops/s
[info]                  ·gc.alloc.rate:            587.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 279.224 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1892347.071 ops/s
[info]                  ·gc.alloc.rate:            586.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 559.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1903022.860 ops/s
[info]                  ·gc.alloc.rate:            590.190 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1849345.344 ops/s
[info]                  ·gc.alloc.rate:            573.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 572.565 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1883058.980 ops/s
[info]                  ·gc.alloc.rate:            583.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 281.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1884788.135 ±(99.9%) 81190.382 ops/s [Average]
[info]   (min, avg, max) = (1849345.344, 1884788.135, 1903022.860), stdev = 21084.884
[info]   CI (99.9%): [1803597.752, 1965978.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   584.376 ±(99.9%) 25.307 MB/sec [Average]
[info]   (min, avg, max) = (573.364, 584.376, 590.190), stdev = 6.572
[info]   CI (99.9%): [559.070, 609.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.224 ±(99.9%) 709.676 MB/sec [Average]
[info]   (min, avg, max) = (336.329, 538.224, 672.942), stdev = 184.301
[info]   CI (99.9%): [≈ 0, 1247.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   449.787 ±(99.9%) 596.621 B/op [Average]
[info]   (min, avg, max) = (279.224, 449.787, 572.565), stdev = 154.941
[info]   CI (99.9%): [≈ 0, 1046.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.09% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6632791.180 ops/s
[info] # Warmup Iteration   2: 9719533.466 ops/s
[info] # Warmup Iteration   3: 9757323.915 ops/s
[info] Iteration   1: 9729720.744 ops/s
[info]                  ·gc.alloc.rate:                   939.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163.459 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 9725210.157 ops/s
[info]                  ·gc.alloc.rate:                   939.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163.546 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9613298.407 ops/s
[info]                  ·gc.alloc.rate:                   928.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        110.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9214143.091 ops/s
[info]                  ·gc.alloc.rate:                                  890.081 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173.742 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.683 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9048881.089 ops/s
[info]                  ·gc.alloc.rate:                                  874.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       177.615 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9466250.697 ±(99.9%) 1211355.192 ops/s [Average]
[info]   (min, avg, max) = (9048881.089, 9466250.697, 9729720.744), stdev = 314585.096
[info]   CI (99.9%): [8254895.506, 10677605.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   914.288 ±(99.9%) 116.396 MB/sec [Average]
[info]   (min, avg, max) = (874.192, 914.288, 939.494), stdev = 30.228
[info]   CI (99.9%): [797.891, 1030.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.667 ±(99.9%) 588.603 MB/sec [Average]
[info]   (min, avg, max) = (673.354, 946.667, 1021.511), stdev = 152.858
[info]   CI (99.9%): [358.064, 1535.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   157.724 ±(99.9%) 104.963 B/op [Average]
[info]   (min, avg, max) = (110.257, 157.724, 177.615), stdev = 27.259
[info]   CI (99.9%): [52.761, 262.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.998), stdev = 1.591
[info]   CI (99.9%): [≈ 0, 7.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 0.683), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.775
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.35% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5627951.870 ops/s
[info] # Warmup Iteration   2: 8039003.410 ops/s
[info] # Warmup Iteration   3: 8071136.541 ops/s
[info] Iteration   1: 8066229.958 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8072553.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8070316.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8068509.457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8070481.609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8069618.092 ±(99.9%) 9144.098 ops/s [Average]
[info]   (min, avg, max) = (8066229.958, 8069618.092, 8072553.250), stdev = 2374.693
[info]   CI (99.9%): [8060473.994, 8078762.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.62% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2131914.041 ops/s
[info] # Warmup Iteration   2: 3058300.265 ops/s
[info] # Warmup Iteration   3: 3074363.522 ops/s
[info] Iteration   1: 3072421.682 ops/s
[info]                  ·gc.alloc.rate:            983.550 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.641 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 3072532.671 ops/s
[info]                  ·gc.alloc.rate:            983.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 516.944 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3076901.154 ops/s
[info]                  ·gc.alloc.rate:                   985.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        516.219 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 3111882.368 ops/s
[info]                  ·gc.alloc.rate:                                  996.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       516.489 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3151741.802 ops/s
[info]                  ·gc.alloc.rate:            1009.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 509.936 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3097095.935 ±(99.9%) 133734.522 ops/s [Average]
[info]   (min, avg, max) = (3072421.682, 3097095.935, 3151741.802), stdev = 34730.431
[info]   CI (99.9%): [2963361.413, 3230830.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   991.582 ±(99.9%) 43.055 MB/sec [Average]
[info]   (min, avg, max) = (983.550, 991.582, 1009.168), stdev = 11.181
[info]   CI (99.9%): [948.527, 1034.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   946.529 ±(99.9%) 590.191 MB/sec [Average]
[info]   (min, avg, max) = (672.562, 946.529, 1021.053), stdev = 153.271
[info]   CI (99.9%): [356.338, 1536.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   480.846 ±(99.9%) 293.401 B/op [Average]
[info]   (min, avg, max) = (344.641, 480.846, 516.944), stdev = 76.195
[info]   CI (99.9%): [187.445, 774.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.409 ±(99.9%) 3.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.409, 2.044), stdev = 0.914
[info]   CI (99.9%): [≈ 0, 3.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.89% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1012280.455 ops/s
[info] # Warmup Iteration   2: 1426510.262 ops/s
[info] # Warmup Iteration   3: 1466081.376 ops/s
[info] Iteration   1: 1457121.387 ops/s
[info]                  ·gc.alloc.rate:                                  2414.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2573.561 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 1475691.414 ops/s
[info]                  ·gc.alloc.rate:                                  2444.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2541.237 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1441569.992 ops/s
[info]                  ·gc.alloc.rate:                                  2388.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2601.498 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1459828.552 ops/s
[info]                  ·gc.alloc.rate:                                  2418.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2568.883 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1472822.961 ops/s
[info]                  ·gc.alloc.rate:                                  2441.068 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2608.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2546.198 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1461406.861 ±(99.9%) 52682.576 ops/s [Average]
[info]   (min, avg, max) = (1441569.992, 1461406.861, 1475691.414), stdev = 13681.498
[info]   CI (99.9%): [1408724.285, 1514089.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2421.409 ±(99.9%) 87.833 MB/sec [Average]
[info]   (min, avg, max) = (2388.479, 2421.409, 2444.828), stdev = 22.810
[info]   CI (99.9%): [2333.576, 2509.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2608.000, 2608.000, 2608.000), stdev = 0.001
[info]   CI (99.9%): [2608.000, 2608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2382.501 ±(99.9%) 1.633 MB/sec [Average]
[info]   (min, avg, max) = (2382.177, 2382.501, 2383.222), stdev = 0.424
[info]   CI (99.9%): [2380.868, 2384.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2566.275 ±(99.9%) 92.946 B/op [Average]
[info]   (min, avg, max) = (2541.237, 2566.275, 2601.498), stdev = 24.138
[info]   CI (99.9%): [2473.330, 2659.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 95.16% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.898 ops/s
[info] # Warmup Iteration   2: 2562336.340 ops/s
[info] # Warmup Iteration   3: 2693699.307 ops/s
[info] Iteration   1: 2708859.339 ops/s
[info]                  ·gc.alloc.rate:            757.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.815 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2693824.839 ops/s
[info]                  ·gc.alloc.rate:            753.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 584.974 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2719407.753 ops/s
[info]                  ·gc.alloc.rate:            760.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.312 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2708069.791 ops/s
[info]                  ·gc.alloc.rate:            757.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.928 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2704121.555 ops/s
[info]                  ·gc.alloc.rate:                   755.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        388.493 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2706856.655 ±(99.9%) 35517.964 ops/s [Average]
[info]   (min, avg, max) = (2693824.839, 2706856.655, 2719407.753), stdev = 9223.902
[info]   CI (99.9%): [2671338.692, 2742374.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   756.756 ±(99.9%) 10.034 MB/sec [Average]
[info]   (min, avg, max) = (753.087, 756.756, 760.286), stdev = 2.606
[info]   CI (99.9%): [746.722, 766.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   734.245 ±(99.9%) 574.681 MB/sec [Average]
[info]   (min, avg, max) = (667.435, 734.245, 1001.219), stdev = 149.243
[info]   CI (99.9%): [159.565, 1308.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   427.104 ±(99.9%) 339.840 B/op [Average]
[info]   (min, avg, max) = (386.312, 427.104, 584.974), stdev = 88.255
[info]   CI (99.9%): [87.264, 766.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.465 ±(99.9%) 4.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.465, 2.326), stdev = 1.040
[info]   CI (99.9%): [≈ 0, 4.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.400, 14.000), stdev = 2.074
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.43% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431642.891 ops/s
[info] # Warmup Iteration   2: 1048425.158 ops/s
[info] # Warmup Iteration   3: 1093411.796 ops/s
[info] Iteration   1: 1089345.386 ops/s
[info]                  ·gc.alloc.rate:            752.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 972.020 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1092888.059 ops/s
[info]                  ·gc.alloc.rate:            755.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 968.890 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1094878.195 ops/s
[info]                  ·gc.alloc.rate:            756.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1450.702 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1099955.252 ops/s
[info]                  ·gc.alloc.rate:            760.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 962.663 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1057016.768 ops/s
[info]                  ·gc.alloc.rate:                                  730.595 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1088.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1007.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.951 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1086816.732 ±(99.9%) 65825.203 ops/s [Average]
[info]   (min, avg, max) = (1057016.768, 1086816.732, 1099955.252), stdev = 17094.596
[info]   CI (99.9%): [1020991.529, 1152641.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   751.212 ±(99.9%) 45.590 MB/sec [Average]
[info]   (min, avg, max) = (730.595, 751.212, 760.419), stdev = 11.839
[info]   CI (99.9%): [705.622, 796.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.082), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.772 ±(99.9%) 577.489 MB/sec [Average]
[info]   (min, avg, max) = (672.663, 740.772, 1009.033), stdev = 149.972
[info]   CI (99.9%): [163.283, 1318.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1072.396 ±(99.9%) 817.141 B/op [Average]
[info]   (min, avg, max) = (962.663, 1072.396, 1450.702), stdev = 212.209
[info]   CI (99.9%): [255.255, 1889.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.190 ±(99.9%) 10.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.190, 5.951), stdev = 2.661
[info]   CI (99.9%): [≈ 0, 11.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.510
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.70% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1552663.293 ops/s
[info] # Warmup Iteration   2: 1698088.697 ops/s
[info] # Warmup Iteration   3: 1702154.645 ops/s
[info] Iteration   1: 1709652.784 ops/s
[info]                  ·gc.alloc.rate:            477.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 310.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1660961.707 ops/s
[info]                  ·gc.alloc.rate:                   464.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        319.396 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1631758.580 ops/s
[info]                  ·gc.alloc.rate:            456.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 650.888 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1647686.766 ops/s
[info]                  ·gc.alloc.rate:            460.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 321.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1684921.078 ops/s
[info]                  ·gc.alloc.rate:            471.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 629.713 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1666996.183 ±(99.9%) 118557.391 ops/s [Average]
[info]   (min, avg, max) = (1631758.580, 1666996.183, 1709652.784), stdev = 30788.978
[info]   CI (99.9%): [1548438.792, 1785553.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.016 ±(99.9%) 33.146 MB/sec [Average]
[info]   (min, avg, max) = (456.102, 466.016, 477.885), stdev = 8.608
[info]   CI (99.9%): [432.871, 499.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   472.020 ±(99.9%) 711.668 MB/sec [Average]
[info]   (min, avg, max) = (337.000, 472.020, 674.706), stdev = 184.818
[info]   CI (99.9%): [≈ 0, 1183.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   446.452 ±(99.9%) 682.220 B/op [Average]
[info]   (min, avg, max) = (310.284, 446.452, 650.888), stdev = 177.170
[info]   CI (99.9%): [≈ 0, 1128.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 1.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.631), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 95.97% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 675471.008 ops/s
[info] # Warmup Iteration   2: 1206644.892 ops/s
[info] # Warmup Iteration   3: 1240090.041 ops/s
[info] Iteration   1: 1242371.355 ops/s
[info]                  ·gc.alloc.rate:            883.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1278.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1244652.539 ops/s
[info]                  ·gc.alloc.rate:            885.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 850.749 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1226033.233 ops/s
[info]                  ·gc.alloc.rate:            872.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1295.506 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1229086.255 ops/s
[info]                  ·gc.alloc.rate:                                  874.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1297.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.118 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 1245758.789 ops/s
[info]                  ·gc.alloc.rate:                                  886.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       860.074 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1237580.434 ±(99.9%) 35778.990 ops/s [Average]
[info]   (min, avg, max) = (1226033.233, 1237580.434, 1245758.789), stdev = 9291.690
[info]   CI (99.9%): [1201801.444, 1273359.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   880.599 ±(99.9%) 25.554 MB/sec [Average]
[info]   (min, avg, max) = (872.385, 880.599, 886.410), stdev = 6.636
[info]   CI (99.9%): [855.045, 906.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.150), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.189), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.933 ±(99.9%) 703.743 MB/sec [Average]
[info]   (min, avg, max) = (672.826, 876.933, 1013.030), stdev = 182.760
[info]   CI (99.9%): [173.190, 1580.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1116.450 ±(99.9%) 918.112 B/op [Average]
[info]   (min, avg, max) = (850.749, 1116.450, 1297.412), stdev = 238.431
[info]   CI (99.9%): [198.338, 2034.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.024 ±(99.9%) 8.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.024, 5.118), stdev = 2.289
[info]   CI (99.9%): [≈ 0, 9.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 12.000), stdev = 4.099
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.24% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1042327.608 ops/s
[info] # Warmup Iteration   2: 1739018.599 ops/s
[info] # Warmup Iteration   3: 1728532.023 ops/s
[info] Iteration   1: 1746675.970 ops/s
[info]                  ·gc.alloc.rate:            1420.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1518.584 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 1757624.633 ops/s
[info]                  ·gc.alloc.rate:                                  1429.144 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.248 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.982 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1756739.284 ops/s
[info]                  ·gc.alloc.rate:            1428.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219.841 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1745816.930 ops/s
[info]                  ·gc.alloc.rate:                                  1419.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1227.501 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1768306.003 ops/s
[info]                  ·gc.alloc.rate:            1437.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1514.868 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1755032.564 ±(99.9%) 35531.265 ops/s [Average]
[info]   (min, avg, max) = (1745816.930, 1755032.564, 1768306.003), stdev = 9227.357
[info]   CI (99.9%): [1719501.298, 1790563.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1427.118 ±(99.9%) 28.721 MB/sec [Average]
[info]   (min, avg, max) = (1419.638, 1427.118, 1437.865), stdev = 7.459
[info]   CI (99.9%): [1398.397, 1455.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1493.526 ±(99.9%) 703.081 MB/sec [Average]
[info]   (min, avg, max) = (1357.964, 1493.526, 1701.699), stdev = 182.588
[info]   CI (99.9%): [790.445, 2196.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1339.408 ±(99.9%) 623.513 B/op [Average]
[info]   (min, avg, max) = (1216.248, 1339.408, 1518.584), stdev = 161.924
[info]   CI (99.9%): [715.896, 1962.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.596 ±(99.9%) 5.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.982), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 5.079
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 96.51% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.882 ops/s
[info] # Warmup Iteration   2: 2752304.511 ops/s
[info] # Warmup Iteration   3: 2843364.950 ops/s
[info] Iteration   1: 2892089.984 ops/s
[info]                  ·gc.alloc.rate:            676.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 363.246 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2874263.508 ops/s
[info]                  ·gc.alloc.rate:            671.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2887754.741 ops/s
[info]                  ·gc.alloc.rate:                   675.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        363.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2897422.524 ops/s
[info]                  ·gc.alloc.rate:            677.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.577 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2984345.941 ops/s
[info]                  ·gc.alloc.rate:            697.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 352.016 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2907175.339 ±(99.9%) 169366.355 ops/s [Average]
[info]   (min, avg, max) = (2874263.508, 2907175.339, 2984345.941), stdev = 43983.905
[info]   CI (99.9%): [2737808.984, 3076541.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   679.728 ±(99.9%) 39.668 MB/sec [Average]
[info]   (min, avg, max) = (671.922, 679.728, 697.793), stdev = 10.302
[info]   CI (99.9%): [640.060, 719.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.332 ±(99.9%) 0.777 MB/sec [Average]
[info]   (min, avg, max) = (666.981, 667.332, 667.485), stdev = 0.202
[info]   CI (99.9%): [666.555, 668.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   361.354 ±(99.9%) 20.535 B/op [Average]
[info]   (min, avg, max) = (352.016, 361.354, 365.500), stdev = 5.333
[info]   CI (99.9%): [340.818, 381.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.363), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc
[info] # Run progress: 96.77% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.882 ops/s
[info] # Warmup Iteration   2: 3017975.802 ops/s
[info] # Warmup Iteration   3: 3123254.815 ops/s
[info] Iteration   1: 3137884.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3138858.513 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3139238.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3101876.208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3125532.839 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc":
[info]   3128678.114 ±(99.9%) 61735.181 ops/s [Average]
[info]   (min, avg, max) = (3101876.208, 3128678.114, 3139238.652), stdev = 16032.431
[info]   CI (99.9%): [3066942.932, 3190413.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 97.04% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830112.994 ops/s
[info] # Warmup Iteration   2: 1899618.541 ops/s
[info] # Warmup Iteration   3: 1913996.173 ops/s
[info] Iteration   1: 1916332.488 ops/s
[info]                  ·gc.alloc.rate:                   856.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        552.009 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1923616.012 ops/s
[info]                  ·gc.alloc.rate:            860.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 825.722 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1981945.323 ops/s
[info]                  ·gc.alloc.rate:            886.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       704.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 534.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1979151.335 ops/s
[info]                  ·gc.alloc.rate:                                  885.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       805.751 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.179 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 1993769.609 ops/s
[info]                  ·gc.alloc.rate:                                  891.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             704.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       806.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   1958962.953 ±(99.9%) 139024.061 ops/s [Average]
[info]   (min, avg, max) = (1916332.488, 1958962.953, 1993769.609), stdev = 36104.107
[info]   CI (99.9%): [1819938.892, 2097987.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   876.124 ±(99.9%) 62.235 MB/sec [Average]
[info]   (min, avg, max) = (856.990, 876.124, 891.713), stdev = 16.162
[info]   CI (99.9%): [813.890, 938.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.108), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.596 ±(99.9%) 721.714 MB/sec [Average]
[info]   (min, avg, max) = (671.969, 877.596, 1021.090), stdev = 187.427
[info]   CI (99.9%): [155.882, 1599.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   704.781 ±(99.9%) 569.534 B/op [Average]
[info]   (min, avg, max) = (534.282, 704.781, 825.722), stdev = 147.906
[info]   CI (99.9%): [135.247, 1274.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.745 ±(99.9%) 5.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.179), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 97.31% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1613406.017 ops/s
[info] # Warmup Iteration   2: 2534659.139 ops/s
[info] # Warmup Iteration   3: 2514433.275 ops/s
[info] Iteration   1: 2456849.679 ops/s
[info]                  ·gc.alloc.rate:            574.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 431.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 2509806.546 ops/s
[info]                  ·gc.alloc.rate:                   586.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        422.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2547378.488 ops/s
[info]                  ·gc.alloc.rate:            595.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 207.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2533981.403 ops/s
[info]                  ·gc.alloc.rate:            592.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.876 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2497292.832 ops/s
[info]                  ·gc.alloc.rate:            583.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2509061.789 ±(99.9%) 135517.559 ops/s [Average]
[info]   (min, avg, max) = (2456849.679, 2509061.789, 2547378.488), stdev = 35193.480
[info]   CI (99.9%): [2373544.230, 2644579.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   586.663 ±(99.9%) 31.819 MB/sec [Average]
[info]   (min, avg, max) = (574.393, 586.663, 595.629), stdev = 8.263
[info]   CI (99.9%): [554.844, 618.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.909 ±(99.9%) 580.147 MB/sec [Average]
[info]   (min, avg, max) = (336.397, 605.909, 674.050), stdev = 150.662
[info]   CI (99.9%): [25.762, 1186.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   380.778 ±(99.9%) 372.775 B/op [Average]
[info]   (min, avg, max) = (207.838, 380.778, 431.848), stdev = 96.809
[info]   CI (99.9%): [8.003, 753.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.418), stdev = 0.187
[info]   CI (99.9%): [≈ 0, 0.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.58% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1735204.819 ops/s
[info] # Warmup Iteration   2: 2460714.875 ops/s
[info] # Warmup Iteration   3: 2482193.156 ops/s
[info] Iteration   1: 2488998.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2387890.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2489228.677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2487008.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2527290.382 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2476083.403 ±(99.9%) 200631.610 ops/s [Average]
[info]   (min, avg, max) = (2387890.782, 2476083.403, 2527290.382), stdev = 52103.392
[info]   CI (99.9%): [2275451.794, 2676715.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.85% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1459898.086 ops/s
[info] # Warmup Iteration   2: 2157788.897 ops/s
[info] # Warmup Iteration   3: 2187693.336 ops/s
[info] Iteration   1: 2175351.648 ops/s
[info]                  ·gc.alloc.rate:            994.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730.152 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2184072.717 ops/s
[info]                  ·gc.alloc.rate:            1000.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 724.897 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2172506.961 ops/s
[info]                  ·gc.alloc.rate:                   993.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        487.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2138607.175 ops/s
[info]                  ·gc.alloc.rate:                                  978.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       751.509 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2152653.578 ops/s
[info]                  ·gc.alloc.rate:            984.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 746.615 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2164638.416 ±(99.9%) 71409.495 ops/s [Average]
[info]   (min, avg, max) = (2138607.175, 2164638.416, 2184072.717), stdev = 18544.819
[info]   CI (99.9%): [2093228.921, 2236047.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   990.405 ±(99.9%) 33.375 MB/sec [Average]
[info]   (min, avg, max) = (978.506, 990.405, 1000.201), stdev = 8.667
[info]   CI (99.9%): [957.030, 1023.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   946.214 ±(99.9%) 589.374 MB/sec [Average]
[info]   (min, avg, max) = (672.675, 946.214, 1021.327), stdev = 153.058
[info]   CI (99.9%): [356.840, 1535.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   688.115 ±(99.9%) 434.142 B/op [Average]
[info]   (min, avg, max) = (487.404, 688.115, 751.509), stdev = 112.745
[info]   CI (99.9%): [253.973, 1122.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.579 ±(99.9%) 4.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.579, 2.895), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 98.12% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4938.221 ops/s
[info] # Warmup Iteration   2: 8576.177 ops/s
[info] # Warmup Iteration   3: 10027.842 ops/s
[info] Iteration   1: 10096.240 ops/s
[info]                  ·gc.alloc.rate:            1482.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       230992.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210151.285 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 11080.432 ops/s
[info]                  ·gc.alloc.rate:                                  1622.715 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230541.195 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.448 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240807.248 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                473.099 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 11107.457 ops/s
[info]                  ·gc.alloc.rate:                                  1625.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230416.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       241144.166 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 11196.462 ops/s
[info]                  ·gc.alloc.rate:                                  1639.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230428.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.647 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       239227.760 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 11376.341 ops/s
[info]                  ·gc.alloc.rate:                                  1665.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230440.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       235443.508 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10971.387 ±(99.9%) 1935.820 ops/s [Average]
[info]   (min, avg, max) = (10096.240, 10971.387, 11376.341), stdev = 502.726
[info]   CI (99.9%): [9035.566, 12907.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1607.172 ±(99.9%) 276.611 MB/sec [Average]
[info]   (min, avg, max) = (1482.269, 1607.172, 1665.546), stdev = 71.835
[info]   CI (99.9%): [1330.561, 1883.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230563.473 ±(99.9%) 942.193 B/op [Average]
[info]   (min, avg, max) = (230416.037, 230563.473, 230992.044), stdev = 244.685
[info]   CI (99.9%): [229621.280, 231505.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.900 ±(99.9%) 12.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.900, 7.448), stdev = 3.338
[info]   CI (99.9%): [≈ 0, 16.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1629.772 ±(99.9%) 605.491 MB/sec [Average]
[info]   (min, avg, max) = (1348.535, 1629.772, 1702.031), stdev = 157.244
[info]   CI (99.9%): [1024.281, 2235.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   233354.793 ±(99.9%) 50701.104 B/op [Average]
[info]   (min, avg, max) = (210151.285, 233354.793, 241144.166), stdev = 13166.916
[info]   CI (99.9%): [182653.689, 284055.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   94.620 ±(99.9%) 814.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.620, 473.099), stdev = 211.576
[info]   CI (99.9%): [≈ 0, 909.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 16.000), stdev = 5.339
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.39% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4207.071 ops/s
[info] # Warmup Iteration   2: 13652.731 ops/s
[info] # Warmup Iteration   3: 14324.345 ops/s
[info] Iteration   1: 14445.994 ops/s
[info]                  ·gc.alloc.rate:            204.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36573.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 14360.715 ops/s
[info]                  ·gc.alloc.rate:      202.982 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14305.658 ops/s
[info]                  ·gc.alloc.rate:            202.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       22255.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36933.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14368.118 ops/s
[info]                  ·gc.alloc.rate:      203.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14303.519 ops/s
[info]                  ·gc.alloc.rate:            202.243 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36938.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14356.801 ±(99.9%) 224.144 ops/s [Average]
[info]   (min, avg, max) = (14303.519, 14356.801, 14445.994), stdev = 58.209
[info]   CI (99.9%): [14132.657, 14580.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   202.952 ±(99.9%) 2.966 MB/sec [Average]
[info]   (min, avg, max) = (202.243, 202.952, 204.111), stdev = 0.770
[info]   CI (99.9%): [199.986, 205.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.533 ±(99.9%) 33.416 B/op [Average]
[info]   (min, avg, max) = (22240.028, 22249.533, 22256.036), stdev = 8.678
[info]   CI (99.9%): [22216.117, 22282.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.394 ±(99.9%) 707.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.394, 335.667), stdev = 183.847
[info]   CI (99.9%): [≈ 0, 909.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22089.090 ±(99.9%) 77648.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22089.090, 36938.723), stdev = 20165.033
[info]   CI (99.9%): [≈ 0, 99737.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.66% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19230.491 ops/s
[info] # Warmup Iteration   2: 22954.906 ops/s
[info] # Warmup Iteration   3: 36568.392 ops/s
[info] Iteration   1: 37343.523 ops/s
[info]                  ·gc.alloc.rate:            345.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14204.847 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37478.390 ops/s
[info]                  ·gc.alloc.rate:            347.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14154.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37115.173 ops/s
[info]                  ·gc.alloc.rate:            343.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14292.857 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37023.110 ops/s
[info]                  ·gc.alloc.rate:            342.849 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14328.368 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37332.895 ops/s
[info]                  ·gc.alloc.rate:            345.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14209.793 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37258.618 ±(99.9%) 712.802 ops/s [Average]
[info]   (min, avg, max) = (37023.110, 37258.618, 37478.390), stdev = 185.112
[info]   CI (99.9%): [36545.816, 37971.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   345.057 ±(99.9%) 6.680 MB/sec [Average]
[info]   (min, avg, max) = (342.849, 345.057, 347.072), stdev = 1.735
[info]   CI (99.9%): [338.377, 351.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.015), stdev = 0.002
[info]   CI (99.9%): [14576.006, 14576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.050 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (337.011, 337.050, 337.136), stdev = 0.050
[info]   CI (99.9%): [336.859, 337.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14238.063 ±(99.9%) 272.632 B/op [Average]
[info]   (min, avg, max) = (14154.447, 14238.063, 14328.368), stdev = 70.802
[info]   CI (99.9%): [13965.431, 14510.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.92% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605.550 ops/s
[info] # Warmup Iteration   2: 2588.328 ops/s
[info] # Warmup Iteration   3: 2527.746 ops/s
[info] Iteration   1: 2380.902 ops/s
[info]                  ·gc.alloc.rate:                   780.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              514166.799 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        659939.887 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 436.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         53.000 ms
[info] Iteration   2: 2920.055 ops/s
[info]                  ·gc.alloc.rate:            953.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       513858.722 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.600 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361850.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 2986.731 ops/s
[info]                  ·gc.alloc.rate:            975.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       513848.137 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530604.723 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 3006.926 ops/s
[info]                  ·gc.alloc.rate:                   982.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              513848.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        529168.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2440.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   5: 3009.391 ops/s
[info]                  ·gc.alloc.rate:                                  983.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             513848.136 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       533864.832 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2860.801 ±(99.9%) 1042.351 ops/s [Average]
[info]   (min, avg, max) = (2380.902, 2860.801, 3009.391), stdev = 270.695
[info]   CI (99.9%): [1818.449, 3903.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   934.952 ±(99.9%) 335.723 MB/sec [Average]
[info]   (min, avg, max) = (780.427, 934.952, 983.004), stdev = 87.186
[info]   CI (99.9%): [599.229, 1270.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513913.986 ±(99.9%) 544.485 B/op [Average]
[info]   (min, avg, max) = (513848.136, 513913.986, 514166.799), stdev = 141.401
[info]   CI (99.9%): [513369.501, 514458.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.019 ±(99.9%) 43.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.019, 25.095), stdev = 11.223
[info]   CI (99.9%): [≈ 0, 48.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   942.655 ±(99.9%) 584.117 MB/sec [Average]
[info]   (min, avg, max) = (671.600, 942.655, 1021.297), stdev = 151.693
[info]   CI (99.9%): [358.538, 1526.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   523085.608 ±(99.9%) 408130.382 B/op [Average]
[info]   (min, avg, max) = (361850.260, 523085.608, 659939.887), stdev = 105990.164
[info]   CI (99.9%): [114955.226, 931215.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   575.270 ±(99.9%) 4079.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 575.270, 2440.170), stdev = 1059.482
[info]   CI (99.9%): [≈ 0, 4654.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   118.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (11.000, 23.600, 53.000), stdev = 16.772
[info]   CI (99.9%): [118.000, 118.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.19% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_46b0f747/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21675.271 ops/s
[info] # Warmup Iteration   2: 54654.231 ops/s
[info] # Warmup Iteration   3: 54315.249 ops/s
[info] Iteration   1: 52876.784 ops/s
[info]                  ·gc.alloc.rate:            675.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19946.062 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 53619.133 ops/s
[info]                  ·gc.alloc.rate:            684.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19669.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 54585.661 ops/s
[info]                  ·gc.alloc.rate:            697.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.944 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19321.332 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 54441.794 ops/s
[info]                  ·gc.alloc.rate:            695.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19372.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 54729.946 ops/s
[info]                  ·gc.alloc.rate:                   698.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.948 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19270.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 134.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   54050.664 ±(99.9%) 3022.720 ops/s [Average]
[info]   (min, avg, max) = (52876.784, 54050.664, 54729.946), stdev = 784.991
[info]   CI (99.9%): [51027.944, 57073.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   690.241 ±(99.9%) 38.791 MB/sec [Average]
[info]   (min, avg, max) = (675.166, 690.241, 698.891), stdev = 10.074
[info]   CI (99.9%): [651.450, 729.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.009 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (20099.944, 20100.009, 20100.072), stdev = 0.061
[info]   CI (99.9%): [20099.773, 20100.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.077 ±(99.9%) 0.345 MB/sec [Average]
[info]   (min, avg, max) = (669.994, 670.077, 670.229), stdev = 0.090
[info]   CI (99.9%): [669.732, 670.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19516.151 ±(99.9%) 1101.117 B/op [Average]
[info]   (min, avg, max) = (19270.857, 19516.151, 19946.062), stdev = 285.957
[info]   CI (99.9%): [18415.034, 20617.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   26.818 ±(99.9%) 230.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.818, 134.091), stdev = 59.968
[info]   CI (99.9%): [≈ 0, 257.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.46% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58965.543 ops/s
[info] # Warmup Iteration   2: 78367.980 ops/s
[info] # Warmup Iteration   3: 76378.378 ops/s
[info] Iteration   1: 78174.219 ops/s
[info]                  ·gc.alloc.rate:            512.501 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6772.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 77660.807 ops/s
[info]                  ·gc.alloc.rate:            509.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13634.525 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 78640.701 ops/s
[info]                  ·gc.alloc.rate:            515.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6732.580 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 78139.818 ops/s
[info]                  ·gc.alloc.rate:            512.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13550.960 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 77980.319 ops/s
[info]                  ·gc.alloc.rate:            511.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13579.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   78119.173 ±(99.9%) 1367.965 ops/s [Average]
[info]   (min, avg, max) = (77660.807, 78119.173, 78640.701), stdev = 355.256
[info]   CI (99.9%): [76751.208, 79487.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   512.160 ±(99.9%) 8.934 MB/sec [Average]
[info]   (min, avg, max) = (509.193, 512.160, 515.584), stdev = 2.320
[info]   CI (99.9%): [503.226, 521.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.159 ±(99.9%) 709.400 MB/sec [Average]
[info]   (min, avg, max) = (336.334, 538.159, 672.732), stdev = 184.229
[info]   CI (99.9%): [≈ 0, 1247.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10853.994 ±(99.9%) 14417.543 B/op [Average]
[info]   (min, avg, max) = (6732.580, 10853.994, 13634.525), stdev = 3744.190
[info]   CI (99.9%): [≈ 0, 25271.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.73% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72564.891 ops/s
[info] # Warmup Iteration   2: 90173.259 ops/s
[info] # Warmup Iteration   3: 90512.069 ops/s
[info] Iteration   1: 90570.774 ops/s
[info]                  ·gc.alloc.rate:      5.984 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 90465.597 ops/s
[info]                  ·gc.alloc.rate:      5.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 90521.992 ops/s
[info]                  ·gc.alloc.rate:      5.984 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 90466.087 ops/s
[info]                  ·gc.alloc.rate:      5.978 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90497.033 ops/s
[info]                  ·gc.alloc.rate:      5.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   90504.297 ±(99.9%) 169.415 ops/s [Average]
[info]   (min, avg, max) = (90465.597, 90504.297, 90570.774), stdev = 43.997
[info]   CI (99.9%): [90334.882, 90673.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.980 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (5.978, 5.980, 5.984), stdev = 0.003
[info]   CI (99.9%): [5.969, 5.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.005, 104.005, 104.005), stdev = 0.001
[info]   CI (99.9%): [104.004, 104.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:19:42
[info] Benchmark                                                                                                Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                  thrpt    5    712751.882 ±    68024.255   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      1872.934 ±      179.037  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5      4136.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.022 ±        0.140  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5         0.049 ±        0.322    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      1904.122 ±      728.239  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5      4204.039 ±     1516.943    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 thrpt    5         1.527 ±       13.144    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                        thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                         thrpt    5        32.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                           thrpt    5   1414554.426 ±   132155.286   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      1006.548 ±       94.237  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.037 ±        0.321  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.041 ±        0.351    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      1013.510 ±       26.466  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      1128.203 ±       93.429    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.825  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.187 ±        8.652    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        15.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        48.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                          thrpt    5   3268767.892 ±   257735.627   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5       215.989 ±       16.918  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       202.497 ±      711.807  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5        97.616 ±      343.274    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.063 ±        0.544    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                 thrpt    5         8.000                     ms
[info] AdtBenchmark.readPlayJson                                                                               thrpt    5    147556.714 ±    12660.136   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      1250.314 ±      107.181  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5     13336.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.039 ±        0.340  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.421 ±        3.625    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      1218.939 ±      720.961  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5     13014.020 ±     7987.903    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   thrpt    5         0.933 ±        8.031  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              thrpt    5        10.251 ±       88.267    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        18.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        42.000                     ms
[info] AdtBenchmark.writeCirce                                                                                 thrpt    5    507183.412 ±    38682.434   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1660.182 ±      126.104  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5      5152.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.038 ±        0.314  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.117 ±        0.966    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1630.499 ±      606.873  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5057.440 ±     1743.619    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.734  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         2.052 ±       17.671    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                       thrpt    5        24.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                        thrpt    5        36.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                          thrpt    5   1729145.270 ±    22468.393   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5       720.696 ±        9.207  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       656.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       738.588 ±      578.280  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       672.519 ±      533.229    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.882  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.729 ±        6.277    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        11.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        49.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                         thrpt    5   7365818.435 ±    38484.444   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       374.395 ±        2.072  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       403.782 ±      578.797  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        86.311 ±      124.281    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.028 ±        0.245    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5         6.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        18.000                     ms
[info] AdtBenchmark.writePlayJson                                                                              thrpt    5    288931.651 ±    16689.594   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5       922.323 ±       53.719  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      5024.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.048 ±        0.416  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.269 ±        2.317    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5       943.927 ±      578.459  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      5146.462 ±     3260.006    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         1.199 ±        7.565  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         6.482 ±       40.802    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        14.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        50.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                              thrpt    5   1395009.536 ±    65045.956   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                               thrpt    5      2183.850 ±      102.080  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                          thrpt    5      2464.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.026 ±        0.211  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.029 ±        0.236    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2178.396 ±      718.582  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      2457.609 ±      787.194    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                    thrpt    5        32.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                     thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                        thrpt    5   8736331.166 ±   690286.305   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                         thrpt    5      1065.836 ±       83.693  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.119 ±        1.020  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.021 ±        0.180    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                   thrpt    5      1076.808 ±      613.448  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       193.732 ±       99.242    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.332 ±        7.255  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.239 ±        1.310    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                              thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                               thrpt    5        53.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                       thrpt    5   2137837.284 ±   163286.679   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1499.494 ±      114.958  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.023 ±        0.183  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.017 ±        0.137    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.552 ±      733.288  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      1099.104 ±      511.026    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.699 ±        5.012    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        22.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        36.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                      thrpt    5   9306156.138 ±   661084.812   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1182.500 ±       84.544  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.022 ±        0.122  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.004 ±        0.020    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1221.454 ±      716.357  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       206.713 ±      124.227    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.111 ±        0.956    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        28.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                           thrpt    5    551461.589 ±    35043.582   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1451.827 ±       92.471  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      4144.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.034 ±        0.218  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.096 ±        0.624    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1424.156 ±      598.262  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4061.234 ±     1480.403    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.821  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.055 ±       22.361    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        21.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                             thrpt    5   1847839.330 ±    57691.695   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                              thrpt    5      1681.336 ±       51.496  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         thrpt    5      1432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.013 ±        0.076  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.012 ±        0.065    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        thrpt    5      1699.363 ±       23.613  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      1447.424 ±       47.126    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.568 ±        4.894    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                   thrpt    5        25.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                    thrpt    5        29.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                       thrpt    5  16941825.804 ±  1577754.331   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        thrpt    5       516.681 ±       47.938  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                  thrpt    5       533.976 ±      704.069  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                             thrpt    5        49.757 ±       67.193    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                             thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                              thrpt    5        38.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc                                                               thrpt    5  18096711.856 ±  1762365.635   ops/s
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                           thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                     thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writeJacksonScala                                                                      thrpt    5   4193579.461 ±   133556.993   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1151.200 ±       36.599  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.012 ±        0.107  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.005 ±        0.040    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1149.946 ±      703.794  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       431.772 ±      271.443    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.933 ±        8.032  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.350 ±        3.012    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                     thrpt    5  21002414.166 ±  1644671.296   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       640.502 ±       49.829  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       672.895 ±        1.174  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5        50.444 ±        3.978    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.266 ±        1.405  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.020 ±        0.107    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        10.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        30.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                             thrpt    5  20322696.184 ±  1588751.869   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                          thrpt    5   1230728.120 ±    77359.449   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1801.704 ±      114.367  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      2304.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.040 ±        0.340  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.051 ±        0.435    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1766.274 ±      592.184  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2257.667 ±      674.134    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.932 ±        8.028  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.226 ±       10.556    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        26.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        36.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                   thrpt    5     19790.595 ±      733.547   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1238.056 ±       46.302  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     98456.022 ±        0.012    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.016 ±        0.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         1.292 ±        7.794    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1221.387 ±      721.187  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     97200.268 ±    59299.282    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        53.036 ±      456.656    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                          thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                            thrpt    5     33178.656 ±     1759.665   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       831.642 ±       44.059  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     39456.014 ±        0.013    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.017 ±        0.091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.823 ±        4.381    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       809.362 ±      707.898  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     38463.934 ±    34979.794    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        51.174 ±      311.544    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                           thrpt    5     31716.575 ±      169.965   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       426.045 ±        2.096  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5     21144.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       404.431 ±      580.468  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     20075.029 ±    28878.764    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         6.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        17.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                thrpt    5     25196.933 ±     1823.618   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1335.161 ±       97.214  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     83400.017 ±        0.010    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.026 ±        0.189  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.652 ±       11.934    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.710 ±       28.175  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     84763.666 ±     4478.945    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        50.481 ±      434.657    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        37.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                  thrpt    5     27889.426 ±     1209.639   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1584.383 ±       67.549  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     89407.736 ±        2.400    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.027 ±        0.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.529 ±        7.536    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5      1563.142 ±      708.479  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     88208.809 ±    39779.027    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        37.977 ±      326.991    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                        thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                         thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                           thrpt    5     28142.769 ±     1535.430   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1541.308 ±       84.533  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     86208.026 ±        0.094    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.012 ±        0.087  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.665 ±        4.809    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.171 ±      729.977  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     83584.794 ±    41055.349    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        52.185 ±      449.326    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        34.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                          thrpt    5     30091.896 ±     1748.678   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1552.616 ±       90.835  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5     81200.024 ±        0.082    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.028 ±        0.137  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         1.491 ±        7.263    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1562.841 ±      707.599  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5     81794.196 ±    39003.037    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5        49.608 ±      427.142    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5     29800.281 ±     1086.933   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5      1480.067 ±       54.017  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5     78168.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.025 ±        0.201  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         1.325 ±       10.743    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                             thrpt    5      1426.446 ±      593.211  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                        thrpt    5     75316.540 ±    30148.184    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                      thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                 thrpt    5        42.140 ±      362.835    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5        21.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         thrpt    5        27.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                               thrpt    5      7935.191 ±      367.329   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1032.112 ±       45.422  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5    204656.053 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.011 ±        0.062  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         2.271 ±       12.331    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1081.242 ±      561.890  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    214652.644 ±   121302.741    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       157.819 ±     1358.870    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        44.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                       thrpt    5     19558.185 ±      973.530   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1519.497 ±       75.537  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5    122264.023 ±        0.012    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.018 ±        0.066  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.457 ±        5.288    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1495.159 ±      727.537  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    120233.912 ±    55267.410    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        54.828 ±      472.081    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                thrpt    5     38590.653 ±     1931.579   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       951.860 ±       47.484  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     38823.840 ±        1.475    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.020 ±        0.160  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.798 ±        6.453    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.618 ±      589.718  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     38631.366 ±    24488.796    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        32.396 ±      278.939    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                               thrpt    5     55229.132 ±     3705.373   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       713.596 ±       47.855  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     20336.008 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       674.106 ±        0.231  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     19215.228 ±     1278.469    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        19.239 ±      165.649    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        10.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                    thrpt    5     29421.357 ±      933.288   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1965.522 ±       63.187  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5    105144.015 ±        0.006    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.003 ±        0.012  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.137 ±        0.654    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1972.344 ±      581.633  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    105545.611 ±    32968.269    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        50.428 ±      434.199    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                               thrpt    5     32060.784 ±     1038.925   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1815.870 ±       59.304  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     89144.014 ±        0.005    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.006 ±        0.049  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.294 ±        2.401    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1836.319 ±      724.825  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     90122.351 ±    34175.358    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        46.109 ±      397.009    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        27.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        31.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                              thrpt    5     44085.544 ±     1604.854   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5      1694.007 ±       61.764  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     60480.010 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.016 ±        0.114  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.567 ±        4.039    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1700.405 ±       11.643  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     60712.918 ±     2326.715    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        28.444 ±      244.914    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        25.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     44817.098 ±     3386.591   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5      1643.958 ±      125.009  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.025 ±        0.173  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.908 ±        6.253    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5      1699.602 ±       19.963  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     59706.824 ±     4075.624    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                     thrpt    5        28.790 ±      247.890    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                      thrpt    5    348910.062 ±    20244.413   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1759.210 ±      101.321  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      7936.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.028 ±        0.227  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.131 ±        1.050    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1768.627 ±      589.270  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7976.589 ±     2486.775    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         3.085 ±       26.564    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                            thrpt    5        26.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                             thrpt    5        25.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                thrpt    5   1484813.419 ±   129622.147   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       468.033 ±       41.220  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       533.470 ±      702.205  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       567.180 ±      766.319    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                               thrpt    5    589860.352 ±     6233.988   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       500.630 ±        5.241  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       538.162 ±      709.453  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1437.179 ±     1905.724    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        33.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                              thrpt    5   1737013.880 ±     8775.888   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       335.484 ±        1.745  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       337.036 ±        0.137  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       305.406 ±        1.549    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                   thrpt    5     91343.059 ±     2893.682   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      3317.828 ±      103.783  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     57176.005 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.003 ±        0.006  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.046 ±        0.101    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      3335.379 ±      586.681  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     57482.718 ±    10394.177    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                         thrpt    5        49.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                          thrpt    5        41.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                     thrpt    5    323404.691 ±    23335.644   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5       498.049 ±       35.951  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5      2424.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       471.855 ±      710.804  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      2300.588 ±     3510.616    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                           thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                            thrpt    5        22.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                               thrpt    5   1210491.988 ±    69129.207   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                thrpt    5       559.868 ±       31.949  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                          thrpt    5       533.941 ±      703.923  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       696.491 ±      941.689    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc                                                       thrpt    5   1234917.437 ±     6919.552   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJavaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                              thrpt    5    951714.687 ±    52624.039   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5       672.336 ±       37.083  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       672.701 ±        0.467  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1112.784 ±       60.460    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.336 ±       11.507    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        40.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                             thrpt    5   2449951.682 ±    54642.482   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5      1133.167 ±       24.694  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.031 ±        0.258  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.020 ±        0.166    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1152.387 ±      711.565  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       740.562 ±      463.530    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.598 ±        4.285    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        30.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5   2493708.789 ±     7681.193   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                  thrpt    5    401768.758 ±     9161.367   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5       469.610 ±       10.658  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5       470.856 ±      709.297  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1847.687 ±     2818.064    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                        thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                         thrpt    5        27.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                         thrpt    5    164230.386 ±     1860.845   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      1971.834 ±       23.533  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     18896.003 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.019 ±        0.146  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.186 ±        1.393    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1974.346 ±      586.751  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     18918.681 ±     5541.110    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                               thrpt    5        29.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                thrpt    5        23.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                  thrpt    5    360467.581 ±    26947.034   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       305.931 ±       22.854  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       336.337 ±        0.039  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1469.230 ±      110.377    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        20.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                 thrpt    5    833068.660 ±    74804.576   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       160.908 ±       14.379  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       304.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       134.860 ±      711.078  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       259.251 ±     1367.666    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                      thrpt    5     77806.365 ±     3008.285   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3313.138 ±      128.953  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.008 ±        0.009  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.170 ±        0.192    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3336.027 ±      585.121  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     67474.718 ±    11141.372    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                            thrpt    5        49.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                             thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                        thrpt    5    317440.104 ±    19167.125   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1410.300 ±       85.547  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      6992.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.028 ±        0.232  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.136 ±        1.145    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1426.392 ±      594.414  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      7070.178 ±     2824.208    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.288 ±       28.309    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                              thrpt    5        21.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                 thrpt    5   1712967.526 ±    40440.711   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       879.335 ±       20.808  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.026 ±        0.171  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.024 ±        0.158    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       877.486 ±      707.108  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       807.075 ±      665.785    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.984 ±        5.949    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                thrpt    5   2153957.268 ±   153904.167   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       580.257 ±       41.400  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       538.459 ±      710.182  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       394.136 ±      527.101    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.197 ±        1.038    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   2394692.062 ±    16095.678   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                     thrpt    5     38664.427 ±     1499.623   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1629.160 ±       63.704  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     66320.883 ±        7.508    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.031 ±        0.163  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.284 ±        6.652    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1630.580 ±      580.030  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     66388.682 ±    23947.171    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        33.091 ±      284.925    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                           thrpt    5        24.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                         thrpt    5    239378.628 ±    12511.610   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2460.140 ±      128.257  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     16176.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.011 ±        0.014  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.070 ±        0.095    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2450.694 ±      585.848  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     16111.173 ±     3501.071    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                               thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                  thrpt    5    297420.697 ±    16247.085   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5      1439.145 ±       78.639  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.029 ±        0.247  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.156 ±        1.335    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1426.383 ±      593.570  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      7543.803 ±     2857.482    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         4.232 ±       36.436    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        21.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        31.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                 thrpt    5   1232451.783 ±    86594.463   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       426.000 ±       29.858  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.900 ±      710.867  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       600.344 ±      874.501    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        20.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                      thrpt    5     74135.060 ±     1813.180   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      3115.109 ±       76.669  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     66144.006 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.010 ±        0.014  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.220 ±        0.293    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      3131.035 ±      585.736  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     66482.524 ±    12349.381    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        46.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        38.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                        thrpt    5    212821.733 ±     5421.740   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1806.661 ±       46.990  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     13360.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.018 ±        0.139  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.135 ±        1.029    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1836.920 ±      711.106  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     13585.925 ±     5351.009    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         4.941 ±       42.546    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                              thrpt    5        27.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                               thrpt    5        26.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                 thrpt    5   1165256.898 ±    13455.035   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       681.120 ±        8.038  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       672.761 ±        0.452  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       908.716 ±       10.492    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         1.081 ±        9.306    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        40.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                thrpt    5   2968594.162 ±   269808.027   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5      1011.071 ±       92.061  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.015 ±        0.092  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.008 ±        0.049    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5      1014.579 ±      902.960  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       536.779 ±      452.857    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.428 ±        3.000    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        15.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5   3351693.811 ±    15870.600   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                     thrpt    5    306240.079 ±    14749.915   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      2502.724 ±      120.665  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     12864.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.006 ±        0.010  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.032 ±        0.049    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      2450.567 ±      586.335  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     12597.062 ±     3035.607    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        29.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                       thrpt    5     25637.341 ±     1098.922   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1501.268 ±       65.175  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     92168.017 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.026 ±        0.206  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.595 ±       12.667    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1494.960 ±      728.044  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     91711.803 ±    41695.383    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        41.226 ±      354.966    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                             thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                              thrpt    5        29.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                 thrpt    5     92356.573 ±     3886.460   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                  thrpt    5       831.896 ±       35.320  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14176.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.097 ±        0.833  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         1.636 ±       14.086    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       869.886 ±      711.761  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     14814.207 ±    11915.825    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.332 ±       11.472  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        22.539 ±      194.066    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                       thrpt    5        13.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                        thrpt    5        57.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                thrpt    5     58351.757 ±     2259.138   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       964.230 ±       37.312  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.021 ±        0.142  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.566 ±        3.779    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       946.694 ±      572.676  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     25540.215 ±    15562.690    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.351 ±      183.840    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                               thrpt    5     80630.008 ±      720.774   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       519.663 ±        4.584  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     10144.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       539.293 ±      710.946  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     10533.119 ±    13950.356    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         8.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                    thrpt    5     31815.795 ±     1733.855   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1661.809 ±       91.098  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     82216.014 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.025 ±        0.124  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.244 ±        6.314    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1631.259 ±      607.037  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     80638.645 ±    26695.637    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        40.441 ±      348.212    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                          thrpt    5        24.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                           thrpt    5        38.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                      thrpt    5     38579.033 ±      677.625   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       432.168 ±        7.664  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     17632.011 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       404.443 ±      580.482  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     16494.371 ±    23553.224    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                            thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                             thrpt    5        19.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                               thrpt    5     41036.536 ±     2522.975   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       370.607 ±       22.773  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.472 ±      579.492  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     15472.016 ±    22094.456    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.064 ±       43.605    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        23.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                              thrpt    5     43963.384 ±     2818.067   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       386.424 ±       24.877  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5     13832.010 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       403.504 ±      577.763  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     14415.881 ±    20101.465    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        18.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5     44262.843 ±      853.675   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5       338.360 ±        6.583  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                 thrpt    5       336.372 ±        0.195  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                            thrpt    5     11961.526 ±      231.573    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             thrpt    5        14.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                     thrpt    5     19221.456 ±     1809.692   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5       720.633 ±       68.022  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     59016.023 ±        0.009    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5       741.954 ±      580.701  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     60734.709 ±    46147.675    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.932 ±        5.619  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        75.743 ±      456.671    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                            thrpt    5        35.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                              thrpt    5     18565.799 ±      268.543   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       526.930 ±        7.179  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     44675.093 ±       38.763    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       470.879 ±      709.322  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     39947.729 ±    60483.274    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        29.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                             thrpt    5     74422.558 ±     3810.646   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       193.674 ±        9.976  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.006 ±        0.002    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       202.761 ±      712.735  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4309.608 ±    15152.853    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                  thrpt    5     15781.014 ±     1149.726   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1023.170 ±       74.230  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5    102048.096 ±        0.590    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.029 ±        0.168  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         2.842 ±       16.641    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1014.706 ±       23.171  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5    101225.254 ±     5616.152    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        79.118 ±      681.229    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        40.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                    thrpt    5     58217.570 ±     2987.263   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       882.071 ±       44.586  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5     23848.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.010 ±        0.056  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.276 ±        1.529    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       878.931 ±      714.073  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     23756.028 ±    19125.286    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.738  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        18.336 ±      157.878    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                          thrpt    5        13.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                           thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                             thrpt    5     90453.396 ±     6438.068   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5      1072.664 ±       76.741  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.039 ±        0.335  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.672 ±        5.755    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1083.678 ±      598.654  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     18834.531 ±     9422.714    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        13.727 ±      118.194    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        36.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                            thrpt    5    290390.193 ±     8297.245   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       460.498 ±       13.179  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      2496.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.636 ±      579.089  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      2186.818 ±     3118.469    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        17.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    328214.551 ±     8711.281   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                 thrpt    5     70554.013 ±     1163.016   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1099.051 ±       18.311  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5     24520.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.027 ±        0.170  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.599 ±        3.799    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1150.787 ±      712.824  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     25671.250 ±    15801.710    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        17.856 ±      153.750    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        17.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        39.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                         thrpt    5     27602.833 ±      251.601   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       573.422 ±        5.271  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     32700.128 ±       26.700    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       606.630 ±      580.394  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     34591.898 ±    33072.104    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                               thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                  thrpt    5     28202.376 ±      402.985   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       370.671 ±        5.348  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     20687.782 ±        2.012    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       403.493 ±      579.527  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     22540.473 ±    32744.479    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.448 ±       64.132    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                 thrpt    5    119612.436 ±     5447.784   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       466.921 ±       21.203  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      6144.004 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       404.458 ±      580.264  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5318.025 ±     7548.736    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        18.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                      thrpt    5     21206.273 ±     1175.484   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1170.954 ±       65.103  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     86904.027 ±        0.051    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.015 ±        0.132  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.127 ±        9.707    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1151.203 ±      711.487  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     85399.988 ±    51333.580    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        7.822  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        79.220 ±      579.200    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        43.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                        thrpt    5    178326.452 ±    11103.069   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       622.708 ±       38.821  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       606.698 ±      580.193  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5362.447 ±     5218.951    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                              thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                 thrpt    5    278738.696 ±    25678.029   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       281.950 ±       26.022  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       269.113 ±      579.287  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1527.768 ±     3292.542    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        16.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                thrpt    5    502999.201 ±    27362.566   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       386.008 ±       21.018  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.018 ±      579.804  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1262.902 ±     1783.266    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.825 ±        4.348    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        18.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    482817.988 ±    31926.306   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                     thrpt    5    269036.460 ±    18427.244   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5       741.147 ±       50.647  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.006 ±        0.052  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.034 ±        0.296    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5       740.173 ±      577.889  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      4337.624 ±     3578.293    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.199 ±        7.566  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.891 ±       43.167    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        47.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                        thrpt    5     36606.431 ±     1390.930   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1632.241 ±       62.410  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     70176.012 ±        0.005    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.020 ±        0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.846 ±        5.285    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1631.905 ±      582.054  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     70194.494 ±    26371.411    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        28.929 ±      249.084    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                              thrpt    5        24.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                  thrpt    5    286101.163 ±      422.624   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       296.661 ±        0.435  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.593 ±        1.126  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1835.177 ±        7.644    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.733 ±        6.309    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                 thrpt    5     97069.802 ±     9000.741   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5      1072.558 ±       99.620  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.029 ±        0.195  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.460 ±        3.108    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1083.567 ±      599.012  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     17589.824 ±    10288.791    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        12.725 ±      109.563    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        36.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                thrpt    5    149624.368 ±     6324.602   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5        97.341 ±        4.100  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1024.003 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       135.625 ±      715.129  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1442.739 ±     7607.980    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         2.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         5.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                     thrpt    5     36064.678 ±     1415.484   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1925.295 ±       75.979  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     84016.012 ±        0.006    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.032 ±        0.214  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.389 ±        9.225    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1905.103 ±      713.691  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     83115.778 ±    30057.015    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.877  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        34.444 ±      296.569    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        28.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        28.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                       thrpt    5     90477.034 ±     4545.765   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5       436.865 ±       21.993  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      7600.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       471.838 ±      710.675  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8234.568 ±    12723.579    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                             thrpt    5         7.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                              thrpt    5        23.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                 thrpt    5    112757.106 ±     8507.378   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       345.037 ±       26.156  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       333.741 ±        0.253  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4659.812 ±      359.944    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5    113662.344 ±     5909.156   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5       258.250 ±       13.291  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       267.004 ±      574.746  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5      3703.487 ±     7975.540    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                thrpt    5        19.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                thrpt    5     98830.541 ±     1252.916   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       326.530 ±        3.885  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       336.400 ±        0.290  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5357.220 ±       68.177    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                               thrpt    5    113721.550 ±     1931.915   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       347.995 ±        6.006  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       336.548 ±        1.075  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4657.663 ±       78.071    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.840 ±       15.842    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        15.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5    114471.315 ±     6429.492   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5       260.075 ±       14.601  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                  thrpt    5       269.241 ±      579.562  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                             thrpt    5      3714.654 ±     7999.532    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                      thrpt    5      8625.752 ±      595.401   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      1427.963 ±       98.752  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5    260528.049 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.007 ±        0.050  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.263 ±        9.327    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1426.488 ±      593.182  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5    260130.283 ±    99486.062    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        4.444  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5       123.895 ±      826.068    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                            thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                             thrpt    5        30.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                               thrpt    5      8556.446 ±      365.666   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5      1333.307 ±       56.819  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5    245216.049 ±        0.010    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.025 ±        0.210  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         4.590 ±       38.458    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1356.869 ±       28.631  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    249572.448 ±    11377.287    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       146.603 ±     1262.294    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                     thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                              thrpt    5     80022.764 ±      854.150   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       208.274 ±        2.275  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       202.636 ±      712.295  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      3992.757 ±    14035.134    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         3.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5         9.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                   thrpt    5      4691.809 ±      252.847   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1254.098 ±       67.143  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5    420736.090 ±        0.015    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.027 ±        0.155  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         8.876 ±       51.838    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.376 ±      722.578  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    409320.160 ±   238150.991    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5       267.267 ±     2301.246    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                          thrpt    5        36.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                     thrpt    5     24339.885 ±      720.800   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                      thrpt    5      1260.990 ±       37.689  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 thrpt    5     81551.678 ±        2.919    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.017 ±        0.093  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.102 ±        6.116    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1288.640 ±      576.322  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     83364.957 ±    38070.745    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        43.580 ±      375.236    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                           thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                            thrpt    5        33.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                              thrpt    5     25010.283 ±     1948.002   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                               thrpt    5      1271.224 ±       99.132  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          thrpt    5     79984.017 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.026 ±        0.140  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.657 ±        9.017    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5      1288.834 ±      593.884  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     81012.638 ±    34155.281    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        51.542 ±      443.791    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                    thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                     thrpt    5        36.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                             thrpt    5    341787.599 ±    14419.320   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              thrpt    5       753.876 ±       31.882  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      3472.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.009 ±        0.077  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.042 ±        0.357    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       741.034 ±      578.451  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      3417.655 ±     2800.506    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         4.928 ±       29.705    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                   thrpt    5        11.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                    thrpt    5        32.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                     thrpt    5    381246.287 ±     2209.081   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                  thrpt    5     26148.962 ±     1096.494   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                   thrpt    5      1375.339 ±       57.589  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              thrpt    5     82792.017 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.185  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         1.422 ±       11.262    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1357.336 ±       26.822  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     81715.321 ±     3507.124    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        48.517 ±      417.747    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                        thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                         thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                          thrpt    5    122387.624 ±     5743.198   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                           thrpt    5      1991.920 ±       92.772  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                      thrpt    5     25616.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.026 ±        0.185  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.337 ±        2.411    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      2042.348 ±        1.554  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5     26267.585 ±     1228.613    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                thrpt    5        30.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                 thrpt    5        26.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                    thrpt    5    443735.941 ±    34963.326   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     thrpt    5       460.158 ±       35.978  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                               thrpt    5       467.238 ±      703.581  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1656.889 ±     2488.935    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                          thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                           thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                   thrpt    5    264309.906 ±     3290.017   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       378.847 ±        4.660  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       336.380 ±        0.268  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2003.128 ±       24.859    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                  thrpt    5    590764.341 ±    10861.914   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5       384.325 ±        6.950  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       404.429 ±      580.344  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1077.478 ±     1544.281    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        18.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                       thrpt    5     67299.532 ±     5404.532   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      2947.136 ±      235.824  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5     68920.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.010 ±        0.021  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.245 ±        0.479    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      2995.495 ±      585.139  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     70033.017 ±    10750.576    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        44.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        40.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                         thrpt    5    242667.857 ±     7618.618   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1441.978 ±       44.767  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      9352.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.030 ±        0.248  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.193 ±        1.608    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1494.220 ±      723.481  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      9692.694 ±     4756.976    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         4.322 ±       37.213    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                               thrpt    5        22.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                thrpt    5        29.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                   thrpt    5    912470.413 ±    16031.866   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    thrpt    5       496.229 ±        8.757  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       467.186 ±      703.749  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       806.492 ±     1222.215    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                         thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc                                                           thrpt    5    921801.808 ±     6350.602   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                            thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                       thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                 thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                  thrpt    5    794807.266 ±    19397.014   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   thrpt    5       626.098 ±       15.180  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       605.288 ±      578.993  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1199.510 ±     1156.000    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.263 ±        2.268    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                         thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                 thrpt    5    935572.222 ±    71068.035   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       508.808 ±       38.621  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       471.307 ±      710.195  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       794.032 ±     1209.201    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.445 ±        2.347    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        22.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                         thrpt    5   1076907.269 ±     5973.205   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                      thrpt    5     29139.782 ±     1323.705   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1521.838 ±       69.001  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5     82203.841 ±       26.726    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.035 ±        0.296  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         1.859 ±       15.952    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1561.642 ±      704.125  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     84398.198 ±    39565.906    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        44.092 ±      379.644    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        34.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                     thrpt    5    127189.677 ±     7397.443   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      1731.945 ±      101.309  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5     21432.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.016 ±        0.110  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.201 ±        1.381    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      1700.588 ±       11.785  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     21047.552 ±     1139.595    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         8.378 ±       72.134    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                           thrpt    5        25.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                            thrpt    5        27.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                              thrpt    5    163089.250 ±     4748.973   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               thrpt    5       870.418 ±       25.756  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.021 ±        0.110  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.199 ±        1.056    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                         thrpt    5       877.696 ±      713.709  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      8468.415 ±     6844.149    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         8.968 ±       64.208    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                    thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                     thrpt    5        42.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                             thrpt    5    249242.608 ±     6251.798   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5       648.640 ±       16.517  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5       674.103 ±        0.380  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      4256.938 ±      106.873    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        28.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                  thrpt    5     62298.791 ±     1507.854   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      2629.504 ±       64.747  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     66432.007 ±        0.002    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.007 ±        0.012  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.168 ±        0.309    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      2654.898 ±      585.962  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     67068.621 ±    14336.817    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                        thrpt    5        39.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                         thrpt    5        40.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                    thrpt    5    178643.039 ±     5973.636   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5       623.824 ±       21.232  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5       606.704 ±      580.398  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      5348.878 ±     5160.677    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                          thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                           thrpt    5        29.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                             thrpt    5    533363.886 ±    13191.618   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       539.526 ±       13.382  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       537.855 ±      709.357  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1585.755 ±     2076.695    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.787 ±        4.151    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                            thrpt    5    477039.510 ±     8790.779   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       366.121 ±        6.709  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       336.639 ±        1.359  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      1110.742 ±       17.556    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.439 ±        3.778    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        15.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                    thrpt    5    495790.951 ±    18230.128   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                 thrpt    5    283419.036 ±     5830.865   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5       777.848 ±       15.984  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      4320.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.006 ±        0.050  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.032 ±        0.279    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5       807.805 ±      701.870  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4484.095 ±     3843.119    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.199 ±        8.958  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         6.632 ±       49.550    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                        thrpt    5        47.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                thrpt    5      9028.534 ±      471.319   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      1154.390 ±       60.515  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    201256.047 ±        0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.010 ±        0.069  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.806 ±       12.051    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      1219.891 ±      717.341  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    212778.382 ±   127699.260    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       116.366 ±     1001.948    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        18.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        34.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                         thrpt    5      8965.105 ±      677.271   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1080.116 ±       82.111  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    189620.871 ±       41.538    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.008 ±        0.058  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         1.473 ±       10.509    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5      1083.489 ±      599.531  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    190053.824 ±    97317.141    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.933 ±        8.029  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       167.390 ±     1441.275    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                        thrpt    5    145287.360 ±     9446.579   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       945.300 ±       61.347  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     10240.003 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.007 ±        0.063  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.080 ±        0.689    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       948.904 ±      589.132  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     10273.220 ±     6227.729    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.533 ±        4.590  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         5.874 ±       50.575    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        30.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                             thrpt    5      6849.691 ±      140.699   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1275.698 ±       25.344  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    293096.061 ±        0.009    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.029 ±        0.213  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         6.707 ±       49.144    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5      1288.424 ±      576.123  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    296085.724 ±   134515.614    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.879  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       184.636 ±     1589.768    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                               thrpt    5     22005.541 ±      193.340   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       924.057 ±        8.443  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     66089.262 ±       41.362    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.032 ±        0.265  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         2.310 ±       18.869    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       947.088 ±      587.665  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     67731.582 ±    41912.043    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        47.468 ±      408.717    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     25219.134 ±      616.135   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       970.313 ±       23.281  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     60552.017 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.024 ±        0.126  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         1.515 ±        7.904    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       946.591 ±      572.204  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     59069.546 ±    35637.629    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5        58.416 ±      502.984    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    861543.539 ±    24563.949   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1554.638 ±       43.421  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      2840.000 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.032 ±        0.160  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.058 ±        0.293    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5      1563.715 ±      729.171  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      2855.553 ±     1290.029    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         1.460 ±       12.573    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        23.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    505827.550 ±     2263.712   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                            thrpt    5     22744.549 ±     1608.264   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       959.508 ±       67.885  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     66398.798 ±       32.558    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.024 ±        0.206  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.631 ±       14.047    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1013.906 ±       25.679  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     70177.100 ±     3812.251    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        54.880 ±      472.534    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                    thrpt    5     24755.762 ±     1420.586   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1343.396 ±       77.535  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5     85416.018 ±        0.008    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.180 ±        6.416    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1357.830 ±       21.677  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     86347.392 ±     4532.978    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        4.442  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        43.237 ±      289.698    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                          thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                             thrpt    5     25610.743 ±     1748.456   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1169.856 ±       79.715  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5     71888.231 ±        1.849    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.014 ±        0.121  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.847 ±        7.292    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1151.747 ±      709.668  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5     70816.125 ±    44661.050    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        49.289 ±      424.391    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        37.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                            thrpt    5    266707.761 ±     6704.015   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       694.095 ±       17.758  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       742.980 ±      581.341  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4385.031 ±     3444.129    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         3.133 ±       26.978    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                 thrpt    5     15504.762 ±      511.631   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1596.015 ±       52.581  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    162024.139 ±        0.954    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.021 ±        0.141  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         2.142 ±       14.414    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1630.493 ±      579.933  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    165591.705 ±    61678.798    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        81.691 ±      703.387    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                   thrpt    5     51686.451 ±     2722.061   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1253.683 ±       66.592  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     38176.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.008 ±        0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.258 ±        1.358    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1288.780 ±      576.529  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     39270.549 ±    18346.377    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        20.708 ±      178.303    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                         thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                            thrpt    5    112388.554 ±     4258.512   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       952.190 ±       36.145  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     13336.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.031 ±        0.258  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.427 ±        3.582    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       946.567 ±      589.771  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     13256.040 ±     8219.581    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        11.358 ±       97.795    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        39.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                           thrpt    5   1392273.555 ±    49844.842   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1493.312 ±       53.609  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.037 ±        0.302  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.042 ±        0.341    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1494.608 ±      729.289  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1690.300 ±      854.340    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.892 ±        7.678    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        22.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5    672703.072 ±     5291.739   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                thrpt    5     58126.638 ±     3429.478   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1351.910 ±       79.716  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     36608.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.031 ±        0.205  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.856 ±        5.675    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1356.626 ±       27.613  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     36740.711 ±     1635.206    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        22.071 ±      190.038    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                    thrpt    5     13803.130 ±      957.040   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      1231.769 ±       86.175  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5    140456.032 ±        0.012    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.011 ±        0.060  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.253 ±        6.775    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1220.737 ±      718.698  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    139183.409 ±    80966.849    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        93.131 ±      801.885    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                          thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                           thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                             thrpt    5     14187.944 ±      496.752   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1146.471 ±       40.310  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5    127184.031 ±        0.011    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.017 ±        0.139  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         1.881 ±       15.679    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5      1151.637 ±      709.767  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    127732.348 ±    77772.988    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5        88.606 ±      762.923    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        38.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                            thrpt    5    257052.402 ±    24127.315   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       668.918 ±       62.886  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       675.391 ±        0.218  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      4137.617 ±      390.139    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5        10.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                 thrpt    5     10309.505 ±      811.608   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1423.431 ±      112.014  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5    217320.041 ±        0.008    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.017 ±        0.127  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         2.553 ±       19.117    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1425.490 ±      595.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5    217766.613 ±    95422.589    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5       120.330 ±     1036.078    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                       thrpt    5        21.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                        thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                   thrpt    5     38118.758 ±     1792.946   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                    thrpt    5      1184.930 ±       55.933  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                               thrpt    5     48928.340 ±        2.831    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.016 ±        0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.646 ±        5.518    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1220.765 ±      719.872  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     50450.227 ±    30885.129    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        32.632 ±      226.710    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                          thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                            thrpt    5     44918.942 ±     3088.994   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5      1191.803 ±       82.432  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5     41752.010 ±        0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.036 ±        0.192  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         1.243 ±        6.616    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1220.000 ±      714.079  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     42757.506 ±    25433.074    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        27.847 ±      239.770    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        35.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                           thrpt    5   1658185.358 ±   125960.239   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5      1508.659 ±      114.124  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.025 ±        0.126  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.023 ±        0.119    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1562.695 ±      707.217  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1484.087 ±      693.917    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.897 ±        7.724    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        23.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        28.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                   thrpt    5   1824845.898 ±    10265.246   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                thrpt    5     34722.891 ±     1188.342   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1050.380 ±       35.902  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5     47617.508 ±       12.885    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.020 ±        0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.916 ±        4.926    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1082.689 ±      600.174  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     49055.821 ±    26076.333    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        36.550 ±      314.703    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                      thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                       thrpt    5        36.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                         thrpt    5    127208.542 ±     6392.113   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5      2178.821 ±      109.499  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     26960.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.006 ±        0.018  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.078 ±        0.223    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      2178.295 ±      717.770  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     26969.702 ±     9677.390    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                               thrpt    5        32.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                   thrpt    5    334343.838 ±    14723.345   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    thrpt    5       669.569 ±       28.984  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              thrpt    5       667.452 ±        0.548  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      3142.362 ±      139.949    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                         thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                          thrpt    5        47.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                  thrpt    5    222196.401 ±    13994.367   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       492.343 ±       31.043  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       538.129 ±      709.345  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      3819.680 ±     5112.460    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        36.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                 thrpt    5    452401.803 ±     6194.113   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       570.211 ±        7.925  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       606.628 ±      580.268  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      2111.603 ±     2030.460    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        26.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                      thrpt    5     64112.827 ±     3676.494   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      2861.122 ±      162.629  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     70232.007 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.014 ±        0.016  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.352 ±        0.368    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      2859.526 ±      719.479  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     70216.610 ±    18919.718    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        42.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        36.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                        thrpt    5    219524.330 ±    12377.698   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5      1548.566 ±       87.483  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     11104.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.017 ±        0.130  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.127 ±        0.958    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1562.970 ±      708.748  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     11212.678 ±     5256.282    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         4.897 ±       42.166    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                              thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                               thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                  thrpt    5    679316.054 ±     7823.600   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   thrpt    5       531.734 ±        6.104  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       533.952 ±      703.846  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      1237.353 ±     1633.330    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                        thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                         thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc                                                          thrpt    5    751682.382 ±     1254.925   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                      thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                 thrpt    5    460857.608 ±     6154.657   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5       473.226 ±        6.407  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       470.982 ±      709.466  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1609.668 ±     2441.239    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        31.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                thrpt    5    596186.246 ±    47874.222   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       466.633 ±       37.595  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       471.028 ±      709.942  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1245.827 ±     1903.026    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.347 ±        2.987    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        21.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    641682.869 ±      592.106   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                     thrpt    5     26936.320 ±     2420.494   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1381.114 ±      124.157  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     80692.648 ±       27.231    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.031 ±        0.241  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         1.820 ±       14.271    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1357.654 ±       27.046  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     79349.948 ±     5788.076    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        47.391 ±      408.055    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        32.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                               thrpt    5      6515.615 ±      429.592   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      1002.973 ±       65.700  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5    242272.066 ±        0.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.015 ±        0.074  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         3.511 ±       17.699    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       948.035 ±      575.597  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5    228772.559 ±   133040.645    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        5.318  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       222.508 ±     1269.192    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                     thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                      thrpt    5        31.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                        thrpt    5      6376.874 ±      372.492   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5       919.171 ±       53.982  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5    226864.066 ±        0.012    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.016 ±        0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         3.831 ±       25.895    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       945.887 ±      588.489  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5    233198.448 ±   138578.722    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       198.344 ±     1707.797    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                              thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                               thrpt    5        43.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                       thrpt    5     96993.930 ±     6075.039   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       939.690 ±       58.947  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.005 ±        0.040  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.084 ±        0.643    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       948.821 ±      588.942  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     15386.396 ±     9307.025    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         8.556 ±       73.670    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                            thrpt    5      6289.887 ±      143.092   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1144.034 ±       26.423  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5    286280.066 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.020 ±        0.153  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.989 ±       38.166    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5      1151.592 ±      710.263  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    288258.156 ±   180341.818    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       201.908 ±     1738.490    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                   thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                              thrpt    5     18084.276 ±      835.619   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5       820.578 ±       37.531  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5     71415.106 ±       68.478    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.022 ±        0.193  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         1.922 ±       16.547    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                         thrpt    5       810.256 ±      705.919  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                    thrpt    5     70476.077 ±    60395.405    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                             thrpt    5        58.724 ±      505.631    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                    thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                     thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                       thrpt    5     19866.363 ±     1585.769   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5       841.832 ±       67.383  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5     66696.022 ±        0.014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.028 ±        0.158  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         2.177 ±       12.517    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                  thrpt    5       877.477 ±      714.153  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5     69570.114 ±    57468.524    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                           thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5        84.247 ±      509.922    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        40.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                      thrpt    5    603649.353 ±    23222.669   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1368.343 ±       52.740  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'           thrpt    5         0.027 ±        0.228  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm      thrpt    5         0.071 ±        0.599    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                 thrpt    5      1357.724 ±       25.659  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                            thrpt    5      3540.680 ±      184.467    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                          thrpt    5         0.799 ±        5.559  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                     thrpt    5         2.090 ±       14.587    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        20.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        28.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5    409105.530 ±     5714.847   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                           thrpt    5     18678.644 ±      470.241   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5       885.480 ±       21.943  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5     74616.306 ±       28.713    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.042 ±        0.220  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         3.487 ±       18.392    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                      thrpt    5       877.756 ±      713.826  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     73993.395 ±    60706.446    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        66.991 ±      576.812    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                 thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                  thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                   thrpt    5     10984.521 ±      463.062   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1103.336 ±       45.486  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5    158069.628 ±       65.012    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.014 ±        0.086  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         2.041 ±       12.270    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1151.869 ±      713.408  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5    165265.171 ±   109418.926    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        94.560 ±      814.190    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                         thrpt    5        17.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                          thrpt    5        33.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                            thrpt    5     10949.870 ±      482.152   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1002.418 ±       43.706  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5    144069.033 ±       68.529    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.021 ±        0.125  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         3.031 ±       17.831    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      1014.825 ±       23.447  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5    145872.212 ±     8920.035    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5       113.852 ±      980.299    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        40.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                           thrpt    5    174349.745 ±     3708.634   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5      1008.513 ±       20.989  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      9104.002 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.014 ±        0.069  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.124 ±        0.625    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1015.827 ±       19.516  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      9170.108 ±      143.402    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         6.033 ±       51.946    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        29.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                thrpt    5      9893.193 ±      761.197   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1270.454 ±       98.372  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5    202112.092 ±        0.429    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.008 ±        0.058  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         1.178 ±        8.992    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      1220.153 ±      722.666  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    193976.210 ±   110109.603    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       151.779 ±     1306.863    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                      thrpt    5        18.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                  thrpt    5     28084.341 ±     1094.011   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       969.188 ±       37.752  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5     54317.221 ±       40.604    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.003 ±        0.019  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.170 ±        1.084    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       947.568 ±      588.877  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     53126.967 ±    33458.043    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        44.700 ±      384.876    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                        thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                         thrpt    5        32.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                           thrpt    5     84849.121 ±     6368.207   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      1350.921 ±      101.530  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.040 ±        0.336  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.756 ±        6.393    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5      1357.675 ±       27.686  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5     25188.879 ±     1946.459    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5        15.185 ±      130.749    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        35.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                          thrpt    5    935215.796 ±    33013.395   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1283.554 ±       44.773  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      2160.000 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.019 ±        0.152  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.032 ±        0.256    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1289.716 ±      602.988  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      2171.741 ±     1057.431    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         1.346 ±       11.589    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        29.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1091827.564 ±    18885.568   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                               thrpt    5     68063.576 ±     6102.037   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1468.001 ±      131.870  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5     33944.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.010 ±        0.071  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.229 ±        1.684    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5      1426.227 ±      594.039  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     32952.845 ±    11956.910    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        22.076 ±      190.078    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                     thrpt    5        21.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                       thrpt    5     25810.009 ±      522.404   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5       930.181 ±       18.917  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     56728.017 ±        0.009    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.022 ±        0.179  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         1.341 ±       10.895    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5       946.301 ±      579.101  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     57678.013 ±    34500.776    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        40.960 ±      352.678    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                             thrpt    5        14.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                              thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                thrpt    5     22169.867 ±     1549.340   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       607.730 ±       42.265  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     43144.270 ±        2.165    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       605.492 ±      579.339  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     42945.038 ±    40594.482    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5         9.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                               thrpt    5    155246.609 ±    10918.972   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5       404.016 ±       28.248  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5      4096.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       405.260 ±      581.560  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4105.394 ±     5818.538    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        17.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                    thrpt    5     20329.351 ±      966.344   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1271.714 ±       60.590  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     98464.022 ±        0.011    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.025 ±        0.196  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.887 ±       15.041    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1286.943 ±      598.429  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     99665.790 ±    46952.622    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        61.413 ±      528.785    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        42.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                      thrpt    5     83348.573 ±     6472.123   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5      1103.215 ±       86.279  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5     20832.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.020 ±        0.135  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.364 ±        2.527    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      1152.012 ±      713.824  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     21721.421 ±    12294.170    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        12.440 ±      107.108    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                             thrpt    5        39.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                               thrpt    5    138277.612 ±     8153.661   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5      1170.136 ±       69.322  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5     13320.003 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.036 ±        0.191  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.409 ±        2.204    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1152.382 ±      713.855  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     13132.702 ±     8539.914    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         9.105 ±       78.395    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5        17.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        34.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                              thrpt    5    447455.583 ±    31583.768   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       495.789 ±       35.169  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1744.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       470.938 ±      709.696  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1654.718 ±     2466.631    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    525144.285 ±    35950.390   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                   thrpt    5     98736.235 ±     3798.985   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1204.293 ±       46.146  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5     19200.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.024 ±        0.207  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.385 ±        3.290    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1219.605 ±      720.183  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19454.742 ±    11770.733    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        12.725 ±      109.568    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                        thrpt    5    147794.145 ±     8318.819   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2485.624 ±      139.839  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5     26472.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.009 ±        0.008  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.096 ±        0.089    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2518.716 ±      719.281  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     26822.148 ±     7331.819    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                              thrpt    5        37.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                  thrpt    5    526096.270 ±    28687.736   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       291.462 ±       15.800  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.724 ±        0.155  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       998.599 ±       54.670    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                 thrpt    5    321190.307 ±    12509.036   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       334.688 ±       13.150  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       336.267 ±        0.999  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1647.878 ±       67.038    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         0.649 ±        5.591    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        21.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                thrpt    5    717744.483 ±    38774.358   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       248.080 ±       13.348  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       202.242 ±      710.910  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       442.563 ±     1556.145    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         3.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5         9.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                     thrpt    5     73145.447 ±     2902.402   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      3233.272 ±      129.551  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5     69576.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.011 ±        0.025  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.244 ±        0.532    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      3199.486 ±      718.740  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     68851.479 ±    15437.048    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        47.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        40.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                       thrpt    5    271631.587 ±    16584.780   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1630.498 ±       99.094  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5      9448.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.021 ±        0.161  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.122 ±        0.933    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1631.798 ±      582.204  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9459.348 ±     3511.952    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         3.863 ±       33.259    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                              thrpt    5        28.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                 thrpt    5   1219747.244 ±    56706.557   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       502.128 ±       23.332  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       467.175 ±      703.791  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       602.590 ±      903.312    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        33.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5   1249477.356 ±     2009.127   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                thrpt    5   1209637.144 ±   119065.704   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       793.189 ±       77.982  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5      1032.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.028 ±        0.239  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.037 ±        0.322    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       809.804 ±      722.961  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      1055.896 ±      986.124    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         1.063 ±        9.156    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5        12.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        39.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                               thrpt    5   1479941.441 ±    61704.717   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       609.329 ±       25.282  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       648.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       605.503 ±      579.206  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       642.951 ±      602.890    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        27.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5   1534714.655 ±    47057.081   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                    thrpt    5     35700.139 ±     2103.414   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1746.179 ±      101.970  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5     76985.514 ±       12.935    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.040 ±        0.299  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.801 ±       13.516    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1767.542 ±      590.961  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     77931.999 ±    25851.243    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5        36.160 ±      311.347    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                          thrpt    5        26.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                           thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                         thrpt    5     43705.531 ±     2508.979   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                          thrpt    5       871.993 ±       50.175  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                     thrpt    5     31400.009 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.013 ±        0.068  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.454 ±        2.406    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5       879.052 ±      714.603  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     31643.176 ±    25450.925    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5        23.883 ±      205.638    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                               thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                  thrpt    5     76938.427 ±     5935.937   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                   thrpt    5       811.055 ±       62.507  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.020 ±        0.105  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.414 ±        2.182    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             thrpt    5       809.447 ±      709.172  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     16612.398 ±    15619.107    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         1.066 ±        6.438  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5        21.965 ±      134.174    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                        thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                         thrpt    5        40.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                 thrpt    5    259584.053 ±     8029.312   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  thrpt    5       844.445 ±       26.202  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.008 ±        0.042  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.048 ±        0.255    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       810.928 ±      709.588  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      4920.268 ±     4379.143    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         4.067 ±       35.021    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                       thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                        thrpt    5        29.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                      thrpt    5     23643.473 ±     1364.778   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                       thrpt    5      1111.024 ±       64.215  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  thrpt    5     73960.337 ±        2.745    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.058 ±        0.496  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         3.835 ±       32.642    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1151.636 ±      710.095  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5     76759.190 ±    50008.653    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5        53.755 ±      462.845    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                            thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                             thrpt    5        37.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                        thrpt    5     56956.879 ±     1691.466   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                         thrpt    5       845.021 ±       25.222  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.014 ±        0.076  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.395 ±        2.081    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5       810.874 ±      709.511  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     22429.867 ±    20083.736    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5        18.461 ±      158.953    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                              thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                               thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                 thrpt    5     89094.508 ±     3203.100   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  thrpt    5      1220.401 ±       43.530  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     21560.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.035 ±        0.201  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.622 ±        3.539    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5      1220.379 ±      715.165  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     21552.982 ±    12409.358    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5        16.682 ±      119.795    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                       thrpt    5        18.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                        thrpt    5        35.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                thrpt    5    287559.335 ±    15093.940   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 thrpt    5       916.375 ±       48.753  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.026 ±        0.185  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.140 ±        0.997    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       945.784 ±      570.260  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      5183.321 ±     3263.141    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         4.453 ±       38.338    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                      thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                        thrpt    5    323412.467 ±      456.623   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                     thrpt    5     77725.065 ±     1419.158   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                      thrpt    5      1151.804 ±       21.347  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 thrpt    5     23328.005 ±        0.070    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.023 ±        0.170  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.462 ±        3.439    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1151.482 ±      709.656  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5     23330.353 ±    14644.659    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5        16.312 ±      140.455    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                           thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                            thrpt    5        40.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                       thrpt    5     70518.262 ±     3902.535   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                        thrpt    5      1430.858 ±       79.200  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                   thrpt    5     31936.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.025 ±        0.183  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.551 ±        4.109    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1425.614 ±      595.617  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5     31787.557 ±    11447.687    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5        17.980 ±      154.815    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                             thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                              thrpt    5        31.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                thrpt    5     77972.467 ±     4072.359   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                 thrpt    5       882.158 ±       45.913  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     17808.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.019 ±        0.155  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.382 ±        3.106    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       876.301 ±      706.560  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     17701.332 ±    14484.122    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        7.822  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5        21.357 ±      156.328    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                       thrpt    5        44.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                               thrpt    5    100238.126 ±      448.861   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1055.709 ±        5.012  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.021 ±        0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.332 ±        2.423    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1082.904 ±      565.659  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     17001.850 ±     8833.281    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5        12.572 ±      108.251    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                    thrpt    5     42657.241 ±     1603.242   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      2037.714 ±       77.283  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5     75192.010 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.030 ±        0.141  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         1.101 ±        5.171    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      2042.093 ±        0.869  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     75359.379 ±     2819.695    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        30.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        26.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                      thrpt    5    128669.751 ±     6833.621   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                       thrpt    5       570.977 ±       30.186  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                  thrpt    5      6984.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5       605.402 ±      580.617  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      7412.374 ±     7194.619    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         1.617 ±       13.926    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                            thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                             thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                               thrpt    5    165609.574 ±     7854.459   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                thrpt    5       245.786 ±       11.699  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       268.553 ±      578.081  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      2563.552 ±     5519.086    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                     thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                      thrpt    5        17.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                              thrpt    5    724038.732 ±    87152.780   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       898.131 ±      107.633  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   thrpt    5         0.020 ±        0.124  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              thrpt    5         0.044 ±        0.278    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       946.053 ±      571.040  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      2054.120 ±     1180.567    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         1.703 ±       14.659    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                      thrpt    5    770697.652 ±     1983.880   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                   thrpt    5    189229.315 ±     5772.271   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5       616.444 ±       18.728  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5       604.207 ±      578.024  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      5026.635 ±     4813.938    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                         thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        38.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                   thrpt    5    122508.482 ±     5372.448   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1506.833 ±       65.417  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5     19360.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.023 ±        0.196  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.300 ±        2.504    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      1494.939 ±      727.327  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19203.776 ±     9166.200    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         8.691 ±       74.835    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                         thrpt    5        22.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                          thrpt    5        28.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                            thrpt    5    162550.583 ±     6476.344   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5       867.480 ±       34.610  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.015 ±        0.079  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.144 ±        0.775    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5       877.728 ±      706.485  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5      8507.955 ±     7021.456    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         7.883 ±       67.878    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        41.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                           thrpt    5    314718.085 ±     6257.720   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       611.039 ±       12.030  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       606.659 ±      580.379  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      3035.228 ±     2917.227    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        27.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                thrpt    5     61228.470 ±     3176.327   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2584.274 ±      132.900  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     66432.007 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.007 ±        0.013  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.186 ±        0.335    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2586.841 ±      717.988  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     66537.061 ±    20595.583    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        38.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                  thrpt    5    181171.957 ±     5988.873   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       623.418 ±       20.351  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      5416.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       606.693 ±      580.386  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5      5268.089 ±     5008.074    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                        thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                         thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                           thrpt    5    301618.643 ±    15868.852   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       297.407 ±       15.608  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       269.092 ±      579.240  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5      1406.993 ±     3029.984    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                          thrpt    5   1500959.769 ±    96938.322   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1113.863 ±       71.755  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.026 ±        0.213  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.027 ±        0.221    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5      1151.872 ±      710.123  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5      1209.302 ±      785.198    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.855 ±        7.363    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        17.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   1588143.406 ±    99118.128   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                               thrpt    5    291115.541 ±     6512.742   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       791.631 ±       17.952  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.006 ±        0.053  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.033 ±        0.285    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       808.673 ±      703.657  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      4375.584 ±     3882.050    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        6.438  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         5.781 ±       34.920    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        46.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                thrpt    5      4319.634 ±      173.143   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5       852.429 ±       34.294  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5    310616.100 ±        0.022    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.041 ±        0.354  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5        14.867 ±      128.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5       876.540 ±      718.243  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5    319717.746 ±   267922.028    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                    thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                               thrpt    5       385.535 ±     2316.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                      thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                       thrpt    5        38.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                         thrpt    5      4385.219 ±      127.997   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       824.303 ±       24.033  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5    295816.094 ±        0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.007 ±        0.057  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         2.328 ±       20.042    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       874.843 ±      716.445  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5    313886.718 ±   255526.893    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         1.465 ±        7.117  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5       525.929 ±     2554.492    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                               thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                thrpt    5        49.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                        thrpt    5     29866.133 ±     1194.613   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       507.552 ±       20.345  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5     26744.015 ±        0.008    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       538.281 ±      709.619  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     28340.245 ±    37092.630    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         8.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        26.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                             thrpt    5      3681.468 ±      104.714   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       939.818 ±       26.631  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5    401792.216 ±        0.889    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.006 ±        0.040  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         2.781 ±       17.153    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       944.153 ±      569.168  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5    403339.144 ±   235531.089    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.199 ±        7.566  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5       509.954 ±     3206.448    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                   thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                    thrpt    5        46.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                               thrpt    5     14062.454 ±      620.245   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5       782.848 ±       35.354  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5     87626.987 ±      115.213    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.046 ±        0.394  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         5.120 ±       44.082    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5       808.426 ±      717.018  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     90519.094 ±    80768.945    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5       118.990 ±      720.099    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                     thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                      thrpt    5        40.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                        thrpt    5     16182.897 ±     1453.185   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       838.349 ±       75.070  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5     81536.025 ±        0.056    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.020 ±        0.108  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         1.930 ±       10.334    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       808.249 ±      706.593  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5     78595.762 ±    68030.830    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         1.199 ±        7.567  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5       117.459 ±      742.043    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        42.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                       thrpt    5    261847.698 ±    19251.080   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       923.586 ±       67.693  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'            thrpt    5         0.039 ±        0.283  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm       thrpt    5         0.227 ±        1.657    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       945.681 ±      570.692  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5      5696.745 ±     3692.565    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         5.609 ±       40.036    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        33.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5    275748.970 ±     2807.340   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                            thrpt    5     14876.552 ±     1324.560   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       832.187 ±       65.052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5     88045.601 ±     3499.228    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.048 ±        0.411  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         4.855 ±       41.806    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       875.695 ±      718.173  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5     92620.278 ±    75252.124    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5        98.789 ±      850.604    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                   thrpt    5        44.000                     ms
[info] ArraysBenchmark.readCirce                                                                               thrpt    5    832737.966 ±    46007.953   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                                thrpt    5      2683.576 ±      148.036  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                                           thrpt    5      5072.000 ±        0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.003 ±        0.009  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.006 ±        0.017    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          thrpt    5      2654.835 ±      584.630  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5      5018.221 ±     1119.814    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                                     thrpt    5        39.000                 counts
[info] ArraysBenchmark.readCirce:·gc.time                                                                      thrpt    5        32.000                     ms
[info] ArraysBenchmark.readJacksonScala                                                                        thrpt    5   1378623.706 ±    40248.230   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                                         thrpt    5      1296.404 ±       38.038  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    thrpt    5      1480.000 ±        0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.026 ±        0.137  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.030 ±        0.157    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   thrpt    5      1288.570 ±      593.236  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      1470.269 ±      648.597    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.933 ±        6.690  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         1.075 ±        7.718    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                              thrpt    5        19.000                 counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                               thrpt    5        37.000                     ms
[info] ArraysBenchmark.readJsoniterScala                                                                       thrpt    5   7557531.794 ±   465926.015   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                                        thrpt    5      1882.390 ±      117.368  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   thrpt    5       392.000 ±        0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.034 ±        0.265  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.007 ±        0.055    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1906.290 ±      717.942  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       396.955 ±      146.483    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                                             thrpt    5        28.000                 counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                              thrpt    5        22.000                     ms
[info] ArraysBenchmark.readPlayJson                                                                            thrpt    5    289256.249 ±     9488.970   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                                             thrpt    5      1718.863 ±       57.406  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        thrpt    5      9352.001 ±        0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.035 ±        0.299  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.192 ±        1.629    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       thrpt    5      1765.722 ±      596.154  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      9608.264 ±     3305.130    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                thrpt    5         0.933 ±        8.030  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           thrpt    5         5.106 ±       43.962    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                                  thrpt    5        26.000                 counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                                   thrpt    5        40.000                     ms
[info] ArraysBenchmark.writeCirce                                                                              thrpt    5    978753.810 ±    47767.322   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                               thrpt    5      2104.633 ±      103.996  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                                          thrpt    5      3384.000 ±        0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.036 ±        0.291  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.058 ±        0.463    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         thrpt    5      2110.007 ±      587.899  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      3392.491 ±      915.331    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         1.061 ±        9.134    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                                    thrpt    5        31.000                 counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                                     thrpt    5        27.000                     ms
[info] ArraysBenchmark.writeJacksonScala                                                                       thrpt    5   2882882.571 ±    79337.764   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                                        thrpt    5      1641.276 ±       45.852  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5       896.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.012 ±        0.094  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.007 ±        0.051    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1630.100 ±      579.617  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       890.173 ±      327.815    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.932 ±        8.028  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.514 ±        4.427    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                                             thrpt    5        24.000                 counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                              thrpt    5        34.000                     ms
[info] ArraysBenchmark.writeJsoniterScala                                                                      thrpt    5  13899505.155 ±   537172.951   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       thrpt    5       847.681 ±       32.779  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5        96.000 ±        0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.018 ±        0.099  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.002 ±        0.011    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5       878.089 ±      712.922  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5        99.315 ±       77.901    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        5.318  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.106 ±        0.610    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                                            thrpt    5        13.000                 counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                                             thrpt    5        31.000                     ms
[info] ArraysBenchmark.writePlayJson                                                                           thrpt    5    444093.172 ±    19993.536   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                                            thrpt    5      1543.857 ±       69.590  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       thrpt    5      5472.001 ±        0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.039 ±        0.336  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.140 ±        1.193    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1560.220 ±      699.136  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      5532.622 ±     2568.366    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.066 ±        7.822  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         3.787 ±       27.719    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                                 thrpt    5        23.000                 counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                                  thrpt    5        42.000                     ms
[info] BitSetsBenchmark.readJacksonScala                                                                       thrpt    5   1966507.742 ±   140130.978   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                                        thrpt    5      1249.362 ±       88.538  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   thrpt    5      1000.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.014 ±        0.122  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.011 ±        0.096    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  thrpt    5      1219.719 ±      723.337  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             thrpt    5       975.700 ±      557.553    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.933 ±        8.030  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         0.753 ±        6.486    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                                             thrpt    5        18.000                 counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                              thrpt    5        43.000                     ms
[info] BitSetsBenchmark.readJsoniterScala                                                                      thrpt    5   8596555.443 ±   218140.216   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       thrpt    5      1136.033 ±       28.488  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  thrpt    5       208.000 ±        0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.033 ±        0.286  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.006 ±        0.053    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1152.639 ±      711.107  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       211.142 ±      133.241    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.666 ±        5.735  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.121 ±        1.038    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                                            thrpt    5        17.000                 counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                                             thrpt    5        29.000                     ms
[info] BitSetsBenchmark.readPlayJson                                                                           thrpt    5    333090.535 ±    24247.241   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                                            thrpt    5      1535.657 ±      112.832  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       thrpt    5      7256.001 ±        0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.015 ±        0.131  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.075 ±        0.635    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      thrpt    5      1561.579 ±      732.901  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      7380.171 ±     3493.591    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.932 ±        6.688  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         4.520 ±       32.499    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                                 thrpt    5        23.000                 counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                                  thrpt    5        43.000                     ms
[info] BitSetsBenchmark.writeJacksonScala                                                                      thrpt    5   2283401.736 ±   173100.989   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       thrpt    5      1206.945 ±       91.639  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  thrpt    5       832.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.015 ±        0.122  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.010 ±        0.082    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 thrpt    5      1218.600 ±      694.633  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            thrpt    5       840.440 ±      487.327    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         0.635 ±        5.471    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                                            thrpt    5        18.000                 counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                                             thrpt    5        40.000                     ms
[info] BitSetsBenchmark.writeJsoniterScala                                                                     thrpt    5   6421391.138 ±   193539.841   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      thrpt    5       979.204 ±       29.487  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 thrpt    5       240.000 ±        0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.019 ±        0.161  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.005 ±        0.040    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                thrpt    5       947.117 ±      589.228  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5       232.275 ±      147.622    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        7.821  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         0.260 ±        1.905    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                                           thrpt    5        14.000                 counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                                            thrpt    5        30.000                     ms
[info] BitSetsBenchmark.writePlayJson                                                                          thrpt    5    570870.162 ±    42353.357   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                                           thrpt    5      1653.778 ±      123.095  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      thrpt    5      4560.001 ±        0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.014 ±        0.112  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.039 ±        0.305    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     thrpt    5      1630.250 ±      616.288  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      4489.872 ±     1422.063    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              thrpt    5         1.066 ±        9.175  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         3.038 ±       26.155    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                                thrpt    5        24.000                 counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                                 thrpt    5        36.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                        thrpt    5    682259.853 ±    12354.646   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      2219.437 ±       40.183  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5      5120.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.025 ±        0.193  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.058 ±        0.446    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      2178.476 ±      716.857  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5026.589 ±     1712.736    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                              thrpt    5        32.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                               thrpt    5        25.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                  thrpt    5   5252209.520 ±   283834.603   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       320.405 ±       17.175  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       333.780 ±        0.290  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       100.024 ±        5.504    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        23.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                 thrpt    5    764577.274 ±    52803.601   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       948.141 ±       65.672  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.037 ±        0.272  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.076 ±        0.554    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       945.525 ±      587.773  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      1943.782 ±     1135.898    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     thrpt    5         1.066 ±        7.821  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         2.177 ±       15.921    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                       thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        44.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                thrpt    5   7638964.260 ±    66510.089   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       349.406 ±        3.047  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       337.142 ±        1.147  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5        69.473 ±        0.734    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        13.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                     thrpt    5    256180.489 ±     7046.404   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1415.506 ±       39.217  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5      8696.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.034 ±        0.220  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.206 ±        1.338    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1423.305 ±      572.490  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      8741.264 ±     3361.887    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         1.066 ±        9.178  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         6.497 ±       55.941    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                           thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                            thrpt    5        45.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                        thrpt    5      7715.552 ±      356.210   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                         thrpt    5      1817.521 ±       82.658  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                    thrpt    5    370784.055 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.135 ±        0.162  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5        27.622 ±       34.500    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   thrpt    5      1768.440 ±      590.308  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    361106.230 ±   138716.142    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.666 ±        5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       135.457 ±     1166.329    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                              thrpt    5        26.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                               thrpt    5        29.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                  thrpt    5     10877.806 ±     1352.632   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                   thrpt    5       250.779 ±       31.295  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              thrpt    5     36280.039 ±        0.007    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                             thrpt    5       266.977 ±      574.688  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     39017.277 ±    84108.754    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                        thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                         thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                 thrpt    5     12964.230 ±      515.382   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                  thrpt    5       328.539 ±       13.103  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             thrpt    5     39888.032 ±        0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            thrpt    5       335.698 ±        0.096  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     40760.707 ±     1631.939    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                       thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                        thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                thrpt    5     22785.283 ±     1200.459   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                 thrpt    5       389.366 ±       20.309  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            thrpt    5     26896.019 ±        0.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           thrpt    5       404.458 ±      580.480  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     27914.428 ±    39573.954    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                      thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                       thrpt    5        18.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                     thrpt    5      2039.798 ±       74.212   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                      thrpt    5      1296.376 ±       47.720  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 thrpt    5   1000113.245 ±        8.966    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.030 ±        0.111  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5        23.209 ±       85.652    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                thrpt    5      1354.533 ±       36.668  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           thrpt    5   1045035.015 ±    38285.563    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5       715.752 ±     6162.837    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                           thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                            thrpt    5        46.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                       thrpt    5      7248.569 ±      219.170   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                        thrpt    5      1484.634 ±       45.714  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                   thrpt    5    322368.059 ±        0.017    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.080 ±        0.275  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5        17.377 ±       59.568    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  thrpt    5      1426.806 ±      592.214  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             thrpt    5    309987.669 ±   136975.369    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.666 ±        5.734  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5       145.252 ±     1250.666    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                             thrpt    5        21.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                              thrpt    5        29.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                 thrpt    5     53661.577 ±     3625.794   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  thrpt    5       501.642 ±       33.689  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             thrpt    5     14712.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                            thrpt    5       467.102 ±      703.049  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                       thrpt    5     13706.989 ±    20712.266    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.977 ±       34.240    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                       thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                        thrpt    5        34.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc                                                         thrpt    5     56244.610 ±     1174.894   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                          thrpt    5       102.914 ±        2.163  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                     thrpt    5      2880.007 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                    thrpt    5       134.009 ±      706.598  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                               thrpt    5      3768.955 ±    19873.685    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.count                                               thrpt    5         2.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                thrpt    5        10.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                thrpt    5     35443.899 ±     3450.940   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                 thrpt    5       513.571 ±       50.130  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            thrpt    5     22807.809 ±        0.356    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           thrpt    5       536.963 ±      708.736  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      thrpt    5     23913.350 ±    32235.825    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         5.730 ±       49.336    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                      thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                       thrpt    5        36.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                               thrpt    5     55240.898 ±     2883.783   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                thrpt    5       417.192 ±       21.731  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5     11888.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5       403.615 ±      579.097  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5     11492.517 ±    16311.641    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                     thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                      thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                       thrpt    5     69500.320 ±     6357.421   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        thrpt    5         1.060 ±        0.096  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   thrpt    5        24.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                    thrpt    5      4825.206 ±      267.615   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                     thrpt    5      1456.999 ±       81.145  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                thrpt    5    475279.913 ±        3.392    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.016 ±        0.048  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         5.355 ±       15.579    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1491.691 ±      721.285  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5    486462.444 ±   228133.403    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5       304.692 ±     2623.491    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                          thrpt    5        22.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                           thrpt    5        44.000                     ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                               thrpt    5   4925541.426 ±    50242.329   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                thrpt    5      1476.963 ±       15.307  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           thrpt    5       472.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.027 ±        0.137  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.009 ±        0.044    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                          thrpt    5      1494.865 ±      704.126  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       477.717 ±      224.783    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.735  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.213 ±        1.830    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                                     thrpt    5        22.000                 counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                                      thrpt    5        26.000                     ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                                    thrpt    5    295822.519 ±    19062.018   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                                     thrpt    5      1634.591 ±      104.993  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                thrpt    5      8696.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.018 ±        0.151  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.097 ±        0.819    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                               thrpt    5      1629.877 ±      577.407  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      8676.052 ±     3263.967    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.933 ±        8.030  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         5.031 ±       43.319    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                                          thrpt    5        24.000                 counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                                           thrpt    5        39.000                     ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                              thrpt    5   3092515.940 ±    59613.021   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                               thrpt    5       502.941 ±        9.568  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5       256.000 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       471.036 ±      709.057  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5       239.967 ±      363.781    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                  thrpt    5         0.133 ±        1.147  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             thrpt    5         0.068 ±        0.584    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                                    thrpt    5         7.000                 counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                                     thrpt    5        22.000                     ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                                   thrpt    5    353366.409 ±    20284.414   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                                    thrpt    5      1386.473 ±       79.497  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                               thrpt    5      6176.001 ±        0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.040 ±        0.270  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.181 ±        1.224    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1355.976 ±       30.561  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      6040.838 ±      226.218    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        8.030  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         4.222 ±       36.357    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                                         thrpt    5        20.000                 counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                                          thrpt    5        39.000                     ms
[info] IntBenchmark.readCirce                                                                                  thrpt    5   6419903.426 ±   107684.532   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                   thrpt    5      3883.350 ±       63.798  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                              thrpt    5       952.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       thrpt    5         0.001 ±        0.002  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             thrpt    5      3880.659 ±      718.429  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        thrpt    5       951.438 ±      185.099    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                        thrpt    5        57.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                         thrpt    5        58.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                            thrpt    5  37403973.639 ±  2883237.761   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                             thrpt    5       380.296 ±       29.403  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       thrpt    5       400.534 ±      574.785  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        16.849 ±       24.060    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                  thrpt    5         6.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                   thrpt    5        31.000                     ms
[info] IntBenchmark.readJacksonScala                                                                           thrpt    5   6959722.952 ±   279150.598   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                            thrpt    5      2617.654 ±      105.183  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.001 ±        0.002  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      thrpt    5      2586.853 ±      718.063  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5       584.928 ±      153.554    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                 thrpt    5        38.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                  thrpt    5        29.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                          thrpt    5  35190625.306 ±   368995.376   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                           thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                             thrpt    5  26479790.331 ±  6330771.883   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                              thrpt    5       942.176 ±      225.384  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                         thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.022 ±        0.187  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.001 ±        0.012    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                        thrpt    5       947.788 ±      589.714  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5        56.532 ±       38.679    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                 thrpt    5         0.666 ±        5.734  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         0.040 ±        0.341    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                   thrpt    5        14.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                    thrpt    5        27.000                     ms
[info] IntBenchmark.readPlayJson                                                                               thrpt    5   5933282.508 ±   182354.328   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                thrpt    5      2864.705 ±       86.368  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    thrpt    5         0.002 ±        0.007  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          thrpt    5      2926.972 ±      716.742  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     thrpt    5       776.385 ±      178.319    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                     thrpt    5        43.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                      thrpt    5        34.000                     ms
[info] IntBenchmark.writeCirce                                                                                 thrpt    5  21373664.871 ±   657301.828   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                  thrpt    5      1955.675 ±       60.223  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                             thrpt    5       144.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.024 ±        0.183  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.002 ±        0.014    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      1973.511 ±      583.676  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5       145.369 ±       45.806    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.734  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         0.050 ±        0.428    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                       thrpt    5        29.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                        thrpt    5        26.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                           thrpt    5  52480568.338 ±  1066703.176   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            thrpt    5      1600.506 ±       32.509  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.125 ±        1.073  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.004 ±        0.032    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      thrpt    5      1625.312 ±      569.423  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5        48.740 ±       16.888    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                               thrpt    5         1.332 ±       11.469  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         0.040 ±        0.347    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                 thrpt    5        24.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                  thrpt    5        47.000                     ms
[info] IntBenchmark.writeDslJsonJavaPrealloc                                                                   thrpt    5  72355611.006 ±  2766420.614   ops/s
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                                    thrpt    5       735.556 ±       28.326  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                               thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen                                              thrpt    5       734.208 ±      574.759  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        15.977 ±       12.680    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.017 ±        0.150    B/op
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.count                                                         thrpt    5        11.000                 counts
[info] IntBenchmark.writeDslJsonJavaPrealloc:·gc.time                                                          thrpt    5        52.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                          thrpt    5  10874636.228 ±   660496.651   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                           thrpt    5      2155.565 ±      131.568  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.025 ±        0.203  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.004 ±        0.029    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5      2177.564 ±      714.111  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5       315.010 ±       90.548    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.799 ±        6.881  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         0.115 ±        0.993    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                thrpt    5        32.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                 thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                         thrpt    5  41174370.295 ± 14535506.867   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          thrpt    5       837.008 ±      295.319  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.033 ±        0.200  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.001 ±        0.009    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5       810.142 ±      702.486  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5        30.879 ±       21.261    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.932 ±        5.318  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.037 ±        0.219    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                               thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                 thrpt    5  48263856.126 ±    41263.901   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                            thrpt    5  39612273.879 ±  2555164.458   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                             thrpt    5      2013.456 ±      130.464  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                        thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.003 ±        0.008  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                       thrpt    5      1974.233 ±      586.764  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5        78.478 ±       24.913    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                  thrpt    5        29.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                   thrpt    5        27.000                     ms
[info] IntBenchmark.writePlayJson                                                                              thrpt    5   2097939.691 ±    51817.583   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                               thrpt    5      1717.019 ±       42.480  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          thrpt    5      1288.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.039 ±        0.306  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.029 ±        0.229    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1699.740 ±       21.305  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      1275.088 ±       40.279    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         0.597 ±        5.140    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                    thrpt    5        25.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                     thrpt    5        29.000                     ms
[info] IterablesBenchmark.readCirce                                                                            thrpt    5    566892.172 ±    17452.558   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                                             thrpt    5      2039.932 ±       61.881  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                        thrpt    5      5664.001 ±        0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 thrpt    5         0.019 ±        0.152  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            thrpt    5         0.052 ±        0.422    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       thrpt    5      2042.224 ±        1.631  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  thrpt    5      5670.649 ±      174.013    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                                  thrpt    5        30.000                 counts
[info] IterablesBenchmark.readCirce:·gc.time                                                                   thrpt    5        24.000                     ms
[info] IterablesBenchmark.readJacksonScala                                                                     thrpt    5    576644.801 ±    18639.782   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                                      thrpt    5       688.761 ±       21.979  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 thrpt    5      1880.001 ±        0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                thrpt    5       738.579 ±      578.501  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      2018.063 ±     1638.949    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         thrpt    5         0.799 ±        6.882  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    thrpt    5         2.191 ±       18.868    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                                           thrpt    5        11.000                 counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                                            thrpt    5        52.000                     ms
[info] IterablesBenchmark.readJsoniterScala                                                                    thrpt    5   3463864.926 ±   167931.711   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     thrpt    5      1373.339 ±       66.355  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                thrpt    5       624.000 ±        0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.019 ±        0.155  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.009 ±        0.071    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1358.245 ±       22.517  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       617.209 ±       27.564    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.737  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         0.307 ±        2.641    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                                          thrpt    5        20.000                 counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                                           thrpt    5        28.000                     ms
[info] IterablesBenchmark.readPlayJson                                                                         thrpt    5    217167.723 ±     7343.037   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                                          thrpt    5      1516.533 ±       51.846  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     thrpt    5     10992.002 ±        0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.011 ±        0.082  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.076 ±        0.587    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    thrpt    5      1560.280 ±      707.475  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               thrpt    5     11310.060 ±     5150.190    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             thrpt    5         1.199 ±        7.781  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         8.657 ±       55.958    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                               thrpt    5        23.000                 counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                                thrpt    5        43.000                     ms
[info] IterablesBenchmark.writeCirce                                                                           thrpt    5    826511.634 ±    18159.123   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                                            thrpt    5      1852.639 ±       39.990  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       thrpt    5      3528.001 ±        0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.019 ±        0.142  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.037 ±        0.272    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1836.725 ±      722.715  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      3496.682 ±     1323.765    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.737  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.278 ±       11.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                                 thrpt    5        27.000                 counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                                  thrpt    5        39.000                     ms
[info] IterablesBenchmark.writeJacksonScala                                                                    thrpt    5   1326930.609 ±    86426.239   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     thrpt    5       795.960 ±       51.927  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                thrpt    5       944.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.041 ±        0.355  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.048 ±        0.412    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       806.915 ±      700.148  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5       957.391 ±      837.441    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         1.333 ±        7.258  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.568 ±        8.477    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                                          thrpt    5        12.000                 counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                                           thrpt    5        50.000                     ms
[info] IterablesBenchmark.writeJsoniterScala                                                                   thrpt    5   6395442.890 ±   160474.580   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    thrpt    5       715.130 ±       18.304  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5       176.000 ±        0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       740.151 ±      578.825  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       182.284 ±      146.114    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.933 ±        6.690  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.229 ±        1.641    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                                         thrpt    5        11.000                 counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                                          thrpt    5        33.000                     ms
[info] IterablesBenchmark.writePlayJson                                                                        thrpt    5    481828.836 ±    21080.841   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                                         thrpt    5      1633.496 ±       71.800  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    thrpt    5      5336.001 ±        0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.019 ±        0.149  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.062 ±        0.482    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1697.212 ±       39.313  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5      5544.497 ±      175.176    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        7.821  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         3.524 ±       25.945    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                              thrpt    5        25.000                 counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                               thrpt    5        40.000                     ms
[info] MapsBenchmark.readCirce                                                                                 thrpt    5    596590.335 ±    25775.330   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                                  thrpt    5      2064.883 ±       90.141  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                                             thrpt    5      5448.001 ±        0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      thrpt    5         0.026 ±        0.192  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 thrpt    5         0.068 ±        0.504    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            thrpt    5      2109.574 ±     1093.394  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       thrpt    5      5560.643 ±     2698.535    B/op
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                thrpt    5         1.752 ±       15.081    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                                       thrpt    5        31.000                 counts
[info] MapsBenchmark.readCirce:·gc.time                                                                        thrpt    5        29.000                     ms
[info] MapsBenchmark.readJacksonScala                                                                          thrpt    5    598116.602 ±    39431.981   ops/s
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate                                                           thrpt    5       924.158 ±       61.153  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      thrpt    5      2432.001 ±        0.001    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.043 ±        0.367  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.109 ±        0.942    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     thrpt    5       943.538 ±      585.702  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2483.726 ±     1552.726    B/op
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.932 ±        8.029  MB/sec
[info] MapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         2.447 ±       21.066    B/op
[info] MapsBenchmark.readJacksonScala:·gc.count                                                                thrpt    5        14.000                 counts
[info] MapsBenchmark.readJacksonScala:·gc.time                                                                 thrpt    5        50.000                     ms
[info] MapsBenchmark.readJsoniterScala                                                                         thrpt    5   5055046.144 ±   299939.452   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          thrpt    5      1259.093 ±       74.300  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     thrpt    5       392.000 ±        0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.026 ±        0.135  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.008 ±        0.042    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    thrpt    5      1289.564 ±      592.925  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               thrpt    5       401.925 ±      197.746    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.734  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         0.204 ±        1.754    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                               thrpt    5        19.000                 counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                                thrpt    5        29.000                     ms
[info] MapsBenchmark.readPlayJson                                                                              thrpt    5    318706.021 ±    20607.091   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                               thrpt    5      1738.091 ±      112.047  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          thrpt    5      8584.001 ±        0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   thrpt    5         0.015 ±        0.110  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              thrpt    5         0.073 ±        0.537    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         thrpt    5      1766.438 ±      595.270  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    thrpt    5      8729.745 ±     3215.635    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  thrpt    5         0.932 ±        8.028  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             thrpt    5         4.656 ±       40.089    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                                    thrpt    5        26.000                 counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                                     thrpt    5        38.000                     ms
[info] MapsBenchmark.writeCirce                                                                                thrpt    5    438440.239 ±    12968.893   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                                 thrpt    5      1091.905 ±       32.305  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            thrpt    5      3920.001 ±        0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     thrpt    5         0.035 ±        0.205  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                thrpt    5         0.126 ±        0.733    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           thrpt    5      1151.273 ±      716.464  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      thrpt    5      4132.272 ±     2541.340    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    thrpt    5         0.666 ±        5.735  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               thrpt    5         2.423 ±       20.862    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                                      thrpt    5        17.000                 counts
[info] MapsBenchmark.writeCirce:·gc.time                                                                       thrpt    5        36.000                     ms
[info] MapsBenchmark.writeJsoniterScala                                                                        thrpt    5   3159428.641 ±   214113.411   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         thrpt    5       578.154 ±       39.312  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    thrpt    5       288.000 ±        0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   thrpt    5       605.660 ±      579.538  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              thrpt    5       301.762 ±      289.470    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            thrpt    5         0.133 ±        1.147  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         0.066 ±        0.569    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                              thrpt    5         9.000                 counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                               thrpt    5        27.000                     ms
[info] MapsBenchmark.writePlayJson                                                                             thrpt    5    337442.745 ±    10024.665   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                              thrpt    5      1219.516 ±       36.273  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         thrpt    5      5688.001 ±        0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  thrpt    5         0.039 ±        0.338  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             thrpt    5         0.183 ±        1.564    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        thrpt    5      1219.020 ±      722.698  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   thrpt    5      5688.897 ±     3460.363    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 thrpt    5         1.066 ±        6.438  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            thrpt    5         5.002 ±       30.352    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                                   thrpt    5        18.000                 counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                                    thrpt    5        41.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                      thrpt    5   2034743.710 ±    68954.976   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                       thrpt    5      2906.079 ±       98.860  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                  thrpt    5      2248.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.002 ±        0.004  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.002 ±        0.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                 thrpt    5      2927.197 ±      718.659  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      2263.500 ±      484.465    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                            thrpt    5        43.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                             thrpt    5        34.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                thrpt    5    849808.648 ±    52144.990   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                 thrpt    5       505.372 ±       31.046  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            thrpt    5       936.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                           thrpt    5       466.965 ±      704.983  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       863.252 ±     1282.107    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                    thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                               thrpt    5         0.500 ±        2.634    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                      thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                       thrpt    5        33.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                               thrpt    5    309608.544 ±     5774.304   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                thrpt    5       596.387 ±       11.368  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           thrpt    5      3032.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                          thrpt    5       605.186 ±      578.539  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      3079.098 ±     2971.376    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.266 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         1.355 ±        7.143    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                     thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                      thrpt    5        39.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                              thrpt    5    766790.378 ±    58857.178   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                               thrpt    5       576.730 ±       44.262  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         thrpt    5       606.589 ±      580.279  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    thrpt    5      1244.614 ±     1182.316    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                    thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                     thrpt    5        23.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                          thrpt    5   4023356.647 ±    82349.637   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                           thrpt    5      1288.325 ±       26.475  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                      thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.038 ±        0.309  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.015 ±        0.121    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                     thrpt    5      1290.129 ±      600.893  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                thrpt    5       504.842 ±      239.435    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                              thrpt    5         0.666 ±        5.737  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.261 ±        2.249    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                 thrpt    5        25.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                    thrpt    5   7608793.756 ±   572295.557   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                     thrpt    5       618.744 ±       46.290  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                               thrpt    5       606.645 ±      580.421  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                          thrpt    5       125.761 ±      123.382    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                          thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                           thrpt    5        29.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                   thrpt    5    188878.239 ±     8433.088   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                    thrpt    5      1283.572 ±       57.459  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                               thrpt    5     10696.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.034 ±        0.292  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.286 ±        2.459    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              thrpt    5      1286.374 ±      571.483  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     10726.765 ±     5003.169    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.332 ±        7.476  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        11.175 ±       63.037    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                         thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                          thrpt    5        47.000                     ms
[info] MutableIterablesBenchmark.readCirce                                                                     thrpt    5    665585.816 ±    10886.023   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                                      thrpt    5      2534.071 ±       42.129  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                                 thrpt    5      5992.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                          thrpt    5         0.003 ±        0.006  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     thrpt    5         0.008 ±        0.013    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                thrpt    5      2518.951 ±      717.634  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                           thrpt    5      5956.048 ±     1680.463    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                                           thrpt    5        37.000                 counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                                            thrpt    5        29.000                     ms
[info] MutableIterablesBenchmark.readJsoniterScala                                                             thrpt    5   3297014.530 ±   241691.094   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                              thrpt    5      2128.378 ±      155.940  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         thrpt    5      1016.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.014 ±        0.116  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.007 ±        0.054    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                        thrpt    5      2110.508 ±      586.197  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1007.723 ±      286.074    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                                   thrpt    5        31.000                 counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                                    thrpt    5        25.000                     ms
[info] MutableIterablesBenchmark.readPlayJson                                                                  thrpt    5    239553.894 ±    20159.453   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                                   thrpt    5      1727.911 ±      145.078  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              thrpt    5     11352.002 ±        0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.023 ±        0.186  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.147 ±        1.207    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                             thrpt    5      1765.830 ±      597.074  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     11602.399 ±     3852.682    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                      thrpt    5         1.066 ±        9.178  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         7.284 ±       62.716    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                                        thrpt    5        26.000                 counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                                         thrpt    5        49.000                     ms
[info] MutableIterablesBenchmark.writeCirce                                                                    thrpt    5    772628.447 ±    38557.470   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                                     thrpt    5      1641.650 ±       82.552  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                                thrpt    5      3344.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.028 ±        0.139  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.058 ±        0.284    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                               thrpt    5      1631.293 ±      581.467  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      3322.291 ±     1146.613    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.384 ±       11.915    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                                          thrpt    5        24.000                 counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                                           thrpt    5        29.000                     ms
[info] MutableIterablesBenchmark.writeJacksonScala                                                             thrpt    5   1368191.785 ±    79854.010   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                              thrpt    5       681.481 ±       39.610  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         thrpt    5       784.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                        thrpt    5       738.417 ±      578.298  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       849.444 ±      660.459    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.932 ±        6.688  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.067 ±        7.656    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                                   thrpt    5        11.000                 counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                                    thrpt    5        51.000                     ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                                            thrpt    5   4494397.402 ±   124058.820   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             thrpt    5       342.634 ±        9.526  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5       120.000 ±        0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                       thrpt    5       403.779 ±      579.174  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       141.336 ±      201.235    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                                  thrpt    5         6.000                 counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                                   thrpt    5        18.000                     ms
[info] MutableIterablesBenchmark.writePlayJson                                                                 thrpt    5    480636.899 ±    22628.191   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                                  thrpt    5      1609.866 ±       76.298  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             thrpt    5      5272.001 ±        0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      thrpt    5         0.016 ±        0.127  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 thrpt    5         0.054 ±        0.415    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                            thrpt    5      1629.228 ±      577.252  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                       thrpt    5      5338.256 ±     2002.394    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                     thrpt    5         0.932 ±        6.688  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                thrpt    5         3.107 ±       22.368    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                                       thrpt    5        24.000                 counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                                        thrpt    5        41.000                     ms
[info] MutableMapsBenchmark.readJacksonScala                                                                   thrpt    5    579616.851 ±    37080.206   ops/s
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate                                                    thrpt    5       963.318 ±       61.644  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               thrpt    5      2616.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.052 ±        0.352  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.143 ±        0.982    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       944.366 ±      588.273  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      2568.274 ±     1679.459    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableMapsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         2.958 ±       21.797    B/op
[info] MutableMapsBenchmark.readJacksonScala:·gc.count                                                         thrpt    5        14.000                 counts
[info] MutableMapsBenchmark.readJacksonScala:·gc.time                                                          thrpt    5        47.000                     ms
[info] MutableMapsBenchmark.readJsoniterScala                                                                  thrpt    5   3086128.357 ±    52238.373   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   thrpt    5      1458.669 ±       24.479  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       744.000 ±        0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.021 ±        0.177  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.010 ±        0.090    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5      1426.811 ±      592.007  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       727.501 ±      288.698    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.341 ±        2.937    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                                        thrpt    5        21.000                 counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                                         thrpt    5        26.000                     ms
[info] MutableMapsBenchmark.readPlayJson                                                                       thrpt    5    281650.892 ±     8174.947   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                                        thrpt    5      1505.953 ±       42.952  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   thrpt    5      8416.001 ±        0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.013 ±        0.110  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.074 ±        0.615    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1493.067 ±      725.924  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      8341.347 ±     3943.172    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         5.959 ±       43.655    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                                             thrpt    5        22.000                 counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                              thrpt    5        43.000                     ms
[info] MutableMapsBenchmark.writeCirce                                                                         thrpt    5    434664.814 ±    23341.889   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                                          thrpt    5      1078.095 ±       57.493  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     thrpt    5      3904.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              thrpt    5         0.025 ±        0.190  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         thrpt    5         0.092 ±        0.693    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                    thrpt    5      1083.837 ±      597.790  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                               thrpt    5      3922.400 ±     2051.266    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                             thrpt    5         0.666 ±        5.737  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                        thrpt    5         2.464 ±       21.213    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                               thrpt    5        16.000                 counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                                thrpt    5        33.000                     ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                                 thrpt    5   2674983.984 ±    35160.522   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  thrpt    5       543.821 ±        6.968  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             thrpt    5       320.000 ±        0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                            thrpt    5       538.176 ±      709.359  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       thrpt    5       316.713 ±      417.824    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                                       thrpt    5         8.000                 counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                                        thrpt    5        25.000                     ms
[info] MutableMapsBenchmark.writePlayJson                                                                      thrpt    5    352953.737 ±    25075.668   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                                       thrpt    5      1340.070 ±       94.849  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  thrpt    5      5976.001 ±        0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           thrpt    5         0.042 ±        0.360  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      thrpt    5         0.184 ±        1.580    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                 thrpt    5      1354.966 ±       34.830  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                            thrpt    5      6043.552 ±      304.622    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                          thrpt    5         1.066 ±        9.178  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                     thrpt    5         4.882 ±       42.032    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                                            thrpt    5        20.000                 counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                                             thrpt    5        44.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                           thrpt    5    611052.088 ±    31851.292   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1882.032 ±       97.083  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5      4848.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.021 ±        0.166  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         0.055 ±        0.431    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1904.070 ±      711.729  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5      4910.027 ±     2054.495    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5         1.733 ±       14.917    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                 thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                  thrpt    5        29.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                    thrpt    5   1301444.958 ±    73342.621   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       985.579 ±       55.064  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         thrpt    5         0.039 ±        0.334  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    thrpt    5         0.048 ±        0.409    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5      1013.623 ±       26.861  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5      1226.200 ±       96.062    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        thrpt    5         0.932 ±        8.028  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   thrpt    5         1.134 ±        9.763    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                          thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        46.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                   thrpt    5   6108049.311 ±   197086.386   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       186.273 ±        5.949  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       202.355 ±      711.307  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5        52.359 ±      184.063    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5         8.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                        thrpt    5    205118.519 ±     4723.418   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5      1428.536 ±       33.539  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5     10960.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.025 ±        0.155  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         0.189 ±        1.187    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5      1423.677 ±      553.054  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5     10928.316 ±     4529.335    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.066 ±        7.824  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5         8.183 ±       59.962    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                              thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                               thrpt    5        44.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                          thrpt    5    826668.753 ±    48797.153   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                           thrpt    5      1289.884 ±       75.933  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                      thrpt    5      2456.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                               thrpt    5         0.041 ±        0.348  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          thrpt    5         0.076 ±        0.649    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                     thrpt    5      1288.717 ±      598.366  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                thrpt    5      2453.449 ±     1121.937    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                              thrpt    5         0.666 ±        5.734  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                         thrpt    5         1.275 ±       10.977    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                 thrpt    5        39.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                   thrpt    5   2104598.677 ±    78190.744   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       866.407 ±       32.295  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.027 ±        0.235  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5         0.020 ±        0.174    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       875.596 ±      701.396  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5       655.654 ±      540.729    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         1.066 ±        7.821  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5         0.808 ±        5.944    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        47.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                  thrpt    5   5592566.620 ±   375977.502   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       625.377 ±       41.870  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       606.055 ±      580.637  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       170.775 ±      166.100    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.400 ±        1.405  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.113 ±        0.399    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        28.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5   5380509.636 ±    54240.323   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5       328.184 ±        3.482  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                     thrpt    5       336.659 ±        1.449  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                thrpt    5        98.480 ±        1.129    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                              thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.039 ±        0.335    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5         5.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                 thrpt    5        15.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                       thrpt    5    290486.605 ±    16018.496   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                        thrpt    5      1678.807 ±       93.124  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   thrpt    5      9096.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            thrpt    5         0.027 ±        0.227  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       thrpt    5         0.143 ±        1.207    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  thrpt    5      1697.437 ±       38.444  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             thrpt    5      9198.601 ±      591.175    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           thrpt    5         0.933 ±        8.031  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      thrpt    5         5.027 ±       43.280    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                             thrpt    5        25.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                              thrpt    5        38.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                   thrpt    5   4938834.516 ±   242386.425   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      3564.811 ±      175.777  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      1136.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                        thrpt    5         0.001 ±        0.001  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   thrpt    5        ≈ 10⁻³                   B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                              thrpt    5      3608.197 ±      716.719  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                         thrpt    5      1149.587 ±      197.996    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                         thrpt    5        53.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                          thrpt    5        42.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                             thrpt    5   7513275.984 ±   435990.945   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                              thrpt    5       801.960 ±       46.239  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                        thrpt    5       801.720 ±      700.833  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                   thrpt    5       167.767 ±      142.268    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                 thrpt    5         1.333 ±       11.474  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         0.284 ±        2.443    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                   thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                    thrpt    5        55.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                            thrpt    5   4113096.546 ±    39640.154   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      2132.515 ±       20.732  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.017 ±        0.141  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.006 ±        0.054    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                       thrpt    5      2177.731 ±      713.595  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       833.365 ±      276.584    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.306 ±        2.638    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        32.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                           thrpt    5   7612822.389 ±   773241.720   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       812.571 ±       82.539  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                thrpt    5         0.004 ±        0.031  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           thrpt    5         0.001 ±        0.007    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                      thrpt    5       878.318 ±      718.110  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       181.938 ±      155.078    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                               thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          thrpt    5         0.138 ±        1.191    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                thrpt    5   4583961.742 ±   155906.321   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      2469.655 ±       84.303  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.004 ±        0.017  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.001 ±        0.006    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                           thrpt    5      2450.660 ±      586.827  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                      thrpt    5       841.859 ±      229.446    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        36.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                  thrpt    5   3221575.831 ±    48502.866   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5       769.644 ±       11.397  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                       thrpt    5         0.008 ±        0.069  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  thrpt    5         0.004 ±        0.034    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                             thrpt    5       809.665 ±      708.954  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                        thrpt    5       395.471 ±      344.439    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                      thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                 thrpt    5         0.325 ±        2.801    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                        thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                         thrpt    5        37.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                            thrpt    5   7970798.295 ±   439132.333   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             thrpt    5       769.772 ±       41.805  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                       thrpt    5       801.759 ±      708.458  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       158.672 ±      147.580    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                thrpt    5         1.333 ±       11.476  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.269 ±        2.320    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                   thrpt    5        59.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc                                                    thrpt    5   8614715.564 ±    39603.221   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                     thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                                thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                          thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                           thrpt    5   1884788.135 ±    81190.382   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       584.376 ±       25.307  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                      thrpt    5       538.224 ±      709.676  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                 thrpt    5       449.787 ±      596.621    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                          thrpt    5   9466250.697 ±  1211355.192   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       914.288 ±      116.396  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.026 ±        0.206  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.004 ±        0.035    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                     thrpt    5       946.667 ±      588.603  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                thrpt    5       157.724 ±      104.963    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                              thrpt    5         1.199 ±        6.125  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.201 ±        1.051    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5   8069618.092 ±     9144.098   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                               thrpt    5   3097095.935 ±   133734.522   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       991.582 ±       43.055  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.024 ±        0.210  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.012 ±        0.106    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                          thrpt    5       946.529 ±      590.191  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                     thrpt    5       480.846 ±      293.401    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.409 ±        3.521    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                thrpt    5   1461406.861 ±    52682.576   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2421.409 ±       87.833  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2608.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                     thrpt    5         0.002 ±        0.003  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                thrpt    5         0.002 ±        0.004    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                           thrpt    5      2382.501 ±        1.633  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                      thrpt    5      2566.275 ±       92.946    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                      thrpt    5        35.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                       thrpt    5        28.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                          thrpt    5   2706856.655 ±    35517.964   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                           thrpt    5       756.756 ±       10.034  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                     thrpt    5       734.245 ±      574.681  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                thrpt    5       427.104 ±      339.840    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                              thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                         thrpt    5         0.465 ±        4.006    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                 thrpt    5        52.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                         thrpt    5   1086816.732 ±    65825.203   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5       751.212 ±       45.590  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1088.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'              thrpt    5         0.016 ±        0.141  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm         thrpt    5         0.024 ±        0.209    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                    thrpt    5       740.772 ±      577.489  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                               thrpt    5      1072.396 ±      817.141    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                             thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         1.190 ±       10.248    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                        thrpt    5   1666996.183 ±   118557.391   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       466.016 ±       33.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                   thrpt    5       472.020 ±      711.668  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       446.452 ±      682.220    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.126 ±        1.087    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        18.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                             thrpt    5   1237580.434 ±    35778.990   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5       880.599 ±       25.554  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                  thrpt    5         0.042 ±        0.254  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             thrpt    5         0.054 ±        0.321    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                        thrpt    5       876.933 ±      703.743  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                   thrpt    5      1116.450 ±      918.112    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                 thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                            thrpt    5         1.024 ±        8.813    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                               thrpt    5   1755032.564 ±    35531.265   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1427.118 ±       28.721  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                    thrpt    5         0.020 ±        0.167  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               thrpt    5         0.018 ±        0.150    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                          thrpt    5      1493.526 ±      703.081  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                     thrpt    5      1339.408 ±      623.513    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                   thrpt    5         0.666 ±        5.734  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                              thrpt    5         0.596 ±        5.136    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                     thrpt    5        22.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                      thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                         thrpt    5   2907175.339 ±   169366.355   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                          thrpt    5       679.728 ±       39.668  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                    thrpt    5       667.332 ±        0.777  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                               thrpt    5       361.354 ±       20.535    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                             thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                        thrpt    5         0.073 ±        0.625    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                               thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                thrpt    5        48.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc                                                 thrpt    5   3128678.114 ±    61735.181   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJavaPrealloc:·gc.count                                       thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                        thrpt    5   1958962.953 ±   139024.061   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5       876.124 ±       62.235  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       704.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'             thrpt    5         0.030 ±        0.182  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm        thrpt    5         0.024 ±        0.144    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                   thrpt    5       877.596 ±      721.714  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                              thrpt    5       704.781 ±      569.534    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                            thrpt    5         0.932 ±        6.688  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                       thrpt    5         0.745 ±        5.317    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        40.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                       thrpt    5   2509061.789 ±   135517.559   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       586.663 ±       31.819  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                  thrpt    5       605.909 ±      580.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                             thrpt    5       380.778 ±      372.775    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                           thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                      thrpt    5         0.084 ±        0.719    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        26.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5   2476083.403 ±   200631.610   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                            thrpt    5   2164638.416 ±    71409.495   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5       990.405 ±       33.375  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                 thrpt    5         0.020 ±        0.168  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            thrpt    5         0.014 ±        0.124    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                       thrpt    5       946.214 ±      589.374  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                  thrpt    5       688.115 ±      434.142    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                           thrpt    5         0.579 ±        4.986    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        14.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        33.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                           thrpt    5     10971.387 ±     1935.820   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                            thrpt    5      1607.172 ±      276.611  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                       thrpt    5    230563.473 ±      942.193    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                thrpt    5         0.028 ±        0.092  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           thrpt    5         3.900 ±       12.852    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      thrpt    5      1629.772 ±      605.491  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 thrpt    5    233354.793 ±    50701.104    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               thrpt    5         0.666 ±        5.734  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          thrpt    5        94.620 ±      814.705    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                 thrpt    5        24.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                  thrpt    5        40.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                    thrpt    5     14356.801 ±      224.144   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                     thrpt    5       202.952 ±        2.966  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                thrpt    5     22249.533 ±       33.416    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               thrpt    5       201.394 ±      707.930  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          thrpt    5     22089.090 ±    77648.362    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                          thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                           thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                   thrpt    5     37258.618 ±      712.802   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                    thrpt    5       345.057 ±        6.680  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               thrpt    5     14576.012 ±        0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              thrpt    5       337.050 ±        0.192  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     14238.063 ±      272.632    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                         thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                          thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                        thrpt    5      2860.801 ±     1042.351   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                         thrpt    5       934.952 ±      335.723  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    thrpt    5    513913.986 ±      544.485    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             thrpt    5         0.010 ±        0.083  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        thrpt    5         5.019 ±       43.215    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   thrpt    5       942.655 ±      584.117  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              thrpt    5    523085.608 ±   408130.382    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            thrpt    5         1.065 ±        7.824  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       thrpt    5       575.270 ±     4079.687    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                              thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                               thrpt    5       118.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                   thrpt    5     54050.664 ±     3022.720   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                    thrpt    5       690.241 ±       38.791  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               thrpt    5     20100.009 ±        0.235    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              thrpt    5       670.077 ±        0.345  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         thrpt    5     19516.151 ±     1101.117    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       thrpt    5         0.932 ±        8.029  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  thrpt    5        26.818 ±      230.914    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                         thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                          thrpt    5        49.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                  thrpt    5     78119.173 ±     1367.965   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   thrpt    5       512.160 ±        8.934  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             thrpt    5       538.159 ±      709.400  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        thrpt    5     10853.994 ±    14417.543    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                        thrpt    5         8.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                         thrpt    5        25.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                          thrpt    5     90504.297 ±      169.415   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           thrpt    5         5.980 ±        0.012  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      thrpt    5       104.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                thrpt    5           ≈ 0                 counts
[info] Benchmark result is saved to jdk10.json
[success] Total time: 4935 s, completed Apr 8, 2018 12:34:12 PM
