[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 6, 2018 10:38:06 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("geometry");
[info]       private[this] val r1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d11(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d15(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16625.319 ops/s
[info] # Warmup Iteration   2: 611091.034 ops/s
[info] # Warmup Iteration   3: 821578.105 ops/s
[info] # Warmup Iteration   4: 845724.599 ops/s
[info] # Warmup Iteration   5: 847295.364 ops/s
[info] Iteration   1: 853422.499 ops/s
[info]                  ·gc.alloc.rate:                   2427.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4477.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4942.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.409 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 820117.413 ops/s
[info]                  ·gc.alloc.rate:                   2324.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4458.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3845.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 825764.171 ops/s
[info]                  ·gc.alloc.rate:               2315.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          4412.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3817.787 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 837119.343 ops/s
[info]                  ·gc.alloc.rate:                   2400.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              4512.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5028.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 857578.245 ops/s
[info]                  ·gc.alloc.rate:               2428.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          4457.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3690.284 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   838800.334 ±(99.9%) 63513.348 ops/s [Average]
[info]   (min, avg, max) = (820117.413, 838800.334, 857578.245), stdev = 16494.215
[info]   CI (99.9%): [775286.986, 902313.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2379.046 ±(99.9%) 214.159 MB/sec [Average]
[info]   (min, avg, max) = (2315.019, 2379.046, 2428.467), stdev = 55.616
[info]   CI (99.9%): [2164.887, 2593.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4463.306 ±(99.9%) 139.893 B/op [Average]
[info]   (min, avg, max) = (4412.009, 4463.306, 4512.232), stdev = 36.330
[info]   CI (99.9%): [4323.413, 4603.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2274.656 ±(99.9%) 1415.639 MB/sec [Average]
[info]   (min, avg, max) = (2003.225, 2274.656, 2679.907), stdev = 367.637
[info]   CI (99.9%): [859.017, 3690.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4264.926 ±(99.9%) 2545.809 B/op [Average]
[info]   (min, avg, max) = (3690.284, 4264.926, 5028.882), stdev = 661.139
[info]   CI (99.9%): [1719.116, 6810.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.018), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.506 ±(99.9%) 12.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.506, 7.409), stdev = 3.300
[info]   CI (99.9%): [≈ 0, 14.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13781.656 ops/s
[info] # Warmup Iteration   2: 1635691.971 ops/s
[info] # Warmup Iteration   3: 1839467.999 ops/s
[info] # Warmup Iteration   4: 1875880.640 ops/s
[info] # Warmup Iteration   5: 1886507.430 ops/s
[info] Iteration   1: 1805047.418 ops/s
[info]                  ·gc.alloc.rate:                   1226.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1069.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1795803.282 ops/s
[info]                  ·gc.alloc.rate:                   1237.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              1084.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1170.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1814894.372 ops/s
[info]                  ·gc.alloc.rate:               1257.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          1090.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1158.852 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1829391.668 ops/s
[info]                  ·gc.alloc.rate:                   1256.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1080.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1150.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1835319.825 ops/s
[info]                  ·gc.alloc.rate:                   1264.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              1084.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1816091.313 ±(99.9%) 63320.547 ops/s [Average]
[info]   (min, avg, max) = (1795803.282, 1816091.313, 1835319.825), stdev = 16444.145
[info]   CI (99.9%): [1752770.767, 1879411.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1248.584 ±(99.9%) 60.588 MB/sec [Average]
[info]   (min, avg, max) = (1226.727, 1248.584, 1264.784), stdev = 15.734
[info]   CI (99.9%): [1187.996, 1309.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1081.943 ±(99.9%) 29.656 B/op [Average]
[info]   (min, avg, max) = (1069.604, 1081.943, 1090.144), stdev = 7.701
[info]   CI (99.9%): [1052.287, 1111.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.517 ±(99.9%) 1151.712 MB/sec [Average]
[info]   (min, avg, max) = (667.481, 1202.517, 1337.865), stdev = 299.096
[info]   CI (99.9%): [50.805, 2354.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1041.391 ±(99.9%) 989.563 B/op [Average]
[info]   (min, avg, max) = (581.988, 1041.391, 1170.244), stdev = 256.986
[info]   CI (99.9%): [51.828, 2030.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 7.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 4.228), stdev = 1.872
[info]   CI (99.9%): [≈ 0, 8.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.756 ±(99.9%) 6.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.636), stdev = 1.610
[info]   CI (99.9%): [≈ 0, 6.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:52:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1776254.252 ops/s
[info] # Warmup Iteration   2: 5546751.101 ops/s
[info] # Warmup Iteration   3: 5696525.273 ops/s
[info] # Warmup Iteration   4: 5736470.298 ops/s
[info] # Warmup Iteration   5: 5718131.247 ops/s
[info] Iteration   1: 5684368.688 ops/s
[info]                  ·gc.alloc.rate:               392.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5894020.767 ops/s
[info]                  ·gc.alloc.rate:               403.810 MB/sec
[info]                  ·gc.alloc.rate.norm:          107.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 136.615 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5923155.037 ops/s
[info]                  ·gc.alloc.rate:      391.400 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5669250.055 ops/s
[info]                  ·gc.alloc.rate:               398.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 186.503 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5909506.723 ops/s
[info]                  ·gc.alloc.rate:      390.496 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5816060.254 ±(99.9%) 491524.100 ops/s [Average]
[info]   (min, avg, max) = (5669250.055, 5816060.254, 5923155.037), stdev = 127647.248
[info]   CI (99.9%): [5324536.153, 6307584.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   395.435 ±(99.9%) 21.696 MB/sec [Average]
[info]   (min, avg, max) = (390.496, 395.435, 403.810), stdev = 5.634
[info]   CI (99.9%): [373.740, 417.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.044 ±(99.9%) 11.400 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.044, 110.646), stdev = 2.961
[info]   CI (99.9%): [95.644, 118.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339.047 ±(99.9%) 1218.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.047, 671.812), stdev = 316.332
[info]   CI (99.9%): [≈ 0, 1557.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   92.954 ±(99.9%) 335.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92.954, 186.503), stdev = 87.049
[info]   CI (99.9%): [≈ 0, 428.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2178.274 ops/s
[info] # Warmup Iteration   2: 210493.856 ops/s
[info] # Warmup Iteration   3: 310189.611 ops/s
[info] # Warmup Iteration   4: 319420.028 ops/s
[info] # Warmup Iteration   5: 315173.706 ops/s
[info] Iteration   1: 320707.986 ops/s
[info]                  ·gc.alloc.rate:                   2814.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              13813.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13177.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.430 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 313910.512 ops/s
[info]                  ·gc.alloc.rate:                   2755.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              13816.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13486.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 320757.094 ops/s
[info]                  ·gc.alloc.rate:               2841.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          13939.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13231.284 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 321694.895 ops/s
[info]                  ·gc.alloc.rate:                   2849.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              13941.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13219.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 317143.666 ops/s
[info]                  ·gc.alloc.rate:               2812.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          13949.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13438.027 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   318842.830 ±(99.9%) 12550.443 ops/s [Average]
[info]   (min, avg, max) = (313910.512, 318842.830, 321694.895), stdev = 3259.310
[info]   CI (99.9%): [306292.388, 331393.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2814.680 ±(99.9%) 141.208 MB/sec [Average]
[info]   (min, avg, max) = (2755.894, 2814.680, 2849.658), stdev = 36.671
[info]   CI (99.9%): [2673.472, 2955.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13892.315 ±(99.9%) 271.547 B/op [Average]
[info]   (min, avg, max) = (13813.669, 13892.315, 13949.834), stdev = 70.520
[info]   CI (99.9%): [13620.768, 14163.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2696.547 ±(99.9%) 36.212 MB/sec [Average]
[info]   (min, avg, max) = (2685.207, 2696.547, 2708.917), stdev = 9.404
[info]   CI (99.9%): [2660.335, 2732.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13310.552 ±(99.9%) 542.687 B/op [Average]
[info]   (min, avg, max) = (13177.936, 13310.552, 13486.487), stdev = 140.934
[info]   CI (99.9%): [12767.866, 13853.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.291), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.327 ±(99.9%) 2.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.327, 1.430), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31477.096 ops/s
[info] # Warmup Iteration   2: 738531.226 ops/s
[info] # Warmup Iteration   3: 885012.273 ops/s
[info] # Warmup Iteration   4: 891782.372 ops/s
[info] # Warmup Iteration   5: 902971.294 ops/s
[info] Iteration   1: 910551.208 ops/s
[info]                  ·gc.alloc.rate:                   2439.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3476.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 883123.555 ops/s
[info]                  ·gc.alloc.rate:                   2369.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              4220.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4767.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 905945.678 ops/s
[info]                  ·gc.alloc.rate:                   2414.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              4193.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3484.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 904949.429 ops/s
[info]                  ·gc.alloc.rate:               2452.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          4265.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4658.448 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 912448.904 ops/s
[info]                  ·gc.alloc.rate:               2445.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          4217.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3474.594 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   903403.755 ±(99.9%) 45277.327 ops/s [Average]
[info]   (min, avg, max) = (883123.555, 903403.755, 912448.904), stdev = 11758.378
[info]   CI (99.9%): [858126.428, 948681.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2424.131 ±(99.9%) 130.991 MB/sec [Average]
[info]   (min, avg, max) = (2369.005, 2424.131, 2452.509), stdev = 34.018
[info]   CI (99.9%): [2293.139, 2555.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4222.793 ±(99.9%) 100.154 B/op [Average]
[info]   (min, avg, max) = (4193.920, 4222.793, 4265.274), stdev = 26.010
[info]   CI (99.9%): [4122.639, 4322.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2277.277 ±(99.9%) 1406.989 MB/sec [Average]
[info]   (min, avg, max) = (2005.896, 2277.277, 2678.582), stdev = 365.391
[info]   CI (99.9%): [870.287, 3684.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3972.295 ±(99.9%) 2608.466 B/op [Average]
[info]   (min, avg, max) = (3474.594, 3972.295, 4767.830), stdev = 677.410
[info]   CI (99.9%): [1363.830, 6580.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.768), stdev = 1.674
[info]   CI (99.9%): [≈ 0, 7.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.339 ±(99.9%) 11.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.339, 6.513), stdev = 2.892
[info]   CI (99.9%): [≈ 0, 12.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:51:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187275.995 ops/s
[info] # Warmup Iteration   2: 2503373.289 ops/s
[info] # Warmup Iteration   3: 2791288.099 ops/s
[info] # Warmup Iteration   4: 2899923.585 ops/s
[info] # Warmup Iteration   5: 2849506.170 ops/s
[info] Iteration   1: 2820758.594 ops/s
[info]                  ·gc.alloc.rate:               1213.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          676.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 745.222 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2823564.613 ops/s
[info]                  ·gc.alloc.rate:                   1219.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              679.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     745.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2788216.234 ops/s
[info]                  ·gc.alloc.rate:                   1202.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2843511.584 ops/s
[info]                  ·gc.alloc.rate:               1198.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          663.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.369 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2890144.999 ops/s
[info]                  ·gc.alloc.rate:                   1240.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              675.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2833239.205 ±(99.9%) 144337.812 ops/s [Average]
[info]   (min, avg, max) = (2788216.234, 2833239.205, 2890144.999), stdev = 37484.071
[info]   CI (99.9%): [2688901.393, 2977577.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1214.956 ±(99.9%) 64.369 MB/sec [Average]
[info]   (min, avg, max) = (1198.702, 1214.956, 1240.707), stdev = 16.717
[info]   CI (99.9%): [1150.586, 1279.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   674.712 ±(99.9%) 24.945 B/op [Average]
[info]   (min, avg, max) = (663.478, 674.712, 679.950), stdev = 6.478
[info]   CI (99.9%): [649.767, 699.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.223 ±(99.9%) 1149.659 MB/sec [Average]
[info]   (min, avg, max) = (669.144, 1203.223, 1338.910), stdev = 298.563
[info]   CI (99.9%): [53.565, 2352.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.512 ±(99.9%) 642.633 B/op [Average]
[info]   (min, avg, max) = (370.369, 668.512, 752.780), stdev = 166.890
[info]   CI (99.9%): [25.879, 1311.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.713 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.913), stdev = 1.743
[info]   CI (99.9%): [≈ 0, 7.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.433 ±(99.9%) 3.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.433, 2.131), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1771429.178 ops/s
[info] # Warmup Iteration   2: 13381649.393 ops/s
[info] # Warmup Iteration   3: 13880243.931 ops/s
[info] # Warmup Iteration   4: 14081231.761 ops/s
[info] # Warmup Iteration   5: 14014954.398 ops/s
[info] Iteration   1: 14130187.452 ops/s
[info]                  ·gc.alloc.rate:               772.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          85.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149.283 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 14650320.080 ops/s
[info]                  ·gc.alloc.rate:               767.641 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.066 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14651307.498 ops/s
[info]                  ·gc.alloc.rate:                   763.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              82.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14237223.962 ops/s
[info]                  ·gc.alloc.rate:               749.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74.230 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 14281952.340 ops/s
[info]                  ·gc.alloc.rate:               743.753 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73.995 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14390198.266 ±(99.9%) 940387.896 ops/s [Average]
[info]   (min, avg, max) = (14130187.452, 14390198.266, 14651307.498), stdev = 244215.750
[info]   CI (99.9%): [13449810.371, 15330586.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   759.428 ±(99.9%) 46.450 MB/sec [Average]
[info]   (min, avg, max) = (743.753, 759.428, 772.179), stdev = 12.063
[info]   CI (99.9%): [712.979, 805.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   83.062 ±(99.9%) 6.424 B/op [Average]
[info]   (min, avg, max) = (81.958, 83.062, 85.970), stdev = 1.668
[info]   CI (99.9%): [76.637, 89.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.129 ±(99.9%) 1153.197 MB/sec [Average]
[info]   (min, avg, max) = (670.820, 805.129, 1340.858), stdev = 299.482
[info]   CI (99.9%): [≈ 0, 1958.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   88.327 ±(99.9%) 131.272 B/op [Average]
[info]   (min, avg, max) = (72.060, 88.327, 149.283), stdev = 34.091
[info]   CI (99.9%): [≈ 0, 219.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1474468.263 ops/s
[info] # Warmup Iteration   2: 14678430.440 ops/s
[info] # Warmup Iteration   3: 16583635.601 ops/s
[info] # Warmup Iteration   4: 16624920.507 ops/s
[info] # Warmup Iteration   5: 16606546.941 ops/s
[info] Iteration   1: 16640861.704 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16605790.314 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16568994.024 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 14415321.344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16621483.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   16170490.098 ±(99.9%) 3779497.323 ops/s [Average]
[info]   (min, avg, max) = (14415321.344, 16170490.098, 16640861.704), stdev = 981523.453
[info]   CI (99.9%): [12390992.775, 19949987.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:50:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10883.459 ops/s
[info] # Warmup Iteration   2: 351133.220 ops/s
[info] # Warmup Iteration   3: 519284.103 ops/s
[info] # Warmup Iteration   4: 514562.743 ops/s
[info] # Warmup Iteration   5: 532065.708 ops/s
[info] Iteration   1: 522165.256 ops/s
[info]                  ·gc.alloc.rate:               1551.166 MB/sec
[info]                  ·gc.alloc.rate.norm:          4675.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1325.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3995.570 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 528154.666 ops/s
[info]                  ·gc.alloc.rate:                   1574.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              4690.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5927.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 526497.043 ops/s
[info]                  ·gc.alloc.rate:                   1565.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              4678.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3970.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 521940.384 ops/s
[info]                  ·gc.alloc.rate:                   1552.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4011.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 527485.586 ops/s
[info]                  ·gc.alloc.rate:                   1607.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              4796.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5971.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   525248.587 ±(99.9%) 11464.841 ops/s [Average]
[info]   (min, avg, max) = (521940.384, 525248.587, 528154.666), stdev = 2977.383
[info]   CI (99.9%): [513783.746, 536713.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1570.115 ±(99.9%) 88.802 MB/sec [Average]
[info]   (min, avg, max) = (1551.166, 1570.115, 1607.551), stdev = 23.062
[info]   CI (99.9%): [1481.313, 1658.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4704.227 ±(99.9%) 199.967 B/op [Average]
[info]   (min, avg, max) = (4675.394, 4704.227, 4796.599), stdev = 51.931
[info]   CI (99.9%): [4504.260, 4904.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1595.127 ±(99.9%) 1408.177 MB/sec [Average]
[info]   (min, avg, max) = (1325.619, 1595.127, 2001.378), stdev = 365.699
[info]   CI (99.9%): [186.950, 3003.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4775.389 ±(99.9%) 4128.210 B/op [Average]
[info]   (min, avg, max) = (3970.876, 4775.389, 5971.697), stdev = 1072.083
[info]   CI (99.9%): [647.179, 8903.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.124), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112577.482 ops/s
[info] # Warmup Iteration   2: 1829953.567 ops/s
[info] # Warmup Iteration   3: 2072921.580 ops/s
[info] # Warmup Iteration   4: 2118302.976 ops/s
[info] # Warmup Iteration   5: 2123031.058 ops/s
[info] Iteration   1: 2115797.581 ops/s
[info]                  ·gc.alloc.rate:                   2986.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              2221.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1990.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2107688.532 ops/s
[info]                  ·gc.alloc.rate:                   2990.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              2233.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2498.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2106650.851 ops/s
[info]                  ·gc.alloc.rate:               2976.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          2223.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2004.594 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2104317.053 ops/s
[info]                  ·gc.alloc.rate:               2973.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2012.830 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2099028.273 ops/s
[info]                  ·gc.alloc.rate:                   2993.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2244.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2530.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2106696.458 ±(99.9%) 23444.648 ops/s [Average]
[info]   (min, avg, max) = (2099028.273, 2106696.458, 2115797.581), stdev = 6088.501
[info]   CI (99.9%): [2083251.810, 2130141.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2984.155 ±(99.9%) 33.716 MB/sec [Average]
[info]   (min, avg, max) = (2973.576, 2984.155, 2993.465), stdev = 8.756
[info]   CI (99.9%): [2950.439, 3017.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2229.350 ±(99.9%) 36.894 B/op [Average]
[info]   (min, avg, max) = (2221.736, 2229.350, 2244.568), stdev = 9.581
[info]   CI (99.9%): [2192.456, 2266.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2954.089 ±(99.9%) 1427.149 MB/sec [Average]
[info]   (min, avg, max) = (2675.982, 2954.089, 3374.303), stdev = 370.626
[info]   CI (99.9%): [1526.940, 4381.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2207.231 ±(99.9%) 1080.154 B/op [Average]
[info]   (min, avg, max) = (1990.446, 2207.231, 2530.128), stdev = 280.513
[info]   CI (99.9%): [1127.077, 3287.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.047), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.597 ops/s
[info] # Warmup Iteration   2: 9202951.804 ops/s
[info] # Warmup Iteration   3: 10173951.761 ops/s
[info] # Warmup Iteration   4: 10183091.824 ops/s
[info] # Warmup Iteration   5: 9994381.470 ops/s
[info] Iteration   1: 10473513.303 ops/s
[info]                  ·gc.alloc.rate:                   1318.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              198.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10277613.560 ops/s
[info]                  ·gc.alloc.rate:                   1292.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9947372.525 ops/s
[info]                  ·gc.alloc.rate:                   1262.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              199.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10076273.540 ops/s
[info]                  ·gc.alloc.rate:                   1281.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 10410562.367 ops/s
[info]                  ·gc.alloc.rate:               1323.110 MB/sec
[info]                  ·gc.alloc.rate.norm:          200.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 201.818 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10237067.059 ±(99.9%) 855477.868 ops/s [Average]
[info]   (min, avg, max) = (9947372.525, 10237067.059, 10473513.303), stdev = 222164.886
[info]   CI (99.9%): [9381589.191, 11092544.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1295.620 ±(99.9%) 97.326 MB/sec [Average]
[info]   (min, avg, max) = (1262.840, 1295.620, 1323.110), stdev = 25.275
[info]   CI (99.9%): [1198.293, 1392.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   199.195 ±(99.9%) 4.200 B/op [Average]
[info]   (min, avg, max) = (197.917, 199.195, 200.127), stdev = 1.091
[info]   CI (99.9%): [194.995, 203.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1335.126 ±(99.9%) 4.064 MB/sec [Average]
[info]   (min, avg, max) = (1333.625, 1335.126, 1336.494), stdev = 1.055
[info]   CI (99.9%): [1331.062, 1339.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   205.339 ±(99.9%) 17.730 B/op [Average]
[info]   (min, avg, max) = (200.404, 205.339, 211.322), stdev = 4.604
[info]   CI (99.9%): [187.609, 223.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.948 ±(99.9%) 8.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.948, 4.708), stdev = 2.102
[info]   CI (99.9%): [≈ 0, 9.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 1.264 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.735), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 121858.051 ops/s
[info] # Warmup Iteration   2: 3210929.412 ops/s
[info] # Warmup Iteration   3: 3242336.161 ops/s
[info] # Warmup Iteration   4: 3338812.434 ops/s
[info] # Warmup Iteration   5: 3359821.237 ops/s
[info] Iteration   1: 3348088.440 ops/s
[info]                  ·gc.alloc.rate:                   2074.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              975.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     943.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3312097.418 ops/s
[info]                  ·gc.alloc.rate:                   2071.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              983.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     952.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3304511.095 ops/s
[info]                  ·gc.alloc.rate:               2062.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          981.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 952.783 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3245547.569 ops/s
[info]                  ·gc.alloc.rate:               2043.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          990.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 970.410 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3318337.254 ops/s
[info]                  ·gc.alloc.rate:               2087.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.703 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3305716.355 ±(99.9%) 144298.149 ops/s [Average]
[info]   (min, avg, max) = (3245547.569, 3305716.355, 3348088.440), stdev = 37473.771
[info]   CI (99.9%): [3161418.206, 3450014.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2067.838 ±(99.9%) 63.520 MB/sec [Average]
[info]   (min, avg, max) = (2043.414, 2067.838, 2087.957), stdev = 16.496
[info]   CI (99.9%): [2004.318, 2131.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   984.267 ±(99.9%) 24.413 B/op [Average]
[info]   (min, avg, max) = (975.081, 984.267, 990.571), stdev = 6.340
[info]   CI (99.9%): [959.854, 1008.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2004.090 ±(99.9%) 10.210 MB/sec [Average]
[info]   (min, avg, max) = (2000.806, 2004.090, 2007.079), stdev = 2.652
[info]   CI (99.9%): [1993.879, 2014.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953.973 ±(99.9%) 38.240 B/op [Average]
[info]   (min, avg, max) = (943.486, 953.973, 970.410), stdev = 9.931
[info]   CI (99.9%): [915.733, 992.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.080), stdev = 1.814
[info]   CI (99.9%): [≈ 0, 7.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 3.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.918), stdev = 0.852
[info]   CI (99.9%): [≈ 0, 3.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3591116.862 ops/s
[info] # Warmup Iteration   2: 11496842.164 ops/s
[info] # Warmup Iteration   3: 13193407.798 ops/s
[info] # Warmup Iteration   4: 13614927.824 ops/s
[info] # Warmup Iteration   5: 13235269.389 ops/s
[info] Iteration   1: 12207637.456 ops/s
[info]                  ·gc.alloc.rate:                   1606.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13748438.226 ops/s
[info]                  ·gc.alloc.rate:                   1784.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.274 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13339977.524 ops/s
[info]                  ·gc.alloc.rate:                   1763.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13783062.967 ops/s
[info]                  ·gc.alloc.rate:               1813.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          207.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230.247 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13809598.894 ops/s
[info]                  ·gc.alloc.rate:               1808.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          206.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 153.241 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13377743.013 ±(99.9%) 2624922.110 ops/s [Average]
[info]   (min, avg, max) = (12207637.456, 13377743.013, 13809598.894), stdev = 681683.936
[info]   CI (99.9%): [10752820.904, 16002665.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1755.290 ±(99.9%) 329.231 MB/sec [Average]
[info]   (min, avg, max) = (1606.661, 1755.290, 1813.928), stdev = 85.500
[info]   CI (99.9%): [1426.060, 2084.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.508 ±(99.9%) 5.600 B/op [Average]
[info]   (min, avg, max) = (204.200, 206.508, 207.987), stdev = 1.454
[info]   CI (99.9%): [200.907, 212.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1750.075 ±(99.9%) 1418.909 MB/sec [Average]
[info]   (min, avg, max) = (1344.576, 1750.075, 2020.802), stdev = 368.486
[info]   CI (99.9%): [331.166, 3168.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   207.323 ±(99.9%) 193.022 B/op [Average]
[info]   (min, avg, max) = (153.241, 207.323, 260.529), stdev = 50.127
[info]   CI (99.9%): [14.301, 400.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.546 ±(99.9%) 4.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.395), stdev = 1.041
[info]   CI (99.9%): [≈ 0, 4.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.274), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15614.242 ops/s
[info] # Warmup Iteration   2: 461253.193 ops/s
[info] # Warmup Iteration   3: 813957.958 ops/s
[info] # Warmup Iteration   4: 1178504.147 ops/s
[info] # Warmup Iteration   5: 1182523.538 ops/s
[info] Iteration   1: 1203897.680 ops/s
[info]                  ·gc.alloc.rate:                   3070.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              4013.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3325.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4347.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1192232.919 ops/s
[info]                  ·gc.alloc.rate:                   3018.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3522.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1169688.359 ops/s
[info]                  ·gc.alloc.rate:               3015.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          4056.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3350.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4508.199 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 1167620.081 ops/s
[info]                  ·gc.alloc.rate:               2997.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          4040.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3625.718 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1206755.816 ops/s
[info]                  ·gc.alloc.rate:               3095.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          4036.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3520.411 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1188038.971 ±(99.9%) 71343.095 ops/s [Average]
[info]   (min, avg, max) = (1167620.081, 1188038.971, 1206755.816), stdev = 18527.575
[info]   CI (99.9%): [1116695.876, 1259382.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3039.278 ±(99.9%) 159.147 MB/sec [Average]
[info]   (min, avg, max) = (2997.559, 3039.278, 3095.101), stdev = 41.330
[info]   CI (99.9%): [2880.131, 3198.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4026.526 ±(99.9%) 107.981 B/op [Average]
[info]   (min, avg, max) = (3984.652, 4026.526, 4056.953), stdev = 28.042
[info]   CI (99.9%): [3918.545, 4134.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2946.752 ±(99.9%) 1376.658 MB/sec [Average]
[info]   (min, avg, max) = (2668.594, 2946.752, 3350.432), stdev = 357.514
[info]   CI (99.9%): [1570.094, 4323.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3904.976 ±(99.9%) 1858.571 B/op [Average]
[info]   (min, avg, max) = (3520.411, 3904.976, 4508.199), stdev = 482.665
[info]   CI (99.9%): [2046.406, 5763.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234230.156 ops/s
[info] # Warmup Iteration   2: 2297193.063 ops/s
[info] # Warmup Iteration   3: 2404475.545 ops/s
[info] # Warmup Iteration   4: 2441668.586 ops/s
[info] # Warmup Iteration   5: 2488295.774 ops/s
[info] Iteration   1: 2513875.675 ops/s
[info]                  ·gc.alloc.rate:                   2224.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              1392.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1260.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2501123.307 ops/s
[info]                  ·gc.alloc.rate:                   2202.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1385.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1263.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2467099.442 ops/s
[info]                  ·gc.alloc.rate:               2158.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          1377.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1279.975 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2518141.395 ops/s
[info]                  ·gc.alloc.rate:               2254.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          1408.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1673.294 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2520732.304 ops/s
[info]                  ·gc.alloc.rate:                   2232.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1393.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1256.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2504194.425 ±(99.9%) 84959.194 ops/s [Average]
[info]   (min, avg, max) = (2467099.442, 2504194.425, 2520732.304), stdev = 22063.633
[info]   CI (99.9%): [2419235.231, 2589153.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2214.383 ±(99.9%) 139.635 MB/sec [Average]
[info]   (min, avg, max) = (2158.671, 2214.383, 2254.136), stdev = 36.263
[info]   CI (99.9%): [2074.747, 2354.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1391.388 ±(99.9%) 45.142 B/op [Average]
[info]   (min, avg, max) = (1377.131, 1391.388, 1408.771), stdev = 11.723
[info]   CI (99.9%): [1346.247, 1436.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2143.798 ±(99.9%) 1148.656 MB/sec [Average]
[info]   (min, avg, max) = (2006.378, 2143.798, 2677.391), stdev = 298.302
[info]   CI (99.9%): [995.142, 3292.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1346.717 ±(99.9%) 703.828 B/op [Average]
[info]   (min, avg, max) = (1256.469, 1346.717, 1673.294), stdev = 182.782
[info]   CI (99.9%): [642.889, 2050.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.623), stdev = 1.615
[info]   CI (99.9%): [≈ 0, 6.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.459 ±(99.9%) 3.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.268), stdev = 1.011
[info]   CI (99.9%): [≈ 0, 4.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.719 ops/s
[info] # Warmup Iteration   2: 19278508.504 ops/s
[info] # Warmup Iteration   3: 20338006.098 ops/s
[info] # Warmup Iteration   4: 19409928.840 ops/s
[info] # Warmup Iteration   5: 20202848.704 ops/s
[info] Iteration   1: 20267116.246 ops/s
[info]                  ·gc.alloc.rate:      618.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20223377.020 ops/s
[info]                  ·gc.alloc.rate:                   633.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20213184.508 ops/s
[info]                  ·gc.alloc.rate:               634.190 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.868 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 20214795.544 ops/s
[info]                  ·gc.alloc.rate:                   641.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20047357.089 ops/s
[info]                  ·gc.alloc.rate:               631.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20193166.081 ±(99.9%) 325089.693 ops/s [Average]
[info]   (min, avg, max) = (20047357.089, 20193166.081, 20267116.246), stdev = 84424.761
[info]   CI (99.9%): [19868076.388, 20518255.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   631.703 ±(99.9%) 33.118 MB/sec [Average]
[info]   (min, avg, max) = (618.103, 631.703, 641.825), stdev = 8.601
[info]   CI (99.9%): [598.585, 664.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.236 ±(99.9%) 2.849 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.236, 49.970), stdev = 0.740
[info]   CI (99.9%): [46.387, 52.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.014 ±(99.9%) 1147.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.014, 666.888), stdev = 297.964
[info]   CI (99.9%): [≈ 0, 1680.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   41.581 ±(99.9%) 89.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.581, 52.353), stdev = 23.246
[info]   CI (99.9%): [≈ 0, 131.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:48:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 573413.339 ops/s
[info] # Warmup Iteration   2: 5737027.939 ops/s
[info] # Warmup Iteration   3: 6250568.809 ops/s
[info] # Warmup Iteration   4: 6270275.653 ops/s
[info] # Warmup Iteration   5: 6230060.846 ops/s
[info] Iteration   1: 5842397.018 ops/s
[info]                  ·gc.alloc.rate:               1650.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 359.976 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 6189216.442 ops/s
[info]                  ·gc.alloc.rate:                   1737.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     340.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6087612.626 ops/s
[info]                  ·gc.alloc.rate:               1724.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 518.117 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6242692.947 ops/s
[info]                  ·gc.alloc.rate:               1790.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 504.418 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 6232009.648 ops/s
[info]                  ·gc.alloc.rate:               1763.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 337.146 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6118785.736 ±(99.9%) 639993.997 ops/s [Average]
[info]   (min, avg, max) = (5842397.018, 6118785.736, 6242692.947), stdev = 166204.409
[info]   CI (99.9%): [5478791.739, 6758779.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1733.232 ±(99.9%) 203.248 MB/sec [Average]
[info]   (min, avg, max) = (1650.219, 1733.232, 1790.012), stdev = 52.783
[info]   CI (99.9%): [1529.984, 1936.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.780 ±(99.9%) 13.048 B/op [Average]
[info]   (min, avg, max) = (441.932, 445.780, 451.211), stdev = 3.389
[info]   CI (99.9%): [432.732, 458.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1602.814 ±(99.9%) 1405.275 MB/sec [Average]
[info]   (min, avg, max) = (1335.014, 1602.814, 2004.088), stdev = 364.945
[info]   CI (99.9%): [197.540, 3008.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   411.961 ±(99.9%) 351.201 B/op [Average]
[info]   (min, avg, max) = (337.146, 411.961, 518.117), stdev = 91.206
[info]   CI (99.9%): [60.760, 763.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.756 ±(99.9%) 6.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.778), stdev = 1.690
[info]   CI (99.9%): [≈ 0, 7.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.192 ±(99.9%) 1.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.961), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 1.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8695055.849 ops/s
[info] # Warmup Iteration   2: 27190675.218 ops/s
[info] # Warmup Iteration   3: 28047260.788 ops/s
[info] # Warmup Iteration   4: 28121499.071 ops/s
[info] # Warmup Iteration   5: 28324914.889 ops/s
[info] Iteration   1: 28874994.985 ops/s
[info]                  ·gc.alloc.rate:               904.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 29041250.112 ops/s
[info]                  ·gc.alloc.rate:               899.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 29049133.476 ops/s
[info]                  ·gc.alloc.rate:                   919.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28555733.170 ops/s
[info]                  ·gc.alloc.rate:                   885.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29094042.041 ops/s
[info]                  ·gc.alloc.rate:                   901.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28923030.757 ±(99.9%) 853109.973 ops/s [Average]
[info]   (min, avg, max) = (28555733.170, 28923030.757, 29094042.041), stdev = 221549.951
[info]   CI (99.9%): [28069920.783, 29776140.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   901.934 ±(99.9%) 46.920 MB/sec [Average]
[info]   (min, avg, max) = (885.132, 901.934, 919.192), stdev = 12.185
[info]   CI (99.9%): [855.015, 948.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.078 ±(99.9%) 1.791 B/op [Average]
[info]   (min, avg, max) = (48.734, 49.078, 49.798), stdev = 0.465
[info]   CI (99.9%): [47.288, 50.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.889 ±(99.9%) 1156.001 MB/sec [Average]
[info]   (min, avg, max) = (671.121, 805.889, 1342.920), stdev = 300.210
[info]   CI (99.9%): [≈ 0, 1961.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.822 ±(99.9%) 62.288 B/op [Average]
[info]   (min, avg, max) = (36.359, 43.822, 72.755), stdev = 16.176
[info]   CI (99.9%): [≈ 0, 106.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10128354.656 ops/s
[info] # Warmup Iteration   2: 32209727.952 ops/s
[info] # Warmup Iteration   3: 34918095.238 ops/s
[info] # Warmup Iteration   4: 30249380.961 ops/s
[info] # Warmup Iteration   5: 34921394.165 ops/s
[info] Iteration   1: 34779665.358 ops/s
[info]                  ·gc.alloc.rate:      0.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.034 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34960544.604 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 33181244.065 ops/s
[info]                  ·gc.alloc.rate:      27.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.289 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35025854.827 ops/s
[info]                  ·gc.alloc.rate:      0.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35030766.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34595615.012 ±(99.9%) 3069639.642 ops/s [Average]
[info]   (min, avg, max) = (33181244.065, 34595615.012, 35030766.209), stdev = 797175.667
[info]   CI (99.9%): [31525975.371, 37665254.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.603 ±(99.9%) 46.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 5.603, 27.170), stdev = 12.061
[info]   CI (99.9%): [≈ 0, 52.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.265 ±(99.9%) 2.203 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.265, 1.289), stdev = 0.572
[info]   CI (99.9%): [≈ 0, 2.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:47:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63300.350 ops/s
[info] # Warmup Iteration   2: 1728194.148 ops/s
[info] # Warmup Iteration   3: 1833801.177 ops/s
[info] # Warmup Iteration   4: 1894159.209 ops/s
[info] # Warmup Iteration   5: 1839952.665 ops/s
[info] Iteration   1: 1890645.554 ops/s
[info]                  ·gc.alloc.rate:               2824.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          2350.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2665.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2218.126 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1925407.898 ops/s
[info]                  ·gc.alloc.rate:                   2887.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2180.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1873041.559 ops/s
[info]                  ·gc.alloc.rate:               2811.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          2362.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2248.503 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 1903029.937 ops/s
[info]                  ·gc.alloc.rate:               2882.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          2384.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2220.134 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1850039.769 ops/s
[info]                  ·gc.alloc.rate:                   2821.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              2399.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2291.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1888432.943 ±(99.9%) 110535.041 ops/s [Average]
[info]   (min, avg, max) = (1850039.769, 1888432.943, 1925407.898), stdev = 28705.599
[info]   CI (99.9%): [1777897.903, 1998967.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2845.648 ±(99.9%) 140.956 MB/sec [Average]
[info]   (min, avg, max) = (2811.706, 2845.648, 2887.749), stdev = 36.606
[info]   CI (99.9%): [2704.692, 2986.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2371.376 ±(99.9%) 76.475 B/op [Average]
[info]   (min, avg, max) = (2350.442, 2371.376, 2399.163), stdev = 19.860
[info]   CI (99.9%): [2294.902, 2447.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2677.705 ±(99.9%) 47.040 MB/sec [Average]
[info]   (min, avg, max) = (2665.521, 2677.705, 2694.973), stdev = 12.216
[info]   CI (99.9%): [2630.665, 2724.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2231.795 ±(99.9%) 159.175 B/op [Average]
[info]   (min, avg, max) = (2180.447, 2231.795, 2291.766), stdev = 41.337
[info]   CI (99.9%): [2072.620, 2390.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:47:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76303.023 ops/s
[info] # Warmup Iteration   2: 297717.165 ops/s
[info] # Warmup Iteration   3: 297930.264 ops/s
[info] # Warmup Iteration   4: 310417.968 ops/s
[info] # Warmup Iteration   5: 312802.805 ops/s
[info] Iteration   1: 311520.348 ops/s
[info]                  ·gc.alloc.rate:                   1906.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              9632.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10187.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 314470.621 ops/s
[info]                  ·gc.alloc.rate:                   1908.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              9549.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6721.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 310722.191 ops/s
[info]                  ·gc.alloc.rate:                   1925.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              9750.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10186.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 313359.639 ops/s
[info]                  ·gc.alloc.rate:                   1929.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              9686.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10088.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 314132.125 ops/s
[info]                  ·gc.alloc.rate:               1946.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          9752.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10070.941 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   312840.985 ±(99.9%) 6334.610 ops/s [Average]
[info]   (min, avg, max) = (310722.191, 312840.985, 314470.621), stdev = 1645.078
[info]   CI (99.9%): [306506.375, 319175.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1923.050 ±(99.9%) 63.502 MB/sec [Average]
[info]   (min, avg, max) = (1906.545, 1923.050, 1946.486), stdev = 16.491
[info]   CI (99.9%): [1859.548, 1986.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9674.311 ±(99.9%) 330.814 B/op [Average]
[info]   (min, avg, max) = (9549.220, 9674.311, 9752.488), stdev = 85.911
[info]   CI (99.9%): [9343.496, 10005.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.940 ±(99.9%) 1151.656 MB/sec [Average]
[info]   (min, avg, max) = (1342.951, 1877.940, 2016.338), stdev = 299.081
[info]   CI (99.9%): [726.285, 3029.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9450.965 ±(99.9%) 5879.755 B/op [Average]
[info]   (min, avg, max) = (6721.171, 9450.965, 10187.277), stdev = 1526.954
[info]   CI (99.9%): [3571.211, 15330.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.018), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.719 ±(99.9%) 24.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.719, 15.250), stdev = 6.491
[info]   CI (99.9%): [≈ 0, 28.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52373.002 ops/s
[info] # Warmup Iteration   2: 476792.223 ops/s
[info] # Warmup Iteration   3: 514282.759 ops/s
[info] # Warmup Iteration   4: 518119.001 ops/s
[info] # Warmup Iteration   5: 518574.167 ops/s
[info] Iteration   1: 510044.693 ops/s
[info]                  ·gc.alloc.rate:                   658.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              2032.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2050.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 504808.427 ops/s
[info]                  ·gc.alloc.rate:               656.198 MB/sec
[info]                  ·gc.alloc.rate.norm:          2045.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2071.788 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 488339.505 ops/s
[info]                  ·gc.alloc.rate:               628.899 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2143.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 504929.103 ops/s
[info]                  ·gc.alloc.rate:                   656.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              2044.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2073.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 496317.614 ops/s
[info]                  ·gc.alloc.rate:               642.986 MB/sec
[info]                  ·gc.alloc.rate.norm:          2038.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2112.480 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   500887.868 ±(99.9%) 33006.693 ops/s [Average]
[info]   (min, avg, max) = (488339.505, 500887.868, 510044.693), stdev = 8571.733
[info]   CI (99.9%): [467881.176, 533894.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   648.589 ±(99.9%) 48.576 MB/sec [Average]
[info]   (min, avg, max) = (628.899, 648.589, 658.700), stdev = 12.615
[info]   CI (99.9%): [600.012, 697.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2037.795 ±(99.9%) 31.387 B/op [Average]
[info]   (min, avg, max) = (2026.751, 2037.795, 2045.764), stdev = 8.151
[info]   CI (99.9%): [2006.408, 2069.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.144 ±(99.9%) 2.629 MB/sec [Average]
[info]   (min, avg, max) = (664.508, 665.144, 666.184), stdev = 0.683
[info]   CI (99.9%): [662.515, 667.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2090.380 ±(99.9%) 143.692 B/op [Average]
[info]   (min, avg, max) = (2050.481, 2090.380, 2143.803), stdev = 37.316
[info]   CI (99.9%): [1946.687, 2234.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.065), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586607.710 ops/s
[info] # Warmup Iteration   2: 1203265.024 ops/s
[info] # Warmup Iteration   3: 1323310.407 ops/s
[info] # Warmup Iteration   4: 1333247.889 ops/s
[info] # Warmup Iteration   5: 1339688.865 ops/s
[info] Iteration   1: 1339975.347 ops/s
[info]                  ·gc.alloc.rate:                   913.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1072.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1335360.283 ops/s
[info]                  ·gc.alloc.rate:               926.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          1091.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1583.579 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1337545.310 ops/s
[info]                  ·gc.alloc.rate:               906.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          1066.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 790.872 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1340133.883 ops/s
[info]                  ·gc.alloc.rate:               908.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1309598.346 ops/s
[info]                  ·gc.alloc.rate:               911.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          1095.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1616.337 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1332522.634 ±(99.9%) 49920.317 ops/s [Average]
[info]   (min, avg, max) = (1309598.346, 1332522.634, 1340133.883), stdev = 12964.148
[info]   CI (99.9%): [1282602.316, 1382442.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   913.309 ±(99.9%) 29.680 MB/sec [Average]
[info]   (min, avg, max) = (906.440, 913.309, 926.242), stdev = 7.708
[info]   CI (99.9%): [883.629, 942.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1078.658 ±(99.9%) 53.065 B/op [Average]
[info]   (min, avg, max) = (1066.278, 1078.658, 1095.224), stdev = 13.781
[info]   CI (99.9%): [1025.594, 1131.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.006 ±(99.9%) 1418.582 MB/sec [Average]
[info]   (min, avg, max) = (671.444, 941.006, 1345.503), stdev = 368.401
[info]   CI (99.9%): [≈ 0, 2359.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1113.766 ±(99.9%) 1709.617 B/op [Average]
[info]   (min, avg, max) = (788.678, 1113.766, 1616.337), stdev = 443.982
[info]   CI (99.9%): [≈ 0, 2823.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21714.737 ops/s
[info] # Warmup Iteration   2: 110429.528 ops/s
[info] # Warmup Iteration   3: 116761.082 ops/s
[info] # Warmup Iteration   4: 120665.672 ops/s
[info] # Warmup Iteration   5: 122585.760 ops/s
[info] Iteration   1: 121584.313 ops/s
[info]                  ·gc.alloc.rate:                   3615.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              46801.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43240.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 123040.037 ops/s
[info]                  ·gc.alloc.rate:                   3659.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              46807.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42864.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 123240.920 ops/s
[info]                  ·gc.alloc.rate:               3667.834 MB/sec
[info]                  ·gc.alloc.rate.norm:          46827.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42968.290 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 120479.288 ops/s
[info]                  ·gc.alloc.rate:               3587.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          46858.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44100.007 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 122841.925 ops/s
[info]                  ·gc.alloc.rate:                   3685.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              47195.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4065.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52060.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   122237.296 ±(99.9%) 4529.301 ops/s [Average]
[info]   (min, avg, max) = (120479.288, 122237.296, 123240.920), stdev = 1176.245
[info]   CI (99.9%): [117707.995, 126766.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3642.979 ±(99.9%) 155.710 MB/sec [Average]
[info]   (min, avg, max) = (3587.136, 3642.979, 3685.246), stdev = 40.437
[info]   CI (99.9%): [3487.270, 3798.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   46897.957 ±(99.9%) 646.099 B/op [Average]
[info]   (min, avg, max) = (46801.280, 46897.957, 47195.455), stdev = 167.790
[info]   CI (99.9%): [46251.858, 47544.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3499.620 ±(99.9%) 1218.436 MB/sec [Average]
[info]   (min, avg, max) = (3340.444, 3499.620, 4065.135), stdev = 316.424
[info]   CI (99.9%): [2281.183, 4718.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   45046.900 ±(99.9%) 15212.675 B/op [Average]
[info]   (min, avg, max) = (42864.841, 45046.900, 52060.536), stdev = 3950.683
[info]   CI (99.9%): [29834.224, 60259.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 1.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 0.808), stdev = 0.351
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:46:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126760.235 ops/s
[info] # Warmup Iteration   2: 340864.821 ops/s
[info] # Warmup Iteration   3: 348641.488 ops/s
[info] # Warmup Iteration   4: 331776.433 ops/s
[info] # Warmup Iteration   5: 350429.884 ops/s
[info] Iteration   1: 349743.382 ops/s
[info]                  ·gc.alloc.rate:                   1190.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              5356.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3015.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 334712.051 ops/s
[info]                  ·gc.alloc.rate:                   1152.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              5421.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6304.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 342512.327 ops/s
[info]                  ·gc.alloc.rate:                   1177.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              5408.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6163.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 348882.786 ops/s
[info]                  ·gc.alloc.rate:                   1198.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              5407.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6055.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 352212.726 ops/s
[info]                  ·gc.alloc.rate:                   1204.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5380.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3000.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   345612.654 ±(99.9%) 27211.332 ops/s [Average]
[info]   (min, avg, max) = (334712.051, 345612.654, 352212.726), stdev = 7066.697
[info]   CI (99.9%): [318401.322, 372823.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1184.666 ±(99.9%) 78.556 MB/sec [Average]
[info]   (min, avg, max) = (1152.988, 1184.666, 1204.073), stdev = 20.401
[info]   CI (99.9%): [1106.111, 1263.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5394.830 ±(99.9%) 100.939 B/op [Average]
[info]   (min, avg, max) = (5356.243, 5394.830, 5421.251), stdev = 26.214
[info]   CI (99.9%): [5293.890, 5495.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.250 ±(99.9%) 1414.683 MB/sec [Average]
[info]   (min, avg, max) = (670.120, 1073.250, 1342.334), stdev = 367.389
[info]   CI (99.9%): [≈ 0, 2487.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4907.799 ±(99.9%) 6686.595 B/op [Average]
[info]   (min, avg, max) = (3000.481, 4907.799, 6304.023), stdev = 1736.487
[info]   CI (99.9%): [≈ 0, 11594.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 5.280 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.699, 3.143), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 5.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.154 ±(99.9%) 23.821 B/op [Average]
[info]   (min, avg, max) = (0.094, 3.154, 14.181), stdev = 6.186
[info]   CI (99.9%): [≈ 0, 26.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 6.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197633.567 ops/s
[info] # Warmup Iteration   2: 882254.328 ops/s
[info] # Warmup Iteration   3: 872942.164 ops/s
[info] # Warmup Iteration   4: 912086.342 ops/s
[info] # Warmup Iteration   5: 881996.755 ops/s
[info] Iteration   1: 791123.788 ops/s
[info]                  ·gc.alloc.rate:               590.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          1175.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1325.184 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 889755.946 ops/s
[info]                  ·gc.alloc.rate:               657.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          1162.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1178.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 892241.103 ops/s
[info]                  ·gc.alloc.rate:                   667.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              1178.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 888699.897 ops/s
[info]                  ·gc.alloc.rate:                   660.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169.704 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1180.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 909029.135 ops/s
[info]                  ·gc.alloc.rate:               673.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1155.645 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   874169.974 ±(99.9%) 181557.319 ops/s [Average]
[info]   (min, avg, max) = (791123.788, 874169.974, 909029.135), stdev = 47149.859
[info]   CI (99.9%): [692612.655, 1055727.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   650.026 ±(99.9%) 130.118 MB/sec [Average]
[info]   (min, avg, max) = (590.725, 650.026, 673.911), stdev = 33.791
[info]   CI (99.9%): [519.908, 780.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1170.423 ±(99.9%) 24.659 B/op [Average]
[info]   (min, avg, max) = (1162.222, 1170.423, 1178.208), stdev = 6.404
[info]   CI (99.9%): [1145.763, 1195.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.676 ±(99.9%) 2.126 MB/sec [Average]
[info]   (min, avg, max) = (666.130, 666.676, 667.465), stdev = 0.552
[info]   CI (99.9%): [664.550, 668.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1203.252 ±(99.9%) 265.293 B/op [Average]
[info]   (min, avg, max) = (1155.645, 1203.252, 1325.184), stdev = 68.896
[info]   CI (99.9%): [937.959, 1468.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1352735.552 ops/s
[info] # Warmup Iteration   2: 2289006.119 ops/s
[info] # Warmup Iteration   3: 2575972.443 ops/s
[info] # Warmup Iteration   4: 2580143.492 ops/s
[info] # Warmup Iteration   5: 2569517.815 ops/s
[info] Iteration   1: 2562825.469 ops/s
[info]                  ·gc.alloc.rate:                   1225.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2550919.198 ops/s
[info]                  ·gc.alloc.rate:                   1208.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2526856.992 ops/s
[info]                  ·gc.alloc.rate:               1195.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 418.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2530641.693 ops/s
[info]                  ·gc.alloc.rate:                   1198.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.722 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2502501.493 ops/s
[info]                  ·gc.alloc.rate:                   1220.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              767.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     845.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2534748.969 ±(99.9%) 89663.359 ops/s [Average]
[info]   (min, avg, max) = (2502501.493, 2534748.969, 2562825.469), stdev = 23285.290
[info]   CI (99.9%): [2445085.610, 2624412.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1209.943 ±(99.9%) 51.462 MB/sec [Average]
[info]   (min, avg, max) = (1195.511, 1209.943, 1225.839), stdev = 13.364
[info]   CI (99.9%): [1158.482, 1261.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   751.152 ±(99.9%) 38.191 B/op [Average]
[info]   (min, avg, max) = (744.591, 751.152, 767.908), stdev = 9.918
[info]   CI (99.9%): [712.961, 789.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.840 ±(99.9%) 1156.656 MB/sec [Average]
[info]   (min, avg, max) = (672.506, 1209.840, 1345.519), stdev = 300.380
[info]   CI (99.9%): [53.184, 2366.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   750.832 ±(99.9%) 715.268 B/op [Average]
[info]   (min, avg, max) = (418.852, 750.832, 845.421), stdev = 185.753
[info]   CI (99.9%): [35.564, 1466.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.625 ±(99.9%) 4.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.625, 2.769), stdev = 1.205
[info]   CI (99.9%): [≈ 0, 5.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 2.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.722), stdev = 0.749
[info]   CI (99.9%): [≈ 0, 3.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1398394.283 ops/s
[info] # Warmup Iteration   2: 2884918.297 ops/s
[info] # Warmup Iteration   3: 2919712.369 ops/s
[info] # Warmup Iteration   4: 2918644.254 ops/s
[info] # Warmup Iteration   5: 2917490.543 ops/s
[info] Iteration   1: 2883716.166 ops/s
[info]                  ·gc.alloc.rate:      3.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 1.723 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2922038.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2918269.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2920153.990 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2919634.203 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2912762.493 ±(99.9%) 62740.604 ops/s [Average]
[info]   (min, avg, max) = (2883716.166, 2912762.493, 2922038.619), stdev = 16293.536
[info]   CI (99.9%): [2850021.889, 2975503.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.632 ±(99.9%) 5.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.632, 3.157), stdev = 1.412
[info]   CI (99.9%): [≈ 0, 6.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.345 ±(99.9%) 2.967 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.345, 1.723), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 164967.340 ops/s
[info] # Warmup Iteration   2: 449146.374 ops/s
[info] # Warmup Iteration   3: 461168.455 ops/s
[info] # Warmup Iteration   4: 462550.332 ops/s
[info] # Warmup Iteration   5: 465066.649 ops/s
[info] Iteration   1: 473330.327 ops/s
[info]                  ·gc.alloc.rate:               702.572 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2219.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 461896.641 ops/s
[info]                  ·gc.alloc.rate:               687.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          2342.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2276.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 462801.739 ops/s
[info]                  ·gc.alloc.rate:               685.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          2331.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2272.244 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 463874.562 ops/s
[info]                  ·gc.alloc.rate:               686.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          2330.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2269.068 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 464547.202 ops/s
[info]                  ·gc.alloc.rate:               686.802 MB/sec
[info]                  ·gc.alloc.rate.norm:          2327.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2265.942 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   465290.094 ±(99.9%) 17741.024 ops/s [Average]
[info]   (min, avg, max) = (461896.641, 465290.094, 473330.327), stdev = 4607.288
[info]   CI (99.9%): [447549.070, 483031.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   689.841 ±(99.9%) 27.551 MB/sec [Average]
[info]   (min, avg, max) = (685.466, 689.841, 702.572), stdev = 7.155
[info]   CI (99.9%): [662.290, 717.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2333.444 ±(99.9%) 23.469 B/op [Average]
[info]   (min, avg, max) = (2327.003, 2333.444, 2342.643), stdev = 6.095
[info]   CI (99.9%): [2309.976, 2356.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.270 ±(99.9%) 2.115 MB/sec [Average]
[info]   (min, avg, max) = (667.466, 668.270, 668.793), stdev = 0.549
[info]   CI (99.9%): [666.155, 670.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2260.663 ±(99.9%) 90.079 B/op [Average]
[info]   (min, avg, max) = (2219.419, 2260.663, 2276.641), stdev = 23.393
[info]   CI (99.9%): [2170.584, 2350.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6094.475 ops/s
[info] # Warmup Iteration   2: 15226.341 ops/s
[info] # Warmup Iteration   3: 17318.599 ops/s
[info] # Warmup Iteration   4: 17397.523 ops/s
[info] # Warmup Iteration   5: 17317.112 ops/s
[info] Iteration   1: 17285.839 ops/s
[info]                  ·gc.alloc.rate:                   1378.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              125493.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122239.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 17138.985 ops/s
[info]                  ·gc.alloc.rate:               1399.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          128507.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123342.093 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 17387.071 ops/s
[info]                  ·gc.alloc.rate:                   1393.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              126107.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121650.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17451.416 ops/s
[info]                  ·gc.alloc.rate:                   1397.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              126037.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121114.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17545.028 ops/s
[info]                  ·gc.alloc.rate:               1420.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          127371.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120219.666 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17361.668 ±(99.9%) 601.670 ops/s [Average]
[info]   (min, avg, max) = (17138.985, 17361.668, 17545.028), stdev = 156.252
[info]   CI (99.9%): [16759.997, 17963.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1397.717 ±(99.9%) 57.622 MB/sec [Average]
[info]   (min, avg, max) = (1378.342, 1397.717, 1420.002), stdev = 14.964
[info]   CI (99.9%): [1340.095, 1455.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126703.363 ±(99.9%) 4702.882 B/op [Average]
[info]   (min, avg, max) = (125493.067, 126703.363, 128507.827), stdev = 1221.324
[info]   CI (99.9%): [122000.480, 131406.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.609 ±(99.9%) 5.380 MB/sec [Average]
[info]   (min, avg, max) = (1340.269, 1342.609, 1343.951), stdev = 1.397
[info]   CI (99.9%): [1337.229, 1347.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   121713.285 ±(99.9%) 4525.083 B/op [Average]
[info]   (min, avg, max) = (120219.666, 121713.285, 123342.093), stdev = 1175.150
[info]   CI (99.9%): [117188.202, 126238.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 4.563 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 2.748), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   65.147 ±(99.9%) 413.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.147, 248.728), stdev = 107.261
[info]   CI (99.9%): [≈ 0, 478.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10812.737 ops/s
[info] # Warmup Iteration   2: 33952.903 ops/s
[info] # Warmup Iteration   3: 37451.720 ops/s
[info] # Warmup Iteration   4: 36784.454 ops/s
[info] # Warmup Iteration   5: 37722.516 ops/s
[info] Iteration   1: 38073.488 ops/s
[info]                  ·gc.alloc.rate:                   1042.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              43086.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27604.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 37283.213 ops/s
[info]                  ·gc.alloc.rate:               1036.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          43724.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56437.342 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 37926.169 ops/s
[info]                  ·gc.alloc.rate:                   1030.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              42749.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27754.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.864 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 37829.997 ops/s
[info]                  ·gc.alloc.rate:                   1042.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              43367.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55678.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 37971.321 ops/s
[info]                  ·gc.alloc.rate:               1042.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          43196.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27748.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   37816.838 ±(99.9%) 1197.135 ops/s [Average]
[info]   (min, avg, max) = (37283.213, 37816.838, 38073.488), stdev = 310.892
[info]   CI (99.9%): [36619.702, 39013.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1038.706 ±(99.9%) 21.021 MB/sec [Average]
[info]   (min, avg, max) = (1030.167, 1038.706, 1042.409), stdev = 5.459
[info]   CI (99.9%): [1017.686, 1059.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43224.901 ±(99.9%) 1382.037 B/op [Average]
[info]   (min, avg, max) = (42749.959, 43224.901, 43724.349), stdev = 358.911
[info]   CI (99.9%): [41842.865, 44606.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.406 ±(99.9%) 1411.340 MB/sec [Average]
[info]   (min, avg, max) = (667.794, 936.406, 1338.269), stdev = 366.521
[info]   CI (99.9%): [≈ 0, 2347.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39044.440 ±(99.9%) 59813.838 B/op [Average]
[info]   (min, avg, max) = (27604.250, 39044.440, 56437.342), stdev = 15533.464
[info]   CI (99.9%): [≈ 0, 98858.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.690 ±(99.9%) 2.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 1.721), stdev = 0.720
[info]   CI (99.9%): [≈ 0, 3.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21798.552 ops/s
[info] # Warmup Iteration   2: 44793.167 ops/s
[info] # Warmup Iteration   3: 45191.487 ops/s
[info] # Warmup Iteration   4: 45135.798 ops/s
[info] # Warmup Iteration   5: 44676.388 ops/s
[info] Iteration   1: 44757.433 ops/s
[info]                  ·gc.alloc.rate:               623.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          21924.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23576.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 44847.591 ops/s
[info]                  ·gc.alloc.rate:               626.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          21987.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23528.965 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 44855.831 ops/s
[info]                  ·gc.alloc.rate:                   626.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              21967.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23548.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.730 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45059.808 ops/s
[info]                  ·gc.alloc.rate:               623.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          21776.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23442.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 44836.917 ops/s
[info]                  ·gc.alloc.rate:                   620.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              21764.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23579.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.731 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   44871.516 ±(99.9%) 432.595 ops/s [Average]
[info]   (min, avg, max) = (44757.433, 44871.516, 45059.808), stdev = 112.344
[info]   CI (99.9%): [44438.921, 45304.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   623.953 ±(99.9%) 10.014 MB/sec [Average]
[info]   (min, avg, max) = (620.030, 623.953, 626.549), stdev = 2.601
[info]   CI (99.9%): [613.939, 633.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21884.045 ±(99.9%) 408.693 B/op [Average]
[info]   (min, avg, max) = (21764.705, 21884.045, 21987.491), stdev = 106.136
[info]   CI (99.9%): [21475.351, 22292.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.033 ±(99.9%) 1.918 MB/sec [Average]
[info]   (min, avg, max) = (670.474, 671.033, 671.742), stdev = 0.498
[info]   CI (99.9%): [669.115, 672.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23535.285 ±(99.9%) 216.323 B/op [Average]
[info]   (min, avg, max) = (23442.070, 23535.285, 23579.925), stdev = 56.178
[info]   CI (99.9%): [23318.962, 23751.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 1.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 0.731), stdev = 0.400
[info]   CI (99.9%): [≈ 0, 1.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4637.337 ops/s
[info] # Warmup Iteration   2: 26161.573 ops/s
[info] # Warmup Iteration   3: 29995.536 ops/s
[info] # Warmup Iteration   4: 29822.883 ops/s
[info] # Warmup Iteration   5: 30004.520 ops/s
[info] Iteration   1: 30115.478 ops/s
[info]                  ·gc.alloc.rate:                   1530.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              79985.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104944.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 29862.159 ops/s
[info]                  ·gc.alloc.rate:                   1497.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              78911.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70600.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30324.617 ops/s
[info]                  ·gc.alloc.rate:                   1531.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              79488.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69561.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231.209 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30335.188 ops/s
[info]                  ·gc.alloc.rate:                   1532.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              79514.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69329.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 30497.528 ops/s
[info]                  ·gc.alloc.rate:               1551.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          80029.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68821.072 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30226.994 ±(99.9%) 943.144 ops/s [Average]
[info]   (min, avg, max) = (29862.159, 30226.994, 30497.528), stdev = 244.931
[info]   CI (99.9%): [29283.850, 31170.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1528.779 ±(99.9%) 75.378 MB/sec [Average]
[info]   (min, avg, max) = (1497.323, 1528.779, 1551.503), stdev = 19.575
[info]   CI (99.9%): [1453.401, 1604.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79585.936 ±(99.9%) 1750.214 B/op [Average]
[info]   (min, avg, max) = (78911.643, 79585.936, 80029.965), stdev = 454.525
[info]   CI (99.9%): [77835.722, 81336.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.801 ±(99.9%) 1155.488 MB/sec [Average]
[info]   (min, avg, max) = (1334.202, 1471.801, 2008.576), stdev = 300.077
[info]   CI (99.9%): [316.313, 2627.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76651.316 ±(99.9%) 60954.604 B/op [Average]
[info]   (min, avg, max) = (68821.072, 76651.316, 104944.633), stdev = 15829.717
[info]   CI (99.9%): [15696.712, 137605.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.908 ±(99.9%) 7.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.908, 4.455), stdev = 1.983
[info]   CI (99.9%): [≈ 0, 8.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47.114 ±(99.9%) 396.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.114, 231.209), stdev = 102.915
[info]   CI (99.9%): [≈ 0, 443.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6086.934 ops/s
[info] # Warmup Iteration   2: 23249.813 ops/s
[info] # Warmup Iteration   3: 24631.399 ops/s
[info] # Warmup Iteration   4: 24796.494 ops/s
[info] # Warmup Iteration   5: 24747.718 ops/s
[info] Iteration   1: 24851.059 ops/s
[info]                  ·gc.alloc.rate:                   1806.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              114386.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127444.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 24806.252 ops/s
[info]                  ·gc.alloc.rate:                   1799.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              114146.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85201.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 24815.815 ops/s
[info]                  ·gc.alloc.rate:                   1811.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              114889.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127333.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25008.287 ops/s
[info]                  ·gc.alloc.rate:                   1814.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              114193.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126266.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 24853.101 ops/s
[info]                  ·gc.alloc.rate:                   1803.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              114208.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84706.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24866.903 ±(99.9%) 314.715 ops/s [Average]
[info]   (min, avg, max) = (24806.252, 24866.903, 25008.287), stdev = 81.730
[info]   CI (99.9%): [24552.188, 25181.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1807.087 ±(99.9%) 23.316 MB/sec [Average]
[info]   (min, avg, max) = (1799.577, 1807.087, 1814.611), stdev = 6.055
[info]   CI (99.9%): [1783.771, 1830.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114364.798 ±(99.9%) 1181.601 B/op [Average]
[info]   (min, avg, max) = (114146.541, 114364.798, 114889.107), stdev = 306.858
[info]   CI (99.9%): [113183.196, 115546.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1741.495 ±(99.9%) 1409.868 MB/sec [Average]
[info]   (min, avg, max) = (1337.608, 1741.495, 2012.403), stdev = 366.138
[info]   CI (99.9%): [331.627, 3151.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   110190.267 ±(99.9%) 88730.244 B/op [Average]
[info]   (min, avg, max) = (84706.143, 110190.267, 127444.001), stdev = 23042.963
[info]   CI (99.9%): [21460.023, 198920.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.259 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.685), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 7.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   49.390 ±(99.9%) 397.019 B/op [Average]
[info]   (min, avg, max) = (1.310, 49.390, 233.765), stdev = 103.104
[info]   CI (99.9%): [≈ 0, 446.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8289.859 ops/s
[info] # Warmup Iteration   2: 23945.435 ops/s
[info] # Warmup Iteration   3: 24208.349 ops/s
[info] # Warmup Iteration   4: 24774.244 ops/s
[info] # Warmup Iteration   5: 24560.346 ops/s
[info] Iteration   1: 24722.866 ops/s
[info]                  ·gc.alloc.rate:                   1540.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              97993.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85066.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 24811.587 ops/s
[info]                  ·gc.alloc.rate:               1533.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          97265.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84849.511 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 24507.795 ops/s
[info]                  ·gc.alloc.rate:                   1528.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              98136.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128847.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25081.160 ops/s
[info]                  ·gc.alloc.rate:               1563.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          98104.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83727.237 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 25279.794 ops/s
[info]                  ·gc.alloc.rate:                   1572.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              97907.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83020.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   24880.640 ±(99.9%) 1168.286 ops/s [Average]
[info]   (min, avg, max) = (24507.795, 24880.640, 25279.794), stdev = 303.400
[info]   CI (99.9%): [23712.354, 26048.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1547.614 ±(99.9%) 75.111 MB/sec [Average]
[info]   (min, avg, max) = (1528.247, 1547.614, 1572.934), stdev = 19.506
[info]   CI (99.9%): [1472.503, 1622.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   97881.462 ±(99.9%) 1371.465 B/op [Average]
[info]   (min, avg, max) = (97265.369, 97881.462, 98136.344), stdev = 356.165
[info]   CI (99.9%): [96509.997, 99252.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.828 ±(99.9%) 1155.253 MB/sec [Average]
[info]   (min, avg, max) = (1333.760, 1469.828, 2006.503), stdev = 300.016
[info]   CI (99.9%): [314.574, 2625.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93102.234 ±(99.9%) 77011.493 B/op [Average]
[info]   (min, avg, max) = (83020.215, 93102.234, 128847.540), stdev = 19999.640
[info]   CI (99.9%): [16090.741, 170113.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.059), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 7.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   53.184 ±(99.9%) 446.676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.184, 260.679), stdev = 116.000
[info]   CI (99.9%): [≈ 0, 499.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11840.387 ops/s
[info] # Warmup Iteration   2: 25775.972 ops/s
[info] # Warmup Iteration   3: 26253.364 ops/s
[info] # Warmup Iteration   4: 26959.873 ops/s
[info] # Warmup Iteration   5: 26264.968 ops/s
[info] Iteration   1: 27195.891 ops/s
[info]                  ·gc.alloc.rate:                   1616.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              93546.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116769.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 27440.092 ops/s
[info]                  ·gc.alloc.rate:                   1618.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77179.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27554.932 ops/s
[info]                  ·gc.alloc.rate:                   1625.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              92850.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76781.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27332.049 ops/s
[info]                  ·gc.alloc.rate:                   1626.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              93627.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115920.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27286.989 ops/s
[info]                  ·gc.alloc.rate:               1623.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          93613.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77376.326 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27361.991 ±(99.9%) 535.769 ops/s [Average]
[info]   (min, avg, max) = (27195.891, 27361.991, 27554.932), stdev = 139.138
[info]   CI (99.9%): [26826.221, 27897.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1621.877 ±(99.9%) 16.831 MB/sec [Average]
[info]   (min, avg, max) = (1616.434, 1621.877, 1626.020), stdev = 4.371
[info]   CI (99.9%): [1605.046, 1638.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93289.162 ±(99.9%) 1620.971 B/op [Average]
[info]   (min, avg, max) = (92808.797, 93289.162, 93627.432), stdev = 420.961
[info]   CI (99.9%): [91668.191, 94910.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.496 ±(99.9%) 1416.467 MB/sec [Average]
[info]   (min, avg, max) = (1341.563, 1612.496, 2017.724), stdev = 367.852
[info]   CI (99.9%): [196.029, 3028.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   92805.571 ±(99.9%) 82756.616 B/op [Average]
[info]   (min, avg, max) = (76781.682, 92805.571, 116769.732), stdev = 21491.630
[info]   CI (99.9%): [10048.955, 175562.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 4.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 2.561), stdev = 1.062
[info]   CI (99.9%): [≈ 0, 4.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.301 ±(99.9%) 234.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.301, 146.861), stdev = 60.876
[info]   CI (99.9%): [≈ 0, 275.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10773.514 ops/s
[info] # Warmup Iteration   2: 25213.439 ops/s
[info] # Warmup Iteration   3: 27700.203 ops/s
[info] # Warmup Iteration   4: 27311.778 ops/s
[info] # Warmup Iteration   5: 27038.803 ops/s
[info] Iteration   1: 27544.175 ops/s
[info]                  ·gc.alloc.rate:                   1560.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              89137.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76809.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27435.693 ops/s
[info]                  ·gc.alloc.rate:                   1579.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              90601.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115710.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 27884.860 ops/s
[info]                  ·gc.alloc.rate:                   1602.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              90459.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75873.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27600.666 ops/s
[info]                  ·gc.alloc.rate:               1573.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          89718.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76501.795 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27849.081 ops/s
[info]                  ·gc.alloc.rate:               1588.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          89772.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75742.619 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27662.895 ±(99.9%) 754.376 ops/s [Average]
[info]   (min, avg, max) = (27435.693, 27662.895, 27884.860), stdev = 195.909
[info]   CI (99.9%): [26908.520, 28417.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1580.817 ±(99.9%) 61.709 MB/sec [Average]
[info]   (min, avg, max) = (1560.028, 1580.817, 1602.695), stdev = 16.026
[info]   CI (99.9%): [1519.109, 1642.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   89937.985 ±(99.9%) 2300.898 B/op [Average]
[info]   (min, avg, max) = (89137.870, 89937.985, 90601.898), stdev = 597.536
[info]   CI (99.9%): [87637.088, 92238.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1477.510 ±(99.9%) 1161.533 MB/sec [Average]
[info]   (min, avg, max) = (1340.275, 1477.510, 2017.103), stdev = 301.646
[info]   CI (99.9%): [315.978, 2639.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   84127.466 ±(99.9%) 68005.350 B/op [Average]
[info]   (min, avg, max) = (75742.619, 84127.466, 115710.209), stdev = 17660.774
[info]   CI (99.9%): [16122.116, 152132.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.699 ±(99.9%) 4.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.699, 2.498), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 4.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   39.942 ±(99.9%) 240.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.942, 143.300), stdev = 62.468
[info]   CI (99.9%): [≈ 0, 280.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2337.100 ops/s
[info] # Warmup Iteration   2: 7034.457 ops/s
[info] # Warmup Iteration   3: 7817.552 ops/s
[info] # Warmup Iteration   4: 7899.663 ops/s
[info] # Warmup Iteration   5: 7893.181 ops/s
[info] Iteration   1: 7935.651 ops/s
[info]                  ·gc.alloc.rate:               1168.211 MB/sec
[info]                  ·gc.alloc.rate.norm:          231693.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132772.947 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 7885.002 ops/s
[info]                  ·gc.alloc.rate:               1184.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          236414.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 267396.188 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 7899.584 ops/s
[info]                  ·gc.alloc.rate:                   1182.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              235507.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267021.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7924.385 ops/s
[info]                  ·gc.alloc.rate:               1174.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          233319.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133089.510 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 7925.466 ops/s
[info]                  ·gc.alloc.rate:                   1195.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              237310.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266376.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 797.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7914.018 ±(99.9%) 80.698 ops/s [Average]
[info]   (min, avg, max) = (7885.002, 7914.018, 7935.651), stdev = 20.957
[info]   CI (99.9%): [7833.320, 7994.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1180.931 ±(99.9%) 38.953 MB/sec [Average]
[info]   (min, avg, max) = (1168.211, 1180.931, 1195.035), stdev = 10.116
[info]   CI (99.9%): [1141.978, 1219.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234849.015 ±(99.9%) 8873.976 B/op [Average]
[info]   (min, avg, max) = (231693.122, 234849.015, 237310.356), stdev = 2304.543
[info]   CI (99.9%): [225975.039, 243722.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.178 ±(99.9%) 1414.271 MB/sec [Average]
[info]   (min, avg, max) = (669.449, 1072.178, 1341.404), stdev = 367.282
[info]   CI (99.9%): [≈ 0, 2486.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   213331.258 ±(99.9%) 282621.252 B/op [Average]
[info]   (min, avg, max) = (132772.947, 213331.258, 267396.188), stdev = 73395.842
[info]   CI (99.9%): [≈ 0, 495952.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 4.017), stdev = 1.794
[info]   CI (99.9%): [≈ 0, 7.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   160.371 ±(99.9%) 1371.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.371, 797.707), stdev = 356.286
[info]   CI (99.9%): [≈ 0, 1532.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3450.610 ops/s
[info] # Warmup Iteration   2: 15472.076 ops/s
[info] # Warmup Iteration   3: 17903.579 ops/s
[info] # Warmup Iteration   4: 18031.730 ops/s
[info] # Warmup Iteration   5: 17792.091 ops/s
[info] Iteration   1: 17755.397 ops/s
[info]                  ·gc.alloc.rate:               1620.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          143641.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119034.248 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 16872.484 ops/s
[info]                  ·gc.alloc.rate:                   1604.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              149675.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187966.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 260.202 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 17862.975 ops/s
[info]                  ·gc.alloc.rate:                   1635.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              144114.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118262.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.700 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18089.871 ops/s
[info]                  ·gc.alloc.rate:                   1661.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              144600.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116547.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18271.102 ops/s
[info]                  ·gc.alloc.rate:                   1665.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              143478.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172878.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.793 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   17770.366 ±(99.9%) 2080.606 ops/s [Average]
[info]   (min, avg, max) = (16872.484, 17770.366, 18271.102), stdev = 540.327
[info]   CI (99.9%): [15689.760, 19850.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1637.683 ±(99.9%) 101.591 MB/sec [Average]
[info]   (min, avg, max) = (1604.564, 1637.683, 1665.884), stdev = 26.383
[info]   CI (99.9%): [1536.093, 1739.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   145102.056 ±(99.9%) 9988.031 B/op [Average]
[info]   (min, avg, max) = (143478.094, 145102.056, 149675.442), stdev = 2593.860
[info]   CI (99.9%): [135114.025, 155090.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.370 ±(99.9%) 1412.375 MB/sec [Average]
[info]   (min, avg, max) = (1339.532, 1609.370, 2015.060), stdev = 366.789
[info]   CI (99.9%): [196.994, 3021.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   142937.942 ±(99.9%) 133401.321 B/op [Average]
[info]   (min, avg, max) = (116547.081, 142937.942, 187966.957), stdev = 34643.899
[info]   CI (99.9%): [9536.622, 276339.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 4.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.789), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   69.264 ±(99.9%) 431.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.264, 260.202), stdev = 112.079
[info]   CI (99.9%): [≈ 0, 500.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17718.078 ops/s
[info] # Warmup Iteration   2: 39508.377 ops/s
[info] # Warmup Iteration   3: 41314.942 ops/s
[info] # Warmup Iteration   4: 40449.034 ops/s
[info] # Warmup Iteration   5: 41146.471 ops/s
[info] Iteration   1: 42767.277 ops/s
[info]                  ·gc.alloc.rate:                   1197.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              44049.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24624.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.766 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42327.887 ops/s
[info]                  ·gc.alloc.rate:                   1196.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              44496.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49773.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 41199.573 ops/s
[info]                  ·gc.alloc.rate:               1164.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          44485.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51174.255 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 41646.208 ops/s
[info]                  ·gc.alloc.rate:                   1176.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              44466.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50651.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 41880.075 ops/s
[info]                  ·gc.alloc.rate:                   1180.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              44377.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25181.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.903 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   41964.204 ±(99.9%) 2334.370 ops/s [Average]
[info]   (min, avg, max) = (41199.573, 41964.204, 42767.277), stdev = 606.228
[info]   CI (99.9%): [39629.834, 44298.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1183.211 ±(99.9%) 53.737 MB/sec [Average]
[info]   (min, avg, max) = (1164.494, 1183.211, 1197.283), stdev = 13.955
[info]   CI (99.9%): [1129.474, 1236.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44375.118 ±(99.9%) 724.278 B/op [Average]
[info]   (min, avg, max) = (44049.244, 44375.118, 44496.864), stdev = 188.093
[info]   CI (99.9%): [43650.840, 45099.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.585 ±(99.9%) 1412.620 MB/sec [Average]
[info]   (min, avg, max) = (669.312, 1071.585, 1340.275), stdev = 366.853
[info]   CI (99.9%): [≈ 0, 2484.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40281.152 ±(99.9%) 54095.176 B/op [Average]
[info]   (min, avg, max) = (24624.646, 40281.152, 51174.255), stdev = 14048.345
[info]   CI (99.9%): [≈ 0, 94376.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 5.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.185), stdev = 1.377
[info]   CI (99.9%): [≈ 0, 6.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28.762 ±(99.9%) 200.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.762, 120.366), stdev = 52.040
[info]   CI (99.9%): [≈ 0, 229.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.000, 8.000), stdev = 2.915
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27928.876 ops/s
[info] # Warmup Iteration   2: 60482.831 ops/s
[info] # Warmup Iteration   3: 66159.886 ops/s
[info] # Warmup Iteration   4: 66520.575 ops/s
[info] # Warmup Iteration   5: 67076.648 ops/s
[info] Iteration   1: 67930.667 ops/s
[info]                  ·gc.alloc.rate:               776.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          17980.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15534.173 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 67235.258 ops/s
[info]                  ·gc.alloc.rate:               769.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          18001.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15710.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 67759.276 ops/s
[info]                  ·gc.alloc.rate:                   770.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              17886.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15588.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 67768.623 ops/s
[info]                  ·gc.alloc.rate:               770.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          17887.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15594.279 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 67931.518 ops/s
[info]                  ·gc.alloc.rate:                   785.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              18175.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31039.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   67725.069 ±(99.9%) 1102.444 ops/s [Average]
[info]   (min, avg, max) = (67235.258, 67725.069, 67931.518), stdev = 286.301
[info]   CI (99.9%): [66622.624, 68827.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   774.169 ±(99.9%) 26.258 MB/sec [Average]
[info]   (min, avg, max) = (769.033, 774.169, 785.253), stdev = 6.819
[info]   CI (99.9%): [747.911, 800.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17986.376 ±(99.9%) 454.692 B/op [Average]
[info]   (min, avg, max) = (17886.910, 17986.376, 18175.450), stdev = 118.082
[info]   CI (99.9%): [17531.684, 18441.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.084 ±(99.9%) 1153.638 MB/sec [Average]
[info]   (min, avg, max) = (670.654, 805.084, 1341.018), stdev = 299.596
[info]   CI (99.9%): [≈ 0, 1958.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18693.310 ±(99.9%) 26576.537 B/op [Average]
[info]   (min, avg, max) = (15534.173, 18693.310, 31039.167), stdev = 6901.842
[info]   CI (99.9%): [≈ 0, 45269.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.386 ±(99.9%) 2.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 0.967), stdev = 0.528
[info]   CI (99.9%): [≈ 0, 2.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2554.939 ops/s
[info] # Warmup Iteration   2: 29179.227 ops/s
[info] # Warmup Iteration   3: 32954.726 ops/s
[info] # Warmup Iteration   4: 33008.041 ops/s
[info] # Warmup Iteration   5: 32710.416 ops/s
[info] Iteration   1: 33050.533 ops/s
[info]                  ·gc.alloc.rate:                   2192.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              104429.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95715.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 32443.826 ops/s
[info]                  ·gc.alloc.rate:                   2153.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              104487.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97703.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 32845.753 ops/s
[info]                  ·gc.alloc.rate:               2167.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          103830.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96632.285 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 33073.230 ops/s
[info]                  ·gc.alloc.rate:               2208.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          105077.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128250.861 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 33134.591 ops/s
[info]                  ·gc.alloc.rate:               2200.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          104488.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96232.579 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   32909.587 ±(99.9%) 1086.195 ops/s [Average]
[info]   (min, avg, max) = (32443.826, 32909.587, 33134.591), stdev = 282.081
[info]   CI (99.9%): [31823.392, 33995.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2184.504 ±(99.9%) 88.565 MB/sec [Average]
[info]   (min, avg, max) = (2153.991, 2184.504, 2208.150), stdev = 23.000
[info]   CI (99.9%): [2095.938, 2273.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   104462.674 ±(99.9%) 1700.935 B/op [Average]
[info]   (min, avg, max) = (103830.278, 104462.674, 105077.605), stdev = 441.727
[info]   CI (99.9%): [102761.738, 106163.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.513 ±(99.9%) 1168.243 MB/sec [Average]
[info]   (min, avg, max) = (2010.019, 2152.513, 2695.124), stdev = 303.389
[info]   CI (99.9%): [984.270, 3320.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102906.941 ±(99.9%) 54627.063 B/op [Average]
[info]   (min, avg, max) = (95715.827, 102906.941, 128250.861), stdev = 14186.475
[info]   CI (99.9%): [48279.877, 157534.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.749), stdev = 0.326
[info]   CI (99.9%): [≈ 0, 1.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.349 ±(99.9%) 59.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.349, 35.685), stdev = 15.505
[info]   CI (99.9%): [≈ 0, 68.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9094.303 ops/s
[info] # Warmup Iteration   2: 25368.764 ops/s
[info] # Warmup Iteration   3: 26881.812 ops/s
[info] # Warmup Iteration   4: 27638.609 ops/s
[info] # Warmup Iteration   5: 27478.526 ops/s
[info] Iteration   1: 27415.141 ops/s
[info]                  ·gc.alloc.rate:               1772.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          101744.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115278.350 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 27250.087 ops/s
[info]                  ·gc.alloc.rate:                   1747.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              100947.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77410.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27333.930 ops/s
[info]                  ·gc.alloc.rate:                   1765.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              101631.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115455.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27351.662 ops/s
[info]                  ·gc.alloc.rate:               1740.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          100142.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76817.631 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 27557.439 ops/s
[info]                  ·gc.alloc.rate:               1793.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          102411.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114403.252 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27381.652 ±(99.9%) 441.182 ops/s [Average]
[info]   (min, avg, max) = (27250.087, 27381.652, 27557.439), stdev = 114.574
[info]   CI (99.9%): [26940.470, 27822.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1763.829 ±(99.9%) 80.190 MB/sec [Average]
[info]   (min, avg, max) = (1740.451, 1763.829, 1793.146), stdev = 20.825
[info]   CI (99.9%): [1683.639, 1844.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101375.508 ±(99.9%) 3322.260 B/op [Average]
[info]   (min, avg, max) = (100142.830, 101375.508, 102411.118), stdev = 862.780
[info]   CI (99.9%): [98053.248, 104697.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.410 ±(99.9%) 1408.518 MB/sec [Average]
[info]   (min, avg, max) = (1335.066, 1738.410, 2008.175), stdev = 365.788
[info]   CI (99.9%): [329.892, 3146.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99873.016 ±(99.9%) 80020.394 B/op [Average]
[info]   (min, avg, max) = (76817.631, 99873.016, 115455.747), stdev = 20781.042
[info]   CI (99.9%): [19852.622, 179893.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.831), stdev = 1.702
[info]   CI (99.9%): [≈ 0, 7.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45.444 ±(99.9%) 378.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.444, 221.227), stdev = 98.300
[info]   CI (99.9%): [≈ 0, 423.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18577.856 ops/s
[info] # Warmup Iteration   2: 33241.680 ops/s
[info] # Warmup Iteration   3: 34829.689 ops/s
[info] # Warmup Iteration   4: 34602.006 ops/s
[info] # Warmup Iteration   5: 34946.297 ops/s
[info] Iteration   1: 33929.430 ops/s
[info]                  ·gc.alloc.rate:                   1541.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              71473.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93597.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 34701.859 ops/s
[info]                  ·gc.alloc.rate:                   1573.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              71357.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61028.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 117.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34356.850 ops/s
[info]                  ·gc.alloc.rate:                   1570.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              71951.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61580.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34865.115 ops/s
[info]                  ·gc.alloc.rate:               1580.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          71328.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60589.603 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34979.379 ops/s
[info]                  ·gc.alloc.rate:                   1585.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              71333.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90545.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34566.526 ±(99.9%) 1642.484 ops/s [Average]
[info]   (min, avg, max) = (33929.430, 34566.526, 34979.379), stdev = 426.548
[info]   CI (99.9%): [32924.043, 36209.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1570.120 ±(99.9%) 66.246 MB/sec [Average]
[info]   (min, avg, max) = (1541.139, 1570.120, 1585.391), stdev = 17.204
[info]   CI (99.9%): [1503.875, 1636.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   71488.825 ±(99.9%) 1022.475 B/op [Average]
[info]   (min, avg, max) = (71328.009, 71488.825, 71951.896), stdev = 265.533
[info]   CI (99.9%): [70466.351, 72511.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.527 ±(99.9%) 1415.801 MB/sec [Average]
[info]   (min, avg, max) = (1342.250, 1612.527, 2018.181), stdev = 367.679
[info]   CI (99.9%): [196.726, 3028.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   73468.421 ±(99.9%) 65538.869 B/op [Average]
[info]   (min, avg, max) = (60589.603, 73468.421, 93597.475), stdev = 17020.236
[info]   CI (99.9%): [7929.551, 139007.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.581), stdev = 1.110
[info]   CI (99.9%): [≈ 0, 4.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.138 ±(99.9%) 193.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.138, 117.072), stdev = 50.320
[info]   CI (99.9%): [≈ 0, 222.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18548.298 ops/s
[info] # Warmup Iteration   2: 32965.410 ops/s
[info] # Warmup Iteration   3: 34041.765 ops/s
[info] # Warmup Iteration   4: 34028.505 ops/s
[info] # Warmup Iteration   5: 34491.639 ops/s
[info] Iteration   1: 34950.515 ops/s
[info]                  ·gc.alloc.rate:                   1499.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              67507.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60563.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34886.494 ops/s
[info]                  ·gc.alloc.rate:                   1495.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              67473.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60705.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.817 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 34947.365 ops/s
[info]                  ·gc.alloc.rate:                   1523.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              68621.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60659.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34772.392 ops/s
[info]                  ·gc.alloc.rate:                   1524.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              69014.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91205.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35087.661 ops/s
[info]                  ·gc.alloc.rate:               1519.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          68123.375 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60173.013 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34928.886 ±(99.9%) 440.332 ops/s [Average]
[info]   (min, avg, max) = (34772.392, 34928.886, 35087.661), stdev = 114.353
[info]   CI (99.9%): [34488.553, 35369.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1512.596 ±(99.9%) 54.215 MB/sec [Average]
[info]   (min, avg, max) = (1495.640, 1512.596, 1524.933), stdev = 14.080
[info]   CI (99.9%): [1458.381, 1566.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68148.024 ±(99.9%) 2611.350 B/op [Average]
[info]   (min, avg, max) = (67473.447, 68148.024, 69014.307), stdev = 678.159
[info]   CI (99.9%): [65536.674, 70759.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.990 ±(99.9%) 1154.394 MB/sec [Average]
[info]   (min, avg, max) = (1342.169, 1478.990, 2015.266), stdev = 299.792
[info]   CI (99.9%): [324.596, 2633.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66661.352 ±(99.9%) 52839.146 B/op [Average]
[info]   (min, avg, max) = (60173.013, 66661.352, 91205.429), stdev = 13722.158
[info]   CI (99.9%): [13822.206, 119500.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 4.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 2.935), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   30.391 ±(99.9%) 220.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.391, 132.186), stdev = 57.214
[info]   CI (99.9%): [≈ 0, 250.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50855.294 ops/s
[info] # Warmup Iteration   2: 296942.683 ops/s
[info] # Warmup Iteration   3: 319064.862 ops/s
[info] # Warmup Iteration   4: 327672.822 ops/s
[info] # Warmup Iteration   5: 318876.134 ops/s
[info] Iteration   1: 324285.131 ops/s
[info]                  ·gc.alloc.rate:                   1833.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              8899.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9775.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 327338.192 ops/s
[info]                  ·gc.alloc.rate:                   1833.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              8815.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6460.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.716 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 317674.164 ops/s
[info]                  ·gc.alloc.rate:                   1820.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              9021.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9953.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 328299.987 ops/s
[info]                  ·gc.alloc.rate:               1866.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          8950.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9618.791 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 329458.324 ops/s
[info]                  ·gc.alloc.rate:               1860.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          8886.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6393.174 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   325411.159 ±(99.9%) 18221.253 ops/s [Average]
[info]   (min, avg, max) = (317674.164, 325411.159, 329458.324), stdev = 4732.002
[info]   CI (99.9%): [307189.906, 343632.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1843.063 ±(99.9%) 75.534 MB/sec [Average]
[info]   (min, avg, max) = (1820.847, 1843.063, 1866.998), stdev = 19.616
[info]   CI (99.9%): [1767.529, 1918.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8914.682 ±(99.9%) 294.937 B/op [Average]
[info]   (min, avg, max) = (8815.377, 8914.682, 9021.098), stdev = 76.594
[info]   CI (99.9%): [8619.745, 9209.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.323 ±(99.9%) 1411.043 MB/sec [Average]
[info]   (min, avg, max) = (1338.264, 1742.323, 2014.213), stdev = 366.443
[info]   CI (99.9%): [331.280, 3153.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8440.263 ±(99.9%) 7093.278 B/op [Average]
[info]   (min, avg, max) = (6393.174, 8440.263, 9953.969), stdev = 1842.102
[info]   CI (99.9%): [1346.985, 15533.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.685), stdev = 1.641
[info]   CI (99.9%): [≈ 0, 7.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.605 ±(99.9%) 30.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.605, 17.716), stdev = 7.889
[info]   CI (99.9%): [≈ 0, 33.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.731 ops/s
[info] # Warmup Iteration   2: 1420594.150 ops/s
[info] # Warmup Iteration   3: 1482727.795 ops/s
[info] # Warmup Iteration   4: 1534687.066 ops/s
[info] # Warmup Iteration   5: 1534604.184 ops/s
[info] Iteration   1: 1536176.750 ops/s
[info]                  ·gc.alloc.rate:                   502.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              514.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1537535.132 ops/s
[info]                  ·gc.alloc.rate:      484.638 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1535839.340 ops/s
[info]                  ·gc.alloc.rate:               506.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          519.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 682.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1516287.446 ops/s
[info]                  ·gc.alloc.rate:               500.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          519.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 691.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1542563.322 ops/s
[info]                  ·gc.alloc.rate:      486.232 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1533680.398 ±(99.9%) 38850.158 ops/s [Average]
[info]   (min, avg, max) = (1516287.446, 1533680.398, 1542563.322), stdev = 10089.263
[info]   CI (99.9%): [1494830.240, 1572530.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   496.111 ±(99.9%) 38.527 MB/sec [Average]
[info]   (min, avg, max) = (484.638, 496.111, 506.756), stdev = 10.005
[info]   CI (99.9%): [457.584, 534.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   509.081 ±(99.9%) 46.748 B/op [Average]
[info]   (min, avg, max) = (496.000, 509.081, 519.933), stdev = 12.140
[info]   CI (99.9%): [462.333, 555.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.750 ±(99.9%) 1405.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.750, 666.284), stdev = 364.920
[info]   CI (99.9%): [≈ 0, 1804.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   411.335 ±(99.9%) 1445.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 411.335, 691.479), stdev = 375.513
[info]   CI (99.9%): [≈ 0, 1857.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152904.791 ops/s
[info] # Warmup Iteration   2: 604709.109 ops/s
[info] # Warmup Iteration   3: 682757.112 ops/s
[info] # Warmup Iteration   4: 680690.946 ops/s
[info] # Warmup Iteration   5: 672624.833 ops/s
[info] Iteration   1: 670779.864 ops/s
[info]                  ·gc.alloc.rate:               536.288 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1200.379 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 672425.945 ops/s
[info]                  ·gc.alloc.rate:               534.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          1250.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1559.949 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 672497.871 ops/s
[info]                  ·gc.alloc.rate:                   535.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1252.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 682008.190 ops/s
[info]                  ·gc.alloc.rate:               547.698 MB/sec
[info]                  ·gc.alloc.rate.norm:          1263.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1539.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 686274.562 ops/s
[info]                  ·gc.alloc.rate:      530.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 1216.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   676797.287 ±(99.9%) 26592.819 ops/s [Average]
[info]   (min, avg, max) = (670779.864, 676797.287, 686274.562), stdev = 6906.071
[info]   CI (99.9%): [650204.467, 703390.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   536.799 ±(99.9%) 25.114 MB/sec [Average]
[info]   (min, avg, max) = (530.228, 536.799, 547.698), stdev = 6.522
[info]   CI (99.9%): [511.685, 561.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1248.310 ±(99.9%) 72.359 B/op [Average]
[info]   (min, avg, max) = (1216.001, 1248.310, 1263.913), stdev = 18.791
[info]   CI (99.9%): [1175.951, 1320.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.387 ±(99.9%) 1111.961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.387, 667.155), stdev = 288.773
[info]   CI (99.9%): [≈ 0, 1614.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1171.927 ±(99.9%) 2590.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1171.927, 1559.949), stdev = 672.745
[info]   CI (99.9%): [≈ 0, 3762.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093338.498 ops/s
[info] # Warmup Iteration   2: 1732538.140 ops/s
[info] # Warmup Iteration   3: 1853969.865 ops/s
[info] # Warmup Iteration   4: 1890341.663 ops/s
[info] # Warmup Iteration   5: 1833343.513 ops/s
[info] Iteration   1: 1829645.022 ops/s
[info]                  ·gc.alloc.rate:               370.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          318.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 440.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1545950.581 ops/s
[info]                  ·gc.alloc.rate:      298.668 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1795602.468 ops/s
[info]                  ·gc.alloc.rate:               360.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          316.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 448.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1834917.901 ops/s
[info]                  ·gc.alloc.rate:                   374.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1841418.908 ops/s
[info]                  ·gc.alloc.rate:      355.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1769506.976 ±(99.9%) 486024.396 ops/s [Average]
[info]   (min, avg, max) = (1545950.581, 1769506.976, 1841418.908), stdev = 126218.992
[info]   CI (99.9%): [1283482.580, 2255531.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   351.974 ±(99.9%) 118.240 MB/sec [Average]
[info]   (min, avg, max) = (298.668, 351.974, 374.069), stdev = 30.707
[info]   CI (99.9%): [233.735, 470.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   312.785 ±(99.9%) 31.493 B/op [Average]
[info]   (min, avg, max) = (304.000, 312.785, 320.846), stdev = 8.179
[info]   CI (99.9%): [281.292, 344.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.741 ±(99.9%) 1216.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.741, 670.493), stdev = 315.957
[info]   CI (99.9%): [≈ 0, 1555.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   292.723 ±(99.9%) 1049.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 292.723, 575.096), stdev = 272.520
[info]   CI (99.9%): [≈ 0, 1342.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6510.374 ops/s
[info] # Warmup Iteration   2: 89950.521 ops/s
[info] # Warmup Iteration   3: 97378.389 ops/s
[info] # Warmup Iteration   4: 102008.328 ops/s
[info] # Warmup Iteration   5: 102747.759 ops/s
[info] Iteration   1: 103256.792 ops/s
[info]                  ·gc.alloc.rate:               3451.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          52612.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50834.172 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 103310.548 ops/s
[info]                  ·gc.alloc.rate:                   3479.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              53011.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50949.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 103449.633 ops/s
[info]                  ·gc.alloc.rate:               3486.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          53038.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3358.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51094.555 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 102941.615 ops/s
[info]                  ·gc.alloc.rate:               3470.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          53057.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51550.361 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 103457.343 ops/s
[info]                  ·gc.alloc.rate:               3487.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          53053.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51442.809 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   103283.186 ±(99.9%) 808.066 ops/s [Average]
[info]   (min, avg, max) = (102941.615, 103283.186, 103457.343), stdev = 209.852
[info]   CI (99.9%): [102475.120, 104091.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3475.072 ±(99.9%) 56.810 MB/sec [Average]
[info]   (min, avg, max) = (3451.735, 3475.072, 3487.546), stdev = 14.753
[info]   CI (99.9%): [3418.262, 3531.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52954.653 ±(99.9%) 739.956 B/op [Average]
[info]   (min, avg, max) = (52612.451, 52954.653, 53057.727), stdev = 192.164
[info]   CI (99.9%): [52214.698, 53694.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.221 ±(99.9%) 73.530 MB/sec [Average]
[info]   (min, avg, max) = (3335.067, 3358.221, 3381.683), stdev = 19.096
[info]   CI (99.9%): [3284.691, 3431.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   51174.217 ±(99.9%) 1196.554 B/op [Average]
[info]   (min, avg, max) = (50834.172, 51174.217, 51550.361), stdev = 310.741
[info]   CI (99.9%): [49977.663, 52370.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.317), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97542.792 ops/s
[info] # Warmup Iteration   2: 341816.517 ops/s
[info] # Warmup Iteration   3: 351918.288 ops/s
[info] # Warmup Iteration   4: 355607.144 ops/s
[info] # Warmup Iteration   5: 356240.077 ops/s
[info] Iteration   1: 363248.400 ops/s
[info]                  ·gc.alloc.rate:                   1252.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              5427.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5809.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 367694.884 ops/s
[info]                  ·gc.alloc.rate:               1259.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          5389.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2871.295 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 366326.968 ops/s
[info]                  ·gc.alloc.rate:               1256.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          5399.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5765.464 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 365970.967 ops/s
[info]                  ·gc.alloc.rate:                   1252.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              5397.970 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5773.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 368385.214 ops/s
[info]                  ·gc.alloc.rate:                   1274.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              5446.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   366325.287 ±(99.9%) 7631.630 ops/s [Average]
[info]   (min, avg, max) = (363248.400, 366325.287, 368385.214), stdev = 1981.910
[info]   CI (99.9%): [358693.656, 373956.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1259.093 ±(99.9%) 35.622 MB/sec [Average]
[info]   (min, avg, max) = (1252.086, 1259.093, 1274.784), stdev = 9.251
[info]   CI (99.9%): [1223.472, 1294.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5412.231 ±(99.9%) 91.761 B/op [Average]
[info]   (min, avg, max) = (5389.708, 5412.231, 5446.432), stdev = 23.830
[info]   CI (99.9%): [5320.471, 5503.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1206.908 ±(99.9%) 1154.019 MB/sec [Average]
[info]   (min, avg, max) = (670.800, 1206.908, 1341.967), stdev = 299.695
[info]   CI (99.9%): [52.889, 2360.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5190.483 ±(99.9%) 4993.371 B/op [Average]
[info]   (min, avg, max) = (2871.295, 5190.483, 5809.981), stdev = 1296.763
[info]   CI (99.9%): [197.112, 10183.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.706 ±(99.9%) 5.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.706, 3.135), stdev = 1.367
[info]   CI (99.9%): [≈ 0, 5.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.042 ±(99.9%) 22.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.042, 13.518), stdev = 5.896
[info]   CI (99.9%): [≈ 0, 25.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.727 ops/s
[info] # Warmup Iteration   2: 1454167.977 ops/s
[info] # Warmup Iteration   3: 1515328.429 ops/s
[info] # Warmup Iteration   4: 1551944.810 ops/s
[info] # Warmup Iteration   5: 1449873.852 ops/s
[info] Iteration   1: 1552035.580 ops/s
[info]                  ·gc.alloc.rate:                   732.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1601593.327 ops/s
[info]                  ·gc.alloc.rate:               759.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 653.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1554328.105 ops/s
[info]                  ·gc.alloc.rate:                   745.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              754.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1598980.109 ops/s
[info]                  ·gc.alloc.rate:               775.071 MB/sec
[info]                  ·gc.alloc.rate.norm:          762.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1311.409 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1601693.887 ops/s
[info]                  ·gc.alloc.rate:                   765.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1581726.202 ±(99.9%) 100473.348 ops/s [Average]
[info]   (min, avg, max) = (1552035.580, 1581726.202, 1601693.887), stdev = 26092.610
[info]   CI (99.9%): [1481252.853, 1682199.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   755.711 ±(99.9%) 64.672 MB/sec [Average]
[info]   (min, avg, max) = (732.820, 755.711, 775.071), stdev = 16.795
[info]   CI (99.9%): [691.038, 820.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   751.869 ±(99.9%) 29.475 B/op [Average]
[info]   (min, avg, max) = (742.946, 751.869, 762.862), stdev = 7.655
[info]   CI (99.9%): [722.393, 781.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.041 ±(99.9%) 1148.090 MB/sec [Average]
[info]   (min, avg, max) = (664.978, 799.041, 1332.396), stdev = 298.155
[info]   CI (99.9%): [≈ 0, 1947.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   793.727 ±(99.9%) 1114.978 B/op [Average]
[info]   (min, avg, max) = (653.963, 793.727, 1311.409), stdev = 289.556
[info]   CI (99.9%): [≈ 0, 1908.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.022 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.089), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.090), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 448692.030 ops/s
[info] # Warmup Iteration   2: 971053.489 ops/s
[info] # Warmup Iteration   3: 1001149.194 ops/s
[info] # Warmup Iteration   4: 1008847.289 ops/s
[info] # Warmup Iteration   5: 1003597.770 ops/s
[info] Iteration   1: 1021783.560 ops/s
[info]                  ·gc.alloc.rate:               741.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          1142.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1025859.809 ops/s
[info]                  ·gc.alloc.rate:               748.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          1148.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1025.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 992775.102 ops/s
[info]                  ·gc.alloc.rate:                   719.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              1140.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1059.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 992586.708 ops/s
[info]                  ·gc.alloc.rate:               719.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          1140.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060.501 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 990045.068 ops/s
[info]                  ·gc.alloc.rate:               714.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          1135.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1063.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1004610.049 ±(99.9%) 67886.293 ops/s [Average]
[info]   (min, avg, max) = (990045.068, 1004610.049, 1025859.809), stdev = 17629.855
[info]   CI (99.9%): [936723.756, 1072496.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   728.700 ±(99.9%) 59.130 MB/sec [Average]
[info]   (min, avg, max) = (714.490, 728.700, 748.649), stdev = 15.356
[info]   CI (99.9%): [669.570, 787.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1141.507 ±(99.9%) 17.342 B/op [Average]
[info]   (min, avg, max) = (1135.869, 1141.507, 1148.318), stdev = 4.504
[info]   CI (99.9%): [1124.165, 1158.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.330 ±(99.9%) 1.992 MB/sec [Average]
[info]   (min, avg, max) = (667.556, 668.330, 668.817), stdev = 0.517
[info]   CI (99.9%): [666.338, 670.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1047.251 ±(99.9%) 72.755 B/op [Average]
[info]   (min, avg, max) = (1025.116, 1047.251, 1063.209), stdev = 18.894
[info]   CI (99.9%): [974.496, 1120.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1672012.254 ops/s
[info] # Warmup Iteration   2: 2744556.883 ops/s
[info] # Warmup Iteration   3: 2811210.399 ops/s
[info] # Warmup Iteration   4: 2769957.481 ops/s
[info] # Warmup Iteration   5: 2784316.151 ops/s
[info] Iteration   1: 2774446.234 ops/s
[info]                  ·gc.alloc.rate:               1314.069 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 758.034 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2825482.533 ops/s
[info]                  ·gc.alloc.rate:                   1356.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              755.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2781606.304 ops/s
[info]                  ·gc.alloc.rate:                   1337.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              756.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2836763.029 ops/s
[info]                  ·gc.alloc.rate:               1338.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 371.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 2839657.953 ops/s
[info]                  ·gc.alloc.rate:               1353.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          750.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 743.043 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2811591.211 ±(99.9%) 120131.069 ops/s [Average]
[info]   (min, avg, max) = (2774446.234, 2811591.211, 2839657.953), stdev = 31197.657
[info]   CI (99.9%): [2691460.142, 2931722.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1340.009 ±(99.9%) 64.745 MB/sec [Average]
[info]   (min, avg, max) = (1314.069, 1340.009, 1356.372), stdev = 16.814
[info]   CI (99.9%): [1275.264, 1404.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.007 ±(99.9%) 24.096 B/op [Average]
[info]   (min, avg, max) = (742.508, 750.007, 756.880), stdev = 6.258
[info]   CI (99.9%): [725.911, 774.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1204.327 ±(99.9%) 1150.560 MB/sec [Average]
[info]   (min, avg, max) = (669.831, 1204.327, 1340.786), stdev = 298.797
[info]   CI (99.9%): [53.766, 2354.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   674.779 ±(99.9%) 653.108 B/op [Average]
[info]   (min, avg, max) = (371.622, 674.779, 758.034), stdev = 169.610
[info]   CI (99.9%): [21.671, 1327.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1916860.093 ops/s
[info] # Warmup Iteration   2: 3187470.430 ops/s
[info] # Warmup Iteration   3: 3034551.281 ops/s
[info] # Warmup Iteration   4: 3199272.812 ops/s
[info] # Warmup Iteration   5: 3198594.476 ops/s
[info] Iteration   1: 3198015.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3198367.053 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3197051.119 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3198904.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3198462.400 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3198160.108 ±(99.9%) 2680.889 ops/s [Average]
[info]   (min, avg, max) = (3197051.119, 3198160.108, 3198904.375), stdev = 696.218
[info]   CI (99.9%): [3195479.219, 3200840.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138851.876 ops/s
[info] # Warmup Iteration   2: 423948.308 ops/s
[info] # Warmup Iteration   3: 468869.200 ops/s
[info] # Warmup Iteration   4: 458646.272 ops/s
[info] # Warmup Iteration   5: 468014.147 ops/s
[info] Iteration   1: 473288.447 ops/s
[info]                  ·gc.alloc.rate:      543.704 MB/sec
[info]                  ·gc.alloc.rate.norm: 1808.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 485276.256 ops/s
[info]                  ·gc.alloc.rate:               579.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          1879.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2166.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 467272.845 ops/s
[info]                  ·gc.alloc.rate:                   550.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              1852.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2250.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 473978.509 ops/s
[info]                  ·gc.alloc.rate:                   567.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1882.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2220.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 461533.105 ops/s
[info]                  ·gc.alloc.rate:               555.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          1894.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2280.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   472269.832 ±(99.9%) 34082.626 ops/s [Average]
[info]   (min, avg, max) = (461533.105, 472269.832, 485276.256), stdev = 8851.150
[info]   CI (99.9%): [438187.207, 506352.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   559.224 ±(99.9%) 54.741 MB/sec [Average]
[info]   (min, avg, max) = (543.704, 559.224, 579.442), stdev = 14.216
[info]   CI (99.9%): [504.483, 613.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1863.606 ±(99.9%) 133.423 B/op [Average]
[info]   (min, avg, max) = (1808.001, 1863.606, 1894.910), stdev = 34.650
[info]   CI (99.9%): [1730.182, 1997.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.812 ±(99.9%) 1151.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.812, 668.983), stdev = 298.969
[info]   CI (99.9%): [≈ 0, 1686.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1783.788 ±(99.9%) 3843.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1783.788, 2280.733), stdev = 998.052
[info]   CI (99.9%): [≈ 0, 5626.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.070), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48640.894 ops/s
[info] # Warmup Iteration   2: 150035.757 ops/s
[info] # Warmup Iteration   3: 156447.217 ops/s
[info] # Warmup Iteration   4: 159146.483 ops/s
[info] # Warmup Iteration   5: 157099.168 ops/s
[info] Iteration   1: 157962.078 ops/s
[info]                  ·gc.alloc.rate:                   1977.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              19702.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13394.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.790 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.794 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 161041.071 ops/s
[info]                  ·gc.alloc.rate:                   2039.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              19935.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19681.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.749 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 160981.352 ops/s
[info]                  ·gc.alloc.rate:                   2039.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              19938.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19636.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.611 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 161291.177 ops/s
[info]                  ·gc.alloc.rate:               2044.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          19946.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19598.762 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 161467.389 ops/s
[info]                  ·gc.alloc.rate:               2059.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          20072.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19602.403 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   160548.614 ±(99.9%) 5618.342 ops/s [Average]
[info]   (min, avg, max) = (157962.078, 160548.614, 161467.389), stdev = 1459.066
[info]   CI (99.9%): [154930.271, 166166.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2032.171 ±(99.9%) 121.653 MB/sec [Average]
[info]   (min, avg, max) = (1977.492, 2032.171, 2059.341), stdev = 31.593
[info]   CI (99.9%): [1910.518, 2153.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19918.903 ±(99.9%) 516.780 B/op [Average]
[info]   (min, avg, max) = (19702.037, 19918.903, 20072.586), stdev = 134.206
[info]   CI (99.9%): [19402.123, 20435.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.416 ±(99.9%) 1147.425 MB/sec [Average]
[info]   (min, avg, max) = (1344.382, 1877.416, 2013.947), stdev = 297.983
[info]   CI (99.9%): [729.991, 3024.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18382.762 ±(99.9%) 10738.878 B/op [Average]
[info]   (min, avg, max) = (13394.267, 18382.762, 19681.634), stdev = 2788.853
[info]   CI (99.9%): [7643.884, 29121.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.790), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.431 ±(99.9%) 46.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.431, 27.794), stdev = 11.972
[info]   CI (99.9%): [≈ 0, 53.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130574.028 ops/s
[info] # Warmup Iteration   2: 416357.355 ops/s
[info] # Warmup Iteration   3: 453375.210 ops/s
[info] # Warmup Iteration   4: 418242.373 ops/s
[info] # Warmup Iteration   5: 455479.466 ops/s
[info] Iteration   1: 454463.819 ops/s
[info]                  ·gc.alloc.rate:               381.537 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1771.824 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 453738.071 ops/s
[info]                  ·gc.alloc.rate:               383.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          1330.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1774.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 455451.431 ops/s
[info]                  ·gc.alloc.rate:      365.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452444.740 ops/s
[info]                  ·gc.alloc.rate:                   387.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1347.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2317.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.217 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 454869.204 ops/s
[info]                  ·gc.alloc.rate:      365.326 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   454193.453 ±(99.9%) 4464.760 ops/s [Average]
[info]   (min, avg, max) = (452444.740, 454193.453, 455451.431), stdev = 1159.484
[info]   CI (99.9%): [449728.692, 458658.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   376.738 ±(99.9%) 40.020 MB/sec [Average]
[info]   (min, avg, max) = (365.326, 376.738, 387.373), stdev = 10.393
[info]   CI (99.9%): [336.718, 416.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1305.302 ±(99.9%) 149.800 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1305.302, 1347.441), stdev = 38.903
[info]   CI (99.9%): [1155.502, 1455.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   337.952 ±(99.9%) 1212.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.952, 666.182), stdev = 314.879
[info]   CI (99.9%): [≈ 0, 1550.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1172.749 ±(99.9%) 4210.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1172.749, 2317.254), stdev = 1093.363
[info]   CI (99.9%): [≈ 0, 5382.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.217), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 549354.991 ops/s
[info] # Warmup Iteration   2: 1220184.444 ops/s
[info] # Warmup Iteration   3: 1225905.006 ops/s
[info] # Warmup Iteration   4: 1274327.214 ops/s
[info] # Warmup Iteration   5: 1278499.642 ops/s
[info] Iteration   1: 1259439.102 ops/s
[info]                  ·gc.alloc.rate:                   256.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              321.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1247448.059 ops/s
[info]                  ·gc.alloc.rate:      240.993 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1243618.280 ops/s
[info]                  ·gc.alloc.rate:               256.270 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1245314.438 ops/s
[info]                  ·gc.alloc.rate:      240.540 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1237492.853 ops/s
[info]                  ·gc.alloc.rate:               256.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          326.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.657 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1246662.546 ±(99.9%) 30986.658 ops/s [Average]
[info]   (min, avg, max) = (1237492.853, 1246662.546, 1259439.102), stdev = 8047.137
[info]   CI (99.9%): [1215675.889, 1277649.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   250.277 ±(99.9%) 33.449 MB/sec [Average]
[info]   (min, avg, max) = (240.540, 250.277, 256.919), stdev = 8.687
[info]   CI (99.9%): [216.828, 283.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   315.955 ±(99.9%) 42.670 B/op [Average]
[info]   (min, avg, max) = (304.000, 315.955, 326.435), stdev = 11.081
[info]   CI (99.9%): [273.285, 358.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.970 ±(99.9%) 1079.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.970, 511.643), stdev = 280.224
[info]   CI (99.9%): [≈ 0, 1386.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   387.485 ±(99.9%) 1362.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 387.485, 650.657), stdev = 353.748
[info]   CI (99.9%): [≈ 0, 1749.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:37:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14493.901 ops/s
[info] # Warmup Iteration   2: 78954.741 ops/s
[info] # Warmup Iteration   3: 83387.372 ops/s
[info] # Warmup Iteration   4: 84016.777 ops/s
[info] # Warmup Iteration   5: 86322.271 ops/s
[info] Iteration   1: 85512.899 ops/s
[info]                  ·gc.alloc.rate:                   3427.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              63079.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61393.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.383 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 86910.364 ops/s
[info]                  ·gc.alloc.rate:                   3494.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              63289.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60561.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.377 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 85905.472 ops/s
[info]                  ·gc.alloc.rate:                   3443.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              63092.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61542.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 86759.923 ops/s
[info]                  ·gc.alloc.rate:               3491.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          63330.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61163.107 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 87009.959 ops/s
[info]                  ·gc.alloc.rate:               3500.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          63318.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61169.544 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   86419.724 ±(99.9%) 2577.075 ops/s [Average]
[info]   (min, avg, max) = (85512.899, 86419.724, 87009.959), stdev = 669.258
[info]   CI (99.9%): [83842.649, 88996.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3471.469 ±(99.9%) 128.969 MB/sec [Average]
[info]   (min, avg, max) = (3427.238, 3471.469, 3500.404), stdev = 33.493
[info]   CI (99.9%): [3342.500, 3600.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63222.146 ±(99.9%) 482.311 B/op [Average]
[info]   (min, avg, max) = (63079.042, 63222.146, 63330.703), stdev = 125.255
[info]   CI (99.9%): [62739.835, 63704.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.438 ±(99.9%) 72.969 MB/sec [Average]
[info]   (min, avg, max) = (3335.661, 3358.438, 3381.612), stdev = 18.950
[info]   CI (99.9%): [3285.469, 3431.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61165.960 ±(99.9%) 1438.869 B/op [Average]
[info]   (min, avg, max) = (60561.579, 61165.960, 61542.023), stdev = 373.670
[info]   CI (99.9%): [59727.091, 62604.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.228 ±(99.9%) 0.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.228, 0.383), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 1.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109060.351 ops/s
[info] # Warmup Iteration   2: 294776.733 ops/s
[info] # Warmup Iteration   3: 303899.586 ops/s
[info] # Warmup Iteration   4: 305391.837 ops/s
[info] # Warmup Iteration   5: 307133.430 ops/s
[info] Iteration   1: 305003.786 ops/s
[info]                  ·gc.alloc.rate:                   1694.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              8741.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6921.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 306560.573 ops/s
[info]                  ·gc.alloc.rate:                   1740.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              8933.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10338.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 306169.756 ops/s
[info]                  ·gc.alloc.rate:               1713.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          8808.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6889.583 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 306888.227 ops/s
[info]                  ·gc.alloc.rate:               1741.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          8933.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10298.545 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 309411.080 ops/s
[info]                  ·gc.alloc.rate:               1744.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          8871.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6809.155 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   306806.684 ±(99.9%) 6240.602 ops/s [Average]
[info]   (min, avg, max) = (305003.786, 306806.684, 309411.080), stdev = 1620.665
[info]   CI (99.9%): [300566.082, 313047.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.775 ±(99.9%) 84.910 MB/sec [Average]
[info]   (min, avg, max) = (1694.081, 1726.775, 1744.068), stdev = 22.051
[info]   CI (99.9%): [1641.865, 1811.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8857.720 ±(99.9%) 318.570 B/op [Average]
[info]   (min, avg, max) = (8741.883, 8857.720, 8933.245), stdev = 82.731
[info]   CI (99.9%): [8539.150, 9176.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.425 ±(99.9%) 1414.993 MB/sec [Average]
[info]   (min, avg, max) = (1338.627, 1608.425, 2013.772), stdev = 367.469
[info]   CI (99.9%): [193.431, 3023.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8251.314 ±(99.9%) 7267.772 B/op [Average]
[info]   (min, avg, max) = (6809.155, 8251.314, 10338.126), stdev = 1887.417
[info]   CI (99.9%): [983.543, 15519.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.456), stdev = 1.543
[info]   CI (99.9%): [≈ 0, 6.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.570 ±(99.9%) 30.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.570, 17.740), stdev = 7.922
[info]   CI (99.9%): [≈ 0, 34.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586412.027 ops/s
[info] # Warmup Iteration   2: 1838287.874 ops/s
[info] # Warmup Iteration   3: 1849068.835 ops/s
[info] # Warmup Iteration   4: 1941659.043 ops/s
[info] # Warmup Iteration   5: 1949770.382 ops/s
[info] Iteration   1: 1941829.062 ops/s
[info]                  ·gc.alloc.rate:               1037.646 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1083.071 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1914140.065 ops/s
[info]                  ·gc.alloc.rate:               998.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          821.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1891453.372 ops/s
[info]                  ·gc.alloc.rate:                   1002.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              833.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1864672.530 ops/s
[info]                  ·gc.alloc.rate:                   984.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              830.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     565.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1894664.410 ops/s
[info]                  ·gc.alloc.rate:               1000.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          830.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1112.791 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1901351.888 ±(99.9%) 110433.912 ops/s [Average]
[info]   (min, avg, max) = (1864672.530, 1901351.888, 1941829.062), stdev = 28679.336
[info]   CI (99.9%): [1790917.976, 2011785.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1004.632 ±(99.9%) 76.285 MB/sec [Average]
[info]   (min, avg, max) = (984.109, 1004.632, 1037.646), stdev = 19.811
[info]   CI (99.9%): [928.347, 1080.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.544 ±(99.9%) 27.576 B/op [Average]
[info]   (min, avg, max) = (821.154, 831.544, 841.050), stdev = 7.161
[info]   CI (99.9%): [803.968, 859.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.521 ±(99.9%) 1410.962 MB/sec [Average]
[info]   (min, avg, max) = (668.799, 1070.521, 1339.594), stdev = 366.422
[info]   CI (99.9%): [≈ 0, 2481.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   884.878 ±(99.9%) 1152.030 B/op [Average]
[info]   (min, avg, max) = (549.904, 884.878, 1113.579), stdev = 299.179
[info]   CI (99.9%): [≈ 0, 2036.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1403744.268 ops/s
[info] # Warmup Iteration   2: 2670195.386 ops/s
[info] # Warmup Iteration   3: 2752910.712 ops/s
[info] # Warmup Iteration   4: 2871578.202 ops/s
[info] # Warmup Iteration   5: 2862349.256 ops/s
[info] Iteration   1: 2858526.861 ops/s
[info]                  ·gc.alloc.rate:               792.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          436.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.154 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2869720.810 ops/s
[info]                  ·gc.alloc.rate:               789.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.076 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2870708.826 ops/s
[info]                  ·gc.alloc.rate:                   809.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2851993.632 ops/s
[info]                  ·gc.alloc.rate:                   782.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              431.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2862482.035 ops/s
[info]                  ·gc.alloc.rate:               786.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2862686.433 ±(99.9%) 30168.084 ops/s [Average]
[info]   (min, avg, max) = (2851993.632, 2862686.433, 2870708.826), stdev = 7834.556
[info]   CI (99.9%): [2832518.349, 2892854.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   792.084 ±(99.9%) 39.704 MB/sec [Average]
[info]   (min, avg, max) = (782.599, 792.084, 809.307), stdev = 10.311
[info]   CI (99.9%): [752.380, 831.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.441 ±(99.9%) 18.888 B/op [Average]
[info]   (min, avg, max) = (431.871, 435.441, 443.640), stdev = 4.905
[info]   CI (99.9%): [416.553, 454.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.630 ±(99.9%) 1156.312 MB/sec [Average]
[info]   (min, avg, max) = (670.448, 805.630, 1342.805), stdev = 300.291
[info]   CI (99.9%): [≈ 0, 1961.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   442.685 ±(99.9%) 631.585 B/op [Average]
[info]   (min, avg, max) = (368.076, 442.685, 736.089), stdev = 164.021
[info]   CI (99.9%): [≈ 0, 1074.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1594818.075 ops/s
[info] # Warmup Iteration   2: 2948637.030 ops/s
[info] # Warmup Iteration   3: 3003158.825 ops/s
[info] # Warmup Iteration   4: 3014144.876 ops/s
[info] # Warmup Iteration   5: 3014341.888 ops/s
[info] Iteration   1: 3013303.468 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3019640.710 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3006444.114 ops/s
[info]                  ·gc.alloc.rate:      4.277 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.239 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3026678.174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3030087.020 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3019230.697 ±(99.9%) 37140.330 ops/s [Average]
[info]   (min, avg, max) = (3006444.114, 3019230.697, 3030087.020), stdev = 9645.226
[info]   CI (99.9%): [2982090.367, 3056371.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.856 ±(99.9%) 7.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.856, 4.277), stdev = 1.913
[info]   CI (99.9%): [≈ 0, 8.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.448 ±(99.9%) 3.855 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.448, 2.239), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14932.269 ops/s
[info] # Warmup Iteration   2: 45313.314 ops/s
[info] # Warmup Iteration   3: 48026.616 ops/s
[info] # Warmup Iteration   4: 47985.216 ops/s
[info] # Warmup Iteration   5: 47417.779 ops/s
[info] Iteration   1: 47773.366 ops/s
[info]                  ·gc.alloc.rate:                   2158.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              71103.340 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66273.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 48384.769 ops/s
[info]                  ·gc.alloc.rate:                   2183.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              71029.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65286.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.677 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 49218.190 ops/s
[info]                  ·gc.alloc.rate:                   2207.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              70598.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64106.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.994 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 49319.516 ops/s
[info]                  ·gc.alloc.rate:               2238.847 MB/sec
[info]                  ·gc.alloc.rate.norm:          71449.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64036.068 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 49203.784 ops/s
[info]                  ·gc.alloc.rate:               2261.531 MB/sec
[info]                  ·gc.alloc.rate.norm:          72336.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85761.977 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   48779.925 ±(99.9%) 2606.092 ops/s [Average]
[info]   (min, avg, max) = (47773.366, 48779.925, 49319.516), stdev = 676.794
[info]   CI (99.9%): [46173.833, 51386.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2210.184 ±(99.9%) 158.688 MB/sec [Average]
[info]   (min, avg, max) = (2158.807, 2210.184, 2261.531), stdev = 41.211
[info]   CI (99.9%): [2051.495, 2368.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71303.557 ±(99.9%) 2510.331 B/op [Average]
[info]   (min, avg, max) = (70598.716, 71303.557, 72336.445), stdev = 651.925
[info]   CI (99.9%): [68793.225, 73813.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2142.422 ±(99.9%) 1159.953 MB/sec [Average]
[info]   (min, avg, max) = (2004.777, 2142.422, 2681.268), stdev = 301.236
[info]   CI (99.9%): [982.469, 3302.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69092.982 ±(99.9%) 36057.038 B/op [Average]
[info]   (min, avg, max) = (64036.068, 69092.982, 85761.977), stdev = 9363.898
[info]   CI (99.9%): [33035.944, 105150.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.873), stdev = 1.716
[info]   CI (99.9%): [≈ 0, 7.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.445 ±(99.9%) 217.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.445, 127.555), stdev = 56.546
[info]   CI (99.9%): [≈ 0, 244.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79766.432 ops/s
[info] # Warmup Iteration   2: 227604.644 ops/s
[info] # Warmup Iteration   3: 238483.815 ops/s
[info] # Warmup Iteration   4: 243902.769 ops/s
[info] # Warmup Iteration   5: 245622.357 ops/s
[info] Iteration   1: 242351.385 ops/s
[info]                  ·gc.alloc.rate:                   2645.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              17183.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13060.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 244726.574 ops/s
[info]                  ·gc.alloc.rate:                   2684.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              17262.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17230.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 239269.825 ops/s
[info]                  ·gc.alloc.rate:               2641.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          17372.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2683.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17650.227 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 246017.875 ops/s
[info]                  ·gc.alloc.rate:               2713.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          17357.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17204.372 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 245876.672 ops/s
[info]                  ·gc.alloc.rate:               2712.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          17358.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17260.931 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   243648.466 ±(99.9%) 10992.262 ops/s [Average]
[info]   (min, avg, max) = (239269.825, 243648.466, 246017.875), stdev = 2854.655
[info]   CI (99.9%): [232656.205, 254640.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2679.593 ±(99.9%) 134.439 MB/sec [Average]
[info]   (min, avg, max) = (2641.225, 2679.593, 2713.830), stdev = 34.913
[info]   CI (99.9%): [2545.154, 2814.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17306.801 ±(99.9%) 315.493 B/op [Average]
[info]   (min, avg, max) = (17183.056, 17306.801, 17372.566), stdev = 81.933
[info]   CI (99.9%): [16991.308, 17622.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2552.241 ±(99.9%) 1165.141 MB/sec [Average]
[info]   (min, avg, max) = (2011.093, 2552.241, 2697.085), stdev = 302.583
[info]   CI (99.9%): [1387.100, 3717.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16481.284 ±(99.9%) 7397.244 B/op [Average]
[info]   (min, avg, max) = (13060.317, 16481.284, 17650.227), stdev = 1921.041
[info]   CI (99.9%): [9084.041, 23878.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.229), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 2.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 1.487), stdev = 0.653
[info]   CI (99.9%): [≈ 0, 2.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132125.489 ops/s
[info] # Warmup Iteration   2: 366134.290 ops/s
[info] # Warmup Iteration   3: 384847.287 ops/s
[info] # Warmup Iteration   4: 384928.905 ops/s
[info] # Warmup Iteration   5: 384176.313 ops/s
[info] Iteration   1: 386479.288 ops/s
[info]                  ·gc.alloc.rate:                   1971.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              8027.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5453.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 380248.949 ops/s
[info]                  ·gc.alloc.rate:                   1961.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              8117.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8303.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.585 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 384557.383 ops/s
[info]                  ·gc.alloc.rate:                   1987.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              8132.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8195.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 376226.126 ops/s
[info]                  ·gc.alloc.rate:               1959.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          8196.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8376.659 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 376046.960 ops/s
[info]                  ·gc.alloc.rate:                   1959.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              8199.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8396.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   380711.741 ±(99.9%) 18280.287 ops/s [Average]
[info]   (min, avg, max) = (376046.960, 380711.741, 386479.288), stdev = 4747.332
[info]   CI (99.9%): [362431.454, 398992.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1967.684 ±(99.9%) 46.831 MB/sec [Average]
[info]   (min, avg, max) = (1959.050, 1967.684, 1987.447), stdev = 12.162
[info]   CI (99.9%): [1920.852, 2014.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8134.553 ±(99.9%) 271.159 B/op [Average]
[info]   (min, avg, max) = (8027.346, 8134.553, 8199.022), stdev = 70.419
[info]   CI (99.9%): [7863.394, 8405.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1871.374 ±(99.9%) 1145.034 MB/sec [Average]
[info]   (min, avg, max) = (1339.446, 1871.374, 2006.121), stdev = 297.362
[info]   CI (99.9%): [726.339, 3016.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7745.092 ±(99.9%) 4941.146 B/op [Average]
[info]   (min, avg, max) = (5453.958, 7745.092, 8396.024), stdev = 1283.200
[info]   CI (99.9%): [2803.946, 12686.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.639 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.394), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.332 ±(99.9%) 22.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.332, 13.818), stdev = 5.961
[info]   CI (99.9%): [≈ 0, 26.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1222148.476 ops/s
[info] # Warmup Iteration   2: 2139155.103 ops/s
[info] # Warmup Iteration   3: 2224109.027 ops/s
[info] # Warmup Iteration   4: 2233246.291 ops/s
[info] # Warmup Iteration   5: 2241722.926 ops/s
[info] Iteration   1: 2242639.178 ops/s
[info]                  ·gc.alloc.rate:                   800.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              561.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2220521.742 ops/s
[info]                  ·gc.alloc.rate:                   809.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              573.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2202353.845 ops/s
[info]                  ·gc.alloc.rate:               778.604 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 480.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2231458.074 ops/s
[info]                  ·gc.alloc.rate:               788.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 473.835 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2243819.777 ops/s
[info]                  ·gc.alloc.rate:                   790.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2228158.523 ±(99.9%) 66418.114 ops/s [Average]
[info]   (min, avg, max) = (2202353.845, 2228158.523, 2243819.777), stdev = 17248.573
[info]   CI (99.9%): [2161740.409, 2294576.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   793.453 ±(99.9%) 45.936 MB/sec [Average]
[info]   (min, avg, max) = (778.604, 793.453, 809.739), stdev = 11.930
[info]   CI (99.9%): [747.516, 839.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   560.361 ±(99.9%) 30.826 B/op [Average]
[info]   (min, avg, max) = (554.301, 560.361, 573.817), stdev = 8.005
[info]   CI (99.9%): [529.535, 591.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.060 ±(99.9%) 1156.299 MB/sec [Average]
[info]   (min, avg, max) = (670.876, 806.060, 1343.229), stdev = 300.287
[info]   CI (99.9%): [≈ 0, 1962.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   569.606 ±(99.9%) 822.977 B/op [Average]
[info]   (min, avg, max) = (470.765, 569.606, 951.871), stdev = 213.725
[info]   CI (99.9%): [≈ 0, 1392.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.416), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.295), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8973.620 ops/s
[info] # Warmup Iteration   2: 73951.658 ops/s
[info] # Warmup Iteration   3: 87354.863 ops/s
[info] # Warmup Iteration   4: 88915.581 ops/s
[info] # Warmup Iteration   5: 88613.451 ops/s
[info] Iteration   1: 89645.941 ops/s
[info]                  ·gc.alloc.rate:                   3519.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              61772.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59030.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.193 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 89597.740 ops/s
[info]                  ·gc.alloc.rate:                   3543.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              62252.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59291.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 89677.720 ops/s
[info]                  ·gc.alloc.rate:               3548.045 MB/sec
[info]                  ·gc.alloc.rate.norm:          62267.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3384.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59403.212 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 88289.175 ops/s
[info]                  ·gc.alloc.rate:                   3494.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              62297.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60467.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 89794.823 ops/s
[info]                  ·gc.alloc.rate:               3554.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          62278.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3398.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59535.326 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   89401.080 ±(99.9%) 2409.752 ops/s [Average]
[info]   (min, avg, max) = (88289.175, 89401.080, 89794.823), stdev = 625.805
[info]   CI (99.9%): [86991.328, 91810.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3532.124 ±(99.9%) 95.494 MB/sec [Average]
[info]   (min, avg, max) = (3494.850, 3532.124, 3554.699), stdev = 24.799
[info]   CI (99.9%): [3436.631, 3627.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62173.748 ±(99.9%) 865.377 B/op [Average]
[info]   (min, avg, max) = (61772.802, 62173.748, 62297.314), stdev = 224.736
[info]   CI (99.9%): [61308.371, 63039.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3382.676 ±(99.9%) 53.717 MB/sec [Average]
[info]   (min, avg, max) = (3362.910, 3382.676, 3398.112), stdev = 13.950
[info]   CI (99.9%): [3328.959, 3436.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   59545.574 ±(99.9%) 2109.441 B/op [Average]
[info]   (min, avg, max) = (59030.642, 59545.574, 60467.594), stdev = 547.815
[info]   CI (99.9%): [57436.134, 61655.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.586 ±(99.9%) 3.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.586, 2.193), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 4.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63465.650 ops/s
[info] # Warmup Iteration   2: 250465.099 ops/s
[info] # Warmup Iteration   3: 258432.267 ops/s
[info] # Warmup Iteration   4: 268098.752 ops/s
[info] # Warmup Iteration   5: 265002.992 ops/s
[info] Iteration   1: 269039.776 ops/s
[info]                  ·gc.alloc.rate:                   2168.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              12685.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11780.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 269920.130 ops/s
[info]                  ·gc.alloc.rate:                   2189.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              12768.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11707.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 268087.269 ops/s
[info]                  ·gc.alloc.rate:                   2177.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              12781.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15707.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 270812.114 ops/s
[info]                  ·gc.alloc.rate:                   2199.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              12780.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11674.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 270504.440 ops/s
[info]                  ·gc.alloc.rate:               2197.587 MB/sec
[info]                  ·gc.alloc.rate.norm:          12784.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11710.920 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   269672.746 ±(99.9%) 4290.255 ops/s [Average]
[info]   (min, avg, max) = (268087.269, 269672.746, 270812.114), stdev = 1114.166
[info]   CI (99.9%): [265382.491, 273963.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2186.527 ±(99.9%) 50.709 MB/sec [Average]
[info]   (min, avg, max) = (2168.726, 2186.527, 2199.199), stdev = 13.169
[info]   CI (99.9%): [2135.818, 2237.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12760.369 ±(99.9%) 162.443 B/op [Average]
[info]   (min, avg, max) = (12685.685, 12760.369, 12784.450), stdev = 42.186
[info]   CI (99.9%): [12597.926, 12922.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2143.848 ±(99.9%) 1145.031 MB/sec [Average]
[info]   (min, avg, max) = (2007.681, 2143.848, 2675.762), stdev = 297.361
[info]   CI (99.9%): [998.816, 3288.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12516.083 ±(99.9%) 6871.500 B/op [Average]
[info]   (min, avg, max) = (11674.460, 12516.083, 15707.561), stdev = 1784.507
[info]   CI (99.9%): [5644.583, 19387.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 6.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.602), stdev = 1.604
[info]   CI (99.9%): [≈ 0, 6.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.286 ±(99.9%) 36.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.286, 21.068), stdev = 9.381
[info]   CI (99.9%): [≈ 0, 40.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 634251.244 ops/s
[info] # Warmup Iteration   2: 1485822.617 ops/s
[info] # Warmup Iteration   3: 1543360.383 ops/s
[info] # Warmup Iteration   4: 1579004.178 ops/s
[info] # Warmup Iteration   5: 1590650.679 ops/s
[info] Iteration   1: 1585529.827 ops/s
[info]                  ·gc.alloc.rate:                   968.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              961.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1327.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1586237.856 ops/s
[info]                  ·gc.alloc.rate:               943.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          936.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 663.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1547806.447 ops/s
[info]                  ·gc.alloc.rate:                   920.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     680.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1580959.889 ops/s
[info]                  ·gc.alloc.rate:               952.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          948.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1332.977 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1585691.288 ops/s
[info]                  ·gc.alloc.rate:               940.865 MB/sec
[info]                  ·gc.alloc.rate.norm:          933.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 665.153 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1577245.061 ±(99.9%) 63892.801 ops/s [Average]
[info]   (min, avg, max) = (1547806.447, 1577245.061, 1586237.856), stdev = 16592.758
[info]   CI (99.9%): [1513352.260, 1641137.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   945.337 ±(99.9%) 67.414 MB/sec [Average]
[info]   (min, avg, max) = (920.842, 945.337, 968.782), stdev = 17.507
[info]   CI (99.9%): [877.924, 1012.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   943.240 ±(99.9%) 45.284 B/op [Average]
[info]   (min, avg, max) = (933.872, 943.240, 961.662), stdev = 11.760
[info]   CI (99.9%): [897.956, 988.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.900 ±(99.9%) 1409.853 MB/sec [Average]
[info]   (min, avg, max) = (669.149, 936.900, 1339.017), stdev = 366.134
[info]   CI (99.9%): [≈ 0, 2346.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   933.908 ±(99.9%) 1392.729 B/op [Average]
[info]   (min, avg, max) = (663.905, 933.908, 1332.977), stdev = 361.687
[info]   CI (99.9%): [≈ 0, 2326.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1643594.178 ops/s
[info] # Warmup Iteration   2: 2786138.159 ops/s
[info] # Warmup Iteration   3: 2850833.759 ops/s
[info] # Warmup Iteration   4: 2866756.187 ops/s
[info] # Warmup Iteration   5: 2844373.559 ops/s
[info] Iteration   1: 2852592.379 ops/s
[info]                  ·gc.alloc.rate:               988.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          545.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.462 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2675777.014 ops/s
[info]                  ·gc.alloc.rate:                   941.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2868241.754 ops/s
[info]                  ·gc.alloc.rate:               991.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.818 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2857304.890 ops/s
[info]                  ·gc.alloc.rate:               997.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          549.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 370.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2861899.745 ops/s
[info]                  ·gc.alloc.rate:                   1015.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              558.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2823163.156 ±(99.9%) 318039.735 ops/s [Average]
[info]   (min, avg, max) = (2675777.014, 2823163.156, 2868241.754), stdev = 82593.909
[info]   CI (99.9%): [2505123.421, 3141202.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   986.781 ±(99.9%) 105.570 MB/sec [Average]
[info]   (min, avg, max) = (941.398, 986.781, 1015.187), stdev = 27.416
[info]   CI (99.9%): [881.211, 1092.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.134 ±(99.9%) 22.756 B/op [Average]
[info]   (min, avg, max) = (544.066, 550.134, 558.246), stdev = 5.910
[info]   CI (99.9%): [527.378, 572.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941.026 ±(99.9%) 1418.868 MB/sec [Average]
[info]   (min, avg, max) = (671.464, 941.026, 1345.720), stdev = 368.475
[info]   CI (99.9%): [≈ 0, 2359.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   527.955 ±(99.9%) 836.545 B/op [Average]
[info]   (min, avg, max) = (368.818, 527.955, 790.275), stdev = 217.248
[info]   CI (99.9%): [≈ 0, 1364.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1964439.182 ops/s
[info] # Warmup Iteration   2: 2958976.433 ops/s
[info] # Warmup Iteration   3: 3169092.804 ops/s
[info] # Warmup Iteration   4: 3171242.752 ops/s
[info] # Warmup Iteration   5: 2949835.161 ops/s
[info] Iteration   1: 3174095.623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3171613.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3173051.887 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3173786.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3172469.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3173003.547 ±(99.9%) 3862.992 ops/s [Average]
[info]   (min, avg, max) = (3171613.470, 3173003.547, 3174095.623), stdev = 1003.207
[info]   CI (99.9%): [3169140.555, 3176866.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89594.826 ops/s
[info] # Warmup Iteration   2: 378874.458 ops/s
[info] # Warmup Iteration   3: 397591.426 ops/s
[info] # Warmup Iteration   4: 395215.772 ops/s
[info] # Warmup Iteration   5: 396561.594 ops/s
[info] Iteration   1: 390928.725 ops/s
[info]                  ·gc.alloc.rate:               2494.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          10041.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8056.315 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 400747.796 ops/s
[info]                  ·gc.alloc.rate:                   2582.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              10141.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10467.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 403430.793 ops/s
[info]                  ·gc.alloc.rate:               2616.042 MB/sec
[info]                  ·gc.alloc.rate.norm:          10205.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10417.462 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 399605.182 ops/s
[info]                  ·gc.alloc.rate:                   2592.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              10209.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10550.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 393338.866 ops/s
[info]                  ·gc.alloc.rate:               2526.913 MB/sec
[info]                  ·gc.alloc.rate.norm:          10110.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8060.495 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   397610.273 ±(99.9%) 20247.044 ops/s [Average]
[info]   (min, avg, max) = (390928.725, 397610.273, 403430.793), stdev = 5258.093
[info]   CI (99.9%): [377363.229, 417857.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2562.470 ±(99.9%) 192.609 MB/sec [Average]
[info]   (min, avg, max) = (2494.726, 2562.470, 2616.042), stdev = 50.020
[info]   CI (99.9%): [2369.862, 2755.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10141.757 ±(99.9%) 270.206 B/op [Average]
[info]   (min, avg, max) = (10041.444, 10141.757, 10209.647), stdev = 70.172
[info]   CI (99.9%): [9871.551, 10411.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2406.141 ±(99.9%) 1399.712 MB/sec [Average]
[info]   (min, avg, max) = (2001.535, 2406.141, 2678.871), stdev = 363.501
[info]   CI (99.9%): [1006.429, 3805.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9510.488 ±(99.9%) 5107.582 B/op [Average]
[info]   (min, avg, max) = (8056.315, 9510.488, 10550.905), stdev = 1326.423
[info]   CI (99.9%): [4402.906, 14618.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6168.911 ops/s
[info] # Warmup Iteration   2: 21527.759 ops/s
[info] # Warmup Iteration   3: 25769.065 ops/s
[info] # Warmup Iteration   4: 25777.390 ops/s
[info] # Warmup Iteration   5: 25755.095 ops/s
[info] Iteration   1: 25211.220 ops/s
[info]                  ·gc.alloc.rate:                   1630.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              101786.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83839.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 25688.329 ops/s
[info]                  ·gc.alloc.rate:                   1650.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              101052.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123537.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.421 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 26453.665 ops/s
[info]                  ·gc.alloc.rate:                   1683.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              100123.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79894.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26516.067 ops/s
[info]                  ·gc.alloc.rate:                   1720.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              102100.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119289.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.471 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 26510.308 ops/s
[info]                  ·gc.alloc.rate:               1705.965 MB/sec
[info]                  ·gc.alloc.rate.norm:          101282.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79488.507 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26075.918 ±(99.9%) 2296.745 ops/s [Average]
[info]   (min, avg, max) = (25211.220, 26075.918, 26516.067), stdev = 596.457
[info]   CI (99.9%): [23779.172, 28372.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1678.066 ±(99.9%) 144.229 MB/sec [Average]
[info]   (min, avg, max) = (1630.767, 1678.066, 1720.372), stdev = 37.456
[info]   CI (99.9%): [1533.837, 1822.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   101269.237 ±(99.9%) 2931.883 B/op [Average]
[info]   (min, avg, max) = (100123.614, 101269.237, 102100.958), stdev = 761.401
[info]   CI (99.9%): [98337.354, 104201.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.485 ±(99.9%) 1417.184 MB/sec [Average]
[info]   (min, avg, max) = (1338.872, 1610.485, 2017.280), stdev = 368.038
[info]   CI (99.9%): [193.300, 3027.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   97209.805 ±(99.9%) 85525.550 B/op [Average]
[info]   (min, avg, max) = (79488.507, 97209.805, 123537.133), stdev = 22210.714
[info]   CI (99.9%): [11684.255, 182735.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.603), stdev = 1.140
[info]   CI (99.9%): [≈ 0, 5.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.509 ±(99.9%) 268.285 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.509, 159.421), stdev = 69.673
[info]   CI (99.9%): [≈ 0, 314.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.564
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.809 ops/s
[info] # Warmup Iteration   2: 83226.319 ops/s
[info] # Warmup Iteration   3: 98379.559 ops/s
[info] # Warmup Iteration   4: 98541.524 ops/s
[info] # Warmup Iteration   5: 98830.513 ops/s
[info] Iteration   1: 98436.208 ops/s
[info]                  ·gc.alloc.rate:                   965.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              15429.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21322.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 98899.554 ops/s
[info]                  ·gc.alloc.rate:               951.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          15131.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10616.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 99019.328 ops/s
[info]                  ·gc.alloc.rate:                   952.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              15138.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10614.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 98528.695 ops/s
[info]                  ·gc.alloc.rate:                   960.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              15345.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21340.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 98484.060 ops/s
[info]                  ·gc.alloc.rate:               944.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          15090.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10677.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   98673.569 ±(99.9%) 1025.785 ops/s [Average]
[info]   (min, avg, max) = (98436.208, 98673.569, 99019.328), stdev = 266.393
[info]   CI (99.9%): [97647.784, 99699.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   954.723 ±(99.9%) 31.590 MB/sec [Average]
[info]   (min, avg, max) = (944.264, 954.723, 965.035), stdev = 8.204
[info]   CI (99.9%): [923.133, 986.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15227.240 ±(99.9%) 579.780 B/op [Average]
[info]   (min, avg, max) = (15090.607, 15227.240, 15429.526), stdev = 150.567
[info]   CI (99.9%): [14647.460, 15807.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   934.577 ±(99.9%) 1406.799 MB/sec [Average]
[info]   (min, avg, max) = (667.228, 934.577, 1335.947), stdev = 365.341
[info]   CI (99.9%): [≈ 0, 2341.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14914.381 ±(99.9%) 22557.888 B/op [Average]
[info]   (min, avg, max) = (10614.725, 14914.381, 21340.550), stdev = 5858.212
[info]   CI (99.9%): [≈ 0, 37472.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.623), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12360.761 ops/s
[info] # Warmup Iteration   2: 65558.052 ops/s
[info] # Warmup Iteration   3: 67590.425 ops/s
[info] # Warmup Iteration   4: 68602.059 ops/s
[info] # Warmup Iteration   5: 68263.827 ops/s
[info] Iteration   1: 68970.399 ops/s
[info]                  ·gc.alloc.rate:               1221.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          27874.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15223.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 68273.004 ops/s
[info]                  ·gc.alloc.rate:                   1224.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              28223.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30774.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68664.342 ops/s
[info]                  ·gc.alloc.rate:               1228.468 MB/sec
[info]                  ·gc.alloc.rate.norm:          28156.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30629.847 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 66368.510 ops/s
[info]                  ·gc.alloc.rate:                   1200.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              28458.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31719.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 67164.649 ops/s
[info]                  ·gc.alloc.rate:                   1212.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              28406.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31322.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   67888.181 ±(99.9%) 4198.177 ops/s [Average]
[info]   (min, avg, max) = (66368.510, 67888.181, 68970.399), stdev = 1090.253
[info]   CI (99.9%): [63690.003, 72086.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217.327 ±(99.9%) 43.696 MB/sec [Average]
[info]   (min, avg, max) = (1200.071, 1217.327, 1228.468), stdev = 11.348
[info]   CI (99.9%): [1173.631, 1261.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28224.022 ±(99.9%) 893.242 B/op [Average]
[info]   (min, avg, max) = (27874.499, 28224.022, 28458.820), stdev = 231.972
[info]   CI (99.9%): [27330.779, 29117.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.553 ±(99.9%) 1152.545 MB/sec [Average]
[info]   (min, avg, max) = (667.129, 1202.553, 1337.589), stdev = 299.312
[info]   CI (99.9%): [50.008, 2355.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27934.084 ±(99.9%) 27411.871 B/op [Average]
[info]   (min, avg, max) = (15223.520, 27934.084, 31719.981), stdev = 7118.776
[info]   CI (99.9%): [522.213, 55345.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 4.080), stdev = 1.816
[info]   CI (99.9%): [≈ 0, 7.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.737 ±(99.9%) 165.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.737, 96.755), stdev = 43.059
[info]   CI (99.9%): [≈ 0, 185.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52088.257 ops/s
[info] # Warmup Iteration   2: 133561.827 ops/s
[info] # Warmup Iteration   3: 131249.667 ops/s
[info] # Warmup Iteration   4: 138918.454 ops/s
[info] # Warmup Iteration   5: 139816.286 ops/s
[info] Iteration   1: 139090.642 ops/s
[info]                  ·gc.alloc.rate:               981.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          11101.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15195.989 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 131779.024 ops/s
[info]                  ·gc.alloc.rate:               904.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          10799.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8027.536 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 139708.030 ops/s
[info]                  ·gc.alloc.rate:                   956.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              10769.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7571.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 136340.891 ops/s
[info]                  ·gc.alloc.rate:                   946.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              10921.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15518.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 136863.840 ops/s
[info]                  ·gc.alloc.rate:                   935.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              10755.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7736.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   136756.485 ±(99.9%) 12042.003 ops/s [Average]
[info]   (min, avg, max) = (131779.024, 136756.485, 139708.030), stdev = 3127.270
[info]   CI (99.9%): [124714.483, 148798.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   944.627 ±(99.9%) 108.773 MB/sec [Average]
[info]   (min, avg, max) = (904.224, 944.627, 981.228), stdev = 28.248
[info]   CI (99.9%): [835.854, 1053.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10869.274 ±(99.9%) 559.706 B/op [Average]
[info]   (min, avg, max) = (10755.310, 10869.274, 11101.413), stdev = 145.354
[info]   CI (99.9%): [10309.568, 11428.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.954 ±(99.9%) 1415.855 MB/sec [Average]
[info]   (min, avg, max) = (672.140, 940.954, 1344.343), stdev = 367.693
[info]   CI (99.9%): [≈ 0, 2356.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10809.992 ±(99.9%) 16001.809 B/op [Average]
[info]   (min, avg, max) = (7571.623, 10809.992, 15518.054), stdev = 4155.619
[info]   CI (99.9%): [≈ 0, 26811.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 1.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 0.704), stdev = 0.287
[info]   CI (99.9%): [≈ 0, 1.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2230.153 ops/s
[info] # Warmup Iteration   2: 30164.842 ops/s
[info] # Warmup Iteration   3: 35629.916 ops/s
[info] # Warmup Iteration   4: 35847.189 ops/s
[info] # Warmup Iteration   5: 36245.543 ops/s
[info] Iteration   1: 36436.110 ops/s
[info]                  ·gc.alloc.rate:                   1798.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              77670.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57793.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 35459.608 ops/s
[info]                  ·gc.alloc.rate:                   1777.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              78873.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89133.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 36269.008 ops/s
[info]                  ·gc.alloc.rate:                   1801.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              78181.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57931.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 36470.131 ops/s
[info]                  ·gc.alloc.rate:                   1836.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              79253.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86298.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36138.011 ops/s
[info]                  ·gc.alloc.rate:               1823.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          79361.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87088.813 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   36154.574 ±(99.9%) 1582.032 ops/s [Average]
[info]   (min, avg, max) = (35459.608, 36154.574, 36470.131), stdev = 410.849
[info]   CI (99.9%): [34572.541, 37736.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1807.354 ±(99.9%) 88.787 MB/sec [Average]
[info]   (min, avg, max) = (1777.181, 1807.354, 1836.513), stdev = 23.058
[info]   CI (99.9%): [1718.567, 1896.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78667.994 ±(99.9%) 2788.525 B/op [Average]
[info]   (min, avg, max) = (77670.099, 78667.994, 79361.122), stdev = 724.171
[info]   CI (99.9%): [75879.469, 81456.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1736.376 ±(99.9%) 1405.563 MB/sec [Average]
[info]   (min, avg, max) = (1335.084, 1736.376, 2008.357), stdev = 365.020
[info]   CI (99.9%): [330.813, 3141.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75649.167 ±(99.9%) 62649.238 B/op [Average]
[info]   (min, avg, max) = (57793.828, 75649.167, 89133.247), stdev = 16269.808
[info]   CI (99.9%): [12999.930, 138298.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.393), stdev = 1.955
[info]   CI (99.9%): [≈ 0, 8.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   39.714 ±(99.9%) 334.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.714, 194.965), stdev = 86.790
[info]   CI (99.9%): [≈ 0, 373.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13001.318 ops/s
[info] # Warmup Iteration   2: 31249.449 ops/s
[info] # Warmup Iteration   3: 31935.392 ops/s
[info] # Warmup Iteration   4: 31918.871 ops/s
[info] # Warmup Iteration   5: 32087.198 ops/s
[info] Iteration   1: 32473.262 ops/s
[info]                  ·gc.alloc.rate:      517.976 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32316.063 ops/s
[info]                  ·gc.alloc.rate:               539.710 MB/sec
[info]                  ·gc.alloc.rate.norm:          26277.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32571.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32289.738 ops/s
[info]                  ·gc.alloc.rate:                   532.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              25954.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32598.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 32231.732 ops/s
[info]                  ·gc.alloc.rate:               539.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          26323.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32689.732 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 32428.984 ops/s
[info]                  ·gc.alloc.rate:      517.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32347.956 ±(99.9%) 385.937 ops/s [Average]
[info]   (min, avg, max) = (32231.732, 32347.956, 32473.262), stdev = 100.227
[info]   CI (99.9%): [31962.019, 32733.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   529.328 ±(99.9%) 42.607 MB/sec [Average]
[info]   (min, avg, max) = (517.263, 529.328, 539.710), stdev = 11.065
[info]   CI (99.9%): [486.722, 571.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25752.776 ±(99.9%) 2345.492 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25752.776, 26323.698), stdev = 609.117
[info]   CI (99.9%): [23407.284, 28098.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   401.475 ±(99.9%) 1411.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.475, 669.602), stdev = 366.495
[info]   CI (99.9%): [≈ 0, 1812.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19571.922 ±(99.9%) 68798.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19571.922, 32689.732), stdev = 17866.692
[info]   CI (99.9%): [≈ 0, 88370.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 1.015), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 1.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13273.606 ops/s
[info] # Warmup Iteration   2: 31215.911 ops/s
[info] # Warmup Iteration   3: 32480.527 ops/s
[info] # Warmup Iteration   4: 31938.877 ops/s
[info] # Warmup Iteration   5: 32360.273 ops/s
[info] Iteration   1: 32637.634 ops/s
[info]                  ·gc.alloc.rate:      398.395 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32453.348 ops/s
[info]                  ·gc.alloc.rate:               407.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          19783.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24809.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32529.870 ops/s
[info]                  ·gc.alloc.rate:                   421.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              20401.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32278.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32613.865 ops/s
[info]                  ·gc.alloc.rate:      398.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32507.606 ops/s
[info]                  ·gc.alloc.rate:               414.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          20059.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32299.353 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32548.465 ±(99.9%) 293.830 ops/s [Average]
[info]   (min, avg, max) = (32453.348, 32548.465, 32637.634), stdev = 76.307
[info]   CI (99.9%): [32254.635, 32842.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   408.089 ±(99.9%) 39.417 MB/sec [Average]
[info]   (min, avg, max) = (398.053, 408.089, 421.702), stdev = 10.236
[info]   CI (99.9%): [368.672, 447.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19732.103 ±(99.9%) 2026.156 B/op [Average]
[info]   (min, avg, max) = (19208.013, 19732.103, 20401.796), stdev = 526.186
[info]   CI (99.9%): [17705.948, 21758.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.193 ±(99.9%) 1320.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.193, 667.192), stdev = 342.959
[info]   CI (99.9%): [≈ 0, 1689.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17877.563 ±(99.9%) 63932.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17877.563, 32299.353), stdev = 16603.070
[info]   CI (99.9%): [≈ 0, 81810.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.201 ±(99.9%) 1.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.201, 1.007), stdev = 0.450
[info]   CI (99.9%): [≈ 0, 1.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18453.840 ops/s
[info] # Warmup Iteration   2: 34050.407 ops/s
[info] # Warmup Iteration   3: 34528.092 ops/s
[info] # Warmup Iteration   4: 33282.198 ops/s
[info] # Warmup Iteration   5: 34374.597 ops/s
[info] Iteration   1: 34285.088 ops/s
[info]                  ·gc.alloc.rate:      411.684 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34029.490 ops/s
[info]                  ·gc.alloc.rate:               446.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          20659.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23662.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 34468.313 ops/s
[info]                  ·gc.alloc.rate:               439.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          20072.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30615.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34712.848 ops/s
[info]                  ·gc.alloc.rate:      416.759 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34556.567 ops/s
[info]                  ·gc.alloc.rate:               430.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          19593.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30536.188 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34410.461 ±(99.9%) 1013.293 ops/s [Average]
[info]   (min, avg, max) = (34029.490, 34410.461, 34712.848), stdev = 263.149
[info]   CI (99.9%): [33397.168, 35423.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   429.068 ±(99.9%) 57.270 MB/sec [Average]
[info]   (min, avg, max) = (411.684, 429.068, 446.914), stdev = 14.873
[info]   CI (99.9%): [371.798, 486.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19623.426 ±(99.9%) 2941.452 B/op [Average]
[info]   (min, avg, max) = (18896.017, 19623.426, 20659.627), stdev = 763.886
[info]   CI (99.9%): [16681.974, 22564.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.624 ±(99.9%) 1326.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.624, 670.748), stdev = 344.484
[info]   CI (99.9%): [≈ 0, 1697.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16962.746 ±(99.9%) 60608.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16962.746, 30615.025), stdev = 15739.913
[info]   CI (99.9%): [≈ 0, 77571.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19473.249 ops/s
[info] # Warmup Iteration   2: 33770.275 ops/s
[info] # Warmup Iteration   3: 34389.415 ops/s
[info] # Warmup Iteration   4: 34276.416 ops/s
[info] # Warmup Iteration   5: 34825.476 ops/s
[info] Iteration   1: 34664.047 ops/s
[info]                  ·gc.alloc.rate:               394.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          17892.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23228.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34623.637 ops/s
[info]                  ·gc.alloc.rate:               389.292 MB/sec
[info]                  ·gc.alloc.rate.norm:          17688.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23255.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 34792.229 ops/s
[info]                  ·gc.alloc.rate:      377.944 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34680.455 ops/s
[info]                  ·gc.alloc.rate:                   389.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              17682.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30426.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.889 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34640.810 ops/s
[info]                  ·gc.alloc.rate:               395.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          17950.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30461.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34680.235 ±(99.9%) 255.151 ops/s [Average]
[info]   (min, avg, max) = (34623.637, 34680.235, 34792.229), stdev = 66.262
[info]   CI (99.9%): [34425.085, 34935.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   389.261 ±(99.9%) 26.298 MB/sec [Average]
[info]   (min, avg, max) = (377.944, 389.261, 395.163), stdev = 6.829
[info]   CI (99.9%): [362.963, 415.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17661.966 ±(99.9%) 1302.892 B/op [Average]
[info]   (min, avg, max) = (17096.012, 17661.966, 17950.523), stdev = 338.357
[info]   CI (99.9%): [16359.073, 18964.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.952 ±(99.9%) 1063.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.952, 670.761), stdev = 276.076
[info]   CI (99.9%): [≈ 0, 1536.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   21474.221 ±(99.9%) 48259.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21474.221, 30461.274), stdev = 12532.913
[info]   CI (99.9%): [≈ 0, 69734.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 3.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.889), stdev = 0.845
[info]   CI (99.9%): [≈ 0, 3.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1987.207 ops/s
[info] # Warmup Iteration   2: 12843.200 ops/s
[info] # Warmup Iteration   3: 15102.917 ops/s
[info] # Warmup Iteration   4: 15475.470 ops/s
[info] # Warmup Iteration   5: 15425.166 ops/s
[info] Iteration   1: 15266.412 ops/s
[info]                  ·gc.alloc.rate:                   1129.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              116415.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138274.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15390.077 ops/s
[info]                  ·gc.alloc.rate:               1117.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          114255.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68597.157 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 14706.909 ops/s
[info]                  ·gc.alloc.rate:                   1110.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              118850.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143645.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 14980.311 ops/s
[info]                  ·gc.alloc.rate:                   1091.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              114713.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70548.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15478.481 ops/s
[info]                  ·gc.alloc.rate:                   1144.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              116341.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136541.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15164.438 ±(99.9%) 1222.497 ops/s [Average]
[info]   (min, avg, max) = (14706.909, 15164.438, 15478.481), stdev = 317.479
[info]   CI (99.9%): [13941.941, 16386.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1118.729 ±(99.9%) 75.787 MB/sec [Average]
[info]   (min, avg, max) = (1091.927, 1118.729, 1144.236), stdev = 19.682
[info]   CI (99.9%): [1042.943, 1194.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   116115.067 ±(99.9%) 6954.835 B/op [Average]
[info]   (min, avg, max) = (114255.095, 116115.067, 118850.505), stdev = 1806.148
[info]   CI (99.9%): [109160.232, 123069.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1073.829 ±(99.9%) 1415.224 MB/sec [Average]
[info]   (min, avg, max) = (670.904, 1073.829, 1342.907), stdev = 367.529
[info]   CI (99.9%): [≈ 0, 2489.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   111521.357 ±(99.9%) 147822.583 B/op [Average]
[info]   (min, avg, max) = (68597.157, 111521.357, 143645.431), stdev = 38389.055
[info]   CI (99.9%): [≈ 0, 259343.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 5.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 3.414), stdev = 1.473
[info]   CI (99.9%): [≈ 0, 6.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   82.982 ±(99.9%) 576.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.982, 347.110), stdev = 149.650
[info]   CI (99.9%): [≈ 0, 659.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4377.194 ops/s
[info] # Warmup Iteration   2: 13290.618 ops/s
[info] # Warmup Iteration   3: 15528.324 ops/s
[info] # Warmup Iteration   4: 15544.440 ops/s
[info] # Warmup Iteration   5: 15600.661 ops/s
[info] Iteration   1: 15544.992 ops/s
[info]                  ·gc.alloc.rate:                   1021.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              103394.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135421.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 15617.350 ops/s
[info]                  ·gc.alloc.rate:                   1006.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              101438.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67465.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15015.713 ops/s
[info]                  ·gc.alloc.rate:                   1013.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              106210.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140366.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 15603.108 ops/s
[info]                  ·gc.alloc.rate:               1012.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          102122.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67560.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 15563.750 ops/s
[info]                  ·gc.alloc.rate:                   1012.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              102339.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135526.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15468.982 ±(99.9%) 982.128 ops/s [Average]
[info]   (min, avg, max) = (15015.713, 15468.982, 15617.350), stdev = 255.056
[info]   CI (99.9%): [14486.854, 16451.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1013.130 ±(99.9%) 20.233 MB/sec [Average]
[info]   (min, avg, max) = (1006.589, 1013.130, 1021.250), stdev = 5.255
[info]   CI (99.9%): [992.897, 1033.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   103101.328 ±(99.9%) 7218.821 B/op [Average]
[info]   (min, avg, max) = (101438.491, 103101.328, 106210.931), stdev = 1874.705
[info]   CI (99.9%): [95882.507, 110320.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1071.255 ±(99.9%) 1411.767 MB/sec [Average]
[info]   (min, avg, max) = (669.475, 1071.255, 1340.213), stdev = 366.631
[info]   CI (99.9%): [≈ 0, 2483.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   109268.104 ±(99.9%) 146976.353 B/op [Average]
[info]   (min, avg, max) = (67465.997, 109268.104, 140366.339), stdev = 38169.292
[info]   CI (99.9%): [≈ 0, 256244.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.120 ±(99.9%) 5.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.120, 4.215), stdev = 1.491
[info]   CI (99.9%): [≈ 0, 7.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67771.777 ops/s
[info] # Warmup Iteration   2: 104054.401 ops/s
[info] # Warmup Iteration   3: 105472.534 ops/s
[info] # Warmup Iteration   4: 108568.932 ops/s
[info] # Warmup Iteration   5: 108641.685 ops/s
[info] Iteration   1: 109329.560 ops/s
[info]                  ·gc.alloc.rate:      284.527 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106700.727 ops/s
[info]                  ·gc.alloc.rate:               308.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          4545.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7546.257 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 109098.079 ops/s
[info]                  ·gc.alloc.rate:      283.932 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 108670.320 ops/s
[info]                  ·gc.alloc.rate:               301.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          4369.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7409.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 108906.079 ops/s
[info]                  ·gc.alloc.rate:      283.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 4100.385 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   108540.953 ±(99.9%) 4070.029 ops/s [Average]
[info]   (min, avg, max) = (106700.727, 108540.953, 109329.560), stdev = 1056.974
[info]   CI (99.9%): [104470.924, 112610.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   292.441 ±(99.9%) 44.826 MB/sec [Average]
[info]   (min, avg, max) = (283.861, 292.441, 308.172), stdev = 11.641
[info]   CI (99.9%): [247.614, 337.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4241.410 ±(99.9%) 795.708 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4241.410, 4545.047), stdev = 206.643
[info]   CI (99.9%): [3445.702, 5037.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.653 ±(99.9%) 1079.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.653, 511.667), stdev = 280.232
[info]   CI (99.9%): [≈ 0, 1283.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2991.119 ±(99.9%) 15772.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2991.119, 7546.257), stdev = 4096.045
[info]   CI (99.9%): [≈ 0, 18763.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1949.182 ops/s
[info] # Warmup Iteration   2: 10719.323 ops/s
[info] # Warmup Iteration   3: 13347.294 ops/s
[info] # Warmup Iteration   4: 13367.722 ops/s
[info] # Warmup Iteration   5: 13342.523 ops/s
[info] Iteration   1: 13244.571 ops/s
[info]                  ·gc.alloc.rate:               1314.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          156161.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158944.713 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13309.169 ops/s
[info]                  ·gc.alloc.rate:               1304.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          154245.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158247.385 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 13366.739 ops/s
[info]                  ·gc.alloc.rate:                   1321.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              155631.718 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157639.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.902 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13218.816 ops/s
[info]                  ·gc.alloc.rate:                   1306.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              155523.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159562.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13333.669 ops/s
[info]                  ·gc.alloc.rate:                   1315.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              155313.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157726.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13294.593 ±(99.9%) 237.281 ops/s [Average]
[info]   (min, avg, max) = (13218.816, 13294.593, 13366.739), stdev = 61.621
[info]   CI (99.9%): [13057.312, 13531.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1312.674 ±(99.9%) 27.654 MB/sec [Average]
[info]   (min, avg, max) = (1304.577, 1312.674, 1321.919), stdev = 7.182
[info]   CI (99.9%): [1285.020, 1340.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   155375.225 ±(99.9%) 2713.050 B/op [Average]
[info]   (min, avg, max) = (154245.918, 155375.225, 156161.893), stdev = 704.571
[info]   CI (99.9%): [152662.175, 158088.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1338.414 ±(99.9%) 5.442 MB/sec [Average]
[info]   (min, avg, max) = (1336.320, 1338.414, 1340.209), stdev = 1.413
[info]   CI (99.9%): [1332.972, 1343.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   158424.120 ±(99.9%) 3163.839 B/op [Average]
[info]   (min, avg, max) = (157639.324, 158424.120, 159562.465), stdev = 821.639
[info]   CI (99.9%): [155260.281, 161587.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.903 ±(99.9%) 6.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.903, 4.017), stdev = 1.751
[info]   CI (99.9%): [≈ 0, 7.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   107.454 ±(99.9%) 803.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.454, 478.311), stdev = 208.564
[info]   CI (99.9%): [≈ 0, 910.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19876.502 ops/s
[info] # Warmup Iteration   2: 44083.303 ops/s
[info] # Warmup Iteration   3: 43819.685 ops/s
[info] # Warmup Iteration   4: 45318.964 ops/s
[info] # Warmup Iteration   5: 45387.518 ops/s
[info] Iteration   1: 45554.160 ops/s
[info]                  ·gc.alloc.rate:               1145.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          39554.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23175.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 45271.562 ops/s
[info]                  ·gc.alloc.rate:                   1149.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              39979.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46650.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.171 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45176.637 ops/s
[info]                  ·gc.alloc.rate:                   1145.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              39909.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46772.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 45585.088 ops/s
[info]                  ·gc.alloc.rate:               1154.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          39851.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23183.116 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 45494.448 ops/s
[info]                  ·gc.alloc.rate:                   1164.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              40294.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46479.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45416.379 ±(99.9%) 699.476 ops/s [Average]
[info]   (min, avg, max) = (45176.637, 45416.379, 45585.088), stdev = 181.652
[info]   CI (99.9%): [44716.903, 46115.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1151.954 ±(99.9%) 30.990 MB/sec [Average]
[info]   (min, avg, max) = (1145.265, 1151.954, 1164.777), stdev = 8.048
[info]   CI (99.9%): [1120.964, 1182.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39917.916 ±(99.9%) 1022.755 B/op [Average]
[info]   (min, avg, max) = (39554.224, 39917.916, 40294.330), stdev = 265.606
[info]   CI (99.9%): [38895.161, 40940.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074.089 ±(99.9%) 1416.085 MB/sec [Average]
[info]   (min, avg, max) = (671.027, 1074.089, 1343.583), stdev = 367.753
[info]   CI (99.9%): [≈ 0, 2490.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37252.339 ±(99.9%) 49470.539 B/op [Average]
[info]   (min, avg, max) = (23175.366, 37252.339, 46772.268), stdev = 12847.342
[info]   CI (99.9%): [≈ 0, 86722.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.916 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.456), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.488 ±(99.9%) 204.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.488, 119.541), stdev = 53.144
[info]   CI (99.9%): [≈ 0, 229.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18890.811 ops/s
[info] # Warmup Iteration   2: 62944.451 ops/s
[info] # Warmup Iteration   3: 64579.571 ops/s
[info] # Warmup Iteration   4: 65047.759 ops/s
[info] # Warmup Iteration   5: 65306.108 ops/s
[info] Iteration   1: 64996.740 ops/s
[info]                  ·gc.alloc.rate:                   1149.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              27835.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32373.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 64853.025 ops/s
[info]                  ·gc.alloc.rate:                   1141.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              27695.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32476.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 65146.183 ops/s
[info]                  ·gc.alloc.rate:               1140.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          27540.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16173.036 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 64855.720 ops/s
[info]                  ·gc.alloc.rate:               1136.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          27571.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32507.343 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 65060.576 ops/s
[info]                  ·gc.alloc.rate:                   1152.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              27883.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32423.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   64982.449 ±(99.9%) 494.353 ops/s [Average]
[info]   (min, avg, max) = (64853.025, 64982.449, 65146.183), stdev = 128.382
[info]   CI (99.9%): [64488.096, 65476.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1143.947 ±(99.9%) 26.529 MB/sec [Average]
[info]   (min, avg, max) = (1136.205, 1143.947, 1152.675), stdev = 6.889
[info]   CI (99.9%): [1117.418, 1170.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27705.456 ±(99.9%) 589.763 B/op [Average]
[info]   (min, avg, max) = (27540.647, 27705.456, 27883.725), stdev = 153.160
[info]   CI (99.9%): [27115.694, 28295.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.927 ±(99.9%) 1152.630 MB/sec [Average]
[info]   (min, avg, max) = (669.466, 1204.927, 1340.325), stdev = 299.334
[info]   CI (99.9%): [52.297, 2357.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   29190.650 ±(99.9%) 28022.090 B/op [Average]
[info]   (min, avg, max) = (16173.036, 29190.650, 32507.343), stdev = 7277.248
[info]   CI (99.9%): [1168.560, 57212.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.792 ±(99.9%) 6.592 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.792, 3.853), stdev = 1.712
[info]   CI (99.9%): [≈ 0, 7.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.148 ±(99.9%) 159.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.148, 93.217), stdev = 41.411
[info]   CI (99.9%): [≈ 0, 178.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101965.747 ops/s
[info] # Warmup Iteration   2: 166848.394 ops/s
[info] # Warmup Iteration   3: 177769.642 ops/s
[info] # Warmup Iteration   4: 176989.708 ops/s
[info] # Warmup Iteration   5: 176170.809 ops/s
[info] Iteration   1: 177265.582 ops/s
[info]                  ·gc.alloc.rate:                   298.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              2647.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4542.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 177209.889 ops/s
[info]                  ·gc.alloc.rate:               296.320 MB/sec
[info]                  ·gc.alloc.rate.norm:          2631.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4543.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 178074.812 ops/s
[info]                  ·gc.alloc.rate:      282.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 177086.889 ops/s
[info]                  ·gc.alloc.rate:                   293.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              2610.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4546.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 177745.796 ops/s
[info]                  ·gc.alloc.rate:      281.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   177476.594 ±(99.9%) 1608.378 ops/s [Average]
[info]   (min, avg, max) = (177086.889, 177476.594, 178074.812), stdev = 417.691
[info]   CI (99.9%): [175868.216, 179084.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   290.494 ±(99.9%) 29.988 MB/sec [Average]
[info]   (min, avg, max) = (281.882, 290.494, 298.178), stdev = 7.788
[info]   CI (99.9%): [260.506, 320.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2576.244 ±(99.9%) 286.657 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2576.244, 2647.468), stdev = 74.444
[info]   CI (99.9%): [2289.587, 2862.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.956 ±(99.9%) 1078.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.956, 511.610), stdev = 280.211
[info]   CI (99.9%): [≈ 0, 1385.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2726.541 ±(99.9%) 9584.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2726.541, 4546.876), stdev = 2488.980
[info]   CI (99.9%): [≈ 0, 12310.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.185), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107012.347 ops/s
[info] # Warmup Iteration   2: 171178.299 ops/s
[info] # Warmup Iteration   3: 184572.221 ops/s
[info] # Warmup Iteration   4: 185057.946 ops/s
[info] # Warmup Iteration   5: 184975.736 ops/s
[info] Iteration   1: 185017.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 185068.290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 184102.955 ops/s
[info]                  ·gc.alloc.rate:      2.063 MB/sec
[info]                  ·gc.alloc.rate.norm: 17.636 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185219.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185223.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   184926.107 ±(99.9%) 1806.271 ops/s [Average]
[info]   (min, avg, max) = (184102.955, 184926.107, 185223.028), stdev = 469.083
[info]   CI (99.9%): [183119.837, 186732.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.413 ±(99.9%) 3.552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.413, 2.063), stdev = 0.923
[info]   CI (99.9%): [≈ 0, 3.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3.529 ±(99.9%) 30.366 B/op [Average]
[info]   (min, avg, max) = (0.002, 3.529, 17.636), stdev = 7.886
[info]   CI (99.9%): [≈ 0, 33.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22746.842 ops/s
[info] # Warmup Iteration   2: 55895.649 ops/s
[info] # Warmup Iteration   3: 57140.850 ops/s
[info] # Warmup Iteration   4: 58396.823 ops/s
[info] # Warmup Iteration   5: 58426.556 ops/s
[info] Iteration   1: 57548.722 ops/s
[info]                  ·gc.alloc.rate:               1122.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          30686.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36662.541 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 58442.456 ops/s
[info]                  ·gc.alloc.rate:                   1133.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              30521.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36120.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 58632.276 ops/s
[info]                  ·gc.alloc.rate:               1119.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          30053.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18006.447 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 58155.243 ops/s
[info]                  ·gc.alloc.rate:               1135.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          30740.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36326.885 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 58257.430 ops/s
[info]                  ·gc.alloc.rate:                   1152.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              31135.867 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36279.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   58207.225 ±(99.9%) 1581.639 ops/s [Average]
[info]   (min, avg, max) = (57548.722, 58207.225, 58632.276), stdev = 410.747
[info]   CI (99.9%): [56625.586, 59788.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1132.687 ±(99.9%) 50.503 MB/sec [Average]
[info]   (min, avg, max) = (1119.593, 1132.687, 1152.535), stdev = 13.115
[info]   CI (99.9%): [1082.185, 1183.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30627.423 ±(99.9%) 1510.629 B/op [Average]
[info]   (min, avg, max) = (30053.349, 30627.423, 31135.867), stdev = 392.306
[info]   CI (99.9%): [29116.794, 32138.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207.582 ±(99.9%) 1155.461 MB/sec [Average]
[info]   (min, avg, max) = (670.804, 1207.582, 1342.930), stdev = 300.069
[info]   CI (99.9%): [52.121, 2363.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32679.132 ±(99.9%) 31593.209 B/op [Average]
[info]   (min, avg, max) = (18006.447, 32679.132, 36662.541), stdev = 8204.656
[info]   CI (99.9%): [1085.923, 64272.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.851), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   20.920 ±(99.9%) 178.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.920, 104.038), stdev = 46.465
[info]   CI (99.9%): [≈ 0, 199.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19779.891 ops/s
[info] # Warmup Iteration   2: 85252.420 ops/s
[info] # Warmup Iteration   3: 97070.946 ops/s
[info] # Warmup Iteration   4: 97504.240 ops/s
[info] # Warmup Iteration   5: 95213.068 ops/s
[info] Iteration   1: 97831.564 ops/s
[info]                  ·gc.alloc.rate:                   2158.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              34724.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32369.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 97993.116 ops/s
[info]                  ·gc.alloc.rate:                   2159.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              34686.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32213.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 98086.075 ops/s
[info]                  ·gc.alloc.rate:                   2175.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              34896.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32163.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 98696.615 ops/s
[info]                  ·gc.alloc.rate:               2172.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          34645.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31985.557 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 96670.323 ops/s
[info]                  ·gc.alloc.rate:                   2123.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              34556.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32723.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.339 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   97855.538 ±(99.9%) 2845.828 ops/s [Average]
[info]   (min, avg, max) = (96670.323, 97855.538, 98696.615), stdev = 739.053
[info]   CI (99.9%): [95009.710, 100701.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2157.960 ±(99.9%) 79.442 MB/sec [Average]
[info]   (min, avg, max) = (2123.591, 2157.960, 2175.180), stdev = 20.631
[info]   CI (99.9%): [2078.517, 2237.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34702.114 ±(99.9%) 482.615 B/op [Average]
[info]   (min, avg, max) = (34556.993, 34702.114, 34896.668), stdev = 125.334
[info]   CI (99.9%): [34219.498, 35184.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2007.917 ±(99.9%) 12.829 MB/sec [Average]
[info]   (min, avg, max) = (2004.810, 2007.917, 2012.068), stdev = 3.332
[info]   CI (99.9%): [1995.088, 2020.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32291.211 ±(99.9%) 1070.690 B/op [Average]
[info]   (min, avg, max) = (31985.557, 32291.211, 32723.943), stdev = 278.055
[info]   CI (99.9%): [31220.521, 33361.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.080), stdev = 1.818
[info]   CI (99.9%): [≈ 0, 7.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.329 ±(99.9%) 112.603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.329, 65.640), stdev = 29.243
[info]   CI (99.9%): [≈ 0, 125.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14872.625 ops/s
[info] # Warmup Iteration   2: 114642.094 ops/s
[info] # Warmup Iteration   3: 121370.901 ops/s
[info] # Warmup Iteration   4: 123402.231 ops/s
[info] # Warmup Iteration   5: 122457.857 ops/s
[info] Iteration   1: 126565.344 ops/s
[info]                  ·gc.alloc.rate:                   1783.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              22174.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24933.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.518 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 124025.733 ops/s
[info]                  ·gc.alloc.rate:                   1758.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              22310.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25469.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 127056.577 ops/s
[info]                  ·gc.alloc.rate:                   1798.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              22278.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16536.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 127621.491 ops/s
[info]                  ·gc.alloc.rate:                   1816.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              22402.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24661.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 127569.296 ops/s
[info]                  ·gc.alloc.rate:               1831.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          22598.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24671.216 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   126567.688 ±(99.9%) 5716.058 ops/s [Average]
[info]   (min, avg, max) = (124025.733, 126567.688, 127621.491), stdev = 1484.442
[info]   CI (99.9%): [120851.630, 132283.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1797.771 ±(99.9%) 109.903 MB/sec [Average]
[info]   (min, avg, max) = (1758.509, 1797.771, 1831.656), stdev = 28.541
[info]   CI (99.9%): [1687.868, 1907.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22352.963 ±(99.9%) 614.603 B/op [Average]
[info]   (min, avg, max) = (22174.182, 22352.963, 22598.342), stdev = 159.610
[info]   CI (99.9%): [21738.360, 22967.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1869.444 ±(99.9%) 1150.048 MB/sec [Average]
[info]   (min, avg, max) = (1335.212, 1869.444, 2007.498), stdev = 298.664
[info]   CI (99.9%): [719.396, 3019.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23254.426 ±(99.9%) 14516.670 B/op [Average]
[info]   (min, avg, max) = (16536.138, 23254.426, 25469.873), stdev = 3769.933
[info]   CI (99.9%): [8737.756, 37771.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 7.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.227), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.241 ±(99.9%) 91.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.241, 53.626), stdev = 23.704
[info]   CI (99.9%): [≈ 0, 102.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.240
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58858.115 ops/s
[info] # Warmup Iteration   2: 156106.128 ops/s
[info] # Warmup Iteration   3: 164914.597 ops/s
[info] # Warmup Iteration   4: 165399.735 ops/s
[info] # Warmup Iteration   5: 169118.029 ops/s
[info] Iteration   1: 168696.206 ops/s
[info]                  ·gc.alloc.rate:               1589.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          14832.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12541.496 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 165426.922 ops/s
[info]                  ·gc.alloc.rate:               1547.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          14725.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12795.705 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 168119.115 ops/s
[info]                  ·gc.alloc.rate:                   1596.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              14939.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18882.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 167196.498 ops/s
[info]                  ·gc.alloc.rate:               1562.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          14711.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12635.108 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 166391.538 ops/s
[info]                  ·gc.alloc.rate:               1558.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          14740.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12690.383 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   167166.056 ±(99.9%) 5048.263 ops/s [Average]
[info]   (min, avg, max) = (165426.922, 167166.056, 168696.206), stdev = 1311.018
[info]   CI (99.9%): [162117.793, 172214.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1571.086 ±(99.9%) 80.728 MB/sec [Average]
[info]   (min, avg, max) = (1547.781, 1571.086, 1596.350), stdev = 20.965
[info]   CI (99.9%): [1490.358, 1651.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14789.851 ±(99.9%) 371.049 B/op [Average]
[info]   (min, avg, max) = (14711.347, 14789.851, 14939.806), stdev = 96.360
[info]   CI (99.9%): [14418.802, 15160.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.204 ±(99.9%) 1161.198 MB/sec [Average]
[info]   (min, avg, max) = (1341.816, 1478.204, 2017.645), stdev = 301.559
[info]   CI (99.9%): [317.006, 2639.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13909.056 ±(99.9%) 10711.763 B/op [Average]
[info]   (min, avg, max) = (12541.496, 13909.056, 18882.587), stdev = 2781.811
[info]   CI (99.9%): [3197.293, 24620.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 5.522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 3.207), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.002 ±(99.9%) 51.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.002, 30.011), stdev = 13.421
[info]   CI (99.9%): [≈ 0, 57.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2048.158 ops/s
[info] # Warmup Iteration   2: 40288.411 ops/s
[info] # Warmup Iteration   3: 55149.821 ops/s
[info] # Warmup Iteration   4: 55026.889 ops/s
[info] # Warmup Iteration   5: 55274.704 ops/s
[info] Iteration   1: 55389.501 ops/s
[info]                  ·gc.alloc.rate:               2968.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          84343.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76324.598 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 55443.777 ops/s
[info]                  ·gc.alloc.rate:                   2960.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              84029.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76424.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 55437.035 ops/s
[info]                  ·gc.alloc.rate:               3015.049 MB/sec
[info]                  ·gc.alloc.rate.norm:          85593.331 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3373.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95776.384 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 55504.208 ops/s
[info]                  ·gc.alloc.rate:               2992.114 MB/sec
[info]                  ·gc.alloc.rate.norm:          84839.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76725.073 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 55140.854 ops/s
[info]                  ·gc.alloc.rate:               2972.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          84839.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77365.968 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   55383.075 ±(99.9%) 544.502 ops/s [Average]
[info]   (min, avg, max) = (55140.854, 55383.075, 55504.208), stdev = 141.405
[info]   CI (99.9%): [54838.573, 55927.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2981.641 ±(99.9%) 84.903 MB/sec [Average]
[info]   (min, avg, max) = (2960.262, 2981.641, 3015.049), stdev = 22.049
[info]   CI (99.9%): [2896.738, 3066.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84729.064 ±(99.9%) 2285.526 B/op [Average]
[info]   (min, avg, max) = (84029.474, 84729.064, 85593.331), stdev = 593.544
[info]   CI (99.9%): [82443.538, 87014.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2833.752 ±(99.9%) 1163.015 MB/sec [Average]
[info]   (min, avg, max) = (2686.093, 2833.752, 3373.750), stdev = 302.031
[info]   CI (99.9%): [1670.737, 3996.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80523.322 ±(99.9%) 32870.629 B/op [Average]
[info]   (min, avg, max) = (76324.598, 80523.322, 95776.384), stdev = 8536.398
[info]   CI (99.9%): [47652.693, 113393.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.118 ±(99.9%) 1.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.118, 0.591), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64590.529 ops/s
[info] # Warmup Iteration   2: 172828.377 ops/s
[info] # Warmup Iteration   3: 175145.101 ops/s
[info] # Warmup Iteration   4: 182044.891 ops/s
[info] # Warmup Iteration   5: 181315.980 ops/s
[info] Iteration   1: 182353.282 ops/s
[info]                  ·gc.alloc.rate:                   1199.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              10352.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5786.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 181664.037 ops/s
[info]                  ·gc.alloc.rate:                   1220.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              10576.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11620.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 181126.244 ops/s
[info]                  ·gc.alloc.rate:               1214.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          10551.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11662.613 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 167622.109 ops/s
[info]                  ·gc.alloc.rate:                   1125.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              10567.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12609.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 180215.077 ops/s
[info]                  ·gc.alloc.rate:                   1193.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              10422.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5863.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   178596.150 ±(99.9%) 23813.350 ops/s [Average]
[info]   (min, avg, max) = (167622.109, 178596.150, 182353.282), stdev = 6184.251
[info]   CI (99.9%): [154782.800, 202409.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1190.799 ±(99.9%) 146.693 MB/sec [Average]
[info]   (min, avg, max) = (1125.533, 1190.799, 1220.818), stdev = 38.096
[info]   CI (99.9%): [1044.106, 1337.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10494.337 ±(99.9%) 388.269 B/op [Average]
[info]   (min, avg, max) = (10352.649, 10494.337, 10576.808), stdev = 100.832
[info]   CI (99.9%): [10106.068, 10882.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.710 ±(99.9%) 1415.431 MB/sec [Average]
[info]   (min, avg, max) = (670.642, 1073.710, 1342.967), stdev = 367.583
[info]   CI (99.9%): [≈ 0, 2489.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9508.555 ±(99.9%) 13036.795 B/op [Average]
[info]   (min, avg, max) = (5786.678, 9508.555, 12609.407), stdev = 3385.614
[info]   CI (99.9%): [≈ 0, 22545.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.988 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.998), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.574 ±(99.9%) 46.916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.574, 28.146), stdev = 12.184
[info]   CI (99.9%): [≈ 0, 53.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223353.541 ops/s
[info] # Warmup Iteration   2: 502919.650 ops/s
[info] # Warmup Iteration   3: 526220.968 ops/s
[info] # Warmup Iteration   4: 531565.612 ops/s
[info] # Warmup Iteration   5: 537373.210 ops/s
[info] Iteration   1: 536705.859 ops/s
[info]                  ·gc.alloc.rate:      555.713 MB/sec
[info]                  ·gc.alloc.rate.norm: 1629.272 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 534939.113 ops/s
[info]                  ·gc.alloc.rate:               550.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          1618.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1963.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 529007.167 ops/s
[info]                  ·gc.alloc.rate:               552.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          1644.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1985.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 538551.949 ops/s
[info]                  ·gc.alloc.rate:                   569.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1663.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1952.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 533659.087 ops/s
[info]                  ·gc.alloc.rate:               557.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          1643.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1970.505 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   534572.635 ±(99.9%) 13927.531 ops/s [Average]
[info]   (min, avg, max) = (529007.167, 534572.635, 538551.949), stdev = 3616.936
[info]   CI (99.9%): [520645.104, 548500.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   557.078 ±(99.9%) 28.357 MB/sec [Average]
[info]   (min, avg, max) = (550.246, 557.078, 569.307), stdev = 7.364
[info]   CI (99.9%): [528.721, 585.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1639.882 ±(99.9%) 66.367 B/op [Average]
[info]   (min, avg, max) = (1618.193, 1639.882, 1663.746), stdev = 17.235
[info]   CI (99.9%): [1573.515, 1706.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.309 ±(99.9%) 1150.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.309, 668.152), stdev = 298.688
[info]   CI (99.9%): [≈ 0, 1684.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1574.525 ±(99.9%) 3389.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1574.525, 1985.759), stdev = 880.268
[info]   CI (99.9%): [≈ 0, 4964.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419052.372 ops/s
[info] # Warmup Iteration   2: 679449.710 ops/s
[info] # Warmup Iteration   3: 717540.358 ops/s
[info] # Warmup Iteration   4: 723629.665 ops/s
[info] # Warmup Iteration   5: 719529.270 ops/s
[info] Iteration   1: 722101.518 ops/s
[info]                  ·gc.alloc.rate:               578.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          1261.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1461.318 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 725807.721 ops/s
[info]                  ·gc.alloc.rate:      570.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 1236.376 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 720845.353 ops/s
[info]                  ·gc.alloc.rate:               566.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1236.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1463.805 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 724251.251 ops/s
[info]                  ·gc.alloc.rate:               574.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1457.630 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 715851.896 ops/s
[info]                  ·gc.alloc.rate:               567.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          1247.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1474.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   721771.548 ±(99.9%) 14719.412 ops/s [Average]
[info]   (min, avg, max) = (715851.896, 721771.548, 725807.721), stdev = 3822.585
[info]   CI (99.9%): [707052.136, 736490.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   571.385 ±(99.9%) 20.065 MB/sec [Average]
[info]   (min, avg, max) = (566.260, 571.385, 578.933), stdev = 5.211
[info]   CI (99.9%): [551.321, 591.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1245.876 ±(99.9%) 40.415 B/op [Average]
[info]   (min, avg, max) = (1236.339, 1245.876, 1261.834), stdev = 10.496
[info]   CI (99.9%): [1205.461, 1286.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.535 ±(99.9%) 1154.933 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.535, 671.005), stdev = 299.932
[info]   CI (99.9%): [≈ 0, 1691.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1171.522 ±(99.9%) 2521.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1171.522, 1474.858), stdev = 654.932
[info]   CI (99.9%): [≈ 0, 3693.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518177.442 ops/s
[info] # Warmup Iteration   2: 742234.845 ops/s
[info] # Warmup Iteration   3: 773083.237 ops/s
[info] # Warmup Iteration   4: 783645.075 ops/s
[info] # Warmup Iteration   5: 781811.152 ops/s
[info] Iteration   1: 781536.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 782585.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 779895.162 ops/s
[info]                  ·gc.alloc.rate:      1.038 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.095 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 783074.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 782939.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   782006.400 ±(99.9%) 5103.508 ops/s [Average]
[info]   (min, avg, max) = (779895.162, 782006.400, 783074.916), stdev = 1325.365
[info]   CI (99.9%): [776902.891, 787109.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.208 ±(99.9%) 1.787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.208, 1.038), stdev = 0.464
[info]   CI (99.9%): [≈ 0, 1.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.419 ±(99.9%) 3.606 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.419, 2.095), stdev = 0.936
[info]   CI (99.9%): [≈ 0, 4.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84568.545 ops/s
[info] # Warmup Iteration   2: 331436.107 ops/s
[info] # Warmup Iteration   3: 313150.257 ops/s
[info] # Warmup Iteration   4: 340575.656 ops/s
[info] # Warmup Iteration   5: 339835.092 ops/s
[info] Iteration   1: 339841.588 ops/s
[info]                  ·gc.alloc.rate:               959.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          4443.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3072.741 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 338535.566 ops/s
[info]                  ·gc.alloc.rate:                   966.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              4494.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6172.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 338485.344 ops/s
[info]                  ·gc.alloc.rate:                   948.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              4408.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3089.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 341073.374 ops/s
[info]                  ·gc.alloc.rate:               953.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          4398.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3066.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 339536.587 ops/s
[info]                  ·gc.alloc.rate:                   963.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              4467.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6172.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   339494.492 ±(99.9%) 4108.222 ops/s [Average]
[info]   (min, avg, max) = (338485.344, 339494.492, 341073.374), stdev = 1066.892
[info]   CI (99.9%): [335386.270, 343602.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   958.276 ±(99.9%) 29.317 MB/sec [Average]
[info]   (min, avg, max) = (948.066, 958.276, 966.709), stdev = 7.613
[info]   CI (99.9%): [928.960, 987.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4442.411 ±(99.9%) 153.971 B/op [Average]
[info]   (min, avg, max) = (4398.610, 4442.411, 4494.083), stdev = 39.986
[info]   CI (99.9%): [4288.440, 4596.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.375 ±(99.9%) 1403.575 MB/sec [Average]
[info]   (min, avg, max) = (663.496, 930.375, 1331.614), stdev = 364.504
[info]   CI (99.9%): [≈ 0, 2333.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4314.727 ±(99.9%) 6530.369 B/op [Average]
[info]   (min, avg, max) = (3066.272, 4314.727, 6172.617), stdev = 1695.916
[info]   CI (99.9%): [≈ 0, 10845.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.058 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.097), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14229.433 ops/s
[info] # Warmup Iteration   2: 31871.376 ops/s
[info] # Warmup Iteration   3: 37642.250 ops/s
[info] # Warmup Iteration   4: 36613.304 ops/s
[info] # Warmup Iteration   5: 37759.543 ops/s
[info] Iteration   1: 38034.657 ops/s
[info]                  ·gc.alloc.rate:                   1936.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              80113.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83453.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 37993.055 ops/s
[info]                  ·gc.alloc.rate:                   1930.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              79979.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83432.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.668 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38220.357 ops/s
[info]                  ·gc.alloc.rate:                   1942.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              79978.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55134.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38477.486 ops/s
[info]                  ·gc.alloc.rate:                   1955.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              79985.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82145.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38140.637 ops/s
[info]                  ·gc.alloc.rate:                   1965.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              81118.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82903.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38173.238 ±(99.9%) 739.485 ops/s [Average]
[info]   (min, avg, max) = (37993.055, 38173.238, 38477.486), stdev = 192.042
[info]   CI (99.9%): [37433.753, 38912.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1946.040 ±(99.9%) 55.481 MB/sec [Average]
[info]   (min, avg, max) = (1930.638, 1946.040, 1965.824), stdev = 14.408
[info]   CI (99.9%): [1890.559, 2001.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80235.054 ±(99.9%) 1914.612 B/op [Average]
[info]   (min, avg, max) = (79978.515, 80235.054, 81118.504), stdev = 497.219
[info]   CI (99.9%): [78320.442, 82149.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.406 ±(99.9%) 1159.236 MB/sec [Average]
[info]   (min, avg, max) = (1338.908, 1877.406, 2016.790), stdev = 301.050
[info]   CI (99.9%): [718.169, 3036.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   77413.964 ±(99.9%) 48001.293 B/op [Average]
[info]   (min, avg, max) = (55134.794, 77413.964, 83453.308), stdev = 12465.783
[info]   CI (99.9%): [29412.671, 125415.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.543 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 2.769), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32.212 ±(99.9%) 188.039 B/op [Average]
[info]   (min, avg, max) = (0.857, 32.212, 114.567), stdev = 48.833
[info]   CI (99.9%): [≈ 0, 220.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.796 ops/s
[info] # Warmup Iteration   2: 273438.402 ops/s
[info] # Warmup Iteration   3: 287509.102 ops/s
[info] # Warmup Iteration   4: 288010.735 ops/s
[info] # Warmup Iteration   5: 290541.854 ops/s
[info] Iteration   1: 296119.922 ops/s
[info]                  ·gc.alloc.rate:                   315.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              1678.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2719.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 297211.776 ops/s
[info]                  ·gc.alloc.rate:      308.190 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290808.719 ops/s
[info]                  ·gc.alloc.rate:               318.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          1723.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3601.582 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 298198.396 ops/s
[info]                  ·gc.alloc.rate:      309.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 295945.543 ops/s
[info]                  ·gc.alloc.rate:                   324.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1726.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3539.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.993 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   295656.871 ±(99.9%) 11006.278 ops/s [Average]
[info]   (min, avg, max) = (290808.719, 295656.871, 298198.396), stdev = 2858.295
[info]   CI (99.9%): [284650.593, 306663.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315.292 ±(99.9%) 26.302 MB/sec [Average]
[info]   (min, avg, max) = (308.190, 315.292, 324.696), stdev = 6.831
[info]   CI (99.9%): [288.990, 341.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1678.667 ±(99.9%) 179.862 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1678.667, 1726.849), stdev = 46.710
[info]   CI (99.9%): [1498.806, 1858.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.503 ±(99.9%) 1317.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.503, 665.491), stdev = 342.211
[info]   CI (99.9%): [≈ 0, 1686.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1971.944 ±(99.9%) 7060.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1971.944, 3601.582), stdev = 1833.499
[info]   CI (99.9%): [≈ 0, 9032.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.947), stdev = 1.765
[info]   CI (99.9%): [≈ 0, 7.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   4.205 ±(99.9%) 36.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.205, 20.993), stdev = 9.385
[info]   CI (99.9%): [≈ 0, 40.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36093.159 ops/s
[info] # Warmup Iteration   2: 101113.227 ops/s
[info] # Warmup Iteration   3: 104714.499 ops/s
[info] # Warmup Iteration   4: 108466.133 ops/s
[info] # Warmup Iteration   5: 108764.089 ops/s
[info] Iteration   1: 108688.966 ops/s
[info]                  ·gc.alloc.rate:                   1302.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              18863.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19368.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 105417.813 ops/s
[info]                  ·gc.alloc.rate:                   1271.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              18986.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19979.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 106535.156 ops/s
[info]                  ·gc.alloc.rate:               1280.065 MB/sec
[info]                  ·gc.alloc.rate.norm:          18910.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19780.554 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 108310.610 ops/s
[info]                  ·gc.alloc.rate:                   1302.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              18915.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19475.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 109083.778 ops/s
[info]                  ·gc.alloc.rate:                   1311.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              18921.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19279.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.201 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   107607.265 ±(99.9%) 6023.513 ops/s [Average]
[info]   (min, avg, max) = (105417.813, 107607.265, 109083.778), stdev = 1564.287
[info]   CI (99.9%): [101583.752, 113630.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1293.629 ±(99.9%) 64.981 MB/sec [Average]
[info]   (min, avg, max) = (1271.704, 1293.629, 1311.475), stdev = 16.875
[info]   CI (99.9%): [1228.647, 1358.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18919.584 ±(99.9%) 168.912 B/op [Average]
[info]   (min, avg, max) = (18863.519, 18919.584, 18986.286), stdev = 43.866
[info]   CI (99.9%): [18750.672, 19088.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.360 ±(99.9%) 5.982 MB/sec [Average]
[info]   (min, avg, max) = (1336.290, 1338.360, 1340.518), stdev = 1.554
[info]   CI (99.9%): [1332.377, 1344.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19576.828 ±(99.9%) 1131.572 B/op [Average]
[info]   (min, avg, max) = (19279.958, 19576.828, 19979.601), stdev = 293.866
[info]   CI (99.9%): [18445.256, 20708.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 7.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.122), stdev = 1.825
[info]   CI (99.9%): [≈ 0, 7.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.463 ±(99.9%) 102.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.463, 59.892), stdev = 26.517
[info]   CI (99.9%): [≈ 0, 114.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285478.853 ops/s
[info] # Warmup Iteration   2: 458964.692 ops/s
[info] # Warmup Iteration   3: 473821.221 ops/s
[info] # Warmup Iteration   4: 472537.611 ops/s
[info] # Warmup Iteration   5: 471983.557 ops/s
[info] Iteration   1: 474181.360 ops/s
[info]                  ·gc.alloc.rate:      308.528 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 442517.837 ops/s
[info]                  ·gc.alloc.rate:               302.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          1075.162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1819.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 440562.594 ops/s
[info]                  ·gc.alloc.rate:      286.659 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 471517.399 ops/s
[info]                  ·gc.alloc.rate:                   317.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1059.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1707.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 473926.473 ops/s
[info]                  ·gc.alloc.rate:      308.440 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.281 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   460541.133 ±(99.9%) 66963.649 ops/s [Average]
[info]   (min, avg, max) = (440562.594, 460541.133, 474181.360), stdev = 17390.247
[info]   CI (99.9%): [393577.483, 527504.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   304.695 ±(99.9%) 44.060 MB/sec [Average]
[info]   (min, avg, max) = (286.659, 304.695, 317.508), stdev = 11.442
[info]   CI (99.9%): [260.634, 348.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1041.441 ±(99.9%) 93.838 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1041.441, 1075.162), stdev = 24.369
[info]   CI (99.9%): [947.603, 1135.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.665 ±(99.9%) 1079.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.665, 511.697), stdev = 280.249
[info]   CI (99.9%): [≈ 0, 1283.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   705.470 ±(99.9%) 3722.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 705.470, 1819.663), stdev = 966.816
[info]   CI (99.9%): [≈ 0, 4428.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3000.847 ops/s
[info] # Warmup Iteration   2: 34833.411 ops/s
[info] # Warmup Iteration   3: 39826.308 ops/s
[info] # Warmup Iteration   4: 39906.080 ops/s
[info] # Warmup Iteration   5: 40401.934 ops/s
[info] Iteration   1: 40975.556 ops/s
[info]                  ·gc.alloc.rate:                   2038.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              78264.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77091.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 41107.430 ops/s
[info]                  ·gc.alloc.rate:                   2029.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              77694.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76741.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 40354.461 ops/s
[info]                  ·gc.alloc.rate:                   2018.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              78710.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77939.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40710.532 ops/s
[info]                  ·gc.alloc.rate:                   2009.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              77701.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77285.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.805 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41011.230 ops/s
[info]                  ·gc.alloc.rate:               2051.340 MB/sec
[info]                  ·gc.alloc.rate.norm:          78724.925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76859.442 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   40831.842 ±(99.9%) 1173.327 ops/s [Average]
[info]   (min, avg, max) = (40354.461, 40831.842, 41107.430), stdev = 304.709
[info]   CI (99.9%): [39658.514, 42005.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2029.351 ±(99.9%) 62.887 MB/sec [Average]
[info]   (min, avg, max) = (2009.853, 2029.351, 2051.340), stdev = 16.332
[info]   CI (99.9%): [1966.464, 2092.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78218.975 ±(99.9%) 1966.291 B/op [Average]
[info]   (min, avg, max) = (77694.204, 78218.975, 78724.925), stdev = 510.640
[info]   CI (99.9%): [76252.684, 80185.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2002.447 ±(99.9%) 14.685 MB/sec [Average]
[info]   (min, avg, max) = (1998.391, 2002.447, 2007.627), stdev = 3.814
[info]   CI (99.9%): [1987.761, 2017.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77183.699 ±(99.9%) 1817.386 B/op [Average]
[info]   (min, avg, max) = (76741.869, 77183.699, 77939.793), stdev = 471.969
[info]   CI (99.9%): [75366.313, 79001.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 6.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.891, 3.831), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.214 ±(99.9%) 245.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.214, 147.121), stdev = 63.754
[info]   CI (99.9%): [≈ 0, 279.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27184.200 ops/s
[info] # Warmup Iteration   2: 73407.828 ops/s
[info] # Warmup Iteration   3: 73101.439 ops/s
[info] # Warmup Iteration   4: 74232.037 ops/s
[info] # Warmup Iteration   5: 75709.662 ops/s
[info] Iteration   1: 75708.198 ops/s
[info]                  ·gc.alloc.rate:               622.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          12933.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13909.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75674.322 ops/s
[info]                  ·gc.alloc.rate:                   613.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              12764.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13916.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 75884.603 ops/s
[info]                  ·gc.alloc.rate:               625.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          12969.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13891.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 75879.628 ops/s
[info]                  ·gc.alloc.rate:                   620.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              12876.345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13892.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 76103.644 ops/s
[info]                  ·gc.alloc.rate:      616.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 12747.030 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   75850.079 ±(99.9%) 659.633 ops/s [Average]
[info]   (min, avg, max) = (75674.322, 75850.079, 76103.644), stdev = 171.305
[info]   CI (99.9%): [75190.446, 76509.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   619.679 ±(99.9%) 17.797 MB/sec [Average]
[info]   (min, avg, max) = (613.723, 619.679, 625.290), stdev = 4.622
[info]   CI (99.9%): [601.882, 637.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12858.242 ±(99.9%) 382.436 B/op [Average]
[info]   (min, avg, max) = (12747.030, 12858.242, 12969.282), stdev = 99.317
[info]   CI (99.9%): [12475.806, 13240.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.555 ±(99.9%) 1152.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.555, 669.830), stdev = 299.384
[info]   CI (99.9%): [≈ 0, 1688.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11121.926 ±(99.9%) 23940.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11121.926, 13916.085), stdev = 6217.355
[info]   CI (99.9%): [≈ 0, 35062.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.173 ±(99.9%) 0.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.173, 0.433), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.684 ops/s
[info] # Warmup Iteration   2: 84086.053 ops/s
[info] # Warmup Iteration   3: 84925.996 ops/s
[info] # Warmup Iteration   4: 87928.333 ops/s
[info] # Warmup Iteration   5: 87899.410 ops/s
[info] Iteration   1: 88011.152 ops/s
[info]                  ·gc.alloc.rate:               513.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          9177.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11901.016 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 88422.529 ops/s
[info]                  ·gc.alloc.rate:      500.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 8899.659 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88000.212 ops/s
[info]                  ·gc.alloc.rate:               517.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          9251.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11901.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87611.056 ops/s
[info]                  ·gc.alloc.rate:                   518.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              9306.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11966.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 87926.640 ops/s
[info]                  ·gc.alloc.rate:               516.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          9241.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11923.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   87994.318 ±(99.9%) 1114.615 ops/s [Average]
[info]   (min, avg, max) = (87611.056, 87994.318, 88422.529), stdev = 289.462
[info]   CI (99.9%): [86879.703, 89108.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   513.022 ±(99.9%) 28.667 MB/sec [Average]
[info]   (min, avg, max) = (500.110, 513.022, 518.031), stdev = 7.445
[info]   CI (99.9%): [484.354, 541.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9175.427 ±(99.9%) 618.918 B/op [Average]
[info]   (min, avg, max) = (8899.659, 9175.427, 9306.045), stdev = 160.731
[info]   CI (99.9%): [8556.508, 9794.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.684 ±(99.9%) 1146.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.684, 666.269), stdev = 297.780
[info]   CI (99.9%): [≈ 0, 1679.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9538.620 ±(99.9%) 20532.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9538.620, 11966.221), stdev = 5332.316
[info]   CI (99.9%): [≈ 0, 30071.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.159 ±(99.9%) 1.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.797), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33870.255 ops/s
[info] # Warmup Iteration   2: 75592.426 ops/s
[info] # Warmup Iteration   3: 76524.061 ops/s
[info] # Warmup Iteration   4: 77013.487 ops/s
[info] # Warmup Iteration   5: 76913.350 ops/s
[info] Iteration   1: 78356.050 ops/s
[info]                  ·gc.alloc.rate:               472.966 MB/sec
[info]                  ·gc.alloc.rate.norm:          9499.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10276.090 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 78455.598 ops/s
[info]                  ·gc.alloc.rate:               484.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          9720.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13389.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 78678.940 ops/s
[info]                  ·gc.alloc.rate:      463.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78265.894 ops/s
[info]                  ·gc.alloc.rate:                   485.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              9765.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13421.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 78252.100 ops/s
[info]                  ·gc.alloc.rate:               483.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          9721.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13437.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   78401.716 ±(99.9%) 674.343 ops/s [Average]
[info]   (min, avg, max) = (78252.100, 78401.716, 78678.940), stdev = 175.125
[info]   CI (99.9%): [77727.374, 79076.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   478.134 ±(99.9%) 36.306 MB/sec [Average]
[info]   (min, avg, max) = (463.941, 478.134, 485.604), stdev = 9.429
[info]   CI (99.9%): [441.828, 514.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9597.294 ±(99.9%) 791.642 B/op [Average]
[info]   (min, avg, max) = (9280.006, 9597.294, 9765.254), stdev = 205.587
[info]   CI (99.9%): [8805.652, 10388.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   503.001 ±(99.9%) 1113.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.001, 668.181), stdev = 289.201
[info]   CI (99.9%): [≈ 0, 1616.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10105.036 ±(99.9%) 22373.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10105.036, 13437.614), stdev = 5810.268
[info]   CI (99.9%): [≈ 0, 32478.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.167 ±(99.9%) 1.442 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.837), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53278.614 ops/s
[info] # Warmup Iteration   2: 82624.760 ops/s
[info] # Warmup Iteration   3: 85017.943 ops/s
[info] # Warmup Iteration   4: 86435.720 ops/s
[info] # Warmup Iteration   5: 86839.843 ops/s
[info] Iteration   1: 85993.167 ops/s
[info]                  ·gc.alloc.rate:                   501.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              9180.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9363.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.143 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 84738.187 ops/s
[info]                  ·gc.alloc.rate:               501.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          9317.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12452.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 86581.073 ops/s
[info]                  ·gc.alloc.rate:               503.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          9158.722 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12187.675 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87267.091 ops/s
[info]                  ·gc.alloc.rate:      493.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86528.280 ops/s
[info]                  ·gc.alloc.rate:               512.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          9321.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12200.493 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86221.560 ±(99.9%) 3637.290 ops/s [Average]
[info]   (min, avg, max) = (84738.187, 86221.560, 87267.091), stdev = 944.593
[info]   CI (99.9%): [82584.269, 89858.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   502.684 ±(99.9%) 26.244 MB/sec [Average]
[info]   (min, avg, max) = (493.469, 502.684, 512.570), stdev = 6.816
[info]   CI (99.9%): [476.440, 528.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9174.995 ±(99.9%) 667.011 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9174.995, 9321.732), stdev = 173.221
[info]   CI (99.9%): [8507.983, 9842.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.742 ±(99.9%) 1118.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.742, 670.864), stdev = 290.451
[info]   CI (99.9%): [≈ 0, 1623.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9240.806 ±(99.9%) 20481.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9240.806, 12452.706), stdev = 5319.012
[info]   CI (99.9%): [≈ 0, 29722.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.229 ±(99.9%) 1.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 1.143), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52131.008 ops/s
[info] # Warmup Iteration   2: 82111.788 ops/s
[info] # Warmup Iteration   3: 86841.191 ops/s
[info] # Warmup Iteration   4: 88343.247 ops/s
[info] # Warmup Iteration   5: 86198.618 ops/s
[info] Iteration   1: 88305.144 ops/s
[info]                  ·gc.alloc.rate:                   443.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              7906.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9118.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88075.424 ops/s
[info]                  ·gc.alloc.rate:      440.216 MB/sec
[info]                  ·gc.alloc.rate.norm: 7864.908 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88213.107 ops/s
[info]                  ·gc.alloc.rate:               450.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          8035.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11967.766 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 88057.003 ops/s
[info]                  ·gc.alloc.rate:                   454.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11988.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.744 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88339.999 ops/s
[info]                  ·gc.alloc.rate:      429.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   88198.135 ±(99.9%) 497.525 ops/s [Average]
[info]   (min, avg, max) = (88057.003, 88198.135, 88339.999), stdev = 129.206
[info]   CI (99.9%): [87700.610, 88695.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   443.660 ±(99.9%) 36.727 MB/sec [Average]
[info]   (min, avg, max) = (429.757, 443.660, 454.320), stdev = 9.538
[info]   CI (99.9%): [406.933, 480.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7916.484 ±(99.9%) 683.844 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7916.484, 8120.174), stdev = 177.592
[info]   CI (99.9%): [7232.639, 8600.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.644 ±(99.9%) 1326.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.644, 670.812), stdev = 344.533
[info]   CI (99.9%): [≈ 0, 1697.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6614.977 ±(99.9%) 23683.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6614.977, 11988.964), stdev = 6150.484
[info]   CI (99.9%): [≈ 0, 30298.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.223 ±(99.9%) 1.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 0.744), stdev = 0.333
[info]   CI (99.9%): [≈ 0, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1361.123 ops/s
[info] # Warmup Iteration   2: 8452.806 ops/s
[info] # Warmup Iteration   3: 9966.721 ops/s
[info] # Warmup Iteration   4: 10219.662 ops/s
[info] # Warmup Iteration   5: 10261.171 ops/s
[info] Iteration   1: 10229.878 ops/s
[info]                  ·gc.alloc.rate:                   1662.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              255735.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206804.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 10200.892 ops/s
[info]                  ·gc.alloc.rate:                   1681.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              259424.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311088.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 488.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 10082.184 ops/s
[info]                  ·gc.alloc.rate:                   1647.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              257198.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209528.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10214.397 ops/s
[info]                  ·gc.alloc.rate:                   1708.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              263313.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309563.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10254.454 ops/s
[info]                  ·gc.alloc.rate:               1688.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          259146.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 205278.406 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10196.361 ±(99.9%) 257.450 ops/s [Average]
[info]   (min, avg, max) = (10082.184, 10196.361, 10254.454), stdev = 66.859
[info]   CI (99.9%): [9938.911, 10453.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1677.826 ±(99.9%) 90.929 MB/sec [Average]
[info]   (min, avg, max) = (1647.864, 1677.826, 1708.851), stdev = 23.614
[info]   CI (99.9%): [1586.897, 1768.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258963.663 ±(99.9%) 11009.727 B/op [Average]
[info]   (min, avg, max) = (255735.833, 258963.663, 263313.164), stdev = 2859.191
[info]   CI (99.9%): [247953.936, 269973.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.936 ±(99.9%) 1415.833 MB/sec [Average]
[info]   (min, avg, max) = (1337.587, 1609.936, 2016.386), stdev = 367.687
[info]   CI (99.9%): [194.103, 3025.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   248452.799 ±(99.9%) 217583.286 B/op [Average]
[info]   (min, avg, max) = (205278.406, 248452.799, 311088.852), stdev = 56505.688
[info]   CI (99.9%): [30869.512, 466036.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.164), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 5.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   126.777 ±(99.9%) 795.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.777, 488.164), stdev = 206.577
[info]   CI (99.9%): [≈ 0, 922.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.647
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1505.217 ops/s
[info] # Warmup Iteration   2: 8605.866 ops/s
[info] # Warmup Iteration   3: 9723.320 ops/s
[info] # Warmup Iteration   4: 9781.873 ops/s
[info] # Warmup Iteration   5: 9787.134 ops/s
[info] Iteration   1: 9714.812 ops/s
[info]                  ·gc.alloc.rate:                   1540.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              249481.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     325299.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 9774.993 ops/s
[info]                  ·gc.alloc.rate:               1537.279 MB/sec
[info]                  ·gc.alloc.rate.norm:          247459.405 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 215785.508 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 9811.622 ops/s
[info]                  ·gc.alloc.rate:                   1532.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              245773.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214971.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 642.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 9819.427 ops/s
[info]                  ·gc.alloc.rate:                   1546.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              247913.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214156.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9756.087 ops/s
[info]                  ·gc.alloc.rate:               1561.475 MB/sec
[info]                  ·gc.alloc.rate.norm:          251885.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 322696.631 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9775.388 ±(99.9%) 164.437 ops/s [Average]
[info]   (min, avg, max) = (9714.812, 9775.388, 9819.427), stdev = 42.704
[info]   CI (99.9%): [9610.951, 9939.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1543.567 ±(99.9%) 43.571 MB/sec [Average]
[info]   (min, avg, max) = (1532.176, 1543.567, 1561.475), stdev = 11.315
[info]   CI (99.9%): [1499.996, 1587.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   248502.856 ±(99.9%) 8883.339 B/op [Average]
[info]   (min, avg, max) = (245773.643, 248502.856, 251885.973), stdev = 2306.975
[info]   CI (99.9%): [239619.518, 257386.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605.088 ±(99.9%) 1403.358 MB/sec [Average]
[info]   (min, avg, max) = (1336.162, 1605.088, 2008.170), stdev = 364.448
[info]   CI (99.9%): [201.730, 3008.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   258581.928 ±(99.9%) 229984.410 B/op [Average]
[info]   (min, avg, max) = (214156.328, 258581.928, 325299.203), stdev = 59726.221
[info]   CI (99.9%): [28597.518, 488566.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.905 ±(99.9%) 6.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 4.003), stdev = 1.744
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   145.124 ±(99.9%) 1077.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.124, 642.146), stdev = 279.722
[info]   CI (99.9%): [≈ 0, 1222.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.435
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91698.856 ops/s
[info] # Warmup Iteration   2: 148341.382 ops/s
[info] # Warmup Iteration   3: 151728.018 ops/s
[info] # Warmup Iteration   4: 147907.664 ops/s
[info] # Warmup Iteration   5: 151978.814 ops/s
[info] Iteration   1: 152298.597 ops/s
[info]                  ·gc.alloc.rate:      396.357 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 151075.470 ops/s
[info]                  ·gc.alloc.rate:               419.628 MB/sec
[info]                  ·gc.alloc.rate.norm:          4371.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5329.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 151928.829 ops/s
[info]                  ·gc.alloc.rate:               411.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          4265.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6949.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 152348.007 ops/s
[info]                  ·gc.alloc.rate:      396.484 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 151781.508 ops/s
[info]                  ·gc.alloc.rate:                   409.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6955.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   151886.482 ±(99.9%) 1976.058 ops/s [Average]
[info]   (min, avg, max) = (151075.470, 151886.482, 152348.007), stdev = 513.176
[info]   CI (99.9%): [149910.424, 153862.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   406.775 ±(99.9%) 39.108 MB/sec [Average]
[info]   (min, avg, max) = (396.357, 406.775, 419.628), stdev = 10.156
[info]   CI (99.9%): [367.667, 445.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4215.398 ±(99.9%) 457.539 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4215.398, 4371.649), stdev = 118.821
[info]   CI (99.9%): [3757.859, 4672.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.644 ±(99.9%) 1326.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.644, 670.835), stdev = 344.536
[info]   CI (99.9%): [≈ 0, 1697.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3846.956 ±(99.9%) 13761.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3846.956, 6955.739), stdev = 3573.712
[info]   CI (99.9%): [≈ 0, 17608.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.216), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608.430 ops/s
[info] # Warmup Iteration   2: 5115.332 ops/s
[info] # Warmup Iteration   3: 5532.714 ops/s
[info] # Warmup Iteration   4: 5729.117 ops/s
[info] # Warmup Iteration   5: 5732.852 ops/s
[info] Iteration   1: 5734.031 ops/s
[info]                  ·gc.alloc.rate:               1497.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          410907.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366891.916 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 5835.187 ops/s
[info]                  ·gc.alloc.rate:                   1528.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              412212.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541264.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 5890.287 ops/s
[info]                  ·gc.alloc.rate:                   1538.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              411137.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     357772.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1162.538 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 5924.658 ops/s
[info]                  ·gc.alloc.rate:                   1560.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              414429.167 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354537.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5846.121 ops/s
[info]                  ·gc.alloc.rate:                   1540.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              414794.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358610.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5846.057 ±(99.9%) 277.691 ops/s [Average]
[info]   (min, avg, max) = (5734.031, 5846.057, 5924.658), stdev = 72.115
[info]   CI (99.9%): [5568.366, 6123.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1533.102 ±(99.9%) 89.113 MB/sec [Average]
[info]   (min, avg, max) = (1497.140, 1533.102, 1560.195), stdev = 23.142
[info]   CI (99.9%): [1443.988, 1622.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   412696.214 ±(99.9%) 7012.436 B/op [Average]
[info]   (min, avg, max) = (410907.887, 412696.214, 414794.037), stdev = 1821.107
[info]   CI (99.9%): [405683.778, 419708.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1469.945 ±(99.9%) 1156.000 MB/sec [Average]
[info]   (min, avg, max) = (1332.118, 1469.945, 2006.956), stdev = 300.210
[info]   CI (99.9%): [313.945, 2625.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   395815.344 ±(99.9%) 313580.894 B/op [Average]
[info]   (min, avg, max) = (354537.929, 395815.344, 541264.260), stdev = 81435.962
[info]   CI (99.9%): [82234.450, 709396.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.954 ±(99.9%) 7.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 4.351), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 8.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   254.788 ±(99.9%) 1956.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 254.788, 1162.538), stdev = 508.074
[info]   CI (99.9%): [≈ 0, 2211.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8280.519 ops/s
[info] # Warmup Iteration   2: 18984.337 ops/s
[info] # Warmup Iteration   3: 20258.914 ops/s
[info] # Warmup Iteration   4: 20302.781 ops/s
[info] # Warmup Iteration   5: 20158.985 ops/s
[info] Iteration   1: 20278.905 ops/s
[info]                  ·gc.alloc.rate:                   1563.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              121342.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104123.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 19721.593 ops/s
[info]                  ·gc.alloc.rate:                   1572.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              125481.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160656.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234.247 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 20158.183 ops/s
[info]                  ·gc.alloc.rate:                   1563.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              122002.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104737.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20353.658 ops/s
[info]                  ·gc.alloc.rate:               1590.194 MB/sec
[info]                  ·gc.alloc.rate.norm:          122958.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103533.810 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 20435.622 ops/s
[info]                  ·gc.alloc.rate:                   1597.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              122985.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154523.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   20189.592 ±(99.9%) 1081.330 ops/s [Average]
[info]   (min, avg, max) = (19721.593, 20189.592, 20435.622), stdev = 280.818
[info]   CI (99.9%): [19108.262, 21270.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1577.298 ±(99.9%) 60.281 MB/sec [Average]
[info]   (min, avg, max) = (1563.267, 1577.298, 1597.284), stdev = 15.655
[info]   CI (99.9%): [1517.017, 1637.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122954.251 ±(99.9%) 6055.537 B/op [Average]
[info]   (min, avg, max) = (121342.379, 122954.251, 125481.701), stdev = 1572.604
[info]   CI (99.9%): [116898.714, 129009.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.513 ±(99.9%) 1411.305 MB/sec [Average]
[info]   (min, avg, max) = (1338.978, 1608.513, 2013.108), stdev = 366.511
[info]   CI (99.9%): [197.208, 3019.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   125515.182 ±(99.9%) 113069.283 B/op [Average]
[info]   (min, avg, max) = (103533.810, 125515.182, 160656.899), stdev = 29363.734
[info]   CI (99.9%): [12445.899, 238584.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 2.935), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   61.468 ±(99.9%) 388.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.468, 234.247), stdev = 100.812
[info]   CI (99.9%): [≈ 0, 449.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6141.905 ops/s
[info] # Warmup Iteration   2: 21992.715 ops/s
[info] # Warmup Iteration   3: 23266.575 ops/s
[info] # Warmup Iteration   4: 23715.329 ops/s
[info] # Warmup Iteration   5: 23720.200 ops/s
[info] Iteration   1: 23548.727 ops/s
[info]                  ·gc.alloc.rate:                   1583.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              105810.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88998.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23766.101 ops/s
[info]                  ·gc.alloc.rate:                   1603.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              106157.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88270.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23683.145 ops/s
[info]                  ·gc.alloc.rate:               1621.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          107741.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133075.211 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 23819.034 ops/s
[info]                  ·gc.alloc.rate:               1616.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          106800.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88426.696 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23530.812 ops/s
[info]                  ·gc.alloc.rate:               1588.922 MB/sec
[info]                  ·gc.alloc.rate.norm:          106274.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89686.998 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   23669.564 ±(99.9%) 493.495 ops/s [Average]
[info]   (min, avg, max) = (23530.812, 23669.564, 23819.034), stdev = 128.159
[info]   CI (99.9%): [23176.068, 24163.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1602.642 ±(99.9%) 63.730 MB/sec [Average]
[info]   (min, avg, max) = (1583.409, 1602.642, 1621.267), stdev = 16.550
[info]   CI (99.9%): [1538.912, 1666.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106556.904 ±(99.9%) 2894.658 B/op [Average]
[info]   (min, avg, max) = (105810.449, 106556.904, 107741.774), stdev = 751.734
[info]   CI (99.9%): [103662.246, 109451.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.327 ±(99.9%) 1147.738 MB/sec [Average]
[info]   (min, avg, max) = (1331.832, 1469.327, 2002.478), stdev = 298.064
[info]   CI (99.9%): [321.589, 2617.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   97691.763 ±(99.9%) 76195.640 B/op [Average]
[info]   (min, avg, max) = (88270.954, 97691.763, 133075.211), stdev = 19787.766
[info]   CI (99.9%): [21496.124, 173887.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.554 ±(99.9%) 2.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.554, 1.391), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91212.779 ops/s
[info] # Warmup Iteration   2: 128735.539 ops/s
[info] # Warmup Iteration   3: 134532.854 ops/s
[info] # Warmup Iteration   4: 134783.017 ops/s
[info] # Warmup Iteration   5: 134464.797 ops/s
[info] Iteration   1: 134493.191 ops/s
[info]                  ·gc.alloc.rate:      298.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 3491.881 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134193.154 ops/s
[info]                  ·gc.alloc.rate:               309.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          3631.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6000.211 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 133356.938 ops/s
[info]                  ·gc.alloc.rate:               320.747 MB/sec
[info]                  ·gc.alloc.rate.norm:          3785.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6037.956 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 134905.618 ops/s
[info]                  ·gc.alloc.rate:      298.289 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 134914.699 ops/s
[info]                  ·gc.alloc.rate:      298.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   134372.720 ±(99.9%) 2477.831 ops/s [Average]
[info]   (min, avg, max) = (133356.938, 134372.720, 134914.699), stdev = 643.485
[info]   CI (99.9%): [131894.889, 136850.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   305.074 ±(99.9%) 38.656 MB/sec [Average]
[info]   (min, avg, max) = (298.289, 305.074, 320.747), stdev = 10.039
[info]   CI (99.9%): [266.418, 343.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3573.751 ±(99.9%) 517.926 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3573.751, 3785.265), stdev = 134.504
[info]   CI (99.9%): [3055.825, 4091.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.646 ±(99.9%) 1079.039 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.646, 511.630), stdev = 280.223
[info]   CI (99.9%): [≈ 0, 1283.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2407.634 ±(99.9%) 12694.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2407.634, 6037.956), stdev = 3296.815
[info]   CI (99.9%): [≈ 0, 15102.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98504.227 ops/s
[info] # Warmup Iteration   2: 136794.809 ops/s
[info] # Warmup Iteration   3: 139337.233 ops/s
[info] # Warmup Iteration   4: 140346.043 ops/s
[info] # Warmup Iteration   5: 140233.681 ops/s
[info] Iteration   1: 140207.862 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140062.647 ops/s
[info]                  ·gc.alloc.rate:      0.299 MB/sec
[info]                  ·gc.alloc.rate.norm: 3.355 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 140221.077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140340.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140241.713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   140214.700 ±(99.9%) 383.561 ops/s [Average]
[info]   (min, avg, max) = (140062.647, 140214.700, 140340.202), stdev = 99.609
[info]   CI (99.9%): [139831.140, 140598.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.060 ±(99.9%) 0.514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.060, 0.299), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.674 ±(99.9%) 5.771 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.674, 3.355), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10126.007 ops/s
[info] # Warmup Iteration   2: 21588.469 ops/s
[info] # Warmup Iteration   3: 23283.105 ops/s
[info] # Warmup Iteration   4: 23476.074 ops/s
[info] # Warmup Iteration   5: 23293.515 ops/s
[info] Iteration   1: 23447.112 ops/s
[info]                  ·gc.alloc.rate:                   1622.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              108891.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90071.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 23487.061 ops/s
[info]                  ·gc.alloc.rate:                   1626.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              109003.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89966.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23591.159 ops/s
[info]                  ·gc.alloc.rate:                   1647.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              109909.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134127.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 23560.571 ops/s
[info]                  ·gc.alloc.rate:               1643.559 MB/sec
[info]                  ·gc.alloc.rate.norm:          109770.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89354.125 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 23659.698 ops/s
[info]                  ·gc.alloc.rate:               1637.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          108951.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88891.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23549.120 ±(99.9%) 324.363 ops/s [Average]
[info]   (min, avg, max) = (23447.112, 23549.120, 23659.698), stdev = 84.236
[info]   CI (99.9%): [23224.758, 23873.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1635.606 ±(99.9%) 41.669 MB/sec [Average]
[info]   (min, avg, max) = (1622.250, 1635.606, 1647.586), stdev = 10.821
[info]   CI (99.9%): [1593.937, 1677.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109305.237 ±(99.9%) 1895.121 B/op [Average]
[info]   (min, avg, max) = (108891.733, 109305.237, 109909.383), stdev = 492.157
[info]   CI (99.9%): [107410.116, 111200.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.868 ±(99.9%) 1155.453 MB/sec [Average]
[info]   (min, avg, max) = (1336.315, 1473.868, 2010.624), stdev = 300.067
[info]   CI (99.9%): [318.415, 2629.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   98482.254 ±(99.9%) 76751.020 B/op [Average]
[info]   (min, avg, max) = (88891.664, 98482.254, 134127.421), stdev = 19931.996
[info]   CI (99.9%): [21731.234, 175233.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.821 ±(99.9%) 5.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.821, 3.042), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   54.929 ±(99.9%) 340.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.929, 203.805), stdev = 88.423
[info]   CI (99.9%): [≈ 0, 395.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33813.718 ops/s
[info] # Warmup Iteration   2: 112648.167 ops/s
[info] # Warmup Iteration   3: 115490.632 ops/s
[info] # Warmup Iteration   4: 123342.024 ops/s
[info] # Warmup Iteration   5: 123557.383 ops/s
[info] Iteration   1: 124254.722 ops/s
[info]                  ·gc.alloc.rate:                   1756.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              22250.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17018.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.791 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 123039.099 ops/s
[info]                  ·gc.alloc.rate:                   1766.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              22595.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25793.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.268 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 123733.233 ops/s
[info]                  ·gc.alloc.rate:                   1761.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              22404.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17065.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.854 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 124078.087 ops/s
[info]                  ·gc.alloc.rate:                   1778.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              22557.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25476.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 123834.790 ops/s
[info]                  ·gc.alloc.rate:               1776.866 MB/sec
[info]                  ·gc.alloc.rate.norm:          22582.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25525.672 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   123787.986 ±(99.9%) 1793.777 ops/s [Average]
[info]   (min, avg, max) = (123039.099, 123787.986, 124254.722), stdev = 465.838
[info]   CI (99.9%): [121994.209, 125581.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1768.091 ±(99.9%) 35.996 MB/sec [Average]
[info]   (min, avg, max) = (1756.791, 1768.091, 1778.340), stdev = 9.348
[info]   CI (99.9%): [1732.095, 1804.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22478.192 ±(99.9%) 572.916 B/op [Average]
[info]   (min, avg, max) = (22250.172, 22478.192, 22595.730), stdev = 148.784
[info]   CI (99.9%): [21905.276, 23051.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.814 ±(99.9%) 1409.287 MB/sec [Average]
[info]   (min, avg, max) = (1342.092, 1743.814, 2016.415), stdev = 365.987
[info]   CI (99.9%): [334.527, 3153.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22175.771 ±(99.9%) 18052.286 B/op [Average]
[info]   (min, avg, max) = (17018.667, 22175.771, 25793.037), stdev = 4688.121
[info]   CI (99.9%): [4123.484, 40228.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.990 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.539), stdev = 1.556
[info]   CI (99.9%): [≈ 0, 6.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.688 ±(99.9%) 76.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.688, 45.268), stdev = 19.901
[info]   CI (99.9%): [≈ 0, 86.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.701 ops/s
[info] # Warmup Iteration   2: 522459.822 ops/s
[info] # Warmup Iteration   3: 540430.430 ops/s
[info] # Warmup Iteration   4: 548853.277 ops/s
[info] # Warmup Iteration   5: 564185.187 ops/s
[info] Iteration   1: 549957.951 ops/s
[info]                  ·gc.alloc.rate:               590.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1906.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 547450.836 ops/s
[info]                  ·gc.alloc.rate:               585.887 MB/sec
[info]                  ·gc.alloc.rate.norm:          1683.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1915.071 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 560871.400 ops/s
[info]                  ·gc.alloc.rate:                   598.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              1679.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1871.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 561090.025 ops/s
[info]                  ·gc.alloc.rate:               595.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          1670.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1870.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 565668.742 ops/s
[info]                  ·gc.alloc.rate:               606.870 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1856.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   557007.791 ±(99.9%) 30297.975 ops/s [Average]
[info]   (min, avg, max) = (547450.836, 557007.791, 565668.742), stdev = 7868.288
[info]   CI (99.9%): [526709.816, 587305.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   595.396 ±(99.9%) 30.951 MB/sec [Average]
[info]   (min, avg, max) = (585.887, 595.396, 606.870), stdev = 8.038
[info]   CI (99.9%): [564.445, 626.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1682.255 ±(99.9%) 29.152 B/op [Average]
[info]   (min, avg, max) = (1670.723, 1682.255, 1688.973), stdev = 7.571
[info]   CI (99.9%): [1653.104, 1711.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.645 ±(99.9%) 1.631 MB/sec [Average]
[info]   (min, avg, max) = (666.134, 666.645, 667.157), stdev = 0.423
[info]   CI (99.9%): [665.015, 668.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1883.823 ±(99.9%) 97.960 B/op [Average]
[info]   (min, avg, max) = (1856.190, 1883.823, 1915.071), stdev = 25.440
[info]   CI (99.9%): [1785.863, 1981.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.009 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.131), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104549.510 ops/s
[info] # Warmup Iteration   2: 294785.172 ops/s
[info] # Warmup Iteration   3: 316579.807 ops/s
[info] # Warmup Iteration   4: 320661.647 ops/s
[info] # Warmup Iteration   5: 318705.364 ops/s
[info] Iteration   1: 313373.528 ops/s
[info]                  ·gc.alloc.rate:                   457.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2299.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2569.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 310422.575 ops/s
[info]                  ·gc.alloc.rate:      438.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 323701.780 ops/s
[info]                  ·gc.alloc.rate:               482.663 MB/sec
[info]                  ·gc.alloc.rate.norm:          2346.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3240.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 315041.349 ops/s
[info]                  ·gc.alloc.rate:                   463.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3329.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 321235.445 ops/s
[info]                  ·gc.alloc.rate:      454.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 2224.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   316754.935 ±(99.9%) 21335.721 ops/s [Average]
[info]   (min, avg, max) = (310422.575, 316754.935, 323701.780), stdev = 5540.819
[info]   CI (99.9%): [295419.215, 338090.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   459.256 ±(99.9%) 61.385 MB/sec [Average]
[info]   (min, avg, max) = (438.649, 459.256, 482.663), stdev = 15.941
[info]   CI (99.9%): [397.871, 520.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2281.396 ±(99.9%) 212.373 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2281.396, 2346.801), stdev = 55.153
[info]   CI (99.9%): [2069.023, 2493.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.950 ±(99.9%) 1319.602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.950, 666.717), stdev = 342.696
[info]   CI (99.9%): [≈ 0, 1688.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1827.850 ±(99.9%) 6523.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1827.850, 3329.431), stdev = 1694.258
[info]   CI (99.9%): [≈ 0, 8351.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 478726.153 ops/s
[info] # Warmup Iteration   2: 752088.848 ops/s
[info] # Warmup Iteration   3: 765712.553 ops/s
[info] # Warmup Iteration   4: 767711.466 ops/s
[info] # Warmup Iteration   5: 767401.502 ops/s
[info] Iteration   1: 762785.146 ops/s
[info]                  ·gc.alloc.rate:               512.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          1057.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1055.600 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 756755.837 ops/s
[info]                  ·gc.alloc.rate:               512.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1395.089 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 745599.314 ops/s
[info]                  ·gc.alloc.rate:                   509.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1075.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1415.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 754197.528 ops/s
[info]                  ·gc.alloc.rate:      490.686 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 766861.743 ops/s
[info]                  ·gc.alloc.rate:               514.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          1055.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1378.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   757239.914 ±(99.9%) 31537.879 ops/s [Average]
[info]   (min, avg, max) = (745599.314, 757239.914, 766861.743), stdev = 8190.287
[info]   CI (99.9%): [725702.035, 788777.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   507.891 ±(99.9%) 37.556 MB/sec [Average]
[info]   (min, avg, max) = (490.686, 507.891, 514.243), stdev = 9.753
[info]   CI (99.9%): [470.336, 545.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.621 ±(99.9%) 74.755 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.621, 1075.991), stdev = 19.414
[info]   CI (99.9%): [980.866, 1130.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.960 ±(99.9%) 1119.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.960, 671.598), stdev = 290.606
[info]   CI (99.9%): [≈ 0, 1623.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1048.959 ±(99.9%) 2328.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1048.959, 1415.991), stdev = 604.818
[info]   CI (99.9%): [≈ 0, 3377.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.132), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9121.446 ops/s
[info] # Warmup Iteration   2: 68297.078 ops/s
[info] # Warmup Iteration   3: 75674.310 ops/s
[info] # Warmup Iteration   4: 77152.901 ops/s
[info] # Warmup Iteration   5: 76606.449 ops/s
[info] Iteration   1: 77344.449 ops/s
[info]                  ·gc.alloc.rate:                   3160.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              64318.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54273.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 77975.177 ops/s
[info]                  ·gc.alloc.rate:                   3242.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              65422.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3340.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67388.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.840 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 77303.459 ops/s
[info]                  ·gc.alloc.rate:               3216.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          65448.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68266.278 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 77508.608 ops/s
[info]                  ·gc.alloc.rate:               3197.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          64926.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54659.971 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 77655.298 ops/s
[info]                  ·gc.alloc.rate:               3230.406 MB/sec
[info]                  ·gc.alloc.rate.norm:          65463.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68416.796 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   77557.398 ±(99.9%) 1048.083 ops/s [Average]
[info]   (min, avg, max) = (77303.459, 77557.398, 77975.177), stdev = 272.184
[info]   CI (99.9%): [76509.315, 78605.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3209.516 ±(99.9%) 123.116 MB/sec [Average]
[info]   (min, avg, max) = (3160.956, 3209.516, 3242.777), stdev = 31.973
[info]   CI (99.9%): [3086.401, 3332.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65115.945 ±(99.9%) 1922.975 B/op [Average]
[info]   (min, avg, max) = (64318.600, 65115.945, 65463.492), stdev = 499.390
[info]   CI (99.9%): [63192.970, 67038.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3085.996 ±(99.9%) 1429.871 MB/sec [Average]
[info]   (min, avg, max) = (2667.293, 3085.996, 3376.142), stdev = 371.333
[info]   CI (99.9%): [1656.125, 4515.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62601.124 ±(99.9%) 28638.070 B/op [Average]
[info]   (min, avg, max) = (54273.615, 62601.124, 68416.796), stdev = 7437.216
[info]   CI (99.9%): [33963.054, 91239.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.422 ±(99.9%) 2.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.422, 1.271), stdev = 0.598
[info]   CI (99.9%): [≈ 0, 2.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68732.302 ops/s
[info] # Warmup Iteration   2: 183364.335 ops/s
[info] # Warmup Iteration   3: 199241.573 ops/s
[info] # Warmup Iteration   4: 200631.082 ops/s
[info] # Warmup Iteration   5: 198244.781 ops/s
[info] Iteration   1: 198537.097 ops/s
[info]                  ·gc.alloc.rate:                   1441.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              11423.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10630.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 197764.384 ops/s
[info]                  ·gc.alloc.rate:                   1436.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              11434.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10679.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 198214.910 ops/s
[info]                  ·gc.alloc.rate:                   1471.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              11682.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15992.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.438 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 199702.319 ops/s
[info]                  ·gc.alloc.rate:                   1458.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              11498.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10562.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.328 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 200193.684 ops/s
[info]                  ·gc.alloc.rate:               1477.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          11617.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10525.979 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   198882.479 ±(99.9%) 3948.774 ops/s [Average]
[info]   (min, avg, max) = (197764.384, 198882.479, 200193.684), stdev = 1025.484
[info]   CI (99.9%): [194933.706, 202831.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1457.246 ±(99.9%) 69.647 MB/sec [Average]
[info]   (min, avg, max) = (1436.798, 1457.246, 1477.788), stdev = 18.087
[info]   CI (99.9%): [1387.599, 1526.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11531.321 ±(99.9%) 441.494 B/op [Average]
[info]   (min, avg, max) = (11423.199, 11531.321, 11682.713), stdev = 114.654
[info]   CI (99.9%): [11089.827, 11972.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.297 ±(99.9%) 1160.522 MB/sec [Average]
[info]   (min, avg, max) = (1338.886, 1475.297, 2014.425), stdev = 301.384
[info]   CI (99.9%): [314.776, 2635.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11678.006 ±(99.9%) 9289.220 B/op [Average]
[info]   (min, avg, max) = (10525.979, 11678.006, 15992.098), stdev = 2412.381
[info]   CI (99.9%): [2388.786, 20967.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.456), stdev = 1.534
[info]   CI (99.9%): [≈ 0, 6.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.653 ±(99.9%) 46.898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.653, 27.438), stdev = 12.179
[info]   CI (99.9%): [≈ 0, 52.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.588
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.716 ops/s
[info] # Warmup Iteration   2: 612015.965 ops/s
[info] # Warmup Iteration   3: 637875.668 ops/s
[info] # Warmup Iteration   4: 623140.056 ops/s
[info] # Warmup Iteration   5: 622967.284 ops/s
[info] Iteration   1: 591520.442 ops/s
[info]                  ·gc.alloc.rate:               331.082 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1361.189 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 594407.152 ops/s
[info]                  ·gc.alloc.rate:      323.320 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 624706.486 ops/s
[info]                  ·gc.alloc.rate:               356.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          897.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1676.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 657550.866 ops/s
[info]                  ·gc.alloc.rate:      357.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 657487.233 ops/s
[info]                  ·gc.alloc.rate:                   379.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              908.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   625134.436 ±(99.9%) 124355.204 ops/s [Average]
[info]   (min, avg, max) = (591520.442, 625134.436, 657550.866), stdev = 32294.652
[info]   CI (99.9%): [500779.232, 749489.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   349.627 ±(99.9%) 86.999 MB/sec [Average]
[info]   (min, avg, max) = (323.320, 349.627, 379.514), stdev = 22.593
[info]   CI (99.9%): [262.628, 436.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   879.783 ±(99.9%) 91.988 B/op [Average]
[info]   (min, avg, max) = (856.001, 879.783, 908.455), stdev = 23.889
[info]   CI (99.9%): [787.795, 971.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.611 ±(99.9%) 1318.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.611, 665.757), stdev = 342.303
[info]   CI (99.9%): [≈ 0, 1686.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   926.159 ±(99.9%) 3285.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 926.159, 1676.599), stdev = 853.323
[info]   CI (99.9%): [≈ 0, 4212.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302309.101 ops/s
[info] # Warmup Iteration   2: 648251.873 ops/s
[info] # Warmup Iteration   3: 659363.668 ops/s
[info] # Warmup Iteration   4: 656973.846 ops/s
[info] # Warmup Iteration   5: 649896.813 ops/s
[info] Iteration   1: 651011.870 ops/s
[info]                  ·gc.alloc.rate:               494.633 MB/sec
[info]                  ·gc.alloc.rate.norm:          1195.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1236.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 655892.632 ops/s
[info]                  ·gc.alloc.rate:               507.355 MB/sec
[info]                  ·gc.alloc.rate.norm:          1217.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1600.842 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 660638.278 ops/s
[info]                  ·gc.alloc.rate:                   506.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1207.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 619220.683 ops/s
[info]                  ·gc.alloc.rate:      459.778 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.088 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 658529.316 ops/s
[info]                  ·gc.alloc.rate:                   510.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1220.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   649058.556 ±(99.9%) 65704.103 ops/s [Average]
[info]   (min, avg, max) = (619220.683, 649058.556, 660638.278), stdev = 17063.147
[info]   CI (99.9%): [583354.452, 714762.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   495.882 ±(99.9%) 81.190 MB/sec [Average]
[info]   (min, avg, max) = (459.778, 495.882, 510.660), stdev = 21.085
[info]   CI (99.9%): [414.691, 577.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1201.860 ±(99.9%) 81.483 B/op [Average]
[info]   (min, avg, max) = (1168.088, 1201.860, 1220.379), stdev = 21.161
[info]   CI (99.9%): [1120.377, 1283.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.782 ±(99.9%) 1113.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.782, 667.881), stdev = 289.049
[info]   CI (99.9%): [≈ 0, 1615.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1204.643 ±(99.9%) 2661.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1204.643, 1600.842), stdev = 691.097
[info]   CI (99.9%): [≈ 0, 3865.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 677131.464 ops/s
[info] # Warmup Iteration   2: 1046248.154 ops/s
[info] # Warmup Iteration   3: 1104036.086 ops/s
[info] # Warmup Iteration   4: 1101285.525 ops/s
[info] # Warmup Iteration   5: 1117380.563 ops/s
[info] Iteration   1: 1117652.101 ops/s
[info]                  ·gc.alloc.rate:               633.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          891.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1121377.778 ops/s
[info]                  ·gc.alloc.rate:               626.851 MB/sec
[info]                  ·gc.alloc.rate.norm:          879.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 941.488 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1121218.956 ops/s
[info]                  ·gc.alloc.rate:                   635.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     942.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1121250.442 ops/s
[info]                  ·gc.alloc.rate:               630.933 MB/sec
[info]                  ·gc.alloc.rate.norm:          885.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 942.529 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1079360.728 ops/s
[info]                  ·gc.alloc.rate:               605.480 MB/sec
[info]                  ·gc.alloc.rate.norm:          882.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 979.606 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1112172.001 ±(99.9%) 70888.016 ops/s [Average]
[info]   (min, avg, max) = (1079360.728, 1112172.001, 1121377.778), stdev = 18409.393
[info]   CI (99.9%): [1041283.985, 1183060.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   626.321 ±(99.9%) 46.398 MB/sec [Average]
[info]   (min, avg, max) = (605.480, 626.321, 635.073), stdev = 12.049
[info]   CI (99.9%): [579.923, 672.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   886.236 ±(99.9%) 20.686 B/op [Average]
[info]   (min, avg, max) = (879.459, 886.236, 891.789), stdev = 5.372
[info]   CI (99.9%): [865.550, 906.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.323 ±(99.9%) 1.548 MB/sec [Average]
[info]   (min, avg, max) = (670.788, 671.323, 671.821), stdev = 0.402
[info]   CI (99.9%): [669.775, 672.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   950.155 ±(99.9%) 63.549 B/op [Average]
[info]   (min, avg, max) = (941.488, 950.155, 979.606), stdev = 16.503
[info]   CI (99.9%): [886.606, 1013.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 551339.323 ops/s
[info] # Warmup Iteration   2: 1143637.190 ops/s
[info] # Warmup Iteration   3: 1174153.251 ops/s
[info] # Warmup Iteration   4: 1175048.572 ops/s
[info] # Warmup Iteration   5: 1192846.674 ops/s
[info] Iteration   1: 1176948.516 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1176777.815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1173857.217 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1173091.545 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1174800.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1175095.050 ±(99.9%) 6641.736 ops/s [Average]
[info]   (min, avg, max) = (1173091.545, 1175095.050, 1176948.516), stdev = 1724.838
[info]   CI (99.9%): [1168453.314, 1181736.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5433.254 ops/s
[info] # Warmup Iteration   2: 30717.777 ops/s
[info] # Warmup Iteration   3: 34790.666 ops/s
[info] # Warmup Iteration   4: 34111.615 ops/s
[info] # Warmup Iteration   5: 34358.902 ops/s
[info] Iteration   1: 34865.792 ops/s
[info]                  ·gc.alloc.rate:                   1926.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              86951.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90811.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.940 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 34317.013 ops/s
[info]                  ·gc.alloc.rate:                   1896.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              86930.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92203.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.899 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34984.152 ops/s
[info]                  ·gc.alloc.rate:                   1944.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              87464.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90203.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.936 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35047.194 ops/s
[info]                  ·gc.alloc.rate:               1922.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          86302.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89843.796 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 34946.252 ops/s
[info]                  ·gc.alloc.rate:               1916.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          86322.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60190.752 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34832.080 ±(99.9%) 1137.188 ops/s [Average]
[info]   (min, avg, max) = (34317.013, 34832.080, 35047.194), stdev = 295.324
[info]   CI (99.9%): [33694.892, 35969.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1921.260 ±(99.9%) 66.890 MB/sec [Average]
[info]   (min, avg, max) = (1896.144, 1921.260, 1944.238), stdev = 17.371
[info]   CI (99.9%): [1854.370, 1988.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86794.264 ±(99.9%) 1883.772 B/op [Average]
[info]   (min, avg, max) = (86302.497, 86794.264, 87464.601), stdev = 489.209
[info]   CI (99.9%): [84910.493, 88678.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1873.273 ±(99.9%) 1155.486 MB/sec [Average]
[info]   (min, avg, max) = (1336.534, 1873.273, 2011.854), stdev = 300.076
[info]   CI (99.9%): [717.787, 3028.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84650.603 ±(99.9%) 52765.430 B/op [Average]
[info]   (min, avg, max) = (60190.752, 84650.603, 92203.321), stdev = 13703.014
[info]   CI (99.9%): [31885.173, 137416.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 7.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.845, 4.186), stdev = 1.867
[info]   CI (99.9%): [≈ 0, 8.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.755 ±(99.9%) 329.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.755, 191.899), stdev = 85.611
[info]   CI (99.9%): [≈ 0, 368.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25311.195 ops/s
[info] # Warmup Iteration   2: 113602.764 ops/s
[info] # Warmup Iteration   3: 123903.816 ops/s
[info] # Warmup Iteration   4: 128153.011 ops/s
[info] # Warmup Iteration   5: 127098.788 ops/s
[info] Iteration   1: 127936.887 ops/s
[info]                  ·gc.alloc.rate:               1811.084 MB/sec
[info]                  ·gc.alloc.rate.norm:          22274.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24751.477 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 128970.109 ops/s
[info]                  ·gc.alloc.rate:                   1811.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              22104.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16380.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 128897.345 ops/s
[info]                  ·gc.alloc.rate:                   1835.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              22416.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24515.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 126646.274 ops/s
[info]                  ·gc.alloc.rate:               1779.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          22116.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16614.629 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 126150.495 ops/s
[info]                  ·gc.alloc.rate:               1798.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          22435.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25016.159 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   127720.222 ±(99.9%) 4950.806 ops/s [Average]
[info]   (min, avg, max) = (126150.495, 127720.222, 128970.109), stdev = 1285.709
[info]   CI (99.9%): [122769.416, 132671.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1807.285 ±(99.9%) 79.353 MB/sec [Average]
[info]   (min, avg, max) = (1779.680, 1807.285, 1835.985), stdev = 20.608
[info]   CI (99.9%): [1727.931, 1886.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22269.755 ±(99.9%) 609.173 B/op [Average]
[info]   (min, avg, max) = (22104.783, 22269.755, 22435.978), stdev = 158.200
[info]   CI (99.9%): [21660.582, 22878.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1740.926 ±(99.9%) 1410.608 MB/sec [Average]
[info]   (min, avg, max) = (1336.968, 1740.926, 2012.458), stdev = 366.330
[info]   CI (99.9%): [330.318, 3151.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21455.554 ±(99.9%) 17444.405 B/op [Average]
[info]   (min, avg, max) = (16380.443, 21455.554, 25016.159), stdev = 4530.257
[info]   CI (99.9%): [4011.149, 38899.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.581), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.552 ±(99.9%) 73.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.552, 43.695), stdev = 19.167
[info]   CI (99.9%): [≈ 0, 83.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68753.128 ops/s
[info] # Warmup Iteration   2: 196264.248 ops/s
[info] # Warmup Iteration   3: 201811.163 ops/s
[info] # Warmup Iteration   4: 205715.866 ops/s
[info] # Warmup Iteration   5: 206334.405 ops/s
[info] Iteration   1: 206462.020 ops/s
[info]                  ·gc.alloc.rate:                   1251.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              9540.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10181.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 205525.307 ops/s
[info]                  ·gc.alloc.rate:                   1239.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              9492.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10238.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 201262.485 ops/s
[info]                  ·gc.alloc.rate:               1210.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          9467.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5230.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 198978.223 ops/s
[info]                  ·gc.alloc.rate:                   1211.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              9582.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10585.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 200342.465 ops/s
[info]                  ·gc.alloc.rate:                   1234.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              9694.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10502.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.906 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   202514.100 ±(99.9%) 12689.377 ops/s [Average]
[info]   (min, avg, max) = (198978.223, 202514.100, 206462.020), stdev = 3295.391
[info]   CI (99.9%): [189824.723, 215203.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1229.501 ±(99.9%) 68.923 MB/sec [Average]
[info]   (min, avg, max) = (1210.666, 1229.501, 1251.538), stdev = 17.899
[info]   CI (99.9%): [1160.577, 1298.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9555.539 ±(99.9%) 344.833 B/op [Average]
[info]   (min, avg, max) = (9467.287, 9555.539, 9694.560), stdev = 89.552
[info]   CI (99.9%): [9210.706, 9900.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.353 ±(99.9%) 1150.639 MB/sec [Average]
[info]   (min, avg, max) = (668.815, 1203.353, 1338.447), stdev = 298.817
[info]   CI (99.9%): [52.713, 2353.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9347.595 ±(99.9%) 8887.703 B/op [Average]
[info]   (min, avg, max) = (5230.065, 9347.595, 10585.503), stdev = 2308.108
[info]   CI (99.9%): [459.892, 18235.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 5.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 3.539), stdev = 1.531
[info]   CI (99.9%): [≈ 0, 6.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.643 ±(99.9%) 46.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.643, 27.992), stdev = 12.114
[info]   CI (99.9%): [≈ 0, 53.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134083.436 ops/s
[info] # Warmup Iteration   2: 240307.492 ops/s
[info] # Warmup Iteration   3: 241794.764 ops/s
[info] # Warmup Iteration   4: 257697.270 ops/s
[info] # Warmup Iteration   5: 257283.560 ops/s
[info] Iteration   1: 247403.020 ops/s
[info]                  ·gc.alloc.rate:               1318.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          8385.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8553.621 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 256510.297 ops/s
[info]                  ·gc.alloc.rate:                   1375.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              8440.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8253.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 257902.847 ops/s
[info]                  ·gc.alloc.rate:                   1382.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              8434.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8213.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 257711.248 ops/s
[info]                  ·gc.alloc.rate:                   1394.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              8515.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8215.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 252102.080 ops/s
[info]                  ·gc.alloc.rate:                   1378.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              8603.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8388.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   254325.898 ±(99.9%) 17423.724 ops/s [Average]
[info]   (min, avg, max) = (247403.020, 254325.898, 257902.847), stdev = 4524.886
[info]   CI (99.9%): [236902.174, 271749.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1369.813 ±(99.9%) 114.683 MB/sec [Average]
[info]   (min, avg, max) = (1318.058, 1369.813, 1394.321), stdev = 29.783
[info]   CI (99.9%): [1255.130, 1484.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8475.920 ±(99.9%) 328.538 B/op [Average]
[info]   (min, avg, max) = (8385.132, 8475.920, 8603.917), stdev = 85.320
[info]   CI (99.9%): [8147.382, 8804.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.053 ±(99.9%) 2.463 MB/sec [Average]
[info]   (min, avg, max) = (1344.297, 1345.053, 1345.899), stdev = 0.640
[info]   CI (99.9%): [1342.590, 1347.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8324.998 ±(99.9%) 563.758 B/op [Average]
[info]   (min, avg, max) = (8213.500, 8324.998, 8553.621), stdev = 146.406
[info]   CI (99.9%): [7761.240, 8888.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.570 ±(99.9%) 4.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.570, 2.498), stdev = 1.083
[info]   CI (99.9%): [≈ 0, 4.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.482 ±(99.9%) 25.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.482, 15.244), stdev = 6.607
[info]   CI (99.9%): [≈ 0, 28.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5789.489 ops/s
[info] # Warmup Iteration   2: 59231.672 ops/s
[info] # Warmup Iteration   3: 64673.569 ops/s
[info] # Warmup Iteration   4: 65784.936 ops/s
[info] # Warmup Iteration   5: 65683.192 ops/s
[info] Iteration   1: 65512.316 ops/s
[info]                  ·gc.alloc.rate:                   2631.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              63214.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64460.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.502 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 66689.106 ops/s
[info]                  ·gc.alloc.rate:                   2675.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              63136.132 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63514.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 67188.287 ops/s
[info]                  ·gc.alloc.rate:               2712.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          63479.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63087.111 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 66388.301 ops/s
[info]                  ·gc.alloc.rate:               2664.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          63177.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48078.157 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 67085.822 ops/s
[info]                  ·gc.alloc.rate:               2719.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          63806.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63542.484 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   66572.766 ±(99.9%) 2593.266 ops/s [Average]
[info]   (min, avg, max) = (65512.316, 66572.766, 67188.287), stdev = 673.463
[info]   CI (99.9%): [63979.500, 69166.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2680.765 ±(99.9%) 139.757 MB/sec [Average]
[info]   (min, avg, max) = (2631.147, 2680.765, 2719.464), stdev = 36.294
[info]   CI (99.9%): [2541.008, 2820.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63362.835 ±(99.9%) 1085.041 B/op [Average]
[info]   (min, avg, max) = (63136.132, 63362.835, 63806.217), stdev = 281.782
[info]   CI (99.9%): [62277.794, 64447.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2561.360 ±(99.9%) 1148.570 MB/sec [Average]
[info]   (min, avg, max) = (2028.030, 2561.360, 2708.224), stdev = 298.280
[info]   CI (99.9%): [1412.790, 3709.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60536.669 ±(99.9%) 26887.188 B/op [Average]
[info]   (min, avg, max) = (48078.157, 60536.669, 64460.787), stdev = 6982.517
[info]   CI (99.9%): [33649.481, 87423.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.354), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.290 ±(99.9%) 14.246 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.290, 8.502), stdev = 3.700
[info]   CI (99.9%): [≈ 0, 16.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67529.784 ops/s
[info] # Warmup Iteration   2: 169338.375 ops/s
[info] # Warmup Iteration   3: 172537.224 ops/s
[info] # Warmup Iteration   4: 177502.924 ops/s
[info] # Warmup Iteration   5: 174568.648 ops/s
[info] Iteration   1: 175540.309 ops/s
[info]                  ·gc.alloc.rate:               1154.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          10352.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6011.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 174946.782 ops/s
[info]                  ·gc.alloc.rate:                   1165.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              10489.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12066.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 174725.070 ops/s
[info]                  ·gc.alloc.rate:                   1185.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              10675.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12090.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 176168.429 ops/s
[info]                  ·gc.alloc.rate:               1156.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          10327.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5998.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 176603.868 ops/s
[info]                  ·gc.alloc.rate:                   1184.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              10558.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11967.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   175596.892 ±(99.9%) 3060.337 ops/s [Average]
[info]   (min, avg, max) = (174725.070, 175596.892, 176603.868), stdev = 794.760
[info]   CI (99.9%): [172536.555, 178657.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1169.402 ±(99.9%) 57.898 MB/sec [Average]
[info]   (min, avg, max) = (1154.639, 1169.402, 1185.549), stdev = 15.036
[info]   CI (99.9%): [1111.504, 1227.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10480.881 ±(99.9%) 557.953 B/op [Average]
[info]   (min, avg, max) = (10327.906, 10480.881, 10675.857), stdev = 144.899
[info]   CI (99.9%): [9922.928, 11038.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.755 ±(99.9%) 1415.878 MB/sec [Average]
[info]   (min, avg, max) = (670.460, 1073.755, 1342.931), stdev = 367.699
[info]   CI (99.9%): [≈ 0, 2489.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9627.026 ±(99.9%) 12733.184 B/op [Average]
[info]   (min, avg, max) = (5998.664, 9627.026, 12090.807), stdev = 3306.767
[info]   CI (99.9%): [≈ 0, 22360.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.695 ±(99.9%) 5.853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.414), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.197 ±(99.9%) 52.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.197, 30.424), stdev = 13.544
[info]   CI (99.9%): [≈ 0, 58.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 260592.060 ops/s
[info] # Warmup Iteration   2: 642075.604 ops/s
[info] # Warmup Iteration   3: 720431.668 ops/s
[info] # Warmup Iteration   4: 720232.443 ops/s
[info] # Warmup Iteration   5: 725257.825 ops/s
[info] Iteration   1: 725333.598 ops/s
[info]                  ·gc.alloc.rate:               747.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          1622.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1446.217 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 723938.657 ops/s
[info]                  ·gc.alloc.rate:               756.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          1645.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1450.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 723409.839 ops/s
[info]                  ·gc.alloc.rate:               750.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          1633.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1451.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 721178.818 ops/s
[info]                  ·gc.alloc.rate:                   744.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1625.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1458.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 698247.724 ops/s
[info]                  ·gc.alloc.rate:               722.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          1627.255 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1506.074 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   718421.727 ±(99.9%) 43806.203 ops/s [Average]
[info]   (min, avg, max) = (698247.724, 718421.727, 725333.598), stdev = 11376.332
[info]   CI (99.9%): [674615.524, 762227.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   744.558 ±(99.9%) 50.869 MB/sec [Average]
[info]   (min, avg, max) = (722.247, 744.558, 756.755), stdev = 13.211
[info]   CI (99.9%): [693.689, 795.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1630.902 ±(99.9%) 34.084 B/op [Average]
[info]   (min, avg, max) = (1622.993, 1630.902, 1645.154), stdev = 8.852
[info]   CI (99.9%): [1596.818, 1664.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.517 ±(99.9%) 3.068 MB/sec [Average]
[info]   (min, avg, max) = (666.524, 667.517, 668.461), stdev = 0.797
[info]   CI (99.9%): [664.450, 670.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1462.484 ±(99.9%) 95.266 B/op [Average]
[info]   (min, avg, max) = (1446.217, 1462.484, 1506.074), stdev = 24.740
[info]   CI (99.9%): [1367.218, 1557.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 432002.870 ops/s
[info] # Warmup Iteration   2: 664612.644 ops/s
[info] # Warmup Iteration   3: 687618.460 ops/s
[info] # Warmup Iteration   4: 695143.896 ops/s
[info] # Warmup Iteration   5: 699051.150 ops/s
[info] Iteration   1: 691866.794 ops/s
[info]                  ·gc.alloc.rate:               551.072 MB/sec
[info]                  ·gc.alloc.rate.norm:          1253.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1525.192 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 696738.962 ops/s
[info]                  ·gc.alloc.rate:      534.771 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702034.741 ops/s
[info]                  ·gc.alloc.rate:               559.915 MB/sec
[info]                  ·gc.alloc.rate.norm:          1255.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1503.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 700105.045 ops/s
[info]                  ·gc.alloc.rate:                   560.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              1260.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1508.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 699262.594 ops/s
[info]                  ·gc.alloc.rate:                   554.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              1248.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1510.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   698001.627 ±(99.9%) 15100.087 ops/s [Average]
[info]   (min, avg, max) = (691866.794, 698001.627, 702034.741), stdev = 3921.445
[info]   CI (99.9%): [682901.540, 713101.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   552.167 ±(99.9%) 40.342 MB/sec [Average]
[info]   (min, avg, max) = (534.771, 552.167, 560.496), stdev = 10.477
[info]   CI (99.9%): [511.825, 592.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1245.031 ±(99.9%) 81.329 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1245.031, 1260.002), stdev = 21.121
[info]   CI (99.9%): [1163.702, 1326.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.633 ±(99.9%) 1155.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.633, 671.135), stdev = 299.987
[info]   CI (99.9%): [≈ 0, 1691.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1209.515 ±(99.9%) 2603.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1209.515, 1525.192), stdev = 676.189
[info]   CI (99.9%): [≈ 0, 3813.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389541.858 ops/s
[info] # Warmup Iteration   2: 766275.517 ops/s
[info] # Warmup Iteration   3: 749517.237 ops/s
[info] # Warmup Iteration   4: 777186.423 ops/s
[info] # Warmup Iteration   5: 777589.617 ops/s
[info] Iteration   1: 776916.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 777413.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 777290.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777791.351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 777661.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   777414.882 ±(99.9%) 1314.890 ops/s [Average]
[info]   (min, avg, max) = (776916.667, 777414.882, 777791.351), stdev = 341.473
[info]   CI (99.9%): [776099.992, 778729.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94525.193 ops/s
[info] # Warmup Iteration   2: 340635.487 ops/s
[info] # Warmup Iteration   3: 326669.396 ops/s
[info] # Warmup Iteration   4: 352923.841 ops/s
[info] # Warmup Iteration   5: 361150.712 ops/s
[info] Iteration   1: 358903.382 ops/s
[info]                  ·gc.alloc.rate:                   1023.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              4485.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5825.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 357502.376 ops/s
[info]                  ·gc.alloc.rate:               996.745 MB/sec
[info]                  ·gc.alloc.rate.norm:          4387.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2923.978 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 347648.789 ops/s
[info]                  ·gc.alloc.rate:               980.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          4438.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3008.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 359853.234 ops/s
[info]                  ·gc.alloc.rate:               1017.509 MB/sec
[info]                  ·gc.alloc.rate.norm:          4450.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5818.316 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 360170.308 ops/s
[info]                  ·gc.alloc.rate:               1002.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          4381.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2909.485 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   356815.618 ±(99.9%) 20132.480 ops/s [Average]
[info]   (min, avg, max) = (347648.789, 356815.618, 360170.308), stdev = 5228.341
[info]   CI (99.9%): [336683.137, 376948.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1004.212 ±(99.9%) 64.721 MB/sec [Average]
[info]   (min, avg, max) = (980.964, 1004.212, 1023.052), stdev = 16.808
[info]   CI (99.9%): [939.490, 1068.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4428.909 ±(99.9%) 168.998 B/op [Average]
[info]   (min, avg, max) = (4381.724, 4428.909, 4485.817), stdev = 43.888
[info]   CI (99.9%): [4259.911, 4597.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   930.737 ±(99.9%) 1401.388 MB/sec [Average]
[info]   (min, avg, max) = (664.212, 930.737, 1330.326), stdev = 363.936
[info]   CI (99.9%): [≈ 0, 2332.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4097.033 ±(99.9%) 6064.191 B/op [Average]
[info]   (min, avg, max) = (2909.485, 4097.033, 5825.081), stdev = 1574.851
[info]   CI (99.9%): [≈ 0, 10161.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.091, 0.456), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1697.863 ops/s
[info] # Warmup Iteration   2: 9440.352 ops/s
[info] # Warmup Iteration   3: 11333.755 ops/s
[info] # Warmup Iteration   4: 11315.540 ops/s
[info] # Warmup Iteration   5: 11349.215 ops/s
[info] Iteration   1: 11202.353 ops/s
[info]                  ·gc.alloc.rate:                   1412.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              198471.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188472.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 11015.475 ops/s
[info]                  ·gc.alloc.rate:               1405.207 MB/sec
[info]                  ·gc.alloc.rate.norm:          200724.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 191766.259 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 11280.096 ops/s
[info]                  ·gc.alloc.rate:                   1416.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              197694.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187371.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.234 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 11290.817 ops/s
[info]                  ·gc.alloc.rate:                   1430.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              199343.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187003.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11093.076 ops/s
[info]                  ·gc.alloc.rate:               1404.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          199232.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189962.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11176.363 ±(99.9%) 461.103 ops/s [Average]
[info]   (min, avg, max) = (11015.475, 11176.363, 11290.817), stdev = 119.747
[info]   CI (99.9%): [10715.260, 11637.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1413.882 ±(99.9%) 40.634 MB/sec [Average]
[info]   (min, avg, max) = (1404.272, 1413.882, 1430.224), stdev = 10.553
[info]   CI (99.9%): [1373.247, 1454.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199093.542 ±(99.9%) 4342.354 B/op [Average]
[info]   (min, avg, max) = (197694.682, 199093.542, 200724.892), stdev = 1127.695
[info]   CI (99.9%): [194751.188, 203435.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.531 ±(99.9%) 6.015 MB/sec [Average]
[info]   (min, avg, max) = (1338.936, 1341.531, 1342.972), stdev = 1.562
[info]   CI (99.9%): [1335.516, 1347.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   188915.377 ±(99.9%) 7569.788 B/op [Average]
[info]   (min, avg, max) = (187003.636, 188915.377, 191766.259), stdev = 1965.850
[info]   CI (99.9%): [181345.589, 196485.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.767 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.435), stdev = 1.498
[info]   CI (99.9%): [≈ 0, 6.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   108.038 ±(99.9%) 804.684 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 108.038, 479.234), stdev = 208.974
[info]   CI (99.9%): [≈ 0, 912.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1514.961 ops/s
[info] # Warmup Iteration   2: 9919.901 ops/s
[info] # Warmup Iteration   3: 10988.368 ops/s
[info] # Warmup Iteration   4: 10973.395 ops/s
[info] # Warmup Iteration   5: 10705.402 ops/s
[info] Iteration   1: 10702.773 ops/s
[info]                  ·gc.alloc.rate:                   1247.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              183411.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196491.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10736.244 ops/s
[info]                  ·gc.alloc.rate:               1239.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          181611.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98041.563 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 10693.162 ops/s
[info]                  ·gc.alloc.rate:                   1244.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              183110.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196920.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 10706.256 ops/s
[info]                  ·gc.alloc.rate:                   1241.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              182381.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196760.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10746.609 ops/s
[info]                  ·gc.alloc.rate:                   1257.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              184129.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195882.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10717.008 ±(99.9%) 88.923 ops/s [Average]
[info]   (min, avg, max) = (10693.162, 10717.008, 10746.609), stdev = 23.093
[info]   CI (99.9%): [10628.086, 10805.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1245.768 ±(99.9%) 27.443 MB/sec [Average]
[info]   (min, avg, max) = (1239.095, 1245.768, 1257.240), stdev = 7.127
[info]   CI (99.9%): [1218.324, 1273.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   182928.671 ±(99.9%) 3724.374 B/op [Average]
[info]   (min, avg, max) = (181611.511, 182928.671, 184129.282), stdev = 967.208
[info]   CI (99.9%): [179204.296, 186653.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.910 ±(99.9%) 1151.621 MB/sec [Average]
[info]   (min, avg, max) = (668.916, 1203.910, 1338.980), stdev = 299.072
[info]   CI (99.9%): [52.289, 2355.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   176819.443 ±(99.9%) 169582.164 B/op [Average]
[info]   (min, avg, max) = (98041.563, 176819.443, 196920.514), stdev = 44039.949
[info]   CI (99.9%): [7237.279, 346401.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.900 ±(99.9%) 5.977 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.900, 3.605), stdev = 1.552
[info]   CI (99.9%): [≈ 0, 6.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   132.161 ±(99.9%) 878.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 132.161, 529.678), stdev = 228.113
[info]   CI (99.9%): [≈ 0, 1010.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150645.880 ops/s
[info] # Warmup Iteration   2: 273427.292 ops/s
[info] # Warmup Iteration   3: 273335.696 ops/s
[info] # Warmup Iteration   4: 276983.578 ops/s
[info] # Warmup Iteration   5: 278819.132 ops/s
[info] Iteration   1: 262129.520 ops/s
[info]                  ·gc.alloc.rate:                   1769.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              10627.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12130.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 278655.373 ops/s
[info]                  ·gc.alloc.rate:                   1851.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              10458.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7603.884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 271295.382 ops/s
[info]                  ·gc.alloc.rate:                   1830.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              10619.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11693.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 277514.633 ops/s
[info]                  ·gc.alloc.rate:               1873.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          10624.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11426.104 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 275069.043 ops/s
[info]                  ·gc.alloc.rate:               1841.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          10537.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7689.827 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   272932.790 ±(99.9%) 25665.096 ops/s [Average]
[info]   (min, avg, max) = (262129.520, 272932.790, 278655.373), stdev = 6665.144
[info]   CI (99.9%): [247267.695, 298597.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1833.428 ±(99.9%) 149.435 MB/sec [Average]
[info]   (min, avg, max) = (1769.990, 1833.428, 1873.315), stdev = 38.808
[info]   CI (99.9%): [1683.993, 1982.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10573.412 ±(99.9%) 285.774 B/op [Average]
[info]   (min, avg, max) = (10458.717, 10573.412, 10627.266), stdev = 74.215
[info]   CI (99.9%): [10287.638, 10859.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.204 ±(99.9%) 1417.044 MB/sec [Average]
[info]   (min, avg, max) = (1343.918, 1748.204, 2020.360), stdev = 368.002
[info]   CI (99.9%): [331.160, 3165.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10108.858 ±(99.9%) 8709.053 B/op [Average]
[info]   (min, avg, max) = (7603.884, 10108.858, 12130.519), stdev = 2261.713
[info]   CI (99.9%): [1399.805, 18817.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 3.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.352), stdev = 1.013
[info]   CI (99.9%): [≈ 0, 4.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.555 ±(99.9%) 23.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.555, 14.123), stdev = 6.082
[info]   CI (99.9%): [≈ 0, 26.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 14.000), stdev = 4.827
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006.343 ops/s
[info] # Warmup Iteration   2: 7079.516 ops/s
[info] # Warmup Iteration   3: 8367.369 ops/s
[info] # Warmup Iteration   4: 8599.961 ops/s
[info] # Warmup Iteration   5: 8590.405 ops/s
[info] Iteration   1: 8609.773 ops/s
[info]                  ·gc.alloc.rate:                   1537.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              281068.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244367.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8562.751 ops/s
[info]                  ·gc.alloc.rate:                   1536.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              282307.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368746.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.477 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 8630.839 ops/s
[info]                  ·gc.alloc.rate:                   1545.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              281886.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244137.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 793.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8606.702 ops/s
[info]                  ·gc.alloc.rate:                   1566.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              286407.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244087.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8641.984 ops/s
[info]                  ·gc.alloc.rate:                   1574.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              286697.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363920.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.791 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8610.410 ±(99.9%) 117.110 ops/s [Average]
[info]   (min, avg, max) = (8562.751, 8610.410, 8641.984), stdev = 30.413
[info]   CI (99.9%): [8493.300, 8727.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1552.043 ±(99.9%) 66.783 MB/sec [Average]
[info]   (min, avg, max) = (1536.013, 1552.043, 1574.328), stdev = 17.343
[info]   CI (99.9%): [1485.259, 1618.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   283673.401 ±(99.9%) 10272.006 B/op [Average]
[info]   (min, avg, max) = (281068.642, 283673.401, 286697.214), stdev = 2667.607
[info]   CI (99.9%): [273401.395, 293945.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.065 ±(99.9%) 1403.598 MB/sec [Average]
[info]   (min, avg, max) = (1334.878, 1603.065, 2006.322), stdev = 364.510
[info]   CI (99.9%): [199.467, 3006.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   293051.695 ±(99.9%) 257679.206 B/op [Average]
[info]   (min, avg, max) = (244087.153, 293051.695, 368746.166), stdev = 66918.472
[info]   CI (99.9%): [35372.489, 550730.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 7.371 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.928, 4.351), stdev = 1.914
[info]   CI (99.9%): [≈ 0, 8.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   169.325 ±(99.9%) 1344.001 B/op [Average]
[info]   (min, avg, max) = (3.791, 169.325, 793.295), stdev = 349.033
[info]   CI (99.9%): [≈ 0, 1513.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.435
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8402.843 ops/s
[info] # Warmup Iteration   2: 24362.703 ops/s
[info] # Warmup Iteration   3: 25165.340 ops/s
[info] # Warmup Iteration   4: 25091.297 ops/s
[info] # Warmup Iteration   5: 25320.291 ops/s
[info] Iteration   1: 25655.724 ops/s
[info]                  ·gc.alloc.rate:                   1367.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              83921.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82218.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 25172.857 ops/s
[info]                  ·gc.alloc.rate:               1321.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          82607.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83876.085 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 25587.784 ops/s
[info]                  ·gc.alloc.rate:                   1347.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              82899.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82519.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.280 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 24826.990 ops/s
[info]                  ·gc.alloc.rate:                   1328.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              84194.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85132.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25567.442 ops/s
[info]                  ·gc.alloc.rate:                   1353.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              83290.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82419.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25362.160 ±(99.9%) 1363.408 ops/s [Average]
[info]   (min, avg, max) = (24826.990, 25362.160, 25655.724), stdev = 354.073
[info]   CI (99.9%): [23998.752, 26725.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1343.689 ±(99.9%) 72.699 MB/sec [Average]
[info]   (min, avg, max) = (1321.506, 1343.689, 1367.938), stdev = 18.880
[info]   CI (99.9%): [1270.990, 1416.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83382.616 ±(99.9%) 2577.763 B/op [Average]
[info]   (min, avg, max) = (82607.250, 83382.616, 84194.483), stdev = 669.437
[info]   CI (99.9%): [80804.853, 85960.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.093 ±(99.9%) 5.995 MB/sec [Average]
[info]   (min, avg, max) = (1338.943, 1341.093, 1342.967), stdev = 1.557
[info]   CI (99.9%): [1335.098, 1347.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   83233.309 ±(99.9%) 4802.396 B/op [Average]
[info]   (min, avg, max) = (82218.820, 83233.309, 85132.665), stdev = 1247.167
[info]   CI (99.9%): [78430.913, 88035.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.685), stdev = 1.639
[info]   CI (99.9%): [≈ 0, 7.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.739 ±(99.9%) 400.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.739, 233.576), stdev = 103.890
[info]   CI (99.9%): [≈ 0, 447.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10172.880 ops/s
[info] # Warmup Iteration   2: 29403.123 ops/s
[info] # Warmup Iteration   3: 30091.153 ops/s
[info] # Warmup Iteration   4: 28721.562 ops/s
[info] # Warmup Iteration   5: 29435.679 ops/s
[info] Iteration   1: 30266.255 ops/s
[info]                  ·gc.alloc.rate:                   1259.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              65478.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69554.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 30229.718 ops/s
[info]                  ·gc.alloc.rate:                   1263.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              65783.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69708.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 30426.726 ops/s
[info]                  ·gc.alloc.rate:               1243.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          64331.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34645.872 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 30404.877 ops/s
[info]                  ·gc.alloc.rate:                   1257.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              65073.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69359.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.365 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 30558.076 ops/s
[info]                  ·gc.alloc.rate:                   1274.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              65638.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68958.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30377.130 ±(99.9%) 509.373 ops/s [Average]
[info]   (min, avg, max) = (30229.718, 30377.130, 30558.076), stdev = 132.283
[info]   CI (99.9%): [29867.757, 30886.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1259.734 ±(99.9%) 42.973 MB/sec [Average]
[info]   (min, avg, max) = (1243.719, 1259.734, 1274.643), stdev = 11.160
[info]   CI (99.9%): [1216.761, 1302.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65261.133 ±(99.9%) 2246.141 B/op [Average]
[info]   (min, avg, max) = (64331.932, 65261.133, 65783.186), stdev = 583.316
[info]   CI (99.9%): [63014.992, 67507.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.163 ±(99.9%) 1152.409 MB/sec [Average]
[info]   (min, avg, max) = (669.803, 1205.163, 1340.388), stdev = 299.277
[info]   CI (99.9%): [52.754, 2357.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62445.154 ±(99.9%) 59849.828 B/op [Average]
[info]   (min, avg, max) = (34645.872, 62445.154, 69708.542), stdev = 15542.810
[info]   CI (99.9%): [2595.326, 122294.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 5.457 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.292), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.372 ±(99.9%) 282.388 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.372, 170.365), stdev = 73.335
[info]   CI (99.9%): [≈ 0, 323.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358912.163 ops/s
[info] # Warmup Iteration   2: 574631.973 ops/s
[info] # Warmup Iteration   3: 612126.058 ops/s
[info] # Warmup Iteration   4: 618784.048 ops/s
[info] # Warmup Iteration   5: 626880.923 ops/s
[info] Iteration   1: 630321.934 ops/s
[info]                  ·gc.alloc.rate:               1154.585 MB/sec
[info]                  ·gc.alloc.rate.norm:          2882.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1678.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 629777.130 ops/s
[info]                  ·gc.alloc.rate:               1179.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          2946.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3359.444 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 629767.322 ops/s
[info]                  ·gc.alloc.rate:                   1177.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              2941.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3361.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 632330.405 ops/s
[info]                  ·gc.alloc.rate:                   1166.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              2903.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 631768.607 ops/s
[info]                  ·gc.alloc.rate:                   1179.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2939.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3352.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   630793.080 ±(99.9%) 4564.814 ops/s [Average]
[info]   (min, avg, max) = (629767.322, 630793.080, 632330.405), stdev = 1185.468
[info]   CI (99.9%): [626228.266, 635357.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1171.461 ±(99.9%) 41.844 MB/sec [Average]
[info]   (min, avg, max) = (1154.585, 1171.461, 1179.948), stdev = 10.867
[info]   CI (99.9%): [1129.617, 1213.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2922.671 ±(99.9%) 109.722 B/op [Average]
[info]   (min, avg, max) = (2882.176, 2922.671, 2946.942), stdev = 28.494
[info]   CI (99.9%): [2812.949, 3032.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.994 ±(99.9%) 1418.032 MB/sec [Average]
[info]   (min, avg, max) = (672.302, 1075.994, 1345.582), stdev = 368.258
[info]   CI (99.9%): [≈ 0, 2494.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2685.121 ±(99.9%) 3545.692 B/op [Average]
[info]   (min, avg, max) = (1674.615, 2685.121, 3361.061), stdev = 920.805
[info]   CI (99.9%): [≈ 0, 6230.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.212), stdev = 1.426
[info]   CI (99.9%): [≈ 0, 6.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.650 ±(99.9%) 13.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.650, 8.003), stdev = 3.552
[info]   CI (99.9%): [≈ 0, 15.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479526.347 ops/s
[info] # Warmup Iteration   2: 751461.165 ops/s
[info] # Warmup Iteration   3: 775211.201 ops/s
[info] # Warmup Iteration   4: 774006.123 ops/s
[info] # Warmup Iteration   5: 774059.808 ops/s
[info] Iteration   1: 775634.395 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 775675.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 775443.275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775013.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 775716.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   775496.768 ±(99.9%) 1115.546 ops/s [Average]
[info]   (min, avg, max) = (775013.593, 775496.768, 775716.720), stdev = 289.704
[info]   CI (99.9%): [774381.222, 776612.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9670.175 ops/s
[info] # Warmup Iteration   2: 22521.577 ops/s
[info] # Warmup Iteration   3: 28301.944 ops/s
[info] # Warmup Iteration   4: 28305.990 ops/s
[info] # Warmup Iteration   5: 27783.865 ops/s
[info] Iteration   1: 28483.379 ops/s
[info]                  ·gc.alloc.rate:               1299.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          71778.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74059.568 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 28412.966 ops/s
[info]                  ·gc.alloc.rate:                   1282.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              71039.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74276.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28611.221 ops/s
[info]                  ·gc.alloc.rate:                   1289.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              70958.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73801.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 28544.151 ops/s
[info]                  ·gc.alloc.rate:                   1313.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              72385.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73887.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28764.501 ops/s
[info]                  ·gc.alloc.rate:                   1295.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              70897.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36629.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.695 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   28563.244 ±(99.9%) 517.094 ops/s [Average]
[info]   (min, avg, max) = (28412.966, 28563.244, 28764.501), stdev = 134.288
[info]   CI (99.9%): [28046.150, 29080.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1296.247 ±(99.9%) 44.157 MB/sec [Average]
[info]   (min, avg, max) = (1282.840, 1296.247, 1313.532), stdev = 11.467
[info]   CI (99.9%): [1252.090, 1340.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71411.957 ±(99.9%) 2504.072 B/op [Average]
[info]   (min, avg, max) = (70897.839, 71411.957, 72385.900), stdev = 650.299
[info]   CI (99.9%): [68907.885, 73916.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.719 ±(99.9%) 1156.504 MB/sec [Average]
[info]   (min, avg, max) = (669.454, 1206.719, 1341.678), stdev = 300.340
[info]   CI (99.9%): [50.215, 2363.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66530.759 ±(99.9%) 64369.396 B/op [Average]
[info]   (min, avg, max) = (36629.089, 66530.759, 74276.286), stdev = 16716.528
[info]   CI (99.9%): [2161.363, 130900.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.840 ±(99.9%) 6.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.840, 4.034), stdev = 1.786
[info]   CI (99.9%): [≈ 0, 7.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46.288 ±(99.9%) 378.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.288, 222.304), stdev = 98.419
[info]   CI (99.9%): [≈ 0, 425.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.400, 7.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3539.317 ops/s
[info] # Warmup Iteration   2: 29278.471 ops/s
[info] # Warmup Iteration   3: 33001.820 ops/s
[info] # Warmup Iteration   4: 33909.358 ops/s
[info] # Warmup Iteration   5: 33561.911 ops/s
[info] Iteration   1: 34437.119 ops/s
[info]                  ·gc.alloc.rate:               1799.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          82240.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61374.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 33922.512 ops/s
[info]                  ·gc.alloc.rate:                   1798.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              83423.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93490.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180.606 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 34071.648 ops/s
[info]                  ·gc.alloc.rate:                   1819.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              84013.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92687.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34655.053 ops/s
[info]                  ·gc.alloc.rate:                   1820.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              82663.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60748.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34660.560 ops/s
[info]                  ·gc.alloc.rate:                   1835.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              83336.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91109.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   34349.378 ±(99.9%) 1302.005 ops/s [Average]
[info]   (min, avg, max) = (33922.512, 34349.378, 34660.560), stdev = 338.127
[info]   CI (99.9%): [33047.373, 35651.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1814.600 ±(99.9%) 60.502 MB/sec [Average]
[info]   (min, avg, max) = (1798.209, 1814.600, 1835.354), stdev = 15.712
[info]   CI (99.9%): [1754.098, 1875.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83135.463 ±(99.9%) 2666.676 B/op [Average]
[info]   (min, avg, max) = (82240.474, 83135.463, 84013.416), stdev = 692.527
[info]   CI (99.9%): [80468.787, 85802.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1741.992 ±(99.9%) 1412.158 MB/sec [Average]
[info]   (min, avg, max) = (1337.662, 1741.992, 2015.200), stdev = 366.733
[info]   CI (99.9%): [329.834, 3154.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79882.155 ±(99.9%) 66244.654 B/op [Average]
[info]   (min, avg, max) = (60748.431, 79882.155, 93490.403), stdev = 17203.526
[info]   CI (99.9%): [13637.501, 146126.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.893), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37.259 ±(99.9%) 308.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.259, 180.606), stdev = 80.146
[info]   CI (99.9%): [≈ 0, 345.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4489.593 ops/s
[info] # Warmup Iteration   2: 27873.515 ops/s
[info] # Warmup Iteration   3: 30277.768 ops/s
[info] # Warmup Iteration   4: 30995.601 ops/s
[info] # Warmup Iteration   5: 29714.712 ops/s
[info] Iteration   1: 30945.580 ops/s
[info]                  ·gc.alloc.rate:                   1377.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              70024.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67924.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 30959.426 ops/s
[info]                  ·gc.alloc.rate:               1365.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          69428.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67929.710 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 30918.253 ops/s
[info]                  ·gc.alloc.rate:                   1358.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              69171.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68089.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 30617.622 ops/s
[info]                  ·gc.alloc.rate:                   1357.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              69760.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68823.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30568.836 ops/s
[info]                  ·gc.alloc.rate:                   1353.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              69709.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68729.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   30801.943 ±(99.9%) 738.867 ops/s [Average]
[info]   (min, avg, max) = (30568.836, 30801.943, 30959.426), stdev = 191.881
[info]   CI (99.9%): [30063.077, 31540.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1362.567 ±(99.9%) 35.390 MB/sec [Average]
[info]   (min, avg, max) = (1353.961, 1362.567, 1377.083), stdev = 9.191
[info]   CI (99.9%): [1327.177, 1397.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69618.961 ±(99.9%) 1260.569 B/op [Average]
[info]   (min, avg, max) = (69171.873, 69618.961, 70024.645), stdev = 327.366
[info]   CI (99.9%): [68358.392, 70879.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.706 ±(99.9%) 6.081 MB/sec [Average]
[info]   (min, avg, max) = (1334.941, 1336.706, 1338.955), stdev = 1.579
[info]   CI (99.9%): [1330.625, 1342.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68299.356 ±(99.9%) 1701.244 B/op [Average]
[info]   (min, avg, max) = (67924.363, 68299.356, 68823.072), stdev = 441.808
[info]   CI (99.9%): [66598.113, 70000.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.009 ±(99.9%) 7.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.009, 4.274), stdev = 1.851
[info]   CI (99.9%): [≈ 0, 8.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.783 ±(99.9%) 366.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.783, 219.697), stdev = 95.180
[info]   CI (99.9%): [≈ 0, 418.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.414
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218110.413 ops/s
[info] # Warmup Iteration   2: 459256.323 ops/s
[info] # Warmup Iteration   3: 466027.089 ops/s
[info] # Warmup Iteration   4: 475003.698 ops/s
[info] # Warmup Iteration   5: 485189.379 ops/s
[info] Iteration   1: 478935.788 ops/s
[info]                  ·gc.alloc.rate:                   1279.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              4205.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4417.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 483817.020 ops/s
[info]                  ·gc.alloc.rate:                   1300.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              4228.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4375.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 485482.831 ops/s
[info]                  ·gc.alloc.rate:                   1303.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226.752 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4362.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 485787.054 ops/s
[info]                  ·gc.alloc.rate:                   1305.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              4226.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4361.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 486728.372 ops/s
[info]                  ·gc.alloc.rate:                   1307.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              4228.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4346.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   484150.213 ±(99.9%) 11931.291 ops/s [Average]
[info]   (min, avg, max) = (478935.788, 484150.213, 486728.372), stdev = 3098.518
[info]   CI (99.9%): [472218.922, 496081.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1299.277 ±(99.9%) 43.411 MB/sec [Average]
[info]   (min, avg, max) = (1279.661, 1299.277, 1307.614), stdev = 11.274
[info]   CI (99.9%): [1255.867, 1342.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4223.241 ±(99.9%) 38.988 B/op [Average]
[info]   (min, avg, max) = (4205.203, 4223.241, 4228.933), stdev = 10.125
[info]   CI (99.9%): [4184.252, 4262.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.195 ±(99.9%) 3.741 MB/sec [Average]
[info]   (min, avg, max) = (1344.246, 1345.195, 1346.587), stdev = 0.971
[info]   CI (99.9%): [1341.454, 1348.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4372.680 ±(99.9%) 104.152 B/op [Average]
[info]   (min, avg, max) = (4346.800, 4372.680, 4417.638), stdev = 27.048
[info]   CI (99.9%): [4268.529, 4476.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.612 ±(99.9%) 4.825 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.612, 2.853), stdev = 1.253
[info]   CI (99.9%): [≈ 0, 5.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.983 ±(99.9%) 15.627 B/op [Average]
[info]   (min, avg, max) = (0.034, 1.983, 9.240), stdev = 4.058
[info]   CI (99.9%): [≈ 0, 17.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1363.342 ops/s
[info] # Warmup Iteration   2: 14108.461 ops/s
[info] # Warmup Iteration   3: 17804.817 ops/s
[info] # Warmup Iteration   4: 18213.557 ops/s
[info] # Warmup Iteration   5: 17945.988 ops/s
[info] Iteration   1: 18072.253 ops/s
[info]                  ·gc.alloc.rate:                   1819.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              158422.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116344.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.813 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 17946.150 ops/s
[info]                  ·gc.alloc.rate:                   1840.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              161392.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175901.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 18220.591 ops/s
[info]                  ·gc.alloc.rate:                   1871.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              161628.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172729.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.961 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17818.003 ops/s
[info]                  ·gc.alloc.rate:               1830.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          161665.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176400.362 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 17904.749 ops/s
[info]                  ·gc.alloc.rate:               1812.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          159311.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117106.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   17992.349 ±(99.9%) 604.820 ops/s [Average]
[info]   (min, avg, max) = (17818.003, 17992.349, 18220.591), stdev = 157.070
[info]   CI (99.9%): [17387.529, 18597.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1834.758 ±(99.9%) 88.423 MB/sec [Average]
[info]   (min, avg, max) = (1812.769, 1834.758, 1871.261), stdev = 22.963
[info]   CI (99.9%): [1746.335, 1923.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160484.207 ±(99.9%) 5825.629 B/op [Average]
[info]   (min, avg, max) = (158422.863, 160484.207, 161665.540), stdev = 1512.897
[info]   CI (99.9%): [154658.578, 166309.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1734.229 ±(99.9%) 1405.997 MB/sec [Average]
[info]   (min, avg, max) = (1332.535, 1734.229, 2005.731), stdev = 365.133
[info]   CI (99.9%): [328.232, 3140.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151696.586 ±(99.9%) 123052.044 B/op [Average]
[info]   (min, avg, max) = (116344.076, 151696.586, 176400.362), stdev = 31956.225
[info]   CI (99.9%): [28644.542, 274748.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.941 ±(99.9%) 7.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.941, 4.267), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82.405 ±(99.9%) 630.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.405, 374.251), stdev = 163.866
[info]   CI (99.9%): [≈ 0, 713.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19911.997 ops/s
[info] # Warmup Iteration   2: 54397.185 ops/s
[info] # Warmup Iteration   3: 53635.674 ops/s
[info] # Warmup Iteration   4: 54907.472 ops/s
[info] # Warmup Iteration   5: 55587.782 ops/s
[info] Iteration   1: 55883.096 ops/s
[info]                  ·gc.alloc.rate:                   1704.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              47999.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37821.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 56099.975 ops/s
[info]                  ·gc.alloc.rate:                   1737.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              48743.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56551.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 56702.224 ops/s
[info]                  ·gc.alloc.rate:                   1741.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              48337.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37200.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56664.707 ops/s
[info]                  ·gc.alloc.rate:                   1766.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              49076.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55783.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.625 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 56546.127 ops/s
[info]                  ·gc.alloc.rate:                   1738.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              48351.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37266.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   56379.226 ±(99.9%) 1411.944 ops/s [Average]
[info]   (min, avg, max) = (55883.096, 56379.226, 56702.224), stdev = 366.677
[info]   CI (99.9%): [54967.282, 57791.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1737.682 ±(99.9%) 85.834 MB/sec [Average]
[info]   (min, avg, max) = (1704.294, 1737.682, 1766.978), stdev = 22.291
[info]   CI (99.9%): [1651.848, 1823.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48501.764 ±(99.9%) 1599.886 B/op [Average]
[info]   (min, avg, max) = (47999.895, 48501.764, 49076.539), stdev = 415.485
[info]   CI (99.9%): [46901.879, 50101.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.421 ±(99.9%) 1415.924 MB/sec [Average]
[info]   (min, avg, max) = (1339.559, 1609.421, 2015.983), stdev = 367.711
[info]   CI (99.9%): [193.497, 3025.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44924.454 ±(99.9%) 39545.068 B/op [Average]
[info]   (min, avg, max) = (37200.199, 44924.454, 56551.490), stdev = 10269.729
[info]   CI (99.9%): [5379.386, 84469.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.904 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.518), stdev = 1.533
[info]   CI (99.9%): [≈ 0, 6.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21.822 ±(99.9%) 165.665 B/op [Average]
[info]   (min, avg, max) = (0.579, 21.822, 98.699), stdev = 43.023
[info]   CI (99.9%): [≈ 0, 187.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 2.775
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43932.738 ops/s
[info] # Warmup Iteration   2: 151521.249 ops/s
[info] # Warmup Iteration   3: 158624.175 ops/s
[info] # Warmup Iteration   4: 160242.771 ops/s
[info] # Warmup Iteration   5: 160030.087 ops/s
[info] Iteration   1: 159385.057 ops/s
[info]                  ·gc.alloc.rate:                   1936.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              19119.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19855.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 161394.132 ops/s
[info]                  ·gc.alloc.rate:                   1944.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              18960.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19582.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 160651.200 ops/s
[info]                  ·gc.alloc.rate:               1934.581 MB/sec
[info]                  ·gc.alloc.rate.norm:          18952.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13090.885 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 161489.184 ops/s
[info]                  ·gc.alloc.rate:               1959.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          19097.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19534.691 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 160927.314 ops/s
[info]                  ·gc.alloc.rate:                   1966.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              19233.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19623.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   160769.377 ±(99.9%) 3258.117 ops/s [Average]
[info]   (min, avg, max) = (159385.057, 160769.377, 161489.184), stdev = 846.123
[info]   CI (99.9%): [157511.260, 164027.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1948.386 ±(99.9%) 55.207 MB/sec [Average]
[info]   (min, avg, max) = (1934.581, 1948.386, 1966.915), stdev = 14.337
[info]   CI (99.9%): [1893.179, 2003.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19072.686 ±(99.9%) 453.696 B/op [Average]
[info]   (min, avg, max) = (18952.768, 19072.686, 19233.413), stdev = 117.824
[info]   CI (99.9%): [18618.989, 19526.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.325 ±(99.9%) 1156.156 MB/sec [Average]
[info]   (min, avg, max) = (1336.236, 1873.325, 2010.711), stdev = 300.250
[info]   CI (99.9%): [717.168, 3029.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18337.283 ±(99.9%) 11303.237 B/op [Average]
[info]   (min, avg, max) = (13090.885, 18337.283, 19855.382), stdev = 2935.415
[info]   CI (99.9%): [7034.046, 29640.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.250), stdev = 1.407
[info]   CI (99.9%): [≈ 0, 6.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.677 ±(99.9%) 53.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.677, 32.089), stdev = 13.894
[info]   CI (99.9%): [≈ 0, 61.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613572.024 ops/s
[info] # Warmup Iteration   2: 1090364.982 ops/s
[info] # Warmup Iteration   3: 1183391.484 ops/s
[info] # Warmup Iteration   4: 1191626.712 ops/s
[info] # Warmup Iteration   5: 1192440.774 ops/s
[info] Iteration   1: 1194273.819 ops/s
[info]                  ·gc.alloc.rate:               1304.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          1718.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1198441.636 ops/s
[info]                  ·gc.alloc.rate:                   1326.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              1741.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1765.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1194521.092 ops/s
[info]                  ·gc.alloc.rate:                   1322.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1741.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1772.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1184890.447 ops/s
[info]                  ·gc.alloc.rate:                   1323.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1758.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1787.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.510 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1182576.194 ops/s
[info]                  ·gc.alloc.rate:                   1307.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1740.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1787.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1190940.638 ±(99.9%) 26311.724 ops/s [Average]
[info]   (min, avg, max) = (1182576.194, 1190940.638, 1198441.636), stdev = 6833.071
[info]   CI (99.9%): [1164628.914, 1217252.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1316.803 ±(99.9%) 39.435 MB/sec [Average]
[info]   (min, avg, max) = (1304.126, 1316.803, 1326.651), stdev = 10.241
[info]   CI (99.9%): [1277.368, 1356.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1739.916 ±(99.9%) 54.633 B/op [Average]
[info]   (min, avg, max) = (1718.299, 1739.916, 1758.144), stdev = 14.188
[info]   CI (99.9%): [1685.284, 1794.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.309 ±(99.9%) 1158.194 MB/sec [Average]
[info]   (min, avg, max) = (672.263, 1210.309, 1346.180), stdev = 300.779
[info]   CI (99.9%): [52.115, 2368.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1599.723 ±(99.9%) 1537.281 B/op [Average]
[info]   (min, avg, max) = (885.765, 1599.723, 1787.365), stdev = 399.227
[info]   CI (99.9%): [62.441, 3137.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.692 ±(99.9%) 5.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.692, 3.395), stdev = 1.512
[info]   CI (99.9%): [≈ 0, 6.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.919 ±(99.9%) 7.731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.919, 4.510), stdev = 2.008
[info]   CI (99.9%): [≈ 0, 8.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 833323.977 ops/s
[info] # Warmup Iteration   2: 1336136.840 ops/s
[info] # Warmup Iteration   3: 1384779.933 ops/s
[info] # Warmup Iteration   4: 1384800.661 ops/s
[info] # Warmup Iteration   5: 1384004.877 ops/s
[info] Iteration   1: 1384256.248 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1384683.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1385067.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1385196.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1383991.914 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1384639.188 ±(99.9%) 1983.955 ops/s [Average]
[info]   (min, avg, max) = (1383991.914, 1384639.188, 1385196.353), stdev = 515.227
[info]   CI (99.9%): [1382655.233, 1386623.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22150.226 ops/s
[info] # Warmup Iteration   2: 65244.428 ops/s
[info] # Warmup Iteration   3: 66119.113 ops/s
[info] # Warmup Iteration   4: 69207.878 ops/s
[info] # Warmup Iteration   5: 69829.535 ops/s
[info] Iteration   1: 69625.070 ops/s
[info]                  ·gc.alloc.rate:               1776.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          40161.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45489.439 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 69680.106 ops/s
[info]                  ·gc.alloc.rate:                   1762.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              39810.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30332.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 69641.499 ops/s
[info]                  ·gc.alloc.rate:                   1762.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              39828.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45372.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 68856.015 ops/s
[info]                  ·gc.alloc.rate:                   1728.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              39510.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30559.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.855 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 70257.740 ops/s
[info]                  ·gc.alloc.rate:               1790.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          40113.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44916.801 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   69612.086 ±(99.9%) 1919.704 ops/s [Average]
[info]   (min, avg, max) = (68856.015, 69612.086, 70257.740), stdev = 498.541
[info]   CI (99.9%): [67692.382, 71531.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1764.204 ±(99.9%) 89.021 MB/sec [Average]
[info]   (min, avg, max) = (1728.475, 1764.204, 1790.707), stdev = 23.119
[info]   CI (99.9%): [1675.183, 1853.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39885.089 ±(99.9%) 1015.189 B/op [Average]
[info]   (min, avg, max) = (39510.254, 39885.089, 40161.575), stdev = 263.641
[info]   CI (99.9%): [38869.900, 40900.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1741.051 ±(99.9%) 1410.067 MB/sec [Average]
[info]   (min, avg, max) = (1336.909, 1741.051, 2012.293), stdev = 366.190
[info]   CI (99.9%): [330.983, 3151.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   39334.222 ±(99.9%) 31254.747 B/op [Average]
[info]   (min, avg, max) = (30332.887, 39334.222, 45489.439), stdev = 8116.758
[info]   CI (99.9%): [8079.475, 70588.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.810), stdev = 1.681
[info]   CI (99.9%): [≈ 0, 7.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.156 ±(99.9%) 146.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.156, 86.045), stdev = 37.971
[info]   CI (99.9%): [≈ 0, 164.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2648.902 ops/s
[info] # Warmup Iteration   2: 14341.415 ops/s
[info] # Warmup Iteration   3: 16416.676 ops/s
[info] # Warmup Iteration   4: 17186.031 ops/s
[info] # Warmup Iteration   5: 17109.800 ops/s
[info] Iteration   1: 17104.254 ops/s
[info]                  ·gc.alloc.rate:                   1505.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              138477.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123509.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16653.906 ops/s
[info]                  ·gc.alloc.rate:                   1475.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              139426.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126909.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 16412.548 ops/s
[info]                  ·gc.alloc.rate:                   1473.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              141305.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193170.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 17069.825 ops/s
[info]                  ·gc.alloc.rate:                   1526.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              140703.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123571.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.870 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17271.870 ops/s
[info]                  ·gc.alloc.rate:                   1528.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              139279.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121876.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.897 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16902.481 ±(99.9%) 1370.890 ops/s [Average]
[info]   (min, avg, max) = (16412.548, 16902.481, 17271.870), stdev = 356.016
[info]   CI (99.9%): [15531.591, 18273.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1501.795 ±(99.9%) 101.622 MB/sec [Average]
[info]   (min, avg, max) = (1473.882, 1501.795, 1528.419), stdev = 26.391
[info]   CI (99.9%): [1400.173, 1603.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   139838.405 ±(99.9%) 4404.896 B/op [Average]
[info]   (min, avg, max) = (138477.573, 139838.405, 141305.496), stdev = 1143.937
[info]   CI (99.9%): [135433.509, 144243.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1475.604 ±(99.9%) 1160.816 MB/sec [Average]
[info]   (min, avg, max) = (1337.443, 1475.604, 2014.858), stdev = 301.460
[info]   CI (99.9%): [314.788, 2636.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   137807.525 ±(99.9%) 119381.094 B/op [Average]
[info]   (min, avg, max) = (121876.627, 137807.525, 193170.504), stdev = 31002.891
[info]   CI (99.9%): [18426.431, 257188.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.165 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.808, 3.665), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 6.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   77.190 ±(99.9%) 591.514 B/op [Average]
[info]   (min, avg, max) = (1.897, 77.190, 351.335), stdev = 153.614
[info]   CI (99.9%): [≈ 0, 668.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2636.125 ops/s
[info] # Warmup Iteration   2: 16986.251 ops/s
[info] # Warmup Iteration   3: 17738.042 ops/s
[info] # Warmup Iteration   4: 17879.910 ops/s
[info] # Warmup Iteration   5: 17786.288 ops/s
[info] Iteration   1: 17815.480 ops/s
[info]                  ·gc.alloc.rate:                   1423.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              125781.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118133.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 17378.267 ops/s
[info]                  ·gc.alloc.rate:               1425.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          129103.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121170.525 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 17531.540 ops/s
[info]                  ·gc.alloc.rate:                   1422.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              127713.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120173.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 347.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17546.021 ops/s
[info]                  ·gc.alloc.rate:                   1411.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              126581.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119914.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17867.962 ops/s
[info]                  ·gc.alloc.rate:                   1435.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              126458.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117512.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.833 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17627.854 ±(99.9%) 796.446 ops/s [Average]
[info]   (min, avg, max) = (17378.267, 17627.854, 17867.962), stdev = 206.835
[info]   CI (99.9%): [16831.408, 18424.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1423.794 ±(99.9%) 33.661 MB/sec [Average]
[info]   (min, avg, max) = (1411.166, 1423.794, 1435.706), stdev = 8.742
[info]   CI (99.9%): [1390.133, 1457.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127127.318 ±(99.9%) 5022.687 B/op [Average]
[info]   (min, avg, max) = (125781.048, 127127.318, 129103.072), stdev = 1304.376
[info]   CI (99.9%): [122104.631, 132150.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.983 ±(99.9%) 6.744 MB/sec [Average]
[info]   (min, avg, max) = (1334.143, 1336.983, 1338.749), stdev = 1.751
[info]   CI (99.9%): [1330.240, 1343.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   119380.635 ±(99.9%) 5827.937 B/op [Average]
[info]   (min, avg, max) = (117512.322, 119380.635, 121170.525), stdev = 1513.497
[info]   CI (99.9%): [113552.698, 125208.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 6.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 3.875), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   80.665 ±(99.9%) 580.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.665, 347.799), stdev = 150.819
[info]   CI (99.9%): [≈ 0, 661.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246351.466 ops/s
[info] # Warmup Iteration   2: 629207.541 ops/s
[info] # Warmup Iteration   3: 675586.069 ops/s
[info] # Warmup Iteration   4: 678253.852 ops/s
[info] # Warmup Iteration   5: 681175.368 ops/s
[info] Iteration   1: 677787.158 ops/s
[info]                  ·gc.alloc.rate:                   1829.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4686.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 667002.694 ops/s
[info]                  ·gc.alloc.rate:                   1799.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              4245.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4764.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.926 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 660354.536 ops/s
[info]                  ·gc.alloc.rate:                   1770.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              4219.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3202.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 666910.272 ops/s
[info]                  ·gc.alloc.rate:                   1788.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              4221.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4753.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 682188.472 ops/s
[info]                  ·gc.alloc.rate:               1828.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          4218.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3098.167 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   670848.626 ±(99.9%) 34288.200 ops/s [Average]
[info]   (min, avg, max) = (660354.536, 670848.626, 682188.472), stdev = 8904.537
[info]   CI (99.9%): [636560.427, 705136.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1803.361 ±(99.9%) 98.892 MB/sec [Average]
[info]   (min, avg, max) = (1770.441, 1803.361, 1829.794), stdev = 25.682
[info]   CI (99.9%): [1704.469, 1902.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4230.760 ±(99.9%) 58.629 B/op [Average]
[info]   (min, avg, max) = (4218.288, 4230.760, 4248.842), stdev = 15.226
[info]   CI (99.9%): [4172.130, 4289.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.627 ±(99.9%) 1421.327 MB/sec [Average]
[info]   (min, avg, max) = (1342.887, 1747.627, 2019.123), stdev = 369.114
[info]   CI (99.9%): [326.299, 3168.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4100.922 ±(99.9%) 3346.638 B/op [Average]
[info]   (min, avg, max) = (3098.167, 4100.922, 4764.275), stdev = 869.111
[info]   CI (99.9%): [754.284, 7447.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 5.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.935), stdev = 1.306
[info]   CI (99.9%): [≈ 0, 5.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.415 ±(99.9%) 11.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.415, 6.926), stdev = 3.081
[info]   CI (99.9%): [≈ 0, 13.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1228.543 ops/s
[info] # Warmup Iteration   2: 10703.394 ops/s
[info] # Warmup Iteration   3: 12210.715 ops/s
[info] # Warmup Iteration   4: 12260.926 ops/s
[info] # Warmup Iteration   5: 12018.004 ops/s
[info] Iteration   1: 11854.553 ops/s
[info]                  ·gc.alloc.rate:                   1603.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              212878.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176383.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12129.398 ops/s
[info]                  ·gc.alloc.rate:                   1663.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              215834.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258816.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.701 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12271.634 ops/s
[info]                  ·gc.alloc.rate:               1669.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          214065.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170946.764 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 12254.912 ops/s
[info]                  ·gc.alloc.rate:               1694.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          217566.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 257460.184 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 12066.160 ops/s
[info]                  ·gc.alloc.rate:                   1644.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              214514.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174719.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.290 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12115.331 ±(99.9%) 651.585 ops/s [Average]
[info]   (min, avg, max) = (11854.553, 12115.331, 12271.634), stdev = 169.215
[info]   CI (99.9%): [11463.746, 12766.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1655.035 ±(99.9%) 130.087 MB/sec [Average]
[info]   (min, avg, max) = (1603.512, 1655.035, 1694.121), stdev = 33.783
[info]   CI (99.9%): [1524.948, 1785.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   214971.779 ±(99.9%) 6912.191 B/op [Average]
[info]   (min, avg, max) = (212878.672, 214971.779, 217566.455), stdev = 1795.074
[info]   CI (99.9%): [208059.588, 221883.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.186 ±(99.9%) 1405.240 MB/sec [Average]
[info]   (min, avg, max) = (1328.615, 1600.186, 2004.761), stdev = 364.936
[info]   CI (99.9%): [194.946, 3005.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   207665.315 ±(99.9%) 177591.342 B/op [Average]
[info]   (min, avg, max) = (170946.764, 207665.315, 258816.422), stdev = 46119.908
[info]   CI (99.9%): [30073.972, 385256.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.351 ±(99.9%) 26.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.351, 16.290), stdev = 6.813
[info]   CI (99.9%): [≈ 0, 30.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12345.903 ops/s
[info] # Warmup Iteration   2: 41713.449 ops/s
[info] # Warmup Iteration   3: 44333.263 ops/s
[info] # Warmup Iteration   4: 44024.446 ops/s
[info] # Warmup Iteration   5: 44728.751 ops/s
[info] Iteration   1: 44713.558 ops/s
[info]                  ·gc.alloc.rate:               1736.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          61106.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47257.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 44848.519 ops/s
[info]                  ·gc.alloc.rate:                   1767.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              62030.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70712.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 44858.447 ops/s
[info]                  ·gc.alloc.rate:                   1740.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              61072.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47021.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 43404.679 ops/s
[info]                  ·gc.alloc.rate:                   1712.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              62070.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72802.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 43808.446 ops/s
[info]                  ·gc.alloc.rate:                   1714.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              61581.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48066.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.748 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   44326.730 ±(99.9%) 2599.841 ops/s [Average]
[info]   (min, avg, max) = (43404.679, 44326.730, 44858.447), stdev = 675.170
[info]   CI (99.9%): [41726.889, 46926.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1734.298 ±(99.9%) 86.457 MB/sec [Average]
[info]   (min, avg, max) = (1712.229, 1734.298, 1767.571), stdev = 22.453
[info]   CI (99.9%): [1647.840, 1820.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61572.170 ±(99.9%) 1851.928 B/op [Average]
[info]   (min, avg, max) = (61072.594, 61572.170, 62070.246), stdev = 480.940
[info]   CI (99.9%): [59720.242, 63424.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.924 ±(99.9%) 1415.546 MB/sec [Average]
[info]   (min, avg, max) = (1338.507, 1608.924, 2014.957), stdev = 367.613
[info]   CI (99.9%): [193.378, 3024.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   57171.993 ±(99.9%) 51369.447 B/op [Average]
[info]   (min, avg, max) = (47021.974, 57171.993, 72802.010), stdev = 13340.482
[info]   CI (99.9%): [5802.546, 108541.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.705), stdev = 1.643
[info]   CI (99.9%): [≈ 0, 7.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.891 ±(99.9%) 222.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.891, 130.029), stdev = 57.666
[info]   CI (99.9%): [≈ 0, 248.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18713.752 ops/s
[info] # Warmup Iteration   2: 56145.205 ops/s
[info] # Warmup Iteration   3: 56001.241 ops/s
[info] # Warmup Iteration   4: 55537.104 ops/s
[info] # Warmup Iteration   5: 55628.046 ops/s
[info] Iteration   1: 56319.625 ops/s
[info]                  ·gc.alloc.rate:                   1715.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              47942.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37435.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 55775.925 ops/s
[info]                  ·gc.alloc.rate:                   1714.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              48379.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56765.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 104.617 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 57237.478 ops/s
[info]                  ·gc.alloc.rate:                   1770.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              48685.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55187.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 55713.345 ops/s
[info]                  ·gc.alloc.rate:                   1698.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              47985.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37748.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55666.291 ops/s
[info]                  ·gc.alloc.rate:                   1725.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              48749.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56615.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   56142.533 ±(99.9%) 2565.578 ops/s [Average]
[info]   (min, avg, max) = (55666.291, 56142.533, 57237.478), stdev = 666.272
[info]   CI (99.9%): [53576.955, 58708.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1724.900 ±(99.9%) 105.075 MB/sec [Average]
[info]   (min, avg, max) = (1698.579, 1724.900, 1770.626), stdev = 27.288
[info]   CI (99.9%): [1619.825, 1829.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48348.330 ±(99.9%) 1456.750 B/op [Average]
[info]   (min, avg, max) = (47942.085, 48348.330, 48749.791), stdev = 378.313
[info]   CI (99.9%): [46891.580, 49805.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1739.644 ±(99.9%) 1412.224 MB/sec [Average]
[info]   (min, avg, max) = (1336.232, 1739.644, 2011.763), stdev = 366.750
[info]   CI (99.9%): [327.420, 3151.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   48750.471 ±(99.9%) 39296.245 B/op [Average]
[info]   (min, avg, max) = (37435.846, 48750.471, 56765.130), stdev = 10205.110
[info]   CI (99.9%): [9454.225, 88046.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 6.323 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.771, 3.708), stdev = 1.642
[info]   CI (99.9%): [≈ 0, 7.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.733 ±(99.9%) 178.437 B/op [Average]
[info]   (min, avg, max) = (0.582, 21.733, 104.617), stdev = 46.340
[info]   CI (99.9%): [≈ 0, 200.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 811566.645 ops/s
[info] # Warmup Iteration   2: 1206244.455 ops/s
[info] # Warmup Iteration   3: 1342248.012 ops/s
[info] # Warmup Iteration   4: 1330268.320 ops/s
[info] # Warmup Iteration   5: 1299176.945 ops/s
[info] Iteration   1: 1346687.671 ops/s
[info]                  ·gc.alloc.rate:                   1257.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1469.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1337996.716 ops/s
[info]                  ·gc.alloc.rate:                   1246.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1465.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1342637.724 ops/s
[info]                  ·gc.alloc.rate:               1261.920 MB/sec
[info]                  ·gc.alloc.rate.norm:          1479.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1575.791 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1346754.954 ops/s
[info]                  ·gc.alloc.rate:                   1279.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1494.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1572.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1351856.982 ops/s
[info]                  ·gc.alloc.rate:                   1256.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              1462.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     781.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1345186.809 ±(99.9%) 19952.704 ops/s [Average]
[info]   (min, avg, max) = (1337996.716, 1345186.809, 1351856.982), stdev = 5181.654
[info]   CI (99.9%): [1325234.105, 1365139.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1260.188 ±(99.9%) 46.236 MB/sec [Average]
[info]   (min, avg, max) = (1246.405, 1260.188, 1279.151), stdev = 12.007
[info]   CI (99.9%): [1213.953, 1306.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1474.091 ±(99.9%) 50.495 B/op [Average]
[info]   (min, avg, max) = (1462.114, 1474.091, 1494.632), stdev = 13.113
[info]   CI (99.9%): [1423.597, 1524.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.967 ±(99.9%) 1158.587 MB/sec [Average]
[info]   (min, avg, max) = (671.737, 1209.967, 1345.785), stdev = 300.881
[info]   CI (99.9%): [51.380, 2368.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1416.168 ±(99.9%) 1365.765 B/op [Average]
[info]   (min, avg, max) = (781.737, 1416.168, 1581.297), stdev = 354.685
[info]   CI (99.9%): [50.403, 2781.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.250), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.803 ±(99.9%) 6.449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.798), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 796310.517 ops/s
[info] # Warmup Iteration   2: 1538326.627 ops/s
[info] # Warmup Iteration   3: 1576394.337 ops/s
[info] # Warmup Iteration   4: 1577500.785 ops/s
[info] # Warmup Iteration   5: 1577395.348 ops/s
[info] Iteration   1: 1577175.505 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1577113.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1577602.579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1578119.621 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1576997.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1577401.777 ±(99.9%) 1778.516 ops/s [Average]
[info]   (min, avg, max) = (1576997.271, 1577401.777, 1578119.621), stdev = 461.875
[info]   CI (99.9%): [1575623.262, 1579180.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1645.858 ops/s
[info] # Warmup Iteration   2: 3386.631 ops/s
[info] # Warmup Iteration   3: 3454.903 ops/s
[info] # Warmup Iteration   4: 3565.589 ops/s
[info] # Warmup Iteration   5: 3526.947 ops/s
[info] Iteration   1: 3563.871 ops/s
[info]                  ·gc.alloc.rate:               491.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          217215.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225892.389 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 3568.084 ops/s
[info]                  ·gc.alloc.rate:                   495.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              218490.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     294976.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3503.632 ops/s
[info]                  ·gc.alloc.rate:      473.015 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.123 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3497.095 ops/s
[info]                  ·gc.alloc.rate:               472.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 300963.495 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3474.916 ops/s
[info]                  ·gc.alloc.rate:                   483.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              218767.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303169.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.854 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3521.520 ±(99.9%) 161.661 ops/s [Average]
[info]   (min, avg, max) = (3474.916, 3521.520, 3568.084), stdev = 41.983
[info]   CI (99.9%): [3359.858, 3683.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   483.095 ±(99.9%) 40.914 MB/sec [Average]
[info]   (min, avg, max) = (472.097, 483.095, 495.396), stdev = 10.625
[info]   CI (99.9%): [442.181, 524.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   215874.060 ±(99.9%) 12251.804 B/op [Average]
[info]   (min, avg, max) = (212448.123, 215874.060, 218767.733), stdev = 3181.755
[info]   CI (99.9%): [203622.256, 228125.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   503.719 ±(99.9%) 1115.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.719, 669.427), stdev = 289.724
[info]   CI (99.9%): [≈ 0, 1619.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   225000.428 ±(99.9%) 499855.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 225000.428, 303169.988), stdev = 129810.895
[info]   CI (99.9%): [≈ 0, 724855.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.607 ±(99.9%) 32.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.607, 18.854), stdev = 8.405
[info]   CI (99.9%): [≈ 0, 37.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37306.129 ops/s
[info] # Warmup Iteration   2: 110585.003 ops/s
[info] # Warmup Iteration   3: 120827.491 ops/s
[info] # Warmup Iteration   4: 125360.783 ops/s
[info] # Warmup Iteration   5: 123547.622 ops/s
[info] Iteration   1: 124614.170 ops/s
[info]                  ·gc.alloc.rate:                   1966.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              24833.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25450.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 125120.952 ops/s
[info]                  ·gc.alloc.rate:                   1985.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              24977.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25313.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 125106.212 ops/s
[info]                  ·gc.alloc.rate:                   1985.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              24981.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25258.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125339.238 ops/s
[info]                  ·gc.alloc.rate:               1990.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          24984.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25203.097 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 125322.389 ops/s
[info]                  ·gc.alloc.rate:               2003.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          25161.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25242.753 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   125100.592 ±(99.9%) 1127.915 ops/s [Average]
[info]   (min, avg, max) = (124614.170, 125100.592, 125339.238), stdev = 292.916
[info]   CI (99.9%): [123972.678, 126228.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1986.318 ±(99.9%) 51.529 MB/sec [Average]
[info]   (min, avg, max) = (1966.256, 1986.318, 2003.569), stdev = 13.382
[info]   CI (99.9%): [1934.789, 2037.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   24987.674 ±(99.9%) 448.516 B/op [Average]
[info]   (min, avg, max) = (24833.527, 24987.674, 25161.869), stdev = 116.478
[info]   CI (99.9%): [24539.158, 25436.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2010.610 ±(99.9%) 12.156 MB/sec [Average]
[info]   (min, avg, max) = (2007.659, 2010.610, 2015.072), stdev = 3.157
[info]   CI (99.9%): [1998.454, 2022.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25293.631 ±(99.9%) 369.744 B/op [Average]
[info]   (min, avg, max) = (25203.097, 25293.631, 25450.057), stdev = 96.021
[info]   CI (99.9%): [24923.886, 25663.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.765 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.852), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.718 ±(99.9%) 60.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.718, 36.019), stdev = 15.627
[info]   CI (99.9%): [≈ 0, 69.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.302
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.690 ops/s
[info] # Warmup Iteration   2: 356174.857 ops/s
[info] # Warmup Iteration   3: 380074.731 ops/s
[info] # Warmup Iteration   4: 378751.188 ops/s
[info] # Warmup Iteration   5: 380427.156 ops/s
[info] Iteration   1: 375930.318 ops/s
[info]                  ·gc.alloc.rate:               775.704 MB/sec
[info]                  ·gc.alloc.rate.norm:          3247.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2788.937 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 374116.820 ops/s
[info]                  ·gc.alloc.rate:               774.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          3257.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2802.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 377223.071 ops/s
[info]                  ·gc.alloc.rate:                   778.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              3245.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2782.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 368063.423 ops/s
[info]                  ·gc.alloc.rate:               762.667 MB/sec
[info]                  ·gc.alloc.rate.norm:          3261.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2851.412 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 374838.752 ops/s
[info]                  ·gc.alloc.rate:                   768.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              3228.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2802.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   374034.477 ±(99.9%) 13623.402 ops/s [Average]
[info]   (min, avg, max) = (368063.423, 374034.477, 377223.071), stdev = 3537.954
[info]   CI (99.9%): [360411.075, 387657.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   771.934 ±(99.9%) 23.762 MB/sec [Average]
[info]   (min, avg, max) = (762.667, 771.934, 778.004), stdev = 6.171
[info]   CI (99.9%): [748.172, 795.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3248.248 ±(99.9%) 49.486 B/op [Average]
[info]   (min, avg, max) = (3228.444, 3248.248, 3261.232), stdev = 12.851
[info]   CI (99.9%): [3198.762, 3297.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.672 ±(99.9%) 2.170 MB/sec [Average]
[info]   (min, avg, max) = (666.107, 666.672, 667.464), stdev = 0.564
[info]   CI (99.9%): [664.501, 668.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   2805.470 ±(99.9%) 104.555 B/op [Average]
[info]   (min, avg, max) = (2782.084, 2805.470, 2851.412), stdev = 27.153
[info]   CI (99.9%): [2700.915, 2910.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.016 ±(99.9%) 0.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.049), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.205), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82208.471 ops/s
[info] # Warmup Iteration   2: 245843.056 ops/s
[info] # Warmup Iteration   3: 253250.149 ops/s
[info] # Warmup Iteration   4: 253129.403 ops/s
[info] # Warmup Iteration   5: 252963.428 ops/s
[info] Iteration   1: 253572.294 ops/s
[info]                  ·gc.alloc.rate:               570.605 MB/sec
[info]                  ·gc.alloc.rate.norm:          3541.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4134.519 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 252772.026 ops/s
[info]                  ·gc.alloc.rate:      555.286 MB/sec
[info]                  ·gc.alloc.rate.norm: 3456.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 258608.142 ops/s
[info]                  ·gc.alloc.rate:               581.554 MB/sec
[info]                  ·gc.alloc.rate.norm:          3539.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4054.066 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 258916.503 ops/s
[info]                  ·gc.alloc.rate:               593.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          3608.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4053.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 255391.529 ops/s
[info]                  ·gc.alloc.rate:                   579.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              3574.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4109.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   255852.099 ±(99.9%) 10871.309 ops/s [Average]
[info]   (min, avg, max) = (252772.026, 255852.099, 258916.503), stdev = 2823.245
[info]   CI (99.9%): [244980.789, 266723.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   576.211 ±(99.9%) 55.011 MB/sec [Average]
[info]   (min, avg, max) = (555.286, 576.211, 593.662), stdev = 14.286
[info]   CI (99.9%): [521.201, 631.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3543.971 ±(99.9%) 218.487 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3543.971, 3608.781), stdev = 56.740
[info]   CI (99.9%): [3325.484, 3762.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.165 ±(99.9%) 1147.679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.165, 666.785), stdev = 298.049
[info]   CI (99.9%): [≈ 0, 1680.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3270.222 ±(99.9%) 7040.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3270.222, 4134.519), stdev = 1828.450
[info]   CI (99.9%): [≈ 0, 10310.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235664.976 ops/s
[info] # Warmup Iteration   2: 472765.455 ops/s
[info] # Warmup Iteration   3: 518128.478 ops/s
[info] # Warmup Iteration   4: 519088.063 ops/s
[info] # Warmup Iteration   5: 515811.090 ops/s
[info] Iteration   1: 515182.499 ops/s
[info]                  ·gc.alloc.rate:               675.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          2064.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2048.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 518053.793 ops/s
[info]                  ·gc.alloc.rate:               674.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          2049.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2036.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 518817.248 ops/s
[info]                  ·gc.alloc.rate:                   676.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              2050.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2035.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 518373.146 ops/s
[info]                  ·gc.alloc.rate:                   670.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              2034.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2037.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 517997.108 ops/s
[info]                  ·gc.alloc.rate:               670.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          2037.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2040.110 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   517684.759 ±(99.9%) 5530.556 ops/s [Average]
[info]   (min, avg, max) = (515182.499, 517684.759, 518817.248), stdev = 1436.268
[info]   CI (99.9%): [512154.203, 523215.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   673.452 ±(99.9%) 10.728 MB/sec [Average]
[info]   (min, avg, max) = (670.235, 673.452, 676.086), stdev = 2.786
[info]   CI (99.9%): [662.724, 684.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2047.400 ±(99.9%) 44.798 B/op [Average]
[info]   (min, avg, max) = (2034.913, 2047.400, 2064.087), stdev = 11.634
[info]   CI (99.9%): [2002.603, 2092.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.938 ±(99.9%) 1.733 MB/sec [Average]
[info]   (min, avg, max) = (670.439, 670.938, 671.440), stdev = 0.450
[info]   CI (99.9%): [669.205, 672.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2039.749 ±(99.9%) 19.259 B/op [Average]
[info]   (min, avg, max) = (2035.860, 2039.749, 2048.246), stdev = 5.001
[info]   CI (99.9%): [2020.490, 2059.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7590.243 ops/s
[info] # Warmup Iteration   2: 65787.618 ops/s
[info] # Warmup Iteration   3: 71783.513 ops/s
[info] # Warmup Iteration   4: 73816.560 ops/s
[info] # Warmup Iteration   5: 74631.911 ops/s
[info] Iteration   1: 74975.456 ops/s
[info]                  ·gc.alloc.rate:                   3155.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              66241.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3334.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69994.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.748 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 75454.559 ops/s
[info]                  ·gc.alloc.rate:                   3177.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              66267.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55723.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 75316.603 ops/s
[info]                  ·gc.alloc.rate:                   3198.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              66830.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3350.685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70018.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 75389.569 ops/s
[info]                  ·gc.alloc.rate:               3202.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          66864.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3363.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70228.628 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 74450.153 ops/s
[info]                  ·gc.alloc.rate:               3137.561 MB/sec
[info]                  ·gc.alloc.rate.norm:          66326.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2700.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57080.736 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   75117.268 ±(99.9%) 1602.534 ops/s [Average]
[info]   (min, avg, max) = (74450.153, 75117.268, 75454.559), stdev = 416.173
[info]   CI (99.9%): [73514.734, 76719.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3174.427 ±(99.9%) 106.789 MB/sec [Average]
[info]   (min, avg, max) = (3137.561, 3174.427, 3202.796), stdev = 27.733
[info]   CI (99.9%): [3067.639, 3281.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66506.219 ±(99.9%) 1206.656 B/op [Average]
[info]   (min, avg, max) = (66241.770, 66506.219, 66864.795), stdev = 313.365
[info]   CI (99.9%): [65299.563, 67712.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.318 ±(99.9%) 1400.831 MB/sec [Average]
[info]   (min, avg, max) = (2672.048, 3084.318, 3363.923), stdev = 363.791
[info]   CI (99.9%): [1683.487, 4485.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64608.977 ±(99.9%) 28910.173 B/op [Average]
[info]   (min, avg, max) = (55723.142, 64608.977, 70228.628), stdev = 7507.880
[info]   CI (99.9%): [35698.803, 93519.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.523 ±(99.9%) 2.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 1.748), stdev = 0.718
[info]   CI (99.9%): [≈ 0, 3.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48721.120 ops/s
[info] # Warmup Iteration   2: 129967.071 ops/s
[info] # Warmup Iteration   3: 131987.492 ops/s
[info] # Warmup Iteration   4: 135277.189 ops/s
[info] # Warmup Iteration   5: 133166.874 ops/s
[info] Iteration   1: 136228.034 ops/s
[info]                  ·gc.alloc.rate:               1179.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          13630.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7750.013 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 136138.431 ops/s
[info]                  ·gc.alloc.rate:               1193.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          13795.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15512.755 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 135691.223 ops/s
[info]                  ·gc.alloc.rate:                   1186.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              13758.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15572.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 135482.412 ops/s
[info]                  ·gc.alloc.rate:                   1183.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              13750.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15604.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 134575.061 ops/s
[info]                  ·gc.alloc.rate:                   1187.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              13884.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7856.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   135623.032 ±(99.9%) 2550.111 ops/s [Average]
[info]   (min, avg, max) = (134575.061, 135623.032, 136228.034), stdev = 662.256
[info]   CI (99.9%): [133072.921, 138173.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1186.116 ±(99.9%) 19.370 MB/sec [Average]
[info]   (min, avg, max) = (1179.793, 1186.116, 1193.516), stdev = 5.030
[info]   CI (99.9%): [1166.745, 1205.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13763.948 ±(99.9%) 352.701 B/op [Average]
[info]   (min, avg, max) = (13630.779, 13763.948, 13884.790), stdev = 91.595
[info]   CI (99.9%): [13411.247, 14116.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074.150 ±(99.9%) 1416.100 MB/sec [Average]
[info]   (min, avg, max) = (670.792, 1074.150, 1343.474), stdev = 367.757
[info]   CI (99.9%): [≈ 0, 2490.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12459.288 ±(99.9%) 16367.385 B/op [Average]
[info]   (min, avg, max) = (7750.013, 12459.288, 15604.708), stdev = 4250.558
[info]   CI (99.9%): [≈ 0, 28826.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.144), stdev = 1.389
[info]   CI (99.9%): [≈ 0, 6.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.692 ±(99.9%) 62.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.692, 36.516), stdev = 16.129
[info]   CI (99.9%): [≈ 0, 69.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.808 ops/s
[info] # Warmup Iteration   2: 199382.864 ops/s
[info] # Warmup Iteration   3: 201895.636 ops/s
[info] # Warmup Iteration   4: 208318.013 ops/s
[info] # Warmup Iteration   5: 208736.038 ops/s
[info] Iteration   1: 206286.016 ops/s
[info]                  ·gc.alloc.rate:                   174.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3903.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.234 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 201496.314 ops/s
[info]                  ·gc.alloc.rate:      157.764 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208047.041 ops/s
[info]                  ·gc.alloc.rate:      162.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207249.054 ops/s
[info]                  ·gc.alloc.rate:               173.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          1314.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3885.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 206136.642 ops/s
[info]                  ·gc.alloc.rate:      161.365 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   205843.013 ±(99.9%) 9819.321 ops/s [Average]
[info]   (min, avg, max) = (201496.314, 205843.013, 208047.041), stdev = 2550.047
[info]   CI (99.9%): [196023.692, 215662.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   165.844 ±(99.9%) 28.269 MB/sec [Average]
[info]   (min, avg, max) = (157.764, 165.844, 174.171), stdev = 7.341
[info]   CI (99.9%): [137.575, 194.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1267.810 ±(99.9%) 189.846 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1267.810, 1328.817), stdev = 49.302
[info]   CI (99.9%): [1077.964, 1457.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.610), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1283.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1557.676 ±(99.9%) 8213.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1557.676, 3903.267), stdev = 2132.945
[info]   CI (99.9%): [≈ 0, 9770.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.373 ±(99.9%) 3.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.866), stdev = 0.834
[info]   CI (99.9%): [≈ 0, 3.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.847 ±(99.9%) 24.513 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.847, 14.234), stdev = 6.366
[info]   CI (99.9%): [≈ 0, 27.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171368.136 ops/s
[info] # Warmup Iteration   2: 398623.767 ops/s
[info] # Warmup Iteration   3: 427407.549 ops/s
[info] # Warmup Iteration   4: 426502.865 ops/s
[info] # Warmup Iteration   5: 422663.067 ops/s
[info] Iteration   1: 422236.908 ops/s
[info]                  ·gc.alloc.rate:               430.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          1605.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1906.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 424692.898 ops/s
[info]                  ·gc.alloc.rate:      417.783 MB/sec
[info]                  ·gc.alloc.rate.norm: 1548.184 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 423565.691 ops/s
[info]                  ·gc.alloc.rate:               432.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          1607.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2478.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 425979.248 ops/s
[info]                  ·gc.alloc.rate:      417.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 425379.222 ops/s
[info]                  ·gc.alloc.rate:               434.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2468.319 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   424370.794 ±(99.9%) 5746.841 ops/s [Average]
[info]   (min, avg, max) = (422236.908, 424370.794, 425979.248), stdev = 1492.436
[info]   CI (99.9%): [418623.953, 430117.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   426.809 ±(99.9%) 31.976 MB/sec [Average]
[info]   (min, avg, max) = (417.783, 426.809, 434.760), stdev = 8.304
[info]   CI (99.9%): [394.833, 458.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1582.730 ±(99.9%) 128.969 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1582.730, 1608.007), stdev = 33.493
[info]   CI (99.9%): [1453.761, 1711.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.246 ±(99.9%) 1320.773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.246, 667.364), stdev = 343.001
[info]   CI (99.9%): [≈ 0, 1690.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1370.809 ±(99.9%) 4900.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1370.809, 2478.830), stdev = 1272.582
[info]   CI (99.9%): [≈ 0, 6271.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226839.113 ops/s
[info] # Warmup Iteration   2: 436147.964 ops/s
[info] # Warmup Iteration   3: 460233.698 ops/s
[info] # Warmup Iteration   4: 461525.514 ops/s
[info] # Warmup Iteration   5: 460126.413 ops/s
[info] Iteration   1: 459277.913 ops/s
[info]                  ·gc.alloc.rate:               375.505 MB/sec
[info]                  ·gc.alloc.rate.norm:          1286.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1753.155 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 456358.819 ops/s
[info]                  ·gc.alloc.rate:               373.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          1288.611 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1764.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 460446.949 ops/s
[info]                  ·gc.alloc.rate:      360.452 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 457978.783 ops/s
[info]                  ·gc.alloc.rate:               380.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          1306.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2304.027 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 460512.592 ops/s
[info]                  ·gc.alloc.rate:      360.474 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   458915.011 ±(99.9%) 6791.076 ops/s [Average]
[info]   (min, avg, max) = (456358.819, 458915.011, 460512.592), stdev = 1763.621
[info]   CI (99.9%): [452123.935, 465706.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   370.046 ±(99.9%) 34.845 MB/sec [Average]
[info]   (min, avg, max) = (360.452, 370.046, 380.073), stdev = 9.049
[info]   CI (99.9%): [335.201, 404.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1269.118 ±(99.9%) 133.680 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1269.118, 1306.166), stdev = 34.716
[info]   CI (99.9%): [1135.437, 1402.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.744 ±(99.9%) 1216.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.744, 670.434), stdev = 315.952
[info]   CI (99.9%): [≈ 0, 1555.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1164.304 ±(99.9%) 4181.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1164.304, 2304.027), stdev = 1085.929
[info]   CI (99.9%): [≈ 0, 5345.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313593.894 ops/s
[info] # Warmup Iteration   2: 491849.924 ops/s
[info] # Warmup Iteration   3: 471748.367 ops/s
[info] # Warmup Iteration   4: 497967.819 ops/s
[info] # Warmup Iteration   5: 497982.239 ops/s
[info] Iteration   1: 496438.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 498347.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 498112.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 497904.381 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 496330.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   497426.554 ±(99.9%) 3715.681 ops/s [Average]
[info]   (min, avg, max) = (496330.232, 497426.554, 498347.229), stdev = 964.951
[info]   CI (99.9%): [493710.873, 501142.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7382.692 ops/s
[info] # Warmup Iteration   2: 26268.958 ops/s
[info] # Warmup Iteration   3: 28647.007 ops/s
[info] # Warmup Iteration   4: 28286.155 ops/s
[info] # Warmup Iteration   5: 28229.356 ops/s
[info] Iteration   1: 28780.812 ops/s
[info]                  ·gc.alloc.rate:               1611.080 MB/sec
[info]                  ·gc.alloc.rate.norm:          88099.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73326.738 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 28647.111 ops/s
[info]                  ·gc.alloc.rate:                   1640.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              90092.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110581.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.267 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 28394.715 ops/s
[info]                  ·gc.alloc.rate:                   1600.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              88728.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74307.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28399.095 ops/s
[info]                  ·gc.alloc.rate:               1600.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          88688.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74128.313 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 28845.726 ops/s
[info]                  ·gc.alloc.rate:               1649.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          89978.809 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109360.687 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   28613.492 ±(99.9%) 809.754 ops/s [Average]
[info]   (min, avg, max) = (28394.715, 28613.492, 28845.726), stdev = 210.291
[info]   CI (99.9%): [27803.738, 29423.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1620.517 ±(99.9%) 88.392 MB/sec [Average]
[info]   (min, avg, max) = (1600.742, 1620.517, 1649.542), stdev = 22.955
[info]   CI (99.9%): [1532.124, 1708.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89117.648 ±(99.9%) 3369.357 B/op [Average]
[info]   (min, avg, max) = (88099.664, 89117.648, 90092.126), stdev = 875.011
[info]   CI (99.9%): [85748.290, 92487.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.569 ±(99.9%) 1411.780 MB/sec [Average]
[info]   (min, avg, max) = (1337.940, 1607.569, 2013.501), stdev = 366.635
[info]   CI (99.9%): [195.788, 3019.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88340.964 ±(99.9%) 76064.524 B/op [Average]
[info]   (min, avg, max) = (73326.738, 88340.964, 110581.564), stdev = 19753.715
[info]   CI (99.9%): [12276.440, 164405.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 5.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.082), stdev = 1.338
[info]   CI (99.9%): [≈ 0, 5.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44.930 ±(99.9%) 283.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.930, 169.267), stdev = 73.527
[info]   CI (99.9%): [≈ 0, 328.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1267.484 ops/s
[info] # Warmup Iteration   2: 7728.400 ops/s
[info] # Warmup Iteration   3: 8357.074 ops/s
[info] # Warmup Iteration   4: 8399.761 ops/s
[info] # Warmup Iteration   5: 8330.386 ops/s
[info] Iteration   1: 8242.297 ops/s
[info]                  ·gc.alloc.rate:               1172.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          223822.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 256165.947 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 8239.868 ops/s
[info]                  ·gc.alloc.rate:                   1161.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              221790.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256322.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8206.168 ops/s
[info]                  ·gc.alloc.rate:               1138.897 MB/sec
[info]                  ·gc.alloc.rate.norm:          218411.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128708.616 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8217.957 ops/s
[info]                  ·gc.alloc.rate:               1172.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          224520.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 257200.294 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 8261.575 ops/s
[info]                  ·gc.alloc.rate:                   1159.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              220801.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255830.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.607 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8233.573 ±(99.9%) 83.807 ops/s [Average]
[info]   (min, avg, max) = (8206.168, 8233.573, 8261.575), stdev = 21.765
[info]   CI (99.9%): [8149.766, 8317.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1160.942 ±(99.9%) 52.804 MB/sec [Average]
[info]   (min, avg, max) = (1138.897, 1160.942, 1172.407), stdev = 13.713
[info]   CI (99.9%): [1108.137, 1213.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221869.574 ±(99.9%) 9421.588 B/op [Average]
[info]   (min, avg, max) = (218411.825, 221869.574, 224520.822), stdev = 2446.756
[info]   CI (99.9%): [212447.986, 231291.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.362 ±(99.9%) 1156.403 MB/sec [Average]
[info]   (min, avg, max) = (671.144, 1208.362, 1343.160), stdev = 300.314
[info]   CI (99.9%): [51.959, 2364.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   230845.679 ±(99.9%) 219866.357 B/op [Average]
[info]   (min, avg, max) = (128708.616, 230845.679, 257200.294), stdev = 57098.595
[info]   CI (99.9%): [10979.321, 450712.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.783 ±(99.9%) 6.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.873), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   149.112 ±(99.9%) 1266.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 149.112, 737.607), stdev = 328.997
[info]   CI (99.9%): [≈ 0, 1415.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619.611 ops/s
[info] # Warmup Iteration   2: 7083.629 ops/s
[info] # Warmup Iteration   3: 7982.452 ops/s
[info] # Warmup Iteration   4: 8060.975 ops/s
[info] # Warmup Iteration   5: 8100.688 ops/s
[info] Iteration   1: 8141.744 ops/s
[info]                  ·gc.alloc.rate:                   1077.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              208343.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129140.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8083.272 ops/s
[info]                  ·gc.alloc.rate:                   1088.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              211785.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260425.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8129.974 ops/s
[info]                  ·gc.alloc.rate:               1071.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          207412.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129524.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 8073.777 ops/s
[info]                  ·gc.alloc.rate:               1090.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          212573.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260910.534 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 8158.189 ops/s
[info]                  ·gc.alloc.rate:               1083.789 MB/sec
[info]                  ·gc.alloc.rate.norm:          209073.272 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129144.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8117.391 ±(99.9%) 142.554 ops/s [Average]
[info]   (min, avg, max) = (8073.777, 8117.391, 8158.189), stdev = 37.021
[info]   CI (99.9%): [7974.838, 8259.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1082.344 ±(99.9%) 29.831 MB/sec [Average]
[info]   (min, avg, max) = (1071.469, 1082.344, 1090.536), stdev = 7.747
[info]   CI (99.9%): [1052.513, 1112.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   209837.542 ±(99.9%) 8605.173 B/op [Average]
[info]   (min, avg, max) = (207412.204, 209837.542, 212573.023), stdev = 2234.736
[info]   CI (99.9%): [201232.369, 218442.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.628 ±(99.9%) 1411.689 MB/sec [Average]
[info]   (min, avg, max) = (668.114, 936.628, 1338.516), stdev = 366.611
[info]   CI (99.9%): [≈ 0, 2348.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   181829.182 ±(99.9%) 277131.147 B/op [Average]
[info]   (min, avg, max) = (129140.684, 181829.182, 260910.534), stdev = 71970.079
[info]   CI (99.9%): [≈ 0, 458960.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.615 ±(99.9%) 8.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.615, 4.053), stdev = 2.212
[info]   CI (99.9%): [≈ 0, 10.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94605.474 ops/s
[info] # Warmup Iteration   2: 178175.024 ops/s
[info] # Warmup Iteration   3: 191677.918 ops/s
[info] # Warmup Iteration   4: 191595.445 ops/s
[info] # Warmup Iteration   5: 191372.762 ops/s
[info] Iteration   1: 186930.048 ops/s
[info]                  ·gc.alloc.rate:               1622.237 MB/sec
[info]                  ·gc.alloc.rate.norm:          13659.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11326.846 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 187524.475 ops/s
[info]                  ·gc.alloc.rate:                   1651.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              13853.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16935.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 190399.573 ops/s
[info]                  ·gc.alloc.rate:                   1663.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              13752.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11111.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.172 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 191481.317 ops/s
[info]                  ·gc.alloc.rate:               1673.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          13750.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11038.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 191254.900 ops/s
[info]                  ·gc.alloc.rate:                   1685.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              13867.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16576.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.171 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   189518.063 ±(99.9%) 8240.794 ops/s [Average]
[info]   (min, avg, max) = (186930.048, 189518.063, 191481.317), stdev = 2140.108
[info]   CI (99.9%): [181277.269, 197758.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1659.194 ±(99.9%) 92.923 MB/sec [Average]
[info]   (min, avg, max) = (1622.237, 1659.194, 1685.484), stdev = 24.132
[info]   CI (99.9%): [1566.271, 1752.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13776.690 ±(99.9%) 329.078 B/op [Average]
[info]   (min, avg, max) = (13659.049, 13776.690, 13867.541), stdev = 85.460
[info]   CI (99.9%): [13447.612, 14105.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.214 ±(99.9%) 1418.671 MB/sec [Average]
[info]   (min, avg, max) = (1342.981, 1613.214, 2018.815), stdev = 368.424
[info]   CI (99.9%): [194.542, 3031.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13397.674 ±(99.9%) 11822.007 B/op [Average]
[info]   (min, avg, max) = (11038.103, 13397.674, 16935.045), stdev = 3070.138
[info]   CI (99.9%): [1575.666, 25219.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.872), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.888 ±(99.9%) 41.347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.888, 24.095), stdev = 10.738
[info]   CI (99.9%): [≈ 0, 46.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.673
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709.388 ops/s
[info] # Warmup Iteration   2: 6748.133 ops/s
[info] # Warmup Iteration   3: 7541.350 ops/s
[info] # Warmup Iteration   4: 7526.744 ops/s
[info] # Warmup Iteration   5: 7499.122 ops/s
[info] Iteration   1: 7540.577 ops/s
[info]                  ·gc.alloc.rate:               1246.215 MB/sec
[info]                  ·gc.alloc.rate.norm:          260098.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138753.494 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7647.307 ops/s
[info]                  ·gc.alloc.rate:               1279.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          263347.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 273350.836 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 7523.757 ops/s
[info]                  ·gc.alloc.rate:               1262.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          263927.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 278096.957 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7497.743 ops/s
[info]                  ·gc.alloc.rate:                   1246.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              261748.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279377.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7500.384 ops/s
[info]                  ·gc.alloc.rate:                   1270.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              266568.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279685.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7541.953 ±(99.9%) 236.704 ops/s [Average]
[info]   (min, avg, max) = (7497.743, 7541.953, 7647.307), stdev = 61.471
[info]   CI (99.9%): [7305.249, 7778.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1261.107 ±(99.9%) 56.224 MB/sec [Average]
[info]   (min, avg, max) = (1246.215, 1261.107, 1279.657), stdev = 14.601
[info]   CI (99.9%): [1204.883, 1317.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   263138.165 ±(99.9%) 9354.576 B/op [Average]
[info]   (min, avg, max) = (260098.166, 263138.165, 266568.432), stdev = 2429.354
[info]   CI (99.9%): [253783.589, 272492.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1197.401 ±(99.9%) 1146.454 MB/sec [Average]
[info]   (min, avg, max) = (664.813, 1197.401, 1332.879), stdev = 297.730
[info]   CI (99.9%): [50.947, 2343.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   249852.935 ±(99.9%) 239349.867 B/op [Average]
[info]   (min, avg, max) = (138753.494, 249852.935, 279685.494), stdev = 62158.400
[info]   CI (99.9%): [10503.068, 489202.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.748 ±(99.9%) 9.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.748, 4.370), stdev = 2.393
[info]   CI (99.9%): [≈ 0, 10.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6496.980 ops/s
[info] # Warmup Iteration   2: 18983.299 ops/s
[info] # Warmup Iteration   3: 20253.597 ops/s
[info] # Warmup Iteration   4: 20217.998 ops/s
[info] # Warmup Iteration   5: 20106.044 ops/s
[info] Iteration   1: 20002.967 ops/s
[info]                  ·gc.alloc.rate:               1140.093 MB/sec
[info]                  ·gc.alloc.rate.norm:          89705.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 105428.903 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 20068.661 ops/s
[info]                  ·gc.alloc.rate:                   1146.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              89861.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105160.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 20065.200 ops/s
[info]                  ·gc.alloc.rate:               1131.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          88770.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52614.282 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 20499.855 ops/s
[info]                  ·gc.alloc.rate:                   1157.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              88848.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103001.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.598 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 20548.837 ops/s
[info]                  ·gc.alloc.rate:                   1186.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              90854.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102857.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   20237.104 ±(99.9%) 1016.889 ops/s [Average]
[info]   (min, avg, max) = (20002.967, 20237.104, 20548.837), stdev = 264.083
[info]   CI (99.9%): [19220.215, 21253.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1152.415 ±(99.9%) 81.557 MB/sec [Average]
[info]   (min, avg, max) = (1131.881, 1152.415, 1186.396), stdev = 21.180
[info]   CI (99.9%): [1070.858, 1233.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89608.275 ±(99.9%) 3281.052 B/op [Average]
[info]   (min, avg, max) = (88770.905, 89608.275, 90854.329), stdev = 852.079
[info]   CI (99.9%): [86327.222, 92889.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.428 ±(99.9%) 1155.005 MB/sec [Average]
[info]   (min, avg, max) = (670.863, 1207.428, 1343.137), stdev = 299.951
[info]   CI (99.9%): [52.423, 2362.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   93812.499 ±(99.9%) 88800.093 B/op [Average]
[info]   (min, avg, max) = (52614.282, 93812.499, 105428.903), stdev = 23061.102
[info]   CI (99.9%): [5012.406, 182612.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.292 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.664), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56.769 ±(99.9%) 481.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.769, 280.613), stdev = 125.136
[info]   CI (99.9%): [≈ 0, 538.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7465.217 ops/s
[info] # Warmup Iteration   2: 25006.979 ops/s
[info] # Warmup Iteration   3: 25408.168 ops/s
[info] # Warmup Iteration   4: 25469.966 ops/s
[info] # Warmup Iteration   5: 25616.512 ops/s
[info] Iteration   1: 25536.978 ops/s
[info]                  ·gc.alloc.rate:                   1133.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              69878.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82417.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 26213.554 ops/s
[info]                  ·gc.alloc.rate:                   1171.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              70340.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80348.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25734.620 ops/s
[info]                  ·gc.alloc.rate:               1123.134 MB/sec
[info]                  ·gc.alloc.rate.norm:          68685.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40940.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 25776.556 ops/s
[info]                  ·gc.alloc.rate:                   1138.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              69503.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81792.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 25728.674 ops/s
[info]                  ·gc.alloc.rate:                   1148.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              70277.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81988.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   25798.076 ±(99.9%) 962.855 ops/s [Average]
[info]   (min, avg, max) = (25536.978, 25798.076, 26213.554), stdev = 250.050
[info]   CI (99.9%): [24835.221, 26760.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1143.158 ±(99.9%) 70.886 MB/sec [Average]
[info]   (min, avg, max) = (1123.134, 1143.158, 1171.674), stdev = 18.409
[info]   CI (99.9%): [1072.272, 1214.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   69736.884 ±(99.9%) 2608.946 B/op [Average]
[info]   (min, avg, max) = (68685.368, 69736.884, 70340.467), stdev = 677.535
[info]   CI (99.9%): [67127.938, 72345.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.001 ±(99.9%) 1152.800 MB/sec [Average]
[info]   (min, avg, max) = (669.461, 1205.001, 1340.241), stdev = 299.379
[info]   CI (99.9%): [52.201, 2357.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   73497.609 ±(99.9%) 70144.615 B/op [Average]
[info]   (min, avg, max) = (40940.904, 73497.609, 82417.146), stdev = 18216.334
[info]   CI (99.9%): [3352.994, 143642.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.895), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.918 ±(99.9%) 407.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.918, 238.266), stdev = 105.854
[info]   CI (99.9%): [≈ 0, 456.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176655.144 ops/s
[info] # Warmup Iteration   2: 375539.358 ops/s
[info] # Warmup Iteration   3: 366397.828 ops/s
[info] # Warmup Iteration   4: 374291.234 ops/s
[info] # Warmup Iteration   5: 371502.088 ops/s
[info] Iteration   1: 377431.669 ops/s
[info]                  ·gc.alloc.rate:                   878.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2798.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 378386.165 ops/s
[info]                  ·gc.alloc.rate:               877.262 MB/sec
[info]                  ·gc.alloc.rate.norm:          3648.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2791.470 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 375034.912 ops/s
[info]                  ·gc.alloc.rate:                   884.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              3713.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5635.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 377603.327 ops/s
[info]                  ·gc.alloc.rate:                   882.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              3677.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2800.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 375527.388 ops/s
[info]                  ·gc.alloc.rate:               868.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          3641.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2815.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   376796.692 ±(99.9%) 5545.222 ops/s [Average]
[info]   (min, avg, max) = (375034.912, 376796.692, 378386.165), stdev = 1440.076
[info]   CI (99.9%): [371251.471, 382341.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   878.436 ±(99.9%) 23.637 MB/sec [Average]
[info]   (min, avg, max) = (868.823, 878.436, 884.868), stdev = 6.139
[info]   CI (99.9%): [854.798, 902.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3669.056 ±(99.9%) 110.107 B/op [Average]
[info]   (min, avg, max) = (3641.373, 3669.056, 3713.458), stdev = 28.594
[info]   CI (99.9%): [3558.949, 3779.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.778 ±(99.9%) 1156.178 MB/sec [Average]
[info]   (min, avg, max) = (671.138, 805.778, 1342.892), stdev = 300.256
[info]   CI (99.9%): [≈ 0, 1961.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3368.247 ±(99.9%) 4880.792 B/op [Average]
[info]   (min, avg, max) = (2791.470, 3368.247, 5635.612), stdev = 1267.526
[info]   CI (99.9%): [≈ 0, 8249.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.174), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217660.051 ops/s
[info] # Warmup Iteration   2: 421355.901 ops/s
[info] # Warmup Iteration   3: 431097.578 ops/s
[info] # Warmup Iteration   4: 431116.383 ops/s
[info] # Warmup Iteration   5: 430023.886 ops/s
[info] Iteration   1: 430846.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 430835.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 430254.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 430930.910 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 430931.773 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   430759.929 ±(99.9%) 1102.212 ops/s [Average]
[info]   (min, avg, max) = (430254.303, 430759.929, 430931.773), stdev = 286.241
[info]   CI (99.9%): [429657.717, 431862.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7554.477 ops/s
[info] # Warmup Iteration   2: 21545.521 ops/s
[info] # Warmup Iteration   3: 25206.842 ops/s
[info] # Warmup Iteration   4: 25214.420 ops/s
[info] # Warmup Iteration   5: 24948.112 ops/s
[info] Iteration   1: 25377.917 ops/s
[info]                  ·gc.alloc.rate:                   1208.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              74969.693 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41561.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 25284.033 ops/s
[info]                  ·gc.alloc.rate:                   1224.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              76201.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83449.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 24899.393 ops/s
[info]                  ·gc.alloc.rate:                   1207.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              76297.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84777.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 25214.879 ops/s
[info]                  ·gc.alloc.rate:                   1208.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              75434.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83739.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 24895.533 ops/s
[info]                  ·gc.alloc.rate:                   1178.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              74499.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42406.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.375 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   25134.351 ±(99.9%) 862.005 ops/s [Average]
[info]   (min, avg, max) = (24895.533, 25134.351, 25377.917), stdev = 223.860
[info]   CI (99.9%): [24272.346, 25996.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1205.466 ±(99.9%) 63.806 MB/sec [Average]
[info]   (min, avg, max) = (1178.558, 1205.466, 1224.177), stdev = 16.570
[info]   CI (99.9%): [1141.660, 1269.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75480.550 ±(99.9%) 2990.605 B/op [Average]
[info]   (min, avg, max) = (74499.411, 75480.550, 76297.356), stdev = 776.651
[info]   CI (99.9%): [72489.945, 78471.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.916 ±(99.9%) 1414.503 MB/sec [Average]
[info]   (min, avg, max) = (670.173, 1072.916, 1341.637), stdev = 367.342
[info]   CI (99.9%): [≈ 0, 2487.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67186.837 ±(99.9%) 88620.162 B/op [Average]
[info]   (min, avg, max) = (41561.304, 67186.837, 84777.858), stdev = 23014.375
[info]   CI (99.9%): [≈ 0, 155806.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 5.292 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.912, 3.310), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.998 ±(99.9%) 330.267 B/op [Average]
[info]   (min, avg, max) = (1.316, 56.998, 206.595), stdev = 85.769
[info]   CI (99.9%): [≈ 0, 387.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.200, 8.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1979.234 ops/s
[info] # Warmup Iteration   2: 11618.896 ops/s
[info] # Warmup Iteration   3: 13073.742 ops/s
[info] # Warmup Iteration   4: 13112.831 ops/s
[info] # Warmup Iteration   5: 13231.135 ops/s
[info] Iteration   1: 13064.726 ops/s
[info]                  ·gc.alloc.rate:               1271.464 MB/sec
[info]                  ·gc.alloc.rate.norm:          153159.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161615.678 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 13397.333 ops/s
[info]                  ·gc.alloc.rate:               1268.125 MB/sec
[info]                  ·gc.alloc.rate.norm:          148978.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78799.704 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13286.341 ops/s
[info]                  ·gc.alloc.rate:                   1272.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              150682.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158994.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13208.087 ops/s
[info]                  ·gc.alloc.rate:                   1273.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              151697.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160012.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 401.818 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13140.994 ops/s
[info]                  ·gc.alloc.rate:                   1271.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              152260.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160681.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13219.496 ±(99.9%) 495.900 ops/s [Average]
[info]   (min, avg, max) = (13064.726, 13219.496, 13397.333), stdev = 128.784
[info]   CI (99.9%): [12723.596, 13715.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1271.282 ±(99.9%) 7.243 MB/sec [Average]
[info]   (min, avg, max) = (1268.125, 1271.282, 1273.140), stdev = 1.881
[info]   CI (99.9%): [1264.040, 1278.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   151355.844 ±(99.9%) 6176.444 B/op [Average]
[info]   (min, avg, max) = (148978.989, 151355.844, 153159.772), stdev = 1604.003
[info]   CI (99.9%): [145179.400, 157532.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1207.904 ±(99.9%) 1156.262 MB/sec [Average]
[info]   (min, avg, max) = (670.752, 1207.904, 1342.929), stdev = 300.278
[info]   CI (99.9%): [51.642, 2364.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   144020.805 ±(99.9%) 140441.645 B/op [Average]
[info]   (min, avg, max) = (78799.704, 144020.805, 161615.678), stdev = 36472.249
[info]   CI (99.9%): [3579.160, 284462.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.372), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88.835 ±(99.9%) 676.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.835, 401.818), stdev = 175.782
[info]   CI (99.9%): [≈ 0, 765.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1308.384 ops/s
[info] # Warmup Iteration   2: 12216.379 ops/s
[info] # Warmup Iteration   3: 14138.623 ops/s
[info] # Warmup Iteration   4: 14164.901 ops/s
[info] # Warmup Iteration   5: 14157.319 ops/s
[info] Iteration   1: 13605.840 ops/s
[info]                  ·gc.alloc.rate:               1207.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          139698.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77248.489 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 13897.141 ops/s
[info]                  ·gc.alloc.rate:               1226.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          138902.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151300.034 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 14124.309 ops/s
[info]                  ·gc.alloc.rate:                   1264.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              140873.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     148958.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13830.864 ops/s
[info]                  ·gc.alloc.rate:                   1239.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              141020.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152276.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 440.570 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 14227.017 ops/s
[info]                  ·gc.alloc.rate:                   1260.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              139437.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147891.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13937.034 ±(99.9%) 946.575 ops/s [Average]
[info]   (min, avg, max) = (13605.840, 13937.034, 14227.017), stdev = 245.823
[info]   CI (99.9%): [12990.459, 14883.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239.763 ±(99.9%) 91.013 MB/sec [Average]
[info]   (min, avg, max) = (1207.768, 1239.763, 1264.349), stdev = 23.636
[info]   CI (99.9%): [1148.750, 1330.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   139986.552 ±(99.9%) 3558.031 B/op [Average]
[info]   (min, avg, max) = (138902.557, 139986.552, 141020.840), stdev = 924.009
[info]   CI (99.9%): [136428.521, 143544.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.260 ±(99.9%) 1152.506 MB/sec [Average]
[info]   (min, avg, max) = (667.855, 1203.260, 1338.630), stdev = 299.302
[info]   CI (99.9%): [50.755, 2355.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   135534.981 ±(99.9%) 125648.472 B/op [Average]
[info]   (min, avg, max) = (77248.489, 135534.981, 152276.217), stdev = 32630.509
[info]   CI (99.9%): [9886.509, 261183.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 6.487 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.879, 3.873), stdev = 1.685
[info]   CI (99.9%): [≈ 0, 7.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   99.638 ±(99.9%) 738.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99.638, 440.570), stdev = 191.754
[info]   CI (99.9%): [≈ 0, 838.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128116.005 ops/s
[info] # Warmup Iteration   2: 261775.282 ops/s
[info] # Warmup Iteration   3: 276740.183 ops/s
[info] # Warmup Iteration   4: 275992.597 ops/s
[info] # Warmup Iteration   5: 275334.724 ops/s
[info] Iteration   1: 276445.669 ops/s
[info]                  ·gc.alloc.rate:               1639.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          9332.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7658.808 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 277822.430 ops/s
[info]                  ·gc.alloc.rate:                   1644.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              9314.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7624.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 274213.540 ops/s
[info]                  ·gc.alloc.rate:                   1653.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              9493.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11579.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 273131.414 ops/s
[info]                  ·gc.alloc.rate:               1628.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          9386.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7738.568 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 274815.557 ops/s
[info]                  ·gc.alloc.rate:               1629.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          9332.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7690.819 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   275285.722 ±(99.9%) 7150.190 ops/s [Average]
[info]   (min, avg, max) = (273131.414, 275285.722, 277822.430), stdev = 1856.882
[info]   CI (99.9%): [268135.533, 282435.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1639.232 ±(99.9%) 40.487 MB/sec [Average]
[info]   (min, avg, max) = (1628.957, 1639.232, 1653.996), stdev = 10.514
[info]   CI (99.9%): [1598.745, 1679.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9371.945 ±(99.9%) 281.226 B/op [Average]
[info]   (min, avg, max) = (9314.168, 9371.945, 9493.265), stdev = 73.034
[info]   CI (99.9%): [9090.719, 9653.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.914 ±(99.9%) 1159.141 MB/sec [Average]
[info]   (min, avg, max) = (1342.892, 1478.914, 2017.399), stdev = 301.025
[info]   CI (99.9%): [319.773, 2638.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8458.413 ±(99.9%) 6719.346 B/op [Average]
[info]   (min, avg, max) = (7624.820, 8458.413, 11579.050), stdev = 1744.993
[info]   CI (99.9%): [1739.068, 15177.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.707), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.305 ±(99.9%) 25.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.305, 15.331), stdev = 6.742
[info]   CI (99.9%): [≈ 0, 29.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 917.627 ops/s
[info] # Warmup Iteration   2: 10458.221 ops/s
[info] # Warmup Iteration   3: 12730.189 ops/s
[info] # Warmup Iteration   4: 12709.843 ops/s
[info] # Warmup Iteration   5: 12734.551 ops/s
[info] Iteration   1: 12467.092 ops/s
[info]                  ·gc.alloc.rate:               1499.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          189246.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1326.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 167503.079 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 12014.547 ops/s
[info]                  ·gc.alloc.rate:                        1452.162 MB/sec
[info]                  ·gc.alloc.rate.norm:                   190191.764 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.021 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 2.767 B/op
[info]                  ·gc.churn.Metaspace:                   0.062 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              8.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1341.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          175686.710 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  1.272 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             166.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      24.541 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              62.000 ms
[info] Iteration   3: 12736.911 ops/s
[info]                  ·gc.alloc.rate:                   1550.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              191544.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     246566.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12763.552 ops/s
[info]                  ·gc.alloc.rate:                   1540.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              189864.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164535.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12719.751 ops/s
[info]                  ·gc.alloc.rate:                   1534.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              189879.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165421.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12540.371 ±(99.9%) 1221.443 ops/s [Average]
[info]   (min, avg, max) = (12014.547, 12540.371, 12763.552), stdev = 317.205
[info]   CI (99.9%): [11318.927, 13761.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1515.266 ±(99.9%) 154.748 MB/sec [Average]
[info]   (min, avg, max) = (1452.162, 1515.266, 1550.213), stdev = 40.188
[info]   CI (99.9%): [1360.518, 1670.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   190145.263 ±(99.9%) 3289.047 B/op [Average]
[info]   (min, avg, max) = (189246.059, 190145.263, 191544.576), stdev = 854.155
[info]   CI (99.9%): [186856.217, 193434.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.553 ±(99.9%) 4.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.553, 2.767), stdev = 1.237
[info]   CI (99.9%): [≈ 0, 5.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Metaspace":
[info]   0.012 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Metaspace.norm":
[info]   1.623 ±(99.9%) 13.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.623, 8.116), stdev = 3.630
[info]   CI (99.9%): [≈ 0, 15.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1467.101 ±(99.9%) 1137.637 MB/sec [Average]
[info]   (min, avg, max) = (1326.886, 1467.101, 1995.517), stdev = 295.441
[info]   CI (99.9%): [329.464, 2604.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   183942.666 ±(99.9%) 135865.805 B/op [Average]
[info]   (min, avg, max) = (164535.662, 183942.666, 246566.403), stdev = 35283.918
[info]   CI (99.9%): [48076.861, 319808.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Old_Gen":
[info]   0.254 ±(99.9%) 2.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 1.272), stdev = 0.569
[info]   CI (99.9%): [≈ 0, 2.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   33.326 ±(99.9%) 286.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.326, 166.628), stdev = 74.518
[info]   CI (99.9%): [≈ 0, 320.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.451 ±(99.9%) 39.175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.451, 24.541), stdev = 10.174
[info]   CI (99.9%): [≈ 0, 45.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   75.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 15.000, 62.000), stdev = 26.277
[info]   CI (99.9%): [75.000, 75.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10966.834 ops/s
[info] # Warmup Iteration   2: 31845.913 ops/s
[info] # Warmup Iteration   3: 32225.736 ops/s
[info] # Warmup Iteration   4: 32114.871 ops/s
[info] # Warmup Iteration   5: 33208.864 ops/s
[info] Iteration   1: 33351.729 ops/s
[info]                  ·gc.alloc.rate:               1430.467 MB/sec
[info]                  ·gc.alloc.rate.norm:          67504.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63310.012 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 33371.233 ops/s
[info]                  ·gc.alloc.rate:                   1428.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              67375.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63301.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33352.888 ops/s
[info]                  ·gc.alloc.rate:                   1440.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              67975.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63367.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33474.759 ops/s
[info]                  ·gc.alloc.rate:                   1445.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              67966.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63077.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.298 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33147.693 ops/s
[info]                  ·gc.alloc.rate:                   1444.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              68599.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63602.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   33339.660 ±(99.9%) 457.322 ops/s [Average]
[info]   (min, avg, max) = (33147.693, 33339.660, 33474.759), stdev = 118.765
[info]   CI (99.9%): [32882.338, 33796.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1438.008 ±(99.9%) 30.789 MB/sec [Average]
[info]   (min, avg, max) = (1428.610, 1438.008, 1445.596), stdev = 7.996
[info]   CI (99.9%): [1407.219, 1468.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   67884.339 ±(99.9%) 1855.992 B/op [Average]
[info]   (min, avg, max) = (67375.575, 67884.339, 68599.400), stdev = 481.995
[info]   CI (99.9%): [66028.347, 69740.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1341.577 ±(99.9%) 4.729 MB/sec [Average]
[info]   (min, avg, max) = (1339.595, 1341.577, 1342.873), stdev = 1.228
[info]   CI (99.9%): [1336.848, 1346.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63331.797 ±(99.9%) 722.378 B/op [Average]
[info]   (min, avg, max) = (63077.421, 63331.797, 63602.773), stdev = 187.599
[info]   CI (99.9%): [62609.419, 64054.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 4.976 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 2.997), stdev = 1.292
[info]   CI (99.9%): [≈ 0, 5.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.143 ±(99.9%) 234.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.143, 141.445), stdev = 60.985
[info]   CI (99.9%): [≈ 0, 269.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21791.883 ops/s
[info] # Warmup Iteration   2: 74219.694 ops/s
[info] # Warmup Iteration   3: 78073.294 ops/s
[info] # Warmup Iteration   4: 77638.424 ops/s
[info] # Warmup Iteration   5: 78446.799 ops/s
[info] Iteration   1: 78668.020 ops/s
[info]                  ·gc.alloc.rate:                   1968.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              39378.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40247.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 78622.226 ops/s
[info]                  ·gc.alloc.rate:                   1978.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              39604.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40231.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 79273.275 ops/s
[info]                  ·gc.alloc.rate:                   1994.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              39607.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39795.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 79134.269 ops/s
[info]                  ·gc.alloc.rate:               2005.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          39888.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39878.374 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 79376.662 ops/s
[info]                  ·gc.alloc.rate:               2012.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          39897.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39816.249 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   79014.890 ±(99.9%) 1342.761 ops/s [Average]
[info]   (min, avg, max) = (78622.226, 79014.890, 79376.662), stdev = 348.711
[info]   CI (99.9%): [77672.130, 80357.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1992.101 ±(99.9%) 70.902 MB/sec [Average]
[info]   (min, avg, max) = (1968.274, 1992.101, 2012.683), stdev = 18.413
[info]   CI (99.9%): [1921.200, 2063.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39675.064 ±(99.9%) 844.901 B/op [Average]
[info]   (min, avg, max) = (39378.105, 39675.064, 39897.457), stdev = 219.418
[info]   CI (99.9%): [38830.164, 40519.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2008.038 ±(99.9%) 12.191 MB/sec [Average]
[info]   (min, avg, max) = (2004.463, 2008.038, 2011.746), stdev = 3.166
[info]   CI (99.9%): [1995.847, 2020.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39993.813 ±(99.9%) 872.257 B/op [Average]
[info]   (min, avg, max) = (39795.235, 39993.813, 40247.833), stdev = 226.522
[info]   CI (99.9%): [39121.555, 40866.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 5.023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.018), stdev = 1.304
[info]   CI (99.9%): [≈ 0, 5.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.494 ±(99.9%) 100.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.494, 60.388), stdev = 26.098
[info]   CI (99.9%): [≈ 0, 115.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274676.252 ops/s
[info] # Warmup Iteration   2: 602535.390 ops/s
[info] # Warmup Iteration   3: 606097.846 ops/s
[info] # Warmup Iteration   4: 634026.937 ops/s
[info] # Warmup Iteration   5: 622095.807 ops/s
[info] Iteration   1: 623974.966 ops/s
[info]                  ·gc.alloc.rate:               878.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          2215.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1693.579 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 623879.409 ops/s
[info]                  ·gc.alloc.rate:               874.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          2205.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1693.875 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 622226.610 ops/s
[info]                  ·gc.alloc.rate:               887.092 MB/sec
[info]                  ·gc.alloc.rate.norm:          2242.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3398.739 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 633552.943 ops/s
[info]                  ·gc.alloc.rate:                   886.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              2201.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1669.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 634443.424 ops/s
[info]                  ·gc.alloc.rate:               894.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          2220.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1667.376 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   627615.470 ±(99.9%) 22627.716 ops/s [Average]
[info]   (min, avg, max) = (622226.610, 627615.470, 634443.424), stdev = 5876.346
[info]   CI (99.9%): [604987.754, 650243.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   884.202 ±(99.9%) 30.810 MB/sec [Average]
[info]   (min, avg, max) = (874.490, 884.202, 894.984), stdev = 8.001
[info]   CI (99.9%): [853.392, 915.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2217.158 ±(99.9%) 62.636 B/op [Average]
[info]   (min, avg, max) = (2201.083, 2217.158, 2242.905), stdev = 16.266
[info]   CI (99.9%): [2154.521, 2279.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.281 ±(99.9%) 1157.989 MB/sec [Average]
[info]   (min, avg, max) = (671.455, 806.281, 1344.236), stdev = 300.726
[info]   CI (99.9%): [≈ 0, 1964.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2024.646 ±(99.9%) 2958.239 B/op [Average]
[info]   (min, avg, max) = (1667.376, 2024.646, 3398.739), stdev = 768.245
[info]   CI (99.9%): [≈ 0, 4982.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340739.016 ops/s
[info] # Warmup Iteration   2: 591358.488 ops/s
[info] # Warmup Iteration   3: 596200.124 ops/s
[info] # Warmup Iteration   4: 596184.190 ops/s
[info] # Warmup Iteration   5: 591167.413 ops/s
[info] Iteration   1: 592011.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 592760.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 593085.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 594852.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 591021.454 ops/s
[info]                  ·gc.alloc.rate:      5.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 13.735 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   592746.148 ±(99.9%) 5468.384 ops/s [Average]
[info]   (min, avg, max) = (591021.454, 592746.148, 594852.620), stdev = 1420.122
[info]   CI (99.9%): [587277.763, 598214.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.032 ±(99.9%) 8.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.032, 5.159), stdev = 2.307
[info]   CI (99.9%): [≈ 0, 9.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.748 ±(99.9%) 23.652 B/op [Average]
[info]   (min, avg, max) = (0.001, 2.748, 13.735), stdev = 6.142
[info]   CI (99.9%): [≈ 0, 26.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17914.962 ops/s
[info] # Warmup Iteration   2: 69438.488 ops/s
[info] # Warmup Iteration   3: 74265.874 ops/s
[info] # Warmup Iteration   4: 75848.788 ops/s
[info] # Warmup Iteration   5: 75783.250 ops/s
[info] Iteration   1: 75701.446 ops/s
[info]                  ·gc.alloc.rate:                   2202.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              45771.874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55660.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 75883.866 ops/s
[info]                  ·gc.alloc.rate:                   2192.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              45473.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41543.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 76138.307 ops/s
[info]                  ·gc.alloc.rate:               2199.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          45469.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41364.705 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 76540.709 ops/s
[info]                  ·gc.alloc.rate:               2224.863 MB/sec
[info]                  ·gc.alloc.rate.norm:          45748.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41186.426 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 74046.318 ops/s
[info]                  ·gc.alloc.rate:               2155.901 MB/sec
[info]                  ·gc.alloc.rate.norm:          45811.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42678.967 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   75662.129 ±(99.9%) 3683.462 ops/s [Average]
[info]   (min, avg, max) = (74046.318, 75662.129, 76540.709), stdev = 956.583
[info]   CI (99.9%): [71978.668, 79345.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2195.108 ±(99.9%) 96.359 MB/sec [Average]
[info]   (min, avg, max) = (2155.901, 2195.108, 2224.863), stdev = 25.024
[info]   CI (99.9%): [2098.749, 2291.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45655.055 ±(99.9%) 650.422 B/op [Average]
[info]   (min, avg, max) = (45469.789, 45655.055, 45811.365), stdev = 168.913
[info]   CI (99.9%): [45004.633, 46305.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.801 ±(99.9%) 1161.446 MB/sec [Average]
[info]   (min, avg, max) = (2001.111, 2138.801, 2678.340), stdev = 301.624
[info]   CI (99.9%): [977.355, 3300.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   44486.828 ±(99.9%) 24156.758 B/op [Average]
[info]   (min, avg, max) = (41186.426, 44486.828, 55660.546), stdev = 6273.433
[info]   CI (99.9%): [20330.069, 68643.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.846 ±(99.9%) 6.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.061), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.570 ±(99.9%) 143.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.570, 84.394), stdev = 37.386
[info]   CI (99.9%): [≈ 0, 161.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3235.705 ops/s
[info] # Warmup Iteration   2: 13416.405 ops/s
[info] # Warmup Iteration   3: 16223.842 ops/s
[info] # Warmup Iteration   4: 16457.102 ops/s
[info] # Warmup Iteration   5: 16058.335 ops/s
[info] Iteration   1: 15899.884 ops/s
[info]                  ·gc.alloc.rate:                   863.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              85498.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132794.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16123.587 ops/s
[info]                  ·gc.alloc.rate:               850.540 MB/sec
[info]                  ·gc.alloc.rate.norm:          83007.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65479.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 16259.545 ops/s
[info]                  ·gc.alloc.rate:               880.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          85226.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64995.979 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16556.491 ops/s
[info]                  ·gc.alloc.rate:               867.786 MB/sec
[info]                  ·gc.alloc.rate.norm:          82491.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63830.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 16436.041 ops/s
[info]                  ·gc.alloc.rate:                   876.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              83915.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128584.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   16255.110 ±(99.9%) 994.983 ops/s [Average]
[info]   (min, avg, max) = (15899.884, 16255.110, 16556.491), stdev = 258.394
[info]   CI (99.9%): [15260.127, 17250.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   867.834 ±(99.9%) 45.276 MB/sec [Average]
[info]   (min, avg, max) = (850.540, 867.834, 880.547), stdev = 11.758
[info]   CI (99.9%): [822.558, 913.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84027.910 ±(99.9%) 5098.448 B/op [Average]
[info]   (min, avg, max) = (82491.578, 84027.910, 85498.284), stdev = 1324.051
[info]   CI (99.9%): [78929.462, 89126.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   939.728 ±(99.9%) 1415.283 MB/sec [Average]
[info]   (min, avg, max) = (670.933, 939.728, 1343.122), stdev = 367.545
[info]   CI (99.9%): [≈ 0, 2355.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   91136.875 ±(99.9%) 139170.410 B/op [Average]
[info]   (min, avg, max) = (63830.220, 91136.875, 132794.571), stdev = 36142.114
[info]   CI (99.9%): [≈ 0, 230307.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.621 ±(99.9%) 8.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.621, 4.121), stdev = 2.221
[info]   CI (99.9%): [≈ 0, 10.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2385.107 ops/s
[info] # Warmup Iteration   2: 15868.065 ops/s
[info] # Warmup Iteration   3: 17208.062 ops/s
[info] # Warmup Iteration   4: 17178.269 ops/s
[info] # Warmup Iteration   5: 17262.275 ops/s
[info] Iteration   1: 17238.716 ops/s
[info]                  ·gc.alloc.rate:               756.319 MB/sec
[info]                  ·gc.alloc.rate.norm:          69051.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60967.257 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 17173.980 ops/s
[info]                  ·gc.alloc.rate:               755.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          69204.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61259.010 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17017.852 ops/s
[info]                  ·gc.alloc.rate:               758.038 MB/sec
[info]                  ·gc.alloc.rate.norm:          70107.861 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61820.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17317.237 ops/s
[info]                  ·gc.alloc.rate:               761.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          69222.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60779.996 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17333.751 ops/s
[info]                  ·gc.alloc.rate:                   758.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              68865.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60723.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.890 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17216.307 ±(99.9%) 493.342 ops/s [Average]
[info]   (min, avg, max) = (17017.852, 17216.307, 17333.751), stdev = 128.119
[info]   CI (99.9%): [16722.966, 17709.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   757.988 ±(99.9%) 9.765 MB/sec [Average]
[info]   (min, avg, max) = (755.186, 757.988, 761.828), stdev = 2.536
[info]   CI (99.9%): [748.223, 767.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69290.565 ±(99.9%) 1844.230 B/op [Average]
[info]   (min, avg, max) = (68865.689, 69290.565, 70107.861), stdev = 478.941
[info]   CI (99.9%): [67446.335, 71134.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.495 ±(99.9%) 1.779 MB/sec [Average]
[info]   (min, avg, max) = (667.771, 668.495, 668.912), stdev = 0.462
[info]   CI (99.9%): [666.716, 670.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61110.125 ±(99.9%) 1727.760 B/op [Average]
[info]   (min, avg, max) = (60723.903, 61110.125, 61820.458), stdev = 448.694
[info]   CI (99.9%): [59382.365, 62837.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 3.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.890), stdev = 0.845
[info]   CI (99.9%): [≈ 0, 3.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71370.940 ops/s
[info] # Warmup Iteration   2: 116281.654 ops/s
[info] # Warmup Iteration   3: 121734.359 ops/s
[info] # Warmup Iteration   4: 122405.821 ops/s
[info] # Warmup Iteration   5: 122005.713 ops/s
[info] Iteration   1: 122475.612 ops/s
[info]                  ·gc.alloc.rate:      307.536 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 121773.688 ops/s
[info]                  ·gc.alloc.rate:               322.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          4172.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6612.145 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 121779.594 ops/s
[info]                  ·gc.alloc.rate:                   325.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              4211.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6611.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 122497.534 ops/s
[info]                  ·gc.alloc.rate:      307.650 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 122498.423 ops/s
[info]                  ·gc.alloc.rate:      307.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   122204.970 ±(99.9%) 1506.070 ops/s [Average]
[info]   (min, avg, max) = (121773.688, 122204.970, 122498.423), stdev = 391.122
[info]   CI (99.9%): [120698.901, 123711.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   314.333 ±(99.9%) 35.639 MB/sec [Average]
[info]   (min, avg, max) = (307.536, 314.333, 325.941), stdev = 9.255
[info]   CI (99.9%): [278.694, 349.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4048.144 ±(99.9%) 509.678 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4048.144, 4211.804), stdev = 132.362
[info]   CI (99.9%): [3538.466, 4557.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.652 ±(99.9%) 1079.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.652, 511.672), stdev = 280.231
[info]   CI (99.9%): [≈ 0, 1283.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2644.793 ±(99.9%) 13945.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2644.793, 6612.145), stdev = 3621.532
[info]   CI (99.9%): [≈ 0, 16590.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.161 ±(99.9%) 1.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.161, 0.807), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 1.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1097.548 ops/s
[info] # Warmup Iteration   2: 11980.079 ops/s
[info] # Warmup Iteration   3: 14884.072 ops/s
[info] # Warmup Iteration   4: 14853.112 ops/s
[info] # Warmup Iteration   5: 14838.333 ops/s
[info] Iteration   1: 14866.357 ops/s
[info]                  ·gc.alloc.rate:                   1155.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              122312.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141509.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 14969.616 ops/s
[info]                  ·gc.alloc.rate:               1141.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          119982.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70280.925 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 14183.143 ops/s
[info]                  ·gc.alloc.rate:               1142.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          126752.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148423.841 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 14786.111 ops/s
[info]                  ·gc.alloc.rate:               1164.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          123977.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142513.879 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 14927.713 ops/s
[info]                  ·gc.alloc.rate:                   1147.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              120989.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70614.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.758 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14746.588 ±(99.9%) 1241.684 ops/s [Average]
[info]   (min, avg, max) = (14183.143, 14746.588, 14969.616), stdev = 322.461
[info]   CI (99.9%): [13504.904, 15988.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1150.418 ±(99.9%) 37.816 MB/sec [Average]
[info]   (min, avg, max) = (1141.733, 1150.418, 1164.808), stdev = 9.821
[info]   CI (99.9%): [1112.602, 1188.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122803.038 ±(99.9%) 10270.458 B/op [Average]
[info]   (min, avg, max) = (119982.904, 122803.038, 126752.032), stdev = 2667.205
[info]   CI (99.9%): [112532.580, 133073.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.431 ±(99.9%) 1410.095 MB/sec [Average]
[info]   (min, avg, max) = (668.779, 1070.431, 1338.962), stdev = 366.197
[info]   CI (99.9%): [≈ 0, 2480.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114668.564 ±(99.9%) 155775.881 B/op [Average]
[info]   (min, avg, max) = (70280.925, 114668.564, 148423.841), stdev = 40454.502
[info]   CI (99.9%): [≈ 0, 270444.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.038), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86.033 ±(99.9%) 731.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.033, 425.758), stdev = 189.922
[info]   CI (99.9%): [≈ 0, 817.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16154.199 ops/s
[info] # Warmup Iteration   2: 45853.834 ops/s
[info] # Warmup Iteration   3: 48127.518 ops/s
[info] # Warmup Iteration   4: 48035.907 ops/s
[info] # Warmup Iteration   5: 50074.038 ops/s
[info] Iteration   1: 49947.812 ops/s
[info]                  ·gc.alloc.rate:                   1539.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              48497.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63413.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 49464.772 ops/s
[info]                  ·gc.alloc.rate:                   1543.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              49117.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42729.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 50145.742 ops/s
[info]                  ·gc.alloc.rate:                   1551.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              48688.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42169.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 50351.451 ops/s
[info]                  ·gc.alloc.rate:                   1546.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              48320.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41891.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.301 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50051.361 ops/s
[info]                  ·gc.alloc.rate:                   1563.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              49161.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63153.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.655 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   49992.228 ±(99.9%) 1271.714 ops/s [Average]
[info]   (min, avg, max) = (49464.772, 49992.228, 50351.451), stdev = 330.260
[info]   CI (99.9%): [48720.513, 51263.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1548.805 ±(99.9%) 35.862 MB/sec [Average]
[info]   (min, avg, max) = (1539.050, 1548.805, 1563.458), stdev = 9.313
[info]   CI (99.9%): [1512.943, 1584.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48757.082 ±(99.9%) 1436.256 B/op [Average]
[info]   (min, avg, max) = (48320.224, 48757.082, 49161.725), stdev = 372.991
[info]   CI (99.9%): [47320.826, 50193.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.626 ±(99.9%) 1408.854 MB/sec [Average]
[info]   (min, avg, max) = (1340.553, 1609.626, 2012.409), stdev = 365.875
[info]   CI (99.9%): [200.772, 3018.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   50671.508 ±(99.9%) 44348.973 B/op [Average]
[info]   (min, avg, max) = (41891.404, 50671.508, 63413.302), stdev = 11517.287
[info]   CI (99.9%): [6322.535, 95020.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.148 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.745, 3.601), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23.393 ±(99.9%) 192.952 B/op [Average]
[info]   (min, avg, max) = (0.655, 23.393, 113.029), stdev = 50.109
[info]   CI (99.9%): [≈ 0, 216.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29492.004 ops/s
[info] # Warmup Iteration   2: 74073.942 ops/s
[info] # Warmup Iteration   3: 77903.827 ops/s
[info] # Warmup Iteration   4: 78424.486 ops/s
[info] # Warmup Iteration   5: 78148.740 ops/s
[info] Iteration   1: 78354.461 ops/s
[info]                  ·gc.alloc.rate:                   1657.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              33286.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26927.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 78545.960 ops/s
[info]                  ·gc.alloc.rate:                   1659.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              33241.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26875.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 78277.892 ops/s
[info]                  ·gc.alloc.rate:                   1680.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              33780.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40408.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.323 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 78685.987 ops/s
[info]                  ·gc.alloc.rate:               1673.630 MB/sec
[info]                  ·gc.alloc.rate.norm:          33475.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26727.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 78579.375 ops/s
[info]                  ·gc.alloc.rate:               1687.804 MB/sec
[info]                  ·gc.alloc.rate.norm:          33796.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40152.808 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   78488.735 ±(99.9%) 646.870 ops/s [Average]
[info]   (min, avg, max) = (78277.892, 78488.735, 78685.987), stdev = 167.990
[info]   CI (99.9%): [77841.865, 79135.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1671.605 ±(99.9%) 50.940 MB/sec [Average]
[info]   (min, avg, max) = (1657.135, 1671.605, 1687.804), stdev = 13.229
[info]   CI (99.9%): [1620.665, 1722.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33516.052 ±(99.9%) 1015.281 B/op [Average]
[info]   (min, avg, max) = (33241.817, 33516.052, 33796.218), stdev = 263.665
[info]   CI (99.9%): [32500.771, 34531.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1606.681 ±(99.9%) 1409.036 MB/sec [Average]
[info]   (min, avg, max) = (1336.262, 1606.681, 2009.783), stdev = 365.922
[info]   CI (99.9%): [197.645, 3015.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32218.333 ±(99.9%) 28343.120 B/op [Average]
[info]   (min, avg, max) = (26727.363, 32218.333, 40408.147), stdev = 7360.618
[info]   CI (99.9%): [3875.213, 60561.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.767 ±(99.9%) 4.992 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.000), stdev = 1.296
[info]   CI (99.9%): [≈ 0, 5.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.370 ±(99.9%) 100.014 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.370, 60.108), stdev = 25.973
[info]   CI (99.9%): [≈ 0, 115.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161168.351 ops/s
[info] # Warmup Iteration   2: 270476.707 ops/s
[info] # Warmup Iteration   3: 300829.730 ops/s
[info] # Warmup Iteration   4: 300043.363 ops/s
[info] # Warmup Iteration   5: 299748.383 ops/s
[info] Iteration   1: 295579.060 ops/s
[info]                  ·gc.alloc.rate:               580.660 MB/sec
[info]                  ·gc.alloc.rate.norm:          3091.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3570.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 291733.429 ops/s
[info]                  ·gc.alloc.rate:               574.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          3098.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3617.142 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 294255.669 ops/s
[info]                  ·gc.alloc.rate:      564.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 3019.841 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 292381.875 ops/s
[info]                  ·gc.alloc.rate:                   577.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              3105.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3612.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 298565.237 ops/s
[info]                  ·gc.alloc.rate:                   591.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              3117.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3537.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   294503.054 ±(99.9%) 10526.166 ops/s [Average]
[info]   (min, avg, max) = (291733.429, 294503.054, 298565.237), stdev = 2733.612
[info]   CI (99.9%): [283976.888, 305029.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   577.590 ±(99.9%) 37.606 MB/sec [Average]
[info]   (min, avg, max) = (564.597, 577.590, 591.438), stdev = 9.766
[info]   CI (99.9%): [539.983, 615.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3086.374 ±(99.9%) 147.983 B/op [Average]
[info]   (min, avg, max) = (3019.841, 3086.374, 3117.445), stdev = 38.431
[info]   CI (99.9%): [2938.391, 3234.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.705 ±(99.9%) 1155.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.705, 671.273), stdev = 300.027
[info]   CI (99.9%): [≈ 0, 1692.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2867.521 ±(99.9%) 6173.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2867.521, 3617.142), stdev = 1603.323
[info]   CI (99.9%): [≈ 0, 9041.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.112), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184912.401 ops/s
[info] # Warmup Iteration   2: 348849.139 ops/s
[info] # Warmup Iteration   3: 364925.596 ops/s
[info] # Warmup Iteration   4: 364693.498 ops/s
[info] # Warmup Iteration   5: 364839.812 ops/s
[info] Iteration   1: 365012.459 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 365049.131 ops/s
[info]                  ·gc.alloc.rate:      0.042 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.181 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 364551.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 365005.876 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 364976.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   364919.033 ±(99.9%) 798.076 ops/s [Average]
[info]   (min, avg, max) = (364551.171, 364919.033, 365049.131), stdev = 207.258
[info]   CI (99.9%): [364120.957, 365717.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.009 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.009, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.037 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.037, 0.181), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24461.269 ops/s
[info] # Warmup Iteration   2: 62449.221 ops/s
[info] # Warmup Iteration   3: 66857.163 ops/s
[info] # Warmup Iteration   4: 66794.211 ops/s
[info] # Warmup Iteration   5: 66434.163 ops/s
[info] Iteration   1: 65395.845 ops/s
[info]                  ·gc.alloc.rate:               1492.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          35916.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32272.016 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 67061.089 ops/s
[info]                  ·gc.alloc.rate:                   1537.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              36073.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31486.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 66972.477 ops/s
[info]                  ·gc.alloc.rate:                   1538.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              36157.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31543.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.149 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 66910.297 ops/s
[info]                  ·gc.alloc.rate:               1564.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          36780.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47223.837 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 67466.207 ops/s
[info]                  ·gc.alloc.rate:               1547.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          36100.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31185.514 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66761.183 ±(99.9%) 3055.159 ops/s [Average]
[info]   (min, avg, max) = (65395.845, 66761.183, 67466.207), stdev = 793.415
[info]   CI (99.9%): [63706.024, 69816.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1536.046 ±(99.9%) 102.840 MB/sec [Average]
[info]   (min, avg, max) = (1492.392, 1536.046, 1564.353), stdev = 26.707
[info]   CI (99.9%): [1433.207, 1638.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36205.975 ±(99.9%) 1284.153 B/op [Average]
[info]   (min, avg, max) = (35916.721, 36205.975, 36780.713), stdev = 333.490
[info]   CI (99.9%): [34921.822, 37490.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.085 ±(99.9%) 1150.435 MB/sec [Average]
[info]   (min, avg, max) = (1337.082, 1474.085, 2008.519), stdev = 298.764
[info]   CI (99.9%): [323.650, 2624.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34742.377 ±(99.9%) 26911.219 B/op [Average]
[info]   (min, avg, max) = (31185.514, 34742.377, 47223.837), stdev = 6988.758
[info]   CI (99.9%): [7831.158, 61653.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.784 ±(99.9%) 6.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.784, 3.878), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.425 ±(99.9%) 156.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.425, 91.149), stdev = 40.656
[info]   CI (99.9%): [≈ 0, 174.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35549.036 ops/s
[info] # Warmup Iteration   2: 128751.286 ops/s
[info] # Warmup Iteration   3: 138823.597 ops/s
[info] # Warmup Iteration   4: 148353.771 ops/s
[info] # Warmup Iteration   5: 146229.390 ops/s
[info] Iteration   1: 146925.589 ops/s
[info]                  ·gc.alloc.rate:                   1904.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              20404.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14399.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 146784.154 ops/s
[info]                  ·gc.alloc.rate:                   1929.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              20687.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21605.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.498 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 148334.929 ops/s
[info]                  ·gc.alloc.rate:                   1962.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              20823.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21323.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 146381.158 ops/s
[info]                  ·gc.alloc.rate:               1909.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          20532.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21594.649 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 146781.037 ops/s
[info]                  ·gc.alloc.rate:                   1942.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              20833.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21549.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147041.373 ±(99.9%) 2892.161 ops/s [Average]
[info]   (min, avg, max) = (146381.158, 147041.373, 148334.929), stdev = 751.085
[info]   CI (99.9%): [144149.213, 149933.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1929.905 ±(99.9%) 91.682 MB/sec [Average]
[info]   (min, avg, max) = (1904.832, 1929.905, 1962.552), stdev = 23.809
[info]   CI (99.9%): [1838.224, 2021.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20656.360 ±(99.9%) 717.581 B/op [Average]
[info]   (min, avg, max) = (20404.747, 20656.360, 20833.837), stdev = 186.354
[info]   CI (99.9%): [19938.779, 21373.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.457 ±(99.9%) 1147.869 MB/sec [Average]
[info]   (min, avg, max) = (1344.222, 1877.457, 2015.010), stdev = 298.098
[info]   CI (99.9%): [729.588, 3025.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20094.658 ±(99.9%) 12267.292 B/op [Average]
[info]   (min, avg, max) = (14399.439, 20094.658, 21605.765), stdev = 3185.777
[info]   CI (99.9%): [7827.366, 32361.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 5.900 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.497), stdev = 1.532
[info]   CI (99.9%): [≈ 0, 6.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.163 ±(99.9%) 63.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.163, 37.498), stdev = 16.433
[info]   CI (99.9%): [≈ 0, 71.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.855 ops/s
[info] # Warmup Iteration   2: 774875.470 ops/s
[info] # Warmup Iteration   3: 807664.501 ops/s
[info] # Warmup Iteration   4: 829131.184 ops/s
[info] # Warmup Iteration   5: 828933.131 ops/s
[info] Iteration   1: 834959.775 ops/s
[info]                  ·gc.alloc.rate:      462.727 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 829242.305 ops/s
[info]                  ·gc.alloc.rate:               476.290 MB/sec
[info]                  ·gc.alloc.rate.norm:          903.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1264.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 840811.432 ops/s
[info]                  ·gc.alloc.rate:                   482.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              902.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 825751.324 ops/s
[info]                  ·gc.alloc.rate:      457.508 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 832369.798 ops/s
[info]                  ·gc.alloc.rate:               486.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          919.668 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1260.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   832626.927 ±(99.9%) 22055.149 ops/s [Average]
[info]   (min, avg, max) = (825751.324, 832626.927, 840811.432), stdev = 5727.652
[info]   CI (99.9%): [810571.778, 854682.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   473.037 ±(99.9%) 48.054 MB/sec [Average]
[info]   (min, avg, max) = (457.508, 473.037, 486.551), stdev = 12.480
[info]   CI (99.9%): [424.983, 521.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   893.969 ±(99.9%) 81.527 B/op [Average]
[info]   (min, avg, max) = (872.001, 893.969, 919.668), stdev = 21.172
[info]   CI (99.9%): [812.442, 975.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.838 ±(99.9%) 1405.488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.838, 666.721), stdev = 365.001
[info]   CI (99.9%): [≈ 0, 1805.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   754.293 ±(99.9%) 2651.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 754.293, 1264.292), stdev = 688.602
[info]   CI (99.9%): [≈ 0, 3405.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114674.905 ops/s
[info] # Warmup Iteration   2: 390029.055 ops/s
[info] # Warmup Iteration   3: 430988.009 ops/s
[info] # Warmup Iteration   4: 428498.984 ops/s
[info] # Warmup Iteration   5: 419703.220 ops/s
[info] Iteration   1: 420404.291 ops/s
[info]                  ·gc.alloc.rate:               437.372 MB/sec
[info]                  ·gc.alloc.rate.norm:          1637.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1915.235 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 421864.733 ops/s
[info]                  ·gc.alloc.rate:      422.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 1575.530 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 421443.592 ops/s
[info]                  ·gc.alloc.rate:               432.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2487.642 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 434586.949 ops/s
[info]                  ·gc.alloc.rate:      432.961 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 432075.686 ops/s
[info]                  ·gc.alloc.rate:                   447.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1630.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2426.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   426075.050 ±(99.9%) 25816.173 ops/s [Average]
[info]   (min, avg, max) = (420404.291, 426075.050, 434586.949), stdev = 6704.378
[info]   CI (99.9%): [400258.877, 451891.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   434.634 ±(99.9%) 35.144 MB/sec [Average]
[info]   (min, avg, max) = (422.322, 434.634, 447.608), stdev = 9.127
[info]   CI (99.9%): [399.490, 469.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1605.585 ±(99.9%) 122.738 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1605.585, 1637.346), stdev = 31.875
[info]   CI (99.9%): [1482.847, 1728.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.787 ±(99.9%) 1318.913 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.787, 666.173), stdev = 342.517
[info]   CI (99.9%): [≈ 0, 1687.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1365.891 ±(99.9%) 4876.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1365.891, 2487.642), stdev = 1266.539
[info]   CI (99.9%): [≈ 0, 6242.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631213.105 ops/s
[info] # Warmup Iteration   2: 1059386.088 ops/s
[info] # Warmup Iteration   3: 1134402.471 ops/s
[info] # Warmup Iteration   4: 1142096.183 ops/s
[info] # Warmup Iteration   5: 1128462.776 ops/s
[info] Iteration   1: 1123732.049 ops/s
[info]                  ·gc.alloc.rate:                   404.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              566.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1118584.332 ops/s
[info]                  ·gc.alloc.rate:               400.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          563.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 719.830 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1129970.255 ops/s
[info]                  ·gc.alloc.rate:      390.635 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1146574.856 ops/s
[info]                  ·gc.alloc.rate:                   412.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              566.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     920.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1147675.773 ops/s
[info]                  ·gc.alloc.rate:               421.029 MB/sec
[info]                  ·gc.alloc.rate.norm:          577.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1133307.453 ±(99.9%) 51014.426 ops/s [Average]
[info]   (min, avg, max) = (1118584.332, 1133307.453, 1147675.773), stdev = 13248.284
[info]   CI (99.9%): [1082293.027, 1184321.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   405.821 ±(99.9%) 44.967 MB/sec [Average]
[info]   (min, avg, max) = (390.635, 405.821, 421.029), stdev = 11.678
[info]   CI (99.9%): [360.854, 450.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   563.502 ±(99.9%) 46.820 B/op [Average]
[info]   (min, avg, max) = (544.000, 563.502, 577.383), stdev = 12.159
[info]   CI (99.9%): [516.682, 610.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   472.968 ±(99.9%) 1063.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.968, 670.796), stdev = 276.114
[info]   CI (99.9%): [≈ 0, 1536.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   655.412 ±(99.9%) 1463.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 655.412, 920.795), stdev = 380.077
[info]   CI (99.9%): [≈ 0, 2118.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 1.483
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3514.789 ops/s
[info] # Warmup Iteration   2: 68037.976 ops/s
[info] # Warmup Iteration   3: 80056.057 ops/s
[info] # Warmup Iteration   4: 80042.442 ops/s
[info] # Warmup Iteration   5: 82700.288 ops/s
[info] Iteration   1: 82215.651 ops/s
[info]                  ·gc.alloc.rate:                   3306.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              63296.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3332.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63800.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 82269.814 ops/s
[info]                  ·gc.alloc.rate:                   3300.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              63131.281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51100.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.398 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 83048.868 ops/s
[info]                  ·gc.alloc.rate:                   3362.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              63717.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63508.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 83073.029 ops/s
[info]                  ·gc.alloc.rate:               3369.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          63830.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63752.563 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 81432.979 ops/s
[info]                  ·gc.alloc.rate:               3305.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          63893.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3377.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65278.516 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   82408.068 ±(99.9%) 2625.602 ops/s [Average]
[info]   (min, avg, max) = (81432.979, 82408.068, 83073.029), stdev = 681.860
[info]   CI (99.9%): [79782.466, 85033.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3328.884 ±(99.9%) 130.749 MB/sec [Average]
[info]   (min, avg, max) = (3300.293, 3328.884, 3369.315), stdev = 33.955
[info]   CI (99.9%): [3198.135, 3459.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63573.875 ±(99.9%) 1308.411 B/op [Average]
[info]   (min, avg, max) = (63131.281, 63573.875, 63893.468), stdev = 339.790
[info]   CI (99.9%): [62265.464, 64882.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3219.657 ±(99.9%) 1182.004 MB/sec [Average]
[info]   (min, avg, max) = (2671.354, 3219.657, 3377.580), stdev = 306.963
[info]   CI (99.9%): [2037.653, 4401.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61487.930 ±(99.9%) 22521.082 B/op [Average]
[info]   (min, avg, max) = (51100.319, 61487.930, 65278.516), stdev = 5848.654
[info]   CI (99.9%): [38966.848, 84009.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.557 ±(99.9%) 3.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 1.993), stdev = 0.827
[info]   CI (99.9%): [≈ 0, 3.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84968.209 ops/s
[info] # Warmup Iteration   2: 253098.852 ops/s
[info] # Warmup Iteration   3: 269777.700 ops/s
[info] # Warmup Iteration   4: 270046.110 ops/s
[info] # Warmup Iteration   5: 274148.349 ops/s
[info] Iteration   1: 272891.744 ops/s
[info]                  ·gc.alloc.rate:                   1663.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              9591.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11598.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 273041.617 ops/s
[info]                  ·gc.alloc.rate:                   1649.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              9506.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7735.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 274061.081 ops/s
[info]                  ·gc.alloc.rate:                   1678.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              9640.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11543.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 266688.090 ops/s
[info]                  ·gc.alloc.rate:               1621.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          9570.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7893.784 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 274178.039 ops/s
[info]                  ·gc.alloc.rate:               1668.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          9575.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7678.374 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   272172.114 ±(99.9%) 12014.433 ops/s [Average]
[info]   (min, avg, max) = (266688.090, 272172.114, 274178.039), stdev = 3120.110
[info]   CI (99.9%): [260157.681, 284186.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1656.188 ±(99.9%) 84.631 MB/sec [Average]
[info]   (min, avg, max) = (1621.758, 1656.188, 1678.755), stdev = 21.978
[info]   CI (99.9%): [1571.557, 1740.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9576.934 ±(99.9%) 184.904 B/op [Average]
[info]   (min, avg, max) = (9506.788, 9576.934, 9640.616), stdev = 48.019
[info]   CI (99.9%): [9392.031, 9761.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1607.671 ±(99.9%) 1416.416 MB/sec [Average]
[info]   (min, avg, max) = (1337.609, 1607.671, 2011.068), stdev = 367.839
[info]   CI (99.9%): [191.255, 3024.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9289.821 ±(99.9%) 8024.439 B/op [Average]
[info]   (min, avg, max) = (7678.374, 9289.821, 11598.043), stdev = 2083.921
[info]   CI (99.9%): [1265.382, 17314.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.039), stdev = 1.314
[info]   CI (99.9%): [≈ 0, 5.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.293 ±(99.9%) 29.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.293, 17.519), stdev = 7.573
[info]   CI (99.9%): [≈ 0, 33.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.792 ops/s
[info] # Warmup Iteration   2: 1136682.972 ops/s
[info] # Warmup Iteration   3: 1227217.734 ops/s
[info] # Warmup Iteration   4: 1251893.518 ops/s
[info] # Warmup Iteration   5: 1258761.463 ops/s
[info] Iteration   1: 1252571.101 ops/s
[info]                  ·gc.alloc.rate:                   439.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              552.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     642.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1252288.426 ops/s
[info]                  ·gc.alloc.rate:               442.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 836.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1258869.294 ops/s
[info]                  ·gc.alloc.rate:      428.835 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.125 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1252036.704 ops/s
[info]                  ·gc.alloc.rate:               448.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 836.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1253482.804 ops/s
[info]                  ·gc.alloc.rate:                   440.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              553.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1253849.666 ±(99.9%) 11008.108 ops/s [Average]
[info]   (min, avg, max) = (1252036.704, 1253849.666, 1258869.294), stdev = 2858.771
[info]   CI (99.9%): [1242841.558, 1264857.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   440.210 ±(99.9%) 27.933 MB/sec [Average]
[info]   (min, avg, max) = (428.835, 440.210, 448.801), stdev = 7.254
[info]   CI (99.9%): [412.277, 468.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   552.574 ±(99.9%) 39.501 B/op [Average]
[info]   (min, avg, max) = (536.125, 552.574, 564.157), stdev = 10.258
[info]   CI (99.9%): [513.073, 592.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   501.683 ±(99.9%) 1110.017 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.683, 665.829), stdev = 288.268
[info]   CI (99.9%): [≈ 0, 1611.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   630.350 ±(99.9%) 1394.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 630.350, 836.553), stdev = 362.200
[info]   CI (99.9%): [≈ 0, 2025.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 698058.662 ops/s
[info] # Warmup Iteration   2: 1518928.585 ops/s
[info] # Warmup Iteration   3: 1555674.174 ops/s
[info] # Warmup Iteration   4: 1562013.784 ops/s
[info] # Warmup Iteration   5: 1560580.882 ops/s
[info] Iteration   1: 1546870.692 ops/s
[info]                  ·gc.alloc.rate:               944.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          961.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1360.327 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1557838.267 ops/s
[info]                  ·gc.alloc.rate:               928.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          937.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 675.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1566963.255 ops/s
[info]                  ·gc.alloc.rate:                   930.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              934.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     671.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1556148.189 ops/s
[info]                  ·gc.alloc.rate:               939.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          949.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1354.182 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 1560739.461 ops/s
[info]                  ·gc.alloc.rate:                   939.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              946.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1557711.973 ±(99.9%) 28214.123 ops/s [Average]
[info]   (min, avg, max) = (1546870.692, 1557711.973, 1566963.255), stdev = 7327.118
[info]   CI (99.9%): [1529497.850, 1585926.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   936.523 ±(99.9%) 25.558 MB/sec [Average]
[info]   (min, avg, max) = (928.702, 936.523, 944.836), stdev = 6.637
[info]   CI (99.9%): [910.965, 962.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   946.172 ±(99.9%) 40.378 B/op [Average]
[info]   (min, avg, max) = (934.903, 946.172, 961.330), stdev = 10.486
[info]   CI (99.9%): [905.794, 986.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.800 ±(99.9%) 1410.046 MB/sec [Average]
[info]   (min, avg, max) = (668.822, 936.800, 1338.880), stdev = 366.184
[info]   CI (99.9%): [≈ 0, 2346.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   947.545 ±(99.9%) 1440.224 B/op [Average]
[info]   (min, avg, max) = (671.748, 947.545, 1360.327), stdev = 374.022
[info]   CI (99.9%): [≈ 0, 2387.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1057832.122 ops/s
[info] # Warmup Iteration   2: 1770689.781 ops/s
[info] # Warmup Iteration   3: 1875278.030 ops/s
[info] # Warmup Iteration   4: 1917976.134 ops/s
[info] # Warmup Iteration   5: 1896314.773 ops/s
[info] Iteration   1: 1919903.010 ops/s
[info]                  ·gc.alloc.rate:               676.455 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.628 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1918432.219 ops/s
[info]                  ·gc.alloc.rate:               678.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 550.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1915458.612 ops/s
[info]                  ·gc.alloc.rate:               675.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          555.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1920859.042 ops/s
[info]                  ·gc.alloc.rate:               672.071 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1920193.972 ops/s
[info]                  ·gc.alloc.rate:                   671.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              550.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1918969.371 ±(99.9%) 8293.679 ops/s [Average]
[info]   (min, avg, max) = (1915458.612, 1918969.371, 1920859.042), stdev = 2153.842
[info]   CI (99.9%): [1910675.692, 1927263.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   674.941 ±(99.9%) 11.216 MB/sec [Average]
[info]   (min, avg, max) = (671.807, 674.941, 678.511), stdev = 2.913
[info]   CI (99.9%): [663.725, 686.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.531 ±(99.9%) 10.667 B/op [Average]
[info]   (min, avg, max) = (550.540, 553.531, 556.625), stdev = 2.770
[info]   CI (99.9%): [542.864, 564.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.049 ±(99.9%) 2.342 MB/sec [Average]
[info]   (min, avg, max) = (670.445, 671.049, 671.926), stdev = 0.608
[info]   CI (99.9%): [668.707, 673.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   550.338 ±(99.9%) 2.816 B/op [Average]
[info]   (min, avg, max) = (549.628, 550.338, 551.468), stdev = 0.731
[info]   CI (99.9%): [547.521, 553.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 956921.045 ops/s
[info] # Warmup Iteration   2: 1921750.092 ops/s
[info] # Warmup Iteration   3: 1950165.193 ops/s
[info] # Warmup Iteration   4: 2057646.871 ops/s
[info] # Warmup Iteration   5: 2058854.490 ops/s
[info] Iteration   1: 2059519.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2057159.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2060652.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2055297.568 ops/s
[info]                  ·gc.alloc.rate:      1.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.783 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2058284.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2058182.806 ±(99.9%) 8000.803 ops/s [Average]
[info]   (min, avg, max) = (2055297.568, 2058182.806, 2060652.417), stdev = 2077.783
[info]   CI (99.9%): [2050182.003, 2066183.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.205 ±(99.9%) 1.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.205, 1.023), stdev = 0.457
[info]   CI (99.9%): [≈ 0, 1.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.157 ±(99.9%) 1.348 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.157, 0.783), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 1.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10960.269 ops/s
[info] # Warmup Iteration   2: 37809.395 ops/s
[info] # Warmup Iteration   3: 41314.819 ops/s
[info] # Warmup Iteration   4: 42185.260 ops/s
[info] # Warmup Iteration   5: 41816.206 ops/s
[info] Iteration   1: 42457.297 ops/s
[info]                  ·gc.alloc.rate:                   2114.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              78379.649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74621.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 42107.410 ops/s
[info]                  ·gc.alloc.rate:                   2097.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              78393.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75019.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42603.793 ops/s
[info]                  ·gc.alloc.rate:                   2106.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              77814.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74047.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41904.802 ops/s
[info]                  ·gc.alloc.rate:               2101.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          78905.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75305.730 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 41608.538 ops/s
[info]                  ·gc.alloc.rate:                   2099.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              79401.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75969.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.787 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42136.368 ±(99.9%) 1557.665 ops/s [Average]
[info]   (min, avg, max) = (41608.538, 42136.368, 42603.793), stdev = 404.521
[info]   CI (99.9%): [40578.703, 43694.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2103.791 ±(99.9%) 26.234 MB/sec [Average]
[info]   (min, avg, max) = (2097.800, 2103.791, 2114.444), stdev = 6.813
[info]   CI (99.9%): [2077.557, 2130.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78578.800 ±(99.9%) 2311.221 B/op [Average]
[info]   (min, avg, max) = (77814.350, 78578.800, 79401.164), stdev = 600.217
[info]   CI (99.9%): [76267.580, 80890.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.744 ±(99.9%) 12.929 MB/sec [Average]
[info]   (min, avg, max) = (2004.499, 2007.744, 2013.057), stdev = 3.358
[info]   CI (99.9%): [1994.815, 2020.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74992.603 ±(99.9%) 2779.007 B/op [Average]
[info]   (min, avg, max) = (74047.528, 74992.603, 75969.161), stdev = 721.699
[info]   CI (99.9%): [72213.596, 77771.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 6.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.893), stdev = 1.719
[info]   CI (99.9%): [≈ 0, 7.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   30.403 ±(99.9%) 245.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.403, 144.298), stdev = 63.717
[info]   CI (99.9%): [≈ 0, 275.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3201.649 ops/s
[info] # Warmup Iteration   2: 13151.771 ops/s
[info] # Warmup Iteration   3: 14714.258 ops/s
[info] # Warmup Iteration   4: 14703.212 ops/s
[info] # Warmup Iteration   5: 14628.563 ops/s
[info] Iteration   1: 14217.156 ops/s
[info]                  ·gc.alloc.rate:                   1880.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              208108.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223135.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 14448.484 ops/s
[info]                  ·gc.alloc.rate:                   1900.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              206999.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146282.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14175.851 ops/s
[info]                  ·gc.alloc.rate:               1887.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          209519.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 223115.438 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 14533.782 ops/s
[info]                  ·gc.alloc.rate:                   1913.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              207244.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217347.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.254 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14663.506 ops/s
[info]                  ·gc.alloc.rate:               1954.939 MB/sec
[info]                  ·gc.alloc.rate.norm:          209828.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 215635.157 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   14407.756 ±(99.9%) 800.937 ops/s [Average]
[info]   (min, avg, max) = (14175.851, 14407.756, 14663.506), stdev = 208.001
[info]   CI (99.9%): [13606.819, 15208.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1907.492 ±(99.9%) 113.050 MB/sec [Average]
[info]   (min, avg, max) = (1880.598, 1907.492, 1954.939), stdev = 29.359
[info]   CI (99.9%): [1794.443, 2020.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   208340.005 ±(99.9%) 4968.013 B/op [Average]
[info]   (min, avg, max) = (206999.226, 208340.005, 209828.050), stdev = 1290.177
[info]   CI (99.9%): [203371.993, 213308.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.151 ±(99.9%) 1150.038 MB/sec [Average]
[info]   (min, avg, max) = (1342.927, 1877.151, 2016.393), stdev = 298.661
[info]   CI (99.9%): [727.113, 3027.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   205103.237 ±(99.9%) 127279.975 B/op [Average]
[info]   (min, avg, max) = (146282.556, 205103.237, 223135.793), stdev = 33054.205
[info]   CI (99.9%): [77823.262, 332383.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.811), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84.437 ±(99.9%) 520.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 84.437, 311.089), stdev = 135.074
[info]   CI (99.9%): [≈ 0, 604.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29142.017 ops/s
[info] # Warmup Iteration   2: 85223.789 ops/s
[info] # Warmup Iteration   3: 96379.061 ops/s
[info] # Warmup Iteration   4: 96728.689 ops/s
[info] # Warmup Iteration   5: 99004.872 ops/s
[info] Iteration   1: 97138.604 ops/s
[info]                  ·gc.alloc.rate:               1307.875 MB/sec
[info]                  ·gc.alloc.rate.norm:          21191.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21671.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 98827.675 ops/s
[info]                  ·gc.alloc.rate:               1335.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          21270.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21312.693 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 99008.624 ops/s
[info]                  ·gc.alloc.rate:               1336.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          21232.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21283.466 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 99157.841 ops/s
[info]                  ·gc.alloc.rate:                   1325.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              21030.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21273.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 99159.255 ops/s
[info]                  ·gc.alloc.rate:                   1338.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              21228.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21208.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   98658.400 ±(99.9%) 3313.225 ops/s [Average]
[info]   (min, avg, max) = (97138.604, 98658.400, 99159.255), stdev = 860.434
[info]   CI (99.9%): [95345.175, 101971.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1328.539 ±(99.9%) 48.630 MB/sec [Average]
[info]   (min, avg, max) = (1307.875, 1328.539, 1338.092), stdev = 12.629
[info]   CI (99.9%): [1279.909, 1377.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21190.556 ±(99.9%) 361.480 B/op [Average]
[info]   (min, avg, max) = (21030.264, 21190.556, 21270.400), stdev = 93.875
[info]   CI (99.9%): [20829.076, 21552.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.463 ±(99.9%) 5.278 MB/sec [Average]
[info]   (min, avg, max) = (1336.880, 1338.463, 1340.321), stdev = 1.371
[info]   CI (99.9%): [1333.185, 1343.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21350.079 ±(99.9%) 708.082 B/op [Average]
[info]   (min, avg, max) = (21208.985, 21350.079, 21671.974), stdev = 183.887
[info]   CI (99.9%): [20641.997, 22058.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 6.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 4.039), stdev = 1.797
[info]   CI (99.9%): [≈ 0, 7.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.084 ±(99.9%) 109.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.084, 64.100), stdev = 28.524
[info]   CI (99.9%): [≈ 0, 122.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100837.872 ops/s
[info] # Warmup Iteration   2: 225176.841 ops/s
[info] # Warmup Iteration   3: 251060.009 ops/s
[info] # Warmup Iteration   4: 253142.389 ops/s
[info] # Warmup Iteration   5: 257384.179 ops/s
[info] Iteration   1: 256818.298 ops/s
[info]                  ·gc.alloc.rate:               873.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          5355.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8226.127 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 257554.735 ops/s
[info]                  ·gc.alloc.rate:               856.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          5231.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4103.187 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 257712.685 ops/s
[info]                  ·gc.alloc.rate:                   855.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              5226.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4102.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 256885.296 ops/s
[info]                  ·gc.alloc.rate:               851.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          5218.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4116.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 251518.384 ops/s
[info]                  ·gc.alloc.rate:               848.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          5311.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8411.617 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   256097.880 ±(99.9%) 9974.734 ops/s [Average]
[info]   (min, avg, max) = (251518.384, 256097.880, 257712.685), stdev = 2590.407
[info]   CI (99.9%): [246123.146, 266072.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   857.307 ±(99.9%) 37.725 MB/sec [Average]
[info]   (min, avg, max) = (848.808, 857.307, 873.955), stdev = 9.797
[info]   CI (99.9%): [819.581, 895.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5268.677 ±(99.9%) 237.060 B/op [Average]
[info]   (min, avg, max) = (5218.050, 5268.677, 5355.899), stdev = 61.564
[info]   CI (99.9%): [5031.617, 5505.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.363 ±(99.9%) 1416.300 MB/sec [Average]
[info]   (min, avg, max) = (671.514, 940.363, 1344.245), stdev = 367.809
[info]   CI (99.9%): [≈ 0, 2356.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5792.006 ±(99.9%) 8885.904 B/op [Average]
[info]   (min, avg, max) = (4102.961, 5792.006, 8411.617), stdev = 2307.641
[info]   CI (99.9%): [≈ 0, 14677.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.102 ±(99.9%) 0.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.102, 0.509), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 0.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2363.018 ops/s
[info] # Warmup Iteration   2: 12195.274 ops/s
[info] # Warmup Iteration   3: 13723.973 ops/s
[info] # Warmup Iteration   4: 13782.413 ops/s
[info] # Warmup Iteration   5: 13844.382 ops/s
[info] Iteration   1: 13854.380 ops/s
[info]                  ·gc.alloc.rate:                   2105.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              239166.275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228337.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 439.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 13942.914 ops/s
[info]                  ·gc.alloc.rate:                   2116.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              238929.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226107.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.144 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13963.661 ops/s
[info]                  ·gc.alloc.rate:               2107.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          237512.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225450.972 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 13697.896 ops/s
[info]                  ·gc.alloc.rate:                   2098.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              241152.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229904.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.392 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13844.869 ops/s
[info]                  ·gc.alloc.rate:                   2113.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              240207.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227826.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.366 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   13860.744 ±(99.9%) 404.573 ops/s [Average]
[info]   (min, avg, max) = (13697.896, 13860.744, 13963.661), stdev = 105.066
[info]   CI (99.9%): [13456.171, 14265.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2108.343 ±(99.9%) 26.918 MB/sec [Average]
[info]   (min, avg, max) = (2098.892, 2108.343, 2116.973), stdev = 6.991
[info]   CI (99.9%): [2081.425, 2135.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   239393.710 ±(99.9%) 5294.227 B/op [Average]
[info]   (min, avg, max) = (237512.619, 239393.710, 241152.692), stdev = 1374.894
[info]   CI (99.9%): [234099.484, 244687.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.790 ±(99.9%) 14.910 MB/sec [Average]
[info]   (min, avg, max) = (2000.340, 2003.790, 2010.110), stdev = 3.872
[info]   CI (99.9%): [1988.880, 2018.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   227525.409 ±(99.9%) 6868.005 B/op [Average]
[info]   (min, avg, max) = (225450.972, 227525.409, 229904.555), stdev = 1783.599
[info]   CI (99.9%): [220657.404, 234393.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.903 ±(99.9%) 6.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.903, 3.872), stdev = 1.679
[info]   CI (99.9%): [≈ 0, 7.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   102.548 ±(99.9%) 734.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.548, 439.839), stdev = 190.744
[info]   CI (99.9%): [≈ 0, 837.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7209.566 ops/s
[info] # Warmup Iteration   2: 30884.095 ops/s
[info] # Warmup Iteration   3: 32561.199 ops/s
[info] # Warmup Iteration   4: 32504.350 ops/s
[info] # Warmup Iteration   5: 32862.323 ops/s
[info] Iteration   1: 32706.944 ops/s
[info]                  ·gc.alloc.rate:                   2736.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              131678.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128856.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 32583.581 ops/s
[info]                  ·gc.alloc.rate:                   2739.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              132340.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129298.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 32875.031 ops/s
[info]                  ·gc.alloc.rate:                   2764.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              132358.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128409.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.976 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 33302.836 ops/s
[info]                  ·gc.alloc.rate:               2800.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          132319.910 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127105.368 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 33201.925 ops/s
[info]                  ·gc.alloc.rate:                   2792.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              132353.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127815.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.973 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   32934.063 ±(99.9%) 1195.637 ops/s [Average]
[info]   (min, avg, max) = (32583.581, 32934.063, 33302.836), stdev = 310.503
[info]   CI (99.9%): [31738.426, 34129.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2766.700 ±(99.9%) 112.261 MB/sec [Average]
[info]   (min, avg, max) = (2736.470, 2766.700, 2800.077), stdev = 29.154
[info]   CI (99.9%): [2654.439, 2878.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   132210.121 ±(99.9%) 1145.784 B/op [Average]
[info]   (min, avg, max) = (131678.506, 132210.121, 132358.121), stdev = 297.557
[info]   CI (99.9%): [131064.337, 133355.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2684.660 ±(99.9%) 32.065 MB/sec [Average]
[info]   (min, avg, max) = (2676.959, 2684.660, 2696.492), stdev = 8.327
[info]   CI (99.9%): [2652.594, 2716.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128296.977 ±(99.9%) 3323.344 B/op [Average]
[info]   (min, avg, max) = (127105.368, 128296.977, 129298.311), stdev = 863.062
[info]   CI (99.9%): [124973.632, 131620.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.792 ±(99.9%) 10.657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.792, 6.976), stdev = 2.768
[info]   CI (99.9%): [≈ 0, 13.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44803.373 ops/s
[info] # Warmup Iteration   2: 99965.978 ops/s
[info] # Warmup Iteration   3: 104869.496 ops/s
[info] # Warmup Iteration   4: 105687.415 ops/s
[info] # Warmup Iteration   5: 107164.773 ops/s
[info] Iteration   1: 107539.706 ops/s
[info]                  ·gc.alloc.rate:               1513.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          22151.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19595.360 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 106208.842 ops/s
[info]                  ·gc.alloc.rate:               1507.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          22338.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19861.002 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 106664.590 ops/s
[info]                  ·gc.alloc.rate:                   1514.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              22348.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19785.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54.673 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 106149.957 ops/s
[info]                  ·gc.alloc.rate:                   1494.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              22152.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19833.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.926 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 107321.375 ops/s
[info]                  ·gc.alloc.rate:               1535.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          22517.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29395.492 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   106776.894 ±(99.9%) 2440.445 ops/s [Average]
[info]   (min, avg, max) = (106149.957, 106776.894, 107539.706), stdev = 633.776
[info]   CI (99.9%): [104336.449, 109217.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1513.179 ±(99.9%) 57.433 MB/sec [Average]
[info]   (min, avg, max) = (1494.152, 1513.179, 1535.404), stdev = 14.915
[info]   CI (99.9%): [1455.746, 1570.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22301.645 ±(99.9%) 592.556 B/op [Average]
[info]   (min, avg, max) = (22151.738, 22301.645, 22517.356), stdev = 153.885
[info]   CI (99.9%): [21709.088, 22894.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.569 ±(99.9%) 1144.832 MB/sec [Average]
[info]   (min, avg, max) = (1337.717, 1472.569, 2004.407), stdev = 297.309
[info]   CI (99.9%): [327.736, 2617.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21694.103 ±(99.9%) 16582.630 B/op [Average]
[info]   (min, avg, max) = (19595.360, 21694.103, 29395.492), stdev = 4306.456
[info]   CI (99.9%): [5111.472, 38276.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.706), stdev = 1.651
[info]   CI (99.9%): [≈ 0, 7.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.120 ±(99.9%) 93.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.120, 54.673), stdev = 24.350
[info]   CI (99.9%): [≈ 0, 104.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108732.988 ops/s
[info] # Warmup Iteration   2: 172149.965 ops/s
[info] # Warmup Iteration   3: 176466.100 ops/s
[info] # Warmup Iteration   4: 179276.166 ops/s
[info] # Warmup Iteration   5: 178848.238 ops/s
[info] Iteration   1: 179237.156 ops/s
[info]                  ·gc.alloc.rate:               588.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          5164.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5890.416 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 179131.546 ops/s
[info]                  ·gc.alloc.rate:               594.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          5221.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5893.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 179578.783 ops/s
[info]                  ·gc.alloc.rate:                   594.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              5205.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5885.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 175021.532 ops/s
[info]                  ·gc.alloc.rate:      557.887 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 179317.461 ops/s
[info]                  ·gc.alloc.rate:               591.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          5190.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5893.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   178457.296 ±(99.9%) 7423.080 ops/s [Average]
[info]   (min, avg, max) = (175021.532, 178457.296, 179578.783), stdev = 1927.750
[info]   CI (99.9%): [171034.216, 185880.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.163 ±(99.9%) 59.474 MB/sec [Average]
[info]   (min, avg, max) = (557.887, 585.163, 594.318), stdev = 15.445
[info]   CI (99.9%): [525.689, 644.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5159.531 ±(99.9%) 319.187 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5159.531, 5221.059), stdev = 82.892
[info]   CI (99.9%): [4840.343, 5478.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.966 ±(99.9%) 1155.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.966, 671.595), stdev = 300.173
[info]   CI (99.9%): [≈ 0, 1692.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4712.579 ±(99.9%) 10144.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4712.579, 5893.836), stdev = 2634.414
[info]   CI (99.9%): [≈ 0, 14856.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.547), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112153.367 ops/s
[info] # Warmup Iteration   2: 173563.638 ops/s
[info] # Warmup Iteration   3: 194795.763 ops/s
[info] # Warmup Iteration   4: 194750.343 ops/s
[info] # Warmup Iteration   5: 194844.513 ops/s
[info] Iteration   1: 194769.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194897.435 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 195001.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 194865.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194987.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   194904.277 ±(99.9%) 365.545 ops/s [Average]
[info]   (min, avg, max) = (194769.569, 194904.277, 195001.772), stdev = 94.931
[info]   CI (99.9%): [194538.732, 195269.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13383.443 ops/s
[info] # Warmup Iteration   2: 44788.847 ops/s
[info] # Warmup Iteration   3: 47967.480 ops/s
[info] # Warmup Iteration   4: 48851.650 ops/s
[info] # Warmup Iteration   5: 49472.289 ops/s
[info] Iteration   1: 48625.359 ops/s
[info]                  ·gc.alloc.rate:                   3431.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              111083.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108279.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 48967.704 ops/s
[info]                  ·gc.alloc.rate:                   3471.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              111545.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3355.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107822.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.669 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 49502.320 ops/s
[info]                  ·gc.alloc.rate:               3507.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          111526.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107020.027 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 48546.129 ops/s
[info]                  ·gc.alloc.rate:               3442.960 MB/sec
[info]                  ·gc.alloc.rate.norm:          111626.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3377.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 109505.172 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 49463.217 ops/s
[info]                  ·gc.alloc.rate:               3506.146 MB/sec
[info]                  ·gc.alloc.rate.norm:          111564.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 107748.703 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   49020.946 ±(99.9%) 1735.035 ops/s [Average]
[info]   (min, avg, max) = (48546.129, 49020.946, 49502.320), stdev = 450.583
[info]   CI (99.9%): [47285.911, 50755.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3471.987 ±(99.9%) 134.805 MB/sec [Average]
[info]   (min, avg, max) = (3431.942, 3471.987, 3507.881), stdev = 35.008
[info]   CI (99.9%): [3337.182, 3606.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111469.144 ±(99.9%) 843.382 B/op [Average]
[info]   (min, avg, max) = (111083.115, 111469.144, 111626.190), stdev = 219.024
[info]   CI (99.9%): [110625.762, 112312.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3366.079 ±(99.9%) 63.485 MB/sec [Average]
[info]   (min, avg, max) = (3345.318, 3366.079, 3386.226), stdev = 16.487
[info]   CI (99.9%): [3302.594, 3429.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108075.236 ±(99.9%) 3534.479 B/op [Average]
[info]   (min, avg, max) = (107020.027, 108075.236, 109505.172), stdev = 917.893
[info]   CI (99.9%): [104540.756, 111609.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 1.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 0.674), stdev = 0.368
[info]   CI (99.9%): [≈ 0, 1.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5256.614 ops/s
[info] # Warmup Iteration   2: 23235.642 ops/s
[info] # Warmup Iteration   3: 26109.673 ops/s
[info] # Warmup Iteration   4: 26002.504 ops/s
[info] # Warmup Iteration   5: 25002.402 ops/s
[info] Iteration   1: 26013.596 ops/s
[info]                  ·gc.alloc.rate:                   1407.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              85130.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81228.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 26152.361 ops/s
[info]                  ·gc.alloc.rate:                   1396.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              84017.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80833.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25599.003 ops/s
[info]                  ·gc.alloc.rate:                   1376.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              84648.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82627.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26287.780 ops/s
[info]                  ·gc.alloc.rate:                   1427.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              85466.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80362.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26236.349 ops/s
[info]                  ·gc.alloc.rate:               1422.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          85344.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80355.397 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26057.818 ±(99.9%) 1065.315 ops/s [Average]
[info]   (min, avg, max) = (25599.003, 26057.818, 26287.780), stdev = 276.659
[info]   CI (99.9%): [24992.502, 27123.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1406.104 ±(99.9%) 79.082 MB/sec [Average]
[info]   (min, avg, max) = (1376.883, 1406.104, 1427.558), stdev = 20.537
[info]   CI (99.9%): [1327.022, 1485.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84921.595 ±(99.9%) 2287.703 B/op [Average]
[info]   (min, avg, max) = (84017.240, 84921.595, 85466.902), stdev = 594.109
[info]   CI (99.9%): [82633.892, 87209.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.361 ±(99.9%) 6.595 MB/sec [Average]
[info]   (min, avg, max) = (1339.538, 1342.361, 1343.998), stdev = 1.713
[info]   CI (99.9%): [1335.766, 1348.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   81081.422 ±(99.9%) 3610.482 B/op [Average]
[info]   (min, avg, max) = (80355.397, 81081.422, 82627.117), stdev = 937.631
[info]   CI (99.9%): [77470.940, 84691.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.977), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.077 ±(99.9%) 303.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.077, 183.019), stdev = 78.904
[info]   CI (99.9%): [≈ 0, 350.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5940.886 ops/s
[info] # Warmup Iteration   2: 27731.267 ops/s
[info] # Warmup Iteration   3: 29106.344 ops/s
[info] # Warmup Iteration   4: 29348.314 ops/s
[info] # Warmup Iteration   5: 28962.412 ops/s
[info] Iteration   1: 29485.761 ops/s
[info]                  ·gc.alloc.rate:                   1189.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              63511.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35698.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.222 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29419.114 ops/s
[info]                  ·gc.alloc.rate:                   1199.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              64182.077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71573.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 29191.071 ops/s
[info]                  ·gc.alloc.rate:               1191.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          64256.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72168.835 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 28949.695 ops/s
[info]                  ·gc.alloc.rate:                   1187.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              64542.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72768.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 28808.665 ops/s
[info]                  ·gc.alloc.rate:                   1157.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              63249.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36609.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   29170.861 ±(99.9%) 1124.790 ops/s [Average]
[info]   (min, avg, max) = (28808.665, 29170.861, 29485.761), stdev = 292.104
[info]   CI (99.9%): [28046.071, 30295.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1185.346 ±(99.9%) 62.018 MB/sec [Average]
[info]   (min, avg, max) = (1157.728, 1185.346, 1199.753), stdev = 16.106
[info]   CI (99.9%): [1123.327, 1247.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   63948.547 ±(99.9%) 2093.106 B/op [Average]
[info]   (min, avg, max) = (63249.503, 63948.547, 64542.944), stdev = 543.573
[info]   CI (99.9%): [61855.441, 66041.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.863 ±(99.9%) 1411.046 MB/sec [Average]
[info]   (min, avg, max) = (668.782, 1070.863, 1338.906), stdev = 366.444
[info]   CI (99.9%): [≈ 0, 2481.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   57763.785 ±(99.9%) 75989.741 B/op [Average]
[info]   (min, avg, max) = (35698.020, 57763.785, 72768.526), stdev = 19734.294
[info]   CI (99.9%): [≈ 0, 133753.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 5.833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 3.516), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.161 ±(99.9%) 317.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.161, 191.103), stdev = 82.339
[info]   CI (99.9%): [≈ 0, 363.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268856.804 ops/s
[info] # Warmup Iteration   2: 599404.398 ops/s
[info] # Warmup Iteration   3: 645419.624 ops/s
[info] # Warmup Iteration   4: 646580.875 ops/s
[info] # Warmup Iteration   5: 648248.174 ops/s
[info] Iteration   1: 647186.814 ops/s
[info]                  ·gc.alloc.rate:               1751.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          4254.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4894.495 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 634409.277 ops/s
[info]                  ·gc.alloc.rate:                   1692.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3338.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.972 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 641146.871 ops/s
[info]                  ·gc.alloc.rate:                   1721.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              4224.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3296.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 644645.927 ops/s
[info]                  ·gc.alloc.rate:                   1745.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              4260.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4913.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 647985.160 ops/s
[info]                  ·gc.alloc.rate:                   1755.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              4258.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4882.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   643074.810 ±(99.9%) 21291.739 ops/s [Average]
[info]   (min, avg, max) = (634409.277, 643074.810, 647985.160), stdev = 5529.397
[info]   CI (99.9%): [621783.071, 664366.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1732.931 ±(99.9%) 101.484 MB/sec [Average]
[info]   (min, avg, max) = (1692.170, 1732.931, 1755.053), stdev = 26.355
[info]   CI (99.9%): [1631.446, 1834.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4238.990 ±(99.9%) 105.799 B/op [Average]
[info]   (min, avg, max) = (4197.264, 4238.990, 4260.509), stdev = 27.476
[info]   CI (99.9%): [4133.191, 4344.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1745.720 ±(99.9%) 1410.588 MB/sec [Average]
[info]   (min, avg, max) = (1342.976, 1745.720, 2014.987), stdev = 366.325
[info]   CI (99.9%): [335.133, 3156.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4265.092 ±(99.9%) 3331.795 B/op [Average]
[info]   (min, avg, max) = (3296.571, 4265.092, 4913.180), stdev = 865.257
[info]   CI (99.9%): [933.297, 7596.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.811), stdev = 1.243
[info]   CI (99.9%): [≈ 0, 5.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.455 ±(99.9%) 11.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.455, 6.972), stdev = 3.085
[info]   CI (99.9%): [≈ 0, 13.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1317.293 ops/s
[info] # Warmup Iteration   2: 19353.040 ops/s
[info] # Warmup Iteration   3: 24045.479 ops/s
[info] # Warmup Iteration   4: 24205.996 ops/s
[info] # Warmup Iteration   5: 24197.966 ops/s
[info] Iteration   1: 24157.363 ops/s
[info]                  ·gc.alloc.rate:                   1800.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              117257.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87077.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23749.702 ops/s
[info]                  ·gc.alloc.rate:                   1792.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              118750.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133091.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96.608 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 24232.918 ops/s
[info]                  ·gc.alloc.rate:                   1817.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              118057.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130704.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24269.577 ops/s
[info]                  ·gc.alloc.rate:                   1817.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              117879.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86999.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24224.984 ops/s
[info]                  ·gc.alloc.rate:               1815.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          117976.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 130828.563 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   24126.909 ±(99.9%) 826.821 ops/s [Average]
[info]   (min, avg, max) = (23749.702, 24126.909, 24269.577), stdev = 214.723
[info]   CI (99.9%): [23300.088, 24953.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1808.812 ±(99.9%) 45.454 MB/sec [Average]
[info]   (min, avg, max) = (1792.081, 1808.812, 1817.835), stdev = 11.804
[info]   CI (99.9%): [1763.359, 1854.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   117984.258 ±(99.9%) 2047.475 B/op [Average]
[info]   (min, avg, max) = (117257.969, 117984.258, 118750.382), stdev = 531.723
[info]   CI (99.9%): [115936.782, 120031.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.684 ±(99.9%) 1417.796 MB/sec [Average]
[info]   (min, avg, max) = (1337.152, 1742.684, 2013.639), stdev = 368.197
[info]   CI (99.9%): [324.889, 3160.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113740.332 ±(99.9%) 93931.524 B/op [Average]
[info]   (min, avg, max) = (86999.755, 113740.332, 133091.548), stdev = 24393.718
[info]   CI (99.9%): [19808.809, 207671.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.387 ±(99.9%) 2.410 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.458), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   25.541 ±(99.9%) 159.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.541, 96.608), stdev = 41.476
[info]   CI (99.9%): [≈ 0, 185.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23313.076 ops/s
[info] # Warmup Iteration   2: 65407.120 ops/s
[info] # Warmup Iteration   3: 69940.620 ops/s
[info] # Warmup Iteration   4: 73990.153 ops/s
[info] # Warmup Iteration   5: 72445.956 ops/s
[info] Iteration   1: 73110.402 ops/s
[info]                  ·gc.alloc.rate:                   1947.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              41932.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43372.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 73139.915 ops/s
[info]                  ·gc.alloc.rate:                   1934.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              41614.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43297.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 74450.519 ops/s
[info]                  ·gc.alloc.rate:                   1967.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              41594.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28304.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 74512.027 ops/s
[info]                  ·gc.alloc.rate:                   1982.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              41866.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42387.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 74677.144 ops/s
[info]                  ·gc.alloc.rate:                   2000.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              42168.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42336.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   73978.001 ±(99.9%) 3015.065 ops/s [Average]
[info]   (min, avg, max) = (73110.402, 73978.001, 74677.144), stdev = 783.003
[info]   CI (99.9%): [70962.937, 76993.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1966.606 ±(99.9%) 102.074 MB/sec [Average]
[info]   (min, avg, max) = (1934.222, 1966.606, 2000.801), stdev = 26.508
[info]   CI (99.9%): [1864.532, 2068.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41835.251 ±(99.9%) 919.643 B/op [Average]
[info]   (min, avg, max) = (41594.986, 41835.251, 42168.547), stdev = 238.828
[info]   CI (99.9%): [40915.609, 42754.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.396 ±(99.9%) 1156.553 MB/sec [Average]
[info]   (min, avg, max) = (1339.137, 1876.396, 2014.818), stdev = 300.353
[info]   CI (99.9%): [719.843, 3032.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   39939.557 ±(99.9%) 25116.434 B/op [Average]
[info]   (min, avg, max) = (28304.117, 39939.557, 43372.786), stdev = 6522.658
[info]   CI (99.9%): [14823.124, 65055.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.681 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 2.873), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.742 ±(99.9%) 100.800 B/op [Average]
[info]   (min, avg, max) = (0.439, 16.742, 61.843), stdev = 26.177
[info]   CI (99.9%): [≈ 0, 117.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61822.523 ops/s
[info] # Warmup Iteration   2: 174036.231 ops/s
[info] # Warmup Iteration   3: 181414.845 ops/s
[info] # Warmup Iteration   4: 185126.285 ops/s
[info] # Warmup Iteration   5: 182318.318 ops/s
[info] Iteration   1: 184682.401 ops/s
[info]                  ·gc.alloc.rate:                   2066.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              17608.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17137.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 183983.205 ops/s
[info]                  ·gc.alloc.rate:                   2070.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              17708.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17158.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 184432.459 ops/s
[info]                  ·gc.alloc.rate:               2050.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          17496.678 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17104.411 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 185959.498 ops/s
[info]                  ·gc.alloc.rate:                   2094.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              17723.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16986.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 181072.190 ops/s
[info]                  ·gc.alloc.rate:               2040.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          17737.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17474.723 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   184025.951 ±(99.9%) 6958.198 ops/s [Average]
[info]   (min, avg, max) = (181072.190, 184025.951, 185959.498), stdev = 1807.022
[info]   CI (99.9%): [177067.753, 190984.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2064.325 ±(99.9%) 78.813 MB/sec [Average]
[info]   (min, avg, max) = (2040.577, 2064.325, 2094.017), stdev = 20.467
[info]   CI (99.9%): [1985.512, 2143.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17654.752 ±(99.9%) 391.668 B/op [Average]
[info]   (min, avg, max) = (17496.678, 17654.752, 17737.168), stdev = 101.715
[info]   CI (99.9%): [17263.084, 18046.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.776 ±(99.9%) 10.865 MB/sec [Average]
[info]   (min, avg, max) = (2004.523, 2007.776, 2011.015), stdev = 2.822
[info]   CI (99.9%): [1996.911, 2018.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17172.322 ±(99.9%) 699.186 B/op [Average]
[info]   (min, avg, max) = (16986.808, 17172.322, 17474.723), stdev = 181.576
[info]   CI (99.9%): [16473.136, 17871.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 6.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.601), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.209 ±(99.9%) 52.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.209, 30.689), stdev = 13.685
[info]   CI (99.9%): [≈ 0, 58.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 919657.496 ops/s
[info] # Warmup Iteration   2: 1413181.568 ops/s
[info] # Warmup Iteration   3: 1503690.889 ops/s
[info] # Warmup Iteration   4: 1513634.209 ops/s
[info] # Warmup Iteration   5: 1516437.041 ops/s
[info] Iteration   1: 1517304.876 ops/s
[info]                  ·gc.alloc.rate:               1273.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.483 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1501893.969 ops/s
[info]                  ·gc.alloc.rate:                   1272.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              1333.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1498369.700 ops/s
[info]                  ·gc.alloc.rate:               1282.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          1346.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1412.015 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1521927.210 ops/s
[info]                  ·gc.alloc.rate:                   1301.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1345.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1391.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1510524.706 ops/s
[info]                  ·gc.alloc.rate:                   1305.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1399.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1510004.092 ±(99.9%) 38355.313 ops/s [Average]
[info]   (min, avg, max) = (1498369.700, 1510004.092, 1521927.210), stdev = 9960.753
[info]   CI (99.9%): [1471648.779, 1548359.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1286.965 ±(99.9%) 59.264 MB/sec [Average]
[info]   (min, avg, max) = (1272.946, 1286.965, 1305.227), stdev = 15.391
[info]   CI (99.9%): [1227.701, 1346.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1341.293 ±(99.9%) 57.544 B/op [Average]
[info]   (min, avg, max) = (1320.497, 1341.293, 1359.962), stdev = 14.944
[info]   CI (99.9%): [1283.749, 1398.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.808 ±(99.9%) 1158.694 MB/sec [Average]
[info]   (min, avg, max) = (671.528, 1209.808, 1345.547), stdev = 300.909
[info]   CI (99.9%): [51.113, 2368.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1261.591 ±(99.9%) 1216.834 B/op [Average]
[info]   (min, avg, max) = (696.483, 1261.591, 1412.015), stdev = 316.008
[info]   CI (99.9%): [44.757, 2478.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.206), stdev = 1.427
[info]   CI (99.9%): [≈ 0, 6.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.676 ±(99.9%) 5.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.315), stdev = 1.475
[info]   CI (99.9%): [≈ 0, 6.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1112238.772 ops/s
[info] # Warmup Iteration   2: 1685909.066 ops/s
[info] # Warmup Iteration   3: 1763541.076 ops/s
[info] # Warmup Iteration   4: 1758858.966 ops/s
[info] # Warmup Iteration   5: 1765641.724 ops/s
[info] Iteration   1: 1769033.524 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1727069.202 ops/s
[info]                  ·gc.alloc.rate:      7.621 MB/sec
[info]                  ·gc.alloc.rate.norm: 6.945 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1763637.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1763959.055 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1762978.791 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1757335.668 ±(99.9%) 65809.108 ops/s [Average]
[info]   (min, avg, max) = (1727069.202, 1757335.668, 1769033.524), stdev = 17090.416
[info]   CI (99.9%): [1691526.559, 1823144.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.524 ±(99.9%) 13.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.524, 7.621), stdev = 3.408
[info]   CI (99.9%): [≈ 0, 14.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.389 ±(99.9%) 11.959 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.389, 6.945), stdev = 3.106
[info]   CI (99.9%): [≈ 0, 13.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36237.383 ops/s
[info] # Warmup Iteration   2: 143149.926 ops/s
[info] # Warmup Iteration   3: 151426.677 ops/s
[info] # Warmup Iteration   4: 153583.991 ops/s
[info] # Warmup Iteration   5: 153661.709 ops/s
[info] Iteration   1: 149954.677 ops/s
[info]                  ·gc.alloc.rate:                   1938.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              20351.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21075.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 152512.867 ops/s
[info]                  ·gc.alloc.rate:                   1974.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              20371.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20702.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 153174.191 ops/s
[info]                  ·gc.alloc.rate:                   1986.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              20412.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20575.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.428 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 154788.721 ops/s
[info]                  ·gc.alloc.rate:               2009.796 MB/sec
[info]                  ·gc.alloc.rate.norm:          20435.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20360.041 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 154464.504 ops/s
[info]                  ·gc.alloc.rate:                   2020.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              20591.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20440.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   152978.992 ±(99.9%) 7427.781 ops/s [Average]
[info]   (min, avg, max) = (149954.677, 152978.992, 154788.721), stdev = 1928.971
[info]   CI (99.9%): [145551.211, 160406.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1986.115 ±(99.9%) 123.794 MB/sec [Average]
[info]   (min, avg, max) = (1938.987, 1986.115, 2020.911), stdev = 32.149
[info]   CI (99.9%): [1862.321, 2109.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20432.356 ±(99.9%) 364.585 B/op [Average]
[info]   (min, avg, max) = (20351.877, 20432.356, 20591.183), stdev = 94.681
[info]   CI (99.9%): [20067.771, 20796.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2005.075 ±(99.9%) 9.544 MB/sec [Average]
[info]   (min, avg, max) = (2002.393, 2005.075, 2007.960), stdev = 2.478
[info]   CI (99.9%): [1995.531, 2014.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20630.908 ±(99.9%) 1081.819 B/op [Average]
[info]   (min, avg, max) = (20360.041, 20630.908, 21075.833), stdev = 280.945
[info]   CI (99.9%): [19549.090, 21712.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 5.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.393), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.625 ±(99.9%) 59.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.625, 35.613), stdev = 15.360
[info]   CI (99.9%): [≈ 0, 67.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7969.797 ops/s
[info] # Warmup Iteration   2: 38199.003 ops/s
[info] # Warmup Iteration   3: 42818.799 ops/s
[info] # Warmup Iteration   4: 41965.684 ops/s
[info] # Warmup Iteration   5: 43176.936 ops/s
[info] Iteration   1: 43335.218 ops/s
[info]                  ·gc.alloc.rate:                   1586.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              57606.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48579.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42312.254 ops/s
[info]                  ·gc.alloc.rate:               1546.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          57511.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49803.581 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 42046.035 ops/s
[info]                  ·gc.alloc.rate:                   1560.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              58427.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75156.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42253.670 ops/s
[info]                  ·gc.alloc.rate:                   1555.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              57936.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49724.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.775 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43424.351 ops/s
[info]                  ·gc.alloc.rate:                   1609.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              58320.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48337.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   42674.306 ±(99.9%) 2511.872 ops/s [Average]
[info]   (min, avg, max) = (42046.035, 42674.306, 43424.351), stdev = 652.325
[info]   CI (99.9%): [40162.434, 45186.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1571.608 ±(99.9%) 98.667 MB/sec [Average]
[info]   (min, avg, max) = (1546.500, 1571.608, 1609.115), stdev = 25.624
[info]   CI (99.9%): [1472.941, 1670.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57960.370 ±(99.9%) 1581.557 B/op [Average]
[info]   (min, avg, max) = (57511.269, 57960.370, 58427.059), stdev = 410.725
[info]   CI (99.9%): [56378.813, 59541.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.650 ±(99.9%) 1156.302 MB/sec [Average]
[info]   (min, avg, max) = (1333.674, 1470.650, 2007.807), stdev = 300.288
[info]   CI (99.9%): [314.348, 2626.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54320.310 ±(99.9%) 44923.272 B/op [Average]
[info]   (min, avg, max) = (48337.497, 54320.310, 75156.550), stdev = 11666.431
[info]   CI (99.9%): [9397.038, 99243.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.205), stdev = 1.874
[info]   CI (99.9%): [≈ 0, 8.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.939 ±(99.9%) 270.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.939, 157.407), stdev = 70.140
[info]   CI (99.9%): [≈ 0, 302.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366682.165 ops/s
[info] # Warmup Iteration   2: 744744.797 ops/s
[info] # Warmup Iteration   3: 782758.376 ops/s
[info] # Warmup Iteration   4: 786795.547 ops/s
[info] # Warmup Iteration   5: 783246.366 ops/s
[info] Iteration   1: 790713.548 ops/s
[info]                  ·gc.alloc.rate:                   1571.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              3128.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2675.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 794257.077 ops/s
[info]                  ·gc.alloc.rate:                   1584.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              3140.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2666.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 809139.022 ops/s
[info]                  ·gc.alloc.rate:                   1608.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3128.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2614.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 790918.759 ops/s
[info]                  ·gc.alloc.rate:               1572.659 MB/sec
[info]                  ·gc.alloc.rate.norm:          3129.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2670.918 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 792075.106 ops/s
[info]                  ·gc.alloc.rate:               1599.598 MB/sec
[info]                  ·gc.alloc.rate.norm:          3178.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3998.652 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   795420.702 ±(99.9%) 30022.933 ops/s [Average]
[info]   (min, avg, max) = (790713.548, 795420.702, 809139.022), stdev = 7796.860
[info]   CI (99.9%): [765397.770, 825443.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1587.494 ±(99.9%) 62.685 MB/sec [Average]
[info]   (min, avg, max) = (1571.813, 1587.494, 1608.491), stdev = 16.279
[info]   CI (99.9%): [1524.809, 1650.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3141.028 ±(99.9%) 82.169 B/op [Average]
[info]   (min, avg, max) = (3128.610, 3141.028, 3178.176), stdev = 21.339
[info]   CI (99.9%): [3058.859, 3223.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.816 ±(99.9%) 1151.063 MB/sec [Average]
[info]   (min, avg, max) = (1342.214, 1477.816, 2012.549), stdev = 298.927
[info]   CI (99.9%): [326.753, 2628.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2925.281 ±(99.9%) 2312.445 B/op [Average]
[info]   (min, avg, max) = (2614.780, 2925.281, 3998.652), stdev = 600.535
[info]   CI (99.9%): [612.836, 5237.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 4.537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.616, 2.707), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.218 ±(99.9%) 8.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.218, 5.363), stdev = 2.335
[info]   CI (99.9%): [≈ 0, 10.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2331.270 ops/s
[info] # Warmup Iteration   2: 27261.120 ops/s
[info] # Warmup Iteration   3: 32462.033 ops/s
[info] # Warmup Iteration   4: 32495.908 ops/s
[info] # Warmup Iteration   5: 32098.980 ops/s
[info] Iteration   1: 32528.229 ops/s
[info]                  ·gc.alloc.rate:                   2251.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              108926.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97096.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 31998.019 ops/s
[info]                  ·gc.alloc.rate:                   2238.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              110078.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98930.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 32383.765 ops/s
[info]                  ·gc.alloc.rate:                   2241.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              108890.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97997.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 32415.924 ops/s
[info]                  ·gc.alloc.rate:                   2297.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              111520.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130857.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 32361.413 ops/s
[info]                  ·gc.alloc.rate:               2266.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          110199.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98546.966 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32337.470 ±(99.9%) 771.301 ops/s [Average]
[info]   (min, avg, max) = (31998.019, 32337.470, 32528.229), stdev = 200.304
[info]   CI (99.9%): [31566.169, 33108.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2258.904 ±(99.9%) 92.809 MB/sec [Average]
[info]   (min, avg, max) = (2238.235, 2258.904, 2297.307), stdev = 24.102
[info]   CI (99.9%): [2166.095, 2351.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109923.245 ±(99.9%) 4179.247 B/op [Average]
[info]   (min, avg, max) = (108890.948, 109923.245, 111520.724), stdev = 1085.337
[info]   CI (99.9%): [105743.998, 114102.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2151.562 ±(99.9%) 1171.525 MB/sec [Average]
[info]   (min, avg, max) = (2006.882, 2151.562, 2695.646), stdev = 304.241
[info]   CI (99.9%): [980.037, 3323.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104685.820 ±(99.9%) 56399.492 B/op [Average]
[info]   (min, avg, max) = (97096.339, 104685.820, 130857.731), stdev = 14646.769
[info]   CI (99.9%): [48286.328, 161085.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.747 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.458), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.448 ±(99.9%) 36.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.448, 22.159), stdev = 9.380
[info]   CI (99.9%): [≈ 0, 41.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145756.639 ops/s
[info] # Warmup Iteration   2: 319135.475 ops/s
[info] # Warmup Iteration   3: 337428.536 ops/s
[info] # Warmup Iteration   4: 341109.131 ops/s
[info] # Warmup Iteration   5: 331330.145 ops/s
[info] Iteration   1: 332883.721 ops/s
[info]                  ·gc.alloc.rate:               1613.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          7631.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6332.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 342962.554 ops/s
[info]                  ·gc.alloc.rate:                   1663.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              7633.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6148.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 343668.062 ops/s
[info]                  ·gc.alloc.rate:                   1692.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              7751.962 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9195.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.669 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 339677.499 ops/s
[info]                  ·gc.alloc.rate:               1658.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          7683.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6191.789 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 342967.106 ops/s
[info]                  ·gc.alloc.rate:               1689.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          7754.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9198.437 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   340431.788 ±(99.9%) 17311.669 ops/s [Average]
[info]   (min, avg, max) = (332883.721, 340431.788, 343668.062), stdev = 4495.785
[info]   CI (99.9%): [323120.120, 357743.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1663.778 ±(99.9%) 122.219 MB/sec [Average]
[info]   (min, avg, max) = (1613.928, 1663.778, 1692.830), stdev = 31.740
[info]   CI (99.9%): [1541.559, 1785.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7690.876 ±(99.9%) 233.090 B/op [Average]
[info]   (min, avg, max) = (7631.135, 7690.876, 7754.243), stdev = 60.533
[info]   CI (99.9%): [7457.786, 7923.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605.683 ±(99.9%) 1407.964 MB/sec [Average]
[info]   (min, avg, max) = (1336.584, 1605.683, 2008.002), stdev = 365.644
[info]   CI (99.9%): [197.720, 3013.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7413.276 ±(99.9%) 6274.881 B/op [Average]
[info]   (min, avg, max) = (6148.818, 7413.276, 9198.437), stdev = 1629.567
[info]   CI (99.9%): [1138.395, 13688.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.186), stdev = 1.383
[info]   CI (99.9%): [≈ 0, 6.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.457 ±(99.9%) 24.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.457, 14.615), stdev = 6.344
[info]   CI (99.9%): [≈ 0, 27.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1092645.940 ops/s
[info] # Warmup Iteration   2: 1732567.435 ops/s
[info] # Warmup Iteration   3: 1913829.369 ops/s
[info] # Warmup Iteration   4: 1973633.277 ops/s
[info] # Warmup Iteration   5: 1977476.983 ops/s
[info] Iteration   1: 1964468.846 ops/s
[info]                  ·gc.alloc.rate:               1166.426 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.513 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 538.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1974289.349 ops/s
[info]                  ·gc.alloc.rate:               1193.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1071.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1969799.068 ops/s
[info]                  ·gc.alloc.rate:                   1180.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1074.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1911406.761 ops/s
[info]                  ·gc.alloc.rate:                   1156.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1961391.612 ops/s
[info]                  ·gc.alloc.rate:                   1175.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     539.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1956271.127 ±(99.9%) 98434.518 ops/s [Average]
[info]   (min, avg, max) = (1911406.761, 1956271.127, 1974289.349), stdev = 25563.132
[info]   CI (99.9%): [1857836.609, 2054705.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1174.340 ±(99.9%) 53.364 MB/sec [Average]
[info]   (min, avg, max) = (1156.773, 1174.340, 1193.408), stdev = 13.859
[info]   CI (99.9%): [1120.976, 1227.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   944.816 ±(99.9%) 28.280 B/op [Average]
[info]   (min, avg, max) = (934.513, 944.816, 952.498), stdev = 7.344
[info]   CI (99.9%): [916.536, 973.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.828 ±(99.9%) 1418.452 MB/sec [Average]
[info]   (min, avg, max) = (671.799, 1075.828, 1345.640), stdev = 368.367
[info]   CI (99.9%): [≈ 0, 2494.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   866.412 ±(99.9%) 1152.047 B/op [Average]
[info]   (min, avg, max) = (538.229, 866.412, 1108.013), stdev = 299.183
[info]   CI (99.9%): [≈ 0, 2018.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.665), stdev = 1.152
[info]   CI (99.9%): [≈ 0, 5.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.529 ±(99.9%) 3.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.529, 2.194), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1486057.516 ops/s
[info] # Warmup Iteration   2: 2064680.287 ops/s
[info] # Warmup Iteration   3: 2243604.732 ops/s
[info] # Warmup Iteration   4: 2250515.055 ops/s
[info] # Warmup Iteration   5: 2248567.955 ops/s
[info] Iteration   1: 2250601.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2248784.232 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2249161.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2248139.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2247588.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2248855.175 ±(99.9%) 4417.356 ops/s [Average]
[info]   (min, avg, max) = (2247588.977, 2248855.175, 2250601.551), stdev = 1147.173
[info]   CI (99.9%): [2244437.818, 2253272.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67597.755 ops/s
[info] # Warmup Iteration   2: 222751.718 ops/s
[info] # Warmup Iteration   3: 244979.172 ops/s
[info] # Warmup Iteration   4: 247228.889 ops/s
[info] # Warmup Iteration   5: 244492.017 ops/s
[info] Iteration   1: 246574.192 ops/s
[info]                  ·gc.alloc.rate:                   1648.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              10521.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12798.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 247506.175 ops/s
[info]                  ·gc.alloc.rate:                   1655.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              10528.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8509.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 249584.793 ops/s
[info]                  ·gc.alloc.rate:                   1649.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              10400.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8430.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 243065.939 ops/s
[info]                  ·gc.alloc.rate:                   1651.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              10692.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12956.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 244756.506 ops/s
[info]                  ·gc.alloc.rate:                   1621.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              10425.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8575.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   246297.521 ±(99.9%) 9657.634 ops/s [Average]
[info]   (min, avg, max) = (243065.939, 246297.521, 249584.793), stdev = 2508.057
[info]   CI (99.9%): [236639.887, 255955.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1645.322 ±(99.9%) 52.182 MB/sec [Average]
[info]   (min, avg, max) = (1621.628, 1645.322, 1655.805), stdev = 13.552
[info]   CI (99.9%): [1593.140, 1697.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10513.742 ±(99.9%) 441.981 B/op [Average]
[info]   (min, avg, max) = (10400.746, 10513.742, 10692.314), stdev = 114.781
[info]   CI (99.9%): [10071.761, 10955.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.092 ±(99.9%) 1406.363 MB/sec [Average]
[info]   (min, avg, max) = (1333.875, 1603.092, 2005.084), stdev = 365.228
[info]   CI (99.9%): [196.728, 3009.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10254.284 ±(99.9%) 9226.218 B/op [Average]
[info]   (min, avg, max) = (8430.715, 10254.284, 12956.991), stdev = 2396.020
[info]   CI (99.9%): [1028.065, 19480.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 5.853 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.837, 3.518), stdev = 1.520
[info]   CI (99.9%): [≈ 0, 6.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.316 ±(99.9%) 37.219 B/op [Average]
[info]   (min, avg, max) = (0.133, 5.316, 22.370), stdev = 9.666
[info]   CI (99.9%): [≈ 0, 42.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16474.510 ops/s
[info] # Warmup Iteration   2: 66354.852 ops/s
[info] # Warmup Iteration   3: 68283.490 ops/s
[info] # Warmup Iteration   4: 72539.014 ops/s
[info] # Warmup Iteration   5: 71980.091 ops/s
[info] Iteration   1: 72229.221 ops/s
[info]                  ·gc.alloc.rate:                   1582.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              34478.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29234.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.454 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 71666.643 ops/s
[info]                  ·gc.alloc.rate:               1579.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          34689.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29492.846 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 71798.707 ops/s
[info]                  ·gc.alloc.rate:                   1595.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              34980.495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44126.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 72562.526 ops/s
[info]                  ·gc.alloc.rate:                   1599.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              34688.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29040.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72139.749 ops/s
[info]                  ·gc.alloc.rate:                   1587.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              34642.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29183.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72079.369 ±(99.9%) 1373.141 ops/s [Average]
[info]   (min, avg, max) = (71666.643, 72079.369, 72562.526), stdev = 356.600
[info]   CI (99.9%): [70706.228, 73452.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1589.166 ±(99.9%) 32.307 MB/sec [Average]
[info]   (min, avg, max) = (1579.778, 1589.166, 1599.509), stdev = 8.390
[info]   CI (99.9%): [1556.859, 1621.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34695.982 ±(99.9%) 696.820 B/op [Average]
[info]   (min, avg, max) = (34478.985, 34695.982, 34980.495), stdev = 180.962
[info]   CI (99.9%): [33999.161, 35392.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1474.998 ±(99.9%) 1158.352 MB/sec [Average]
[info]   (min, avg, max) = (1337.599, 1474.998, 2013.107), stdev = 300.820
[info]   CI (99.9%): [316.646, 2633.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32215.430 ±(99.9%) 25646.756 B/op [Average]
[info]   (min, avg, max) = (29040.023, 32215.430, 44126.284), stdev = 6660.381
[info]   CI (99.9%): [6568.674, 57862.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.543 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.830), stdev = 1.699
[info]   CI (99.9%): [≈ 0, 7.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   17.335 ±(99.9%) 143.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.335, 83.960), stdev = 37.248
[info]   CI (99.9%): [≈ 0, 160.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26648.820 ops/s
[info] # Warmup Iteration   2: 80610.925 ops/s
[info] # Warmup Iteration   3: 84667.672 ops/s
[info] # Warmup Iteration   4: 85205.652 ops/s
[info] # Warmup Iteration   5: 85001.383 ops/s
[info] Iteration   1: 84980.344 ops/s
[info]                  ·gc.alloc.rate:                   1126.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              20859.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24742.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.386 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 85055.355 ops/s
[info]                  ·gc.alloc.rate:               1098.486 MB/sec
[info]                  ·gc.alloc.rate.norm:          20322.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12363.015 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 84755.358 ops/s
[info]                  ·gc.alloc.rate:               1110.251 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24838.568 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 84753.727 ops/s
[info]                  ·gc.alloc.rate:                   1108.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              20583.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24851.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 85217.501 ops/s
[info]                  ·gc.alloc.rate:                   1100.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              20322.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12370.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   84952.457 ±(99.9%) 770.022 ops/s [Average]
[info]   (min, avg, max) = (84753.727, 84952.457, 85217.501), stdev = 199.972
[info]   CI (99.9%): [84182.435, 85722.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1108.888 ±(99.9%) 43.035 MB/sec [Average]
[info]   (min, avg, max) = (1098.486, 1108.888, 1126.746), stdev = 11.176
[info]   CI (99.9%): [1065.853, 1151.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20540.819 ±(99.9%) 871.042 B/op [Average]
[info]   (min, avg, max) = (20322.118, 20540.819, 20859.652), stdev = 226.207
[info]   CI (99.9%): [19669.777, 21411.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.116 ±(99.9%) 1409.706 MB/sec [Average]
[info]   (min, avg, max) = (668.267, 1070.116, 1338.330), stdev = 366.096
[info]   CI (99.9%): [≈ 0, 2479.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19833.275 ±(99.9%) 26245.999 B/op [Average]
[info]   (min, avg, max) = (12363.015, 19833.275, 24851.818), stdev = 6816.003
[info]   CI (99.9%): [≈ 0, 46079.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.970 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.477), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.996 ±(99.9%) 110.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.996, 64.207), stdev = 28.628
[info]   CI (99.9%): [≈ 0, 123.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50619.841 ops/s
[info] # Warmup Iteration   2: 97596.054 ops/s
[info] # Warmup Iteration   3: 97509.418 ops/s
[info] # Warmup Iteration   4: 100627.457 ops/s
[info] # Warmup Iteration   5: 99499.153 ops/s
[info] Iteration   1: 99440.070 ops/s
[info]                  ·gc.alloc.rate:               1226.490 MB/sec
[info]                  ·gc.alloc.rate.norm:          19411.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21255.560 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 98803.961 ops/s
[info]                  ·gc.alloc.rate:                   1230.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              19604.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21413.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 99824.519 ops/s
[info]                  ·gc.alloc.rate:               1223.715 MB/sec
[info]                  ·gc.alloc.rate.norm:          19293.161 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10597.087 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 99610.769 ops/s
[info]                  ·gc.alloc.rate:                   1224.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              19347.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21250.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.693 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 99568.935 ops/s
[info]                  ·gc.alloc.rate:                   1236.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              19546.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21247.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.265 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   99449.651 ±(99.9%) 1488.514 ops/s [Average]
[info]   (min, avg, max) = (98803.961, 99449.651, 99824.519), stdev = 386.562
[info]   CI (99.9%): [97961.137, 100938.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1228.445 ±(99.9%) 20.816 MB/sec [Average]
[info]   (min, avg, max) = (1223.715, 1228.445, 1236.801), stdev = 5.406
[info]   CI (99.9%): [1207.628, 1249.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19440.383 ±(99.9%) 506.136 B/op [Average]
[info]   (min, avg, max) = (19293.161, 19440.383, 19604.006), stdev = 131.442
[info]   CI (99.9%): [18934.247, 19946.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.787 ±(99.9%) 1157.318 MB/sec [Average]
[info]   (min, avg, max) = (672.146, 1209.787, 1344.949), stdev = 300.552
[info]   CI (99.9%): [52.470, 2367.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19152.981 ±(99.9%) 18419.203 B/op [Average]
[info]   (min, avg, max) = (10597.087, 19152.981, 21413.803), stdev = 4783.408
[info]   CI (99.9%): [733.779, 37572.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.674 ±(99.9%) 5.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.018), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.658 ±(99.9%) 80.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.658, 47.693), stdev = 20.824
[info]   CI (99.9%): [≈ 0, 90.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3317.617 ops/s
[info] # Warmup Iteration   2: 41434.798 ops/s
[info] # Warmup Iteration   3: 45187.056 ops/s
[info] # Warmup Iteration   4: 43840.604 ops/s
[info] # Warmup Iteration   5: 44689.710 ops/s
[info] Iteration   1: 45536.481 ops/s
[info]                  ·gc.alloc.rate:                   2130.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              73607.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69334.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 45558.269 ops/s
[info]                  ·gc.alloc.rate:                   2130.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              73586.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69059.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45467.977 ops/s
[info]                  ·gc.alloc.rate:                   2139.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              74045.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69105.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 45955.231 ops/s
[info]                  ·gc.alloc.rate:                   2162.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              74047.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68430.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.991 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45445.711 ops/s
[info]                  ·gc.alloc.rate:                   2139.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              74088.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69335.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45592.734 ±(99.9%) 800.657 ops/s [Average]
[info]   (min, avg, max) = (45445.711, 45592.734, 45955.231), stdev = 207.928
[info]   CI (99.9%): [44792.077, 46393.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2140.395 ±(99.9%) 49.824 MB/sec [Average]
[info]   (min, avg, max) = (2130.563, 2140.395, 2162.173), stdev = 12.939
[info]   CI (99.9%): [2090.571, 2190.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73875.220 ±(99.9%) 980.435 B/op [Average]
[info]   (min, avg, max) = (73586.773, 73875.220, 74088.924), stdev = 254.616
[info]   CI (99.9%): [72894.785, 74855.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2000.647 ±(99.9%) 15.737 MB/sec [Average]
[info]   (min, avg, max) = (1996.457, 2000.647, 2006.907), stdev = 4.087
[info]   CI (99.9%): [1984.910, 2016.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69053.218 ±(99.9%) 1427.090 B/op [Average]
[info]   (min, avg, max) = (68430.523, 69053.218, 69335.251), stdev = 370.611
[info]   CI (99.9%): [67626.129, 70480.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 8.045 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.991, 4.727), stdev = 2.089
[info]   CI (99.9%): [≈ 0, 9.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.239 ±(99.9%) 277.945 B/op [Average]
[info]   (min, avg, max) = (0.719, 34.239, 163.322), stdev = 72.181
[info]   CI (99.9%): [≈ 0, 312.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46857.561 ops/s
[info] # Warmup Iteration   2: 112943.357 ops/s
[info] # Warmup Iteration   3: 113681.785 ops/s
[info] # Warmup Iteration   4: 114640.392 ops/s
[info] # Warmup Iteration   5: 115412.680 ops/s
[info] Iteration   1: 114654.254 ops/s
[info]                  ·gc.alloc.rate:               1103.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          15146.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18374.494 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 115133.745 ops/s
[info]                  ·gc.alloc.rate:               1088.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          14876.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9151.149 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 115358.675 ops/s
[info]                  ·gc.alloc.rate:                   1118.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              15255.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18285.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 114787.150 ops/s
[info]                  ·gc.alloc.rate:               1098.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          15054.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18385.655 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 115078.400 ops/s
[info]                  ·gc.alloc.rate:                   1087.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              14868.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9173.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   115002.445 ±(99.9%) 1084.860 ops/s [Average]
[info]   (min, avg, max) = (114654.254, 115002.445, 115358.675), stdev = 281.735
[info]   CI (99.9%): [113917.584, 116087.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1099.058 ±(99.9%) 48.730 MB/sec [Average]
[info]   (min, avg, max) = (1087.275, 1099.058, 1118.211), stdev = 12.655
[info]   CI (99.9%): [1050.327, 1147.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15040.412 ±(99.9%) 651.081 B/op [Average]
[info]   (min, avg, max) = (14868.372, 15040.412, 15255.951), stdev = 169.084
[info]   CI (99.9%): [14389.331, 15691.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1072.028 ±(99.9%) 1412.600 MB/sec [Average]
[info]   (min, avg, max) = (669.484, 1072.028, 1340.971), stdev = 366.848
[info]   CI (99.9%): [≈ 0, 2484.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14674.044 ±(99.9%) 19374.511 B/op [Average]
[info]   (min, avg, max) = (9151.149, 14674.044, 18385.655), stdev = 5031.499
[info]   CI (99.9%): [≈ 0, 34048.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.144), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.654 ±(99.9%) 73.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.654, 42.988), stdev = 19.193
[info]   CI (99.9%): [≈ 0, 82.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106092.092 ops/s
[info] # Warmup Iteration   2: 295826.189 ops/s
[info] # Warmup Iteration   3: 305024.459 ops/s
[info] # Warmup Iteration   4: 302641.943 ops/s
[info] # Warmup Iteration   5: 306880.900 ops/s
[info] Iteration   1: 309725.509 ops/s
[info]                  ·gc.alloc.rate:               472.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          2397.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2599.599 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 306064.178 ops/s
[info]                  ·gc.alloc.rate:      454.462 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 307974.404 ops/s
[info]                  ·gc.alloc.rate:               477.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          2441.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3407.651 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 314226.397 ops/s
[info]                  ·gc.alloc.rate:                   479.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              2401.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3339.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 313018.695 ops/s
[info]                  ·gc.alloc.rate:                   488.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              2457.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3356.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   310201.836 ±(99.9%) 13120.519 ops/s [Average]
[info]   (min, avg, max) = (306064.178, 310201.836, 314226.397), stdev = 3407.357
[info]   CI (99.9%): [297081.317, 323322.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   474.491 ±(99.9%) 48.839 MB/sec [Average]
[info]   (min, avg, max) = (454.462, 474.491, 488.657), stdev = 12.683
[info]   CI (99.9%): [425.652, 523.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2406.812 ±(99.9%) 181.519 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2406.812, 2457.063), stdev = 47.140
[info]   CI (99.9%): [2225.292, 2588.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.573 ±(99.9%) 1112.357 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.573, 667.469), stdev = 288.875
[info]   CI (99.9%): [≈ 0, 1614.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2540.620 ±(99.9%) 5617.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2540.620, 3407.651), stdev = 1458.903
[info]   CI (99.9%): [≈ 0, 8158.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.105), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 389994.443 ops/s
[info] # Warmup Iteration   2: 607462.645 ops/s
[info] # Warmup Iteration   3: 608413.879 ops/s
[info] # Warmup Iteration   4: 642218.300 ops/s
[info] # Warmup Iteration   5: 635908.887 ops/s
[info] Iteration   1: 638325.372 ops/s
[info]                  ·gc.alloc.rate:                   830.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              2046.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3306.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 661190.196 ops/s
[info]                  ·gc.alloc.rate:               839.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          1997.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1596.778 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 649875.044 ops/s
[info]                  ·gc.alloc.rate:                   821.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1989.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1626.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 646892.045 ops/s
[info]                  ·gc.alloc.rate:               817.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          1990.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1633.659 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 639785.595 ops/s
[info]                  ·gc.alloc.rate:               809.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          1989.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1652.678 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   647213.650 ±(99.9%) 35328.885 ops/s [Average]
[info]   (min, avg, max) = (638325.372, 647213.650, 661190.196), stdev = 9174.799
[info]   CI (99.9%): [611884.766, 682542.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   823.547 ±(99.9%) 44.431 MB/sec [Average]
[info]   (min, avg, max) = (809.030, 823.547, 839.112), stdev = 11.539
[info]   CI (99.9%): [779.116, 867.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2002.602 ±(99.9%) 95.352 B/op [Average]
[info]   (min, avg, max) = (1989.335, 2002.602, 2046.494), stdev = 24.762
[info]   CI (99.9%): [1907.250, 2097.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.391 ±(99.9%) 1153.398 MB/sec [Average]
[info]   (min, avg, max) = (670.814, 805.391, 1341.212), stdev = 299.534
[info]   CI (99.9%): [≈ 0, 1958.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1963.098 ±(99.9%) 2892.297 B/op [Average]
[info]   (min, avg, max) = (1596.778, 1963.098, 3306.262), stdev = 751.120
[info]   CI (99.9%): [≈ 0, 4855.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.051), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 481903.795 ops/s
[info] # Warmup Iteration   2: 727513.652 ops/s
[info] # Warmup Iteration   3: 752368.623 ops/s
[info] # Warmup Iteration   4: 751025.824 ops/s
[info] # Warmup Iteration   5: 743453.978 ops/s
[info] Iteration   1: 748356.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 748639.761 ops/s
[info]                  ·gc.alloc.rate:      1.165 MB/sec
[info]                  ·gc.alloc.rate.norm: 2.449 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 756655.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 751278.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 751849.638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   751356.211 ±(99.9%) 12873.936 ops/s [Average]
[info]   (min, avg, max) = (748356.922, 751356.211, 756655.915), stdev = 3343.320
[info]   CI (99.9%): [738482.275, 764230.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.233 ±(99.9%) 2.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.233, 1.165), stdev = 0.521
[info]   CI (99.9%): [≈ 0, 2.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.490 ±(99.9%) 4.216 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.490, 2.449), stdev = 1.095
[info]   CI (99.9%): [≈ 0, 4.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73741.302 ops/s
[info] # Warmup Iteration   2: 226206.055 ops/s
[info] # Warmup Iteration   3: 235782.728 ops/s
[info] # Warmup Iteration   4: 238092.818 ops/s
[info] # Warmup Iteration   5: 238837.818 ops/s
[info] Iteration   1: 236005.680 ops/s
[info]                  ·gc.alloc.rate:               774.982 MB/sec
[info]                  ·gc.alloc.rate.norm:          5168.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4448.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 233824.647 ops/s
[info]                  ·gc.alloc.rate:               773.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          5205.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4494.986 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 235645.092 ops/s
[info]                  ·gc.alloc.rate:                   805.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              5374.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8906.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 242058.030 ops/s
[info]                  ·gc.alloc.rate:                   792.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              5148.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4346.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 238472.826 ops/s
[info]                  ·gc.alloc.rate:                   780.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              5153.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4413.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   237201.255 ±(99.9%) 12246.271 ops/s [Average]
[info]   (min, avg, max) = (233824.647, 237201.255, 242058.030), stdev = 3180.318
[info]   CI (99.9%): [224954.984, 249447.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   785.328 ±(99.9%) 51.266 MB/sec [Average]
[info]   (min, avg, max) = (773.422, 785.328, 805.245), stdev = 13.314
[info]   CI (99.9%): [734.061, 836.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5210.154 ±(99.9%) 363.795 B/op [Average]
[info]   (min, avg, max) = (5148.956, 5210.154, 5374.484), stdev = 94.476
[info]   CI (99.9%): [4846.359, 5573.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   801.376 ±(99.9%) 1147.549 MB/sec [Average]
[info]   (min, avg, max) = (667.129, 801.376, 1334.480), stdev = 298.015
[info]   CI (99.9%): [≈ 0, 1948.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5322.169 ±(99.9%) 7718.976 B/op [Average]
[info]   (min, avg, max) = (4346.382, 5322.169, 8906.782), stdev = 2004.593
[info]   CI (99.9%): [≈ 0, 13041.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.139), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15883.334 ops/s
[info] # Warmup Iteration   2: 113399.321 ops/s
[info] # Warmup Iteration   3: 119549.899 ops/s
[info] # Warmup Iteration   4: 122258.927 ops/s
[info] # Warmup Iteration   5: 122636.387 ops/s
[info] Iteration   1: 122789.865 ops/s
[info]                  ·gc.alloc.rate:                   1733.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              22223.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25746.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 123314.698 ops/s
[info]                  ·gc.alloc.rate:                   1725.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              22019.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17101.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 122518.716 ops/s
[info]                  ·gc.alloc.rate:                   1727.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              22189.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25791.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 123304.651 ops/s
[info]                  ·gc.alloc.rate:               1738.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          22187.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17056.376 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 123182.487 ops/s
[info]                  ·gc.alloc.rate:                   1749.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              22350.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25602.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   123022.083 ±(99.9%) 1359.366 ops/s [Average]
[info]   (min, avg, max) = (122518.716, 123022.083, 123314.698), stdev = 353.023
[info]   CI (99.9%): [121662.717, 124381.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1734.961 ±(99.9%) 37.247 MB/sec [Average]
[info]   (min, avg, max) = (1725.260, 1734.961, 1749.587), stdev = 9.673
[info]   CI (99.9%): [1697.714, 1772.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22194.106 ±(99.9%) 456.182 B/op [Average]
[info]   (min, avg, max) = (22019.066, 22194.106, 22350.842), stdev = 118.469
[info]   CI (99.9%): [21737.924, 22650.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1739.471 ±(99.9%) 1410.629 MB/sec [Average]
[info]   (min, avg, max) = (1336.382, 1739.471, 2008.756), stdev = 366.336
[info]   CI (99.9%): [328.843, 3150.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22259.790 ±(99.9%) 18213.071 B/op [Average]
[info]   (min, avg, max) = (17056.376, 22259.790, 25791.459), stdev = 4729.877
[info]   CI (99.9%): [4046.719, 40472.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.643), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.101 ±(99.9%) 78.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.101, 46.495), stdev = 20.386
[info]   CI (99.9%): [≈ 0, 88.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 2.915
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62816.399 ops/s
[info] # Warmup Iteration   2: 169387.758 ops/s
[info] # Warmup Iteration   3: 180817.846 ops/s
[info] # Warmup Iteration   4: 185375.790 ops/s
[info] # Warmup Iteration   5: 186925.532 ops/s
[info] Iteration   1: 182822.510 ops/s
[info]                  ·gc.alloc.rate:                   1127.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              9706.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11506.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 184117.324 ops/s
[info]                  ·gc.alloc.rate:                   1124.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              9606.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11409.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.355 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 181991.974 ops/s
[info]                  ·gc.alloc.rate:               1093.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          9454.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5783.817 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 181786.129 ops/s
[info]                  ·gc.alloc.rate:                   1119.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              9685.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11592.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 184683.535 ops/s
[info]                  ·gc.alloc.rate:                   1119.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              9537.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5707.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.448 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   183080.294 ±(99.9%) 4935.577 ops/s [Average]
[info]   (min, avg, max) = (181786.129, 183080.294, 184683.535), stdev = 1281.754
[info]   CI (99.9%): [178144.717, 188015.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1116.878 ±(99.9%) 52.312 MB/sec [Average]
[info]   (min, avg, max) = (1093.461, 1116.878, 1127.529), stdev = 13.585
[info]   CI (99.9%): [1064.566, 1169.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9598.053 ±(99.9%) 401.989 B/op [Average]
[info]   (min, avg, max) = (9454.780, 9598.053, 9706.133), stdev = 104.395
[info]   CI (99.9%): [9196.064, 10000.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.214 ±(99.9%) 1409.095 MB/sec [Average]
[info]   (min, avg, max) = (668.908, 1070.214, 1339.532), stdev = 365.938
[info]   CI (99.9%): [≈ 0, 2479.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9199.941 ±(99.9%) 12144.553 B/op [Average]
[info]   (min, avg, max) = (5707.915, 9199.941, 11592.147), stdev = 3153.902
[info]   CI (99.9%): [≈ 0, 21344.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.456), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 6.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.032 ±(99.9%) 50.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.032, 29.448), stdev = 13.090
[info]   CI (99.9%): [≈ 0, 56.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187946.730 ops/s
[info] # Warmup Iteration   2: 487429.737 ops/s
[info] # Warmup Iteration   3: 523827.858 ops/s
[info] # Warmup Iteration   4: 525125.131 ops/s
[info] # Warmup Iteration   5: 523233.952 ops/s
[info] Iteration   1: 523529.151 ops/s
[info]                  ·gc.alloc.rate:               349.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          1052.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1538.009 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 523278.106 ops/s
[info]                  ·gc.alloc.rate:      342.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 1029.350 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 523018.319 ops/s
[info]                  ·gc.alloc.rate:               358.264 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1539.459 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 517841.480 ops/s
[info]                  ·gc.alloc.rate:      336.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 517363.646 ops/s
[info]                  ·gc.alloc.rate:                   356.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              1084.735 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2039.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   521006.140 ±(99.9%) 12001.894 ops/s [Average]
[info]   (min, avg, max) = (517363.646, 521006.140, 523529.151), stdev = 3116.854
[info]   CI (99.9%): [509004.247, 533008.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   348.841 ±(99.9%) 35.261 MB/sec [Average]
[info]   (min, avg, max) = (336.913, 348.841, 358.264), stdev = 9.157
[info]   CI (99.9%): [313.580, 384.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1053.574 ±(99.9%) 105.699 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1053.574, 1084.735), stdev = 27.450
[info]   CI (99.9%): [947.875, 1159.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.809 ±(99.9%) 1216.891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.809, 670.646), stdev = 316.023
[info]   CI (99.9%): [≈ 0, 1555.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1023.421 ±(99.9%) 3682.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1023.421, 2039.637), stdev = 956.370
[info]   CI (99.9%): [≈ 0, 4706.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5644.038 ops/s
[info] # Warmup Iteration   2: 53523.902 ops/s
[info] # Warmup Iteration   3: 66667.997 ops/s
[info] # Warmup Iteration   4: 66688.210 ops/s
[info] # Warmup Iteration   5: 68021.885 ops/s
[info] Iteration   1: 67144.463 ops/s
[info]                  ·gc.alloc.rate:                   2696.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              63204.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62877.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.861 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 66630.851 ops/s
[info]                  ·gc.alloc.rate:                   2675.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              63191.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63473.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 68363.599 ops/s
[info]                  ·gc.alloc.rate:                   2743.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              63163.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62021.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.876 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 68885.638 ops/s
[info]                  ·gc.alloc.rate:               2792.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          63773.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2701.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61698.846 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 67715.955 ops/s
[info]                  ·gc.alloc.rate:               2746.235 MB/sec
[info]                  ·gc.alloc.rate.norm:          63828.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62890.407 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   67748.101 ±(99.9%) 3490.352 ops/s [Average]
[info]   (min, avg, max) = (66630.851, 67748.101, 68885.638), stdev = 906.433
[info]   CI (99.9%): [64257.749, 71238.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2730.740 ±(99.9%) 176.566 MB/sec [Average]
[info]   (min, avg, max) = (2675.280, 2730.740, 2792.013), stdev = 45.854
[info]   CI (99.9%): [2554.175, 2907.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63432.248 ±(99.9%) 1300.178 B/op [Average]
[info]   (min, avg, max) = (63163.288, 63432.248, 63828.996), stdev = 337.652
[info]   CI (99.9%): [62132.070, 64732.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2694.189 ±(99.9%) 36.972 MB/sec [Average]
[info]   (min, avg, max) = (2682.548, 2694.189, 2705.852), stdev = 9.601
[info]   CI (99.9%): [2657.217, 2731.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62592.539 ±(99.9%) 2770.636 B/op [Average]
[info]   (min, avg, max) = (61698.846, 62592.539, 63473.771), stdev = 719.525
[info]   CI (99.9%): [59821.903, 65363.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.250 ±(99.9%) 1.848 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.103), stdev = 0.480
[info]   CI (99.9%): [≈ 0, 2.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.846 ±(99.9%) 43.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.846, 25.861), stdev = 11.252
[info]   CI (99.9%): [≈ 0, 49.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77675.896 ops/s
[info] # Warmup Iteration   2: 169318.251 ops/s
[info] # Warmup Iteration   3: 174376.539 ops/s
[info] # Warmup Iteration   4: 175991.374 ops/s
[info] # Warmup Iteration   5: 175358.050 ops/s
[info] Iteration   1: 175912.069 ops/s
[info]                  ·gc.alloc.rate:               1150.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          10289.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11985.326 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 175853.096 ops/s
[info]                  ·gc.alloc.rate:               1145.515 MB/sec
[info]                  ·gc.alloc.rate.norm:          10252.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11998.222 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 176249.823 ops/s
[info]                  ·gc.alloc.rate:                   1131.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              10102.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5986.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 175685.088 ops/s
[info]                  ·gc.alloc.rate:               1154.316 MB/sec
[info]                  ·gc.alloc.rate.norm:          10340.717 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12018.781 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 175036.687 ops/s
[info]                  ·gc.alloc.rate:                   1151.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              10346.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12075.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   175747.352 ±(99.9%) 1721.750 ops/s [Average]
[info]   (min, avg, max) = (175036.687, 175747.352, 176249.823), stdev = 447.133
[info]   CI (99.9%): [174025.602, 177469.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1146.488 ±(99.9%) 34.708 MB/sec [Average]
[info]   (min, avg, max) = (1131.380, 1146.488, 1154.316), stdev = 9.014
[info]   CI (99.9%): [1111.781, 1181.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10266.365 ±(99.9%) 382.870 B/op [Average]
[info]   (min, avg, max) = (10102.414, 10266.365, 10346.510), stdev = 99.430
[info]   CI (99.9%): [9883.494, 10649.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.158 ±(99.9%) 1155.243 MB/sec [Average]
[info]   (min, avg, max) = (670.485, 1207.158, 1343.415), stdev = 300.013
[info]   CI (99.9%): [51.916, 2362.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10812.933 ±(99.9%) 10389.137 B/op [Average]
[info]   (min, avg, max) = (5986.951, 10812.933, 12075.386), stdev = 2698.026
[info]   CI (99.9%): [423.797, 21202.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.671 ±(99.9%) 5.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.311), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.027 ±(99.9%) 51.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.027, 29.762), stdev = 13.269
[info]   CI (99.9%): [≈ 0, 57.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234440.837 ops/s
[info] # Warmup Iteration   2: 516592.301 ops/s
[info] # Warmup Iteration   3: 542191.200 ops/s
[info] # Warmup Iteration   4: 548251.493 ops/s
[info] # Warmup Iteration   5: 552029.992 ops/s
[info] Iteration   1: 546403.473 ops/s
[info]                  ·gc.alloc.rate:               565.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1921.625 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 532947.416 ops/s
[info]                  ·gc.alloc.rate:                   548.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              1620.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1970.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 534725.636 ops/s
[info]                  ·gc.alloc.rate:                   542.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              1595.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1960.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 551491.909 ops/s
[info]                  ·gc.alloc.rate:               562.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          1605.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1901.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 554214.952 ops/s
[info]                  ·gc.alloc.rate:      546.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   543956.677 ±(99.9%) 37254.591 ops/s [Average]
[info]   (min, avg, max) = (532947.416, 543956.677, 554214.952), stdev = 9674.899
[info]   CI (99.9%): [506702.086, 581211.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   553.245 ±(99.9%) 39.733 MB/sec [Average]
[info]   (min, avg, max) = (542.260, 553.245, 565.649), stdev = 10.319
[info]   CI (99.9%): [513.512, 592.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1600.786 ±(99.9%) 116.154 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1600.786, 1629.348), stdev = 30.165
[info]   CI (99.9%): [1484.632, 1716.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.322 ±(99.9%) 1148.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.322, 667.203), stdev = 298.137
[info]   CI (99.9%): [≈ 0, 1681.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1550.697 ±(99.9%) 3339.752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1550.697, 1970.127), stdev = 867.323
[info]   CI (99.9%): [≈ 0, 4890.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.414), stdev = 1.525
[info]   CI (99.9%): [≈ 0, 6.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.029 ±(99.9%) 17.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.029, 10.082), stdev = 4.502
[info]   CI (99.9%): [≈ 0, 19.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.581
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 633600.596 ops/s
[info] # Warmup Iteration   2: 1036583.533 ops/s
[info] # Warmup Iteration   3: 1133550.929 ops/s
[info] # Warmup Iteration   4: 1138971.663 ops/s
[info] # Warmup Iteration   5: 1124816.861 ops/s
[info] Iteration   1: 1139763.509 ops/s
[info]                  ·gc.alloc.rate:               867.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          1197.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 926.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1137669.644 ops/s
[info]                  ·gc.alloc.rate:               861.224 MB/sec
[info]                  ·gc.alloc.rate.norm:          1191.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 928.465 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1138653.570 ops/s
[info]                  ·gc.alloc.rate:                   875.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1209.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1140925.806 ops/s
[info]                  ·gc.alloc.rate:                   861.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1188.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1134499.093 ops/s
[info]                  ·gc.alloc.rate:               867.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          1202.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932.440 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1138302.325 ±(99.9%) 9433.281 ops/s [Average]
[info]   (min, avg, max) = (1134499.093, 1138302.325, 1140925.806), stdev = 2449.793
[info]   CI (99.9%): [1128869.044, 1147735.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   866.560 ±(99.9%) 21.742 MB/sec [Average]
[info]   (min, avg, max) = (861.224, 866.560, 875.235), stdev = 5.646
[info]   CI (99.9%): [844.818, 888.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1198.042 ±(99.9%) 32.123 B/op [Average]
[info]   (min, avg, max) = (1188.769, 1198.042, 1209.264), stdev = 8.342
[info]   CI (99.9%): [1165.919, 1230.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.021 ±(99.9%) 1157.067 MB/sec [Average]
[info]   (min, avg, max) = (671.122, 806.021, 1343.546), stdev = 300.487
[info]   CI (99.9%): [≈ 0, 1963.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1114.225 ±(99.9%) 1597.404 B/op [Average]
[info]   (min, avg, max) = (926.728, 1114.225, 1856.304), stdev = 414.841
[info]   CI (99.9%): [≈ 0, 2711.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.029), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591586.572 ops/s
[info] # Warmup Iteration   2: 1250104.041 ops/s
[info] # Warmup Iteration   3: 1251663.511 ops/s
[info] # Warmup Iteration   4: 1270233.247 ops/s
[info] # Warmup Iteration   5: 1271219.734 ops/s
[info] Iteration   1: 1271209.947 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1270189.258 ops/s
[info]                  ·gc.alloc.rate:      0.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.158 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1271180.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1271473.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1271467.970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1271104.216 ±(99.9%) 2040.164 ops/s [Average]
[info]   (min, avg, max) = (1270189.258, 1271104.216, 1271473.559), stdev = 529.824
[info]   CI (99.9%): [1269064.053, 1273144.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.026 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.032 ±(99.9%) 0.271 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.032, 0.158), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68690.532 ops/s
[info] # Warmup Iteration   2: 350787.395 ops/s
[info] # Warmup Iteration   3: 356099.638 ops/s
[info] # Warmup Iteration   4: 361480.715 ops/s
[info] # Warmup Iteration   5: 354762.484 ops/s
[info] Iteration   1: 361825.021 ops/s
[info]                  ·gc.alloc.rate:                   1025.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4459.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5800.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 355432.435 ops/s
[info]                  ·gc.alloc.rate:               983.252 MB/sec
[info]                  ·gc.alloc.rate.norm:          4353.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2955.613 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 362090.966 ops/s
[info]                  ·gc.alloc.rate:                   1024.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              4452.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5805.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 363944.476 ops/s
[info]                  ·gc.alloc.rate:                   1016.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              4395.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2889.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 362857.794 ops/s
[info]                  ·gc.alloc.rate:               1028.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          4459.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5801.314 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   361230.139 ±(99.9%) 12875.952 ops/s [Average]
[info]   (min, avg, max) = (355432.435, 361230.139, 363944.476), stdev = 3343.844
[info]   CI (99.9%): [348354.187, 374106.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1015.547 ±(99.9%) 71.464 MB/sec [Average]
[info]   (min, avg, max) = (983.252, 1015.547, 1028.317), stdev = 18.559
[info]   CI (99.9%): [944.083, 1087.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4423.951 ±(99.9%) 183.071 B/op [Average]
[info]   (min, avg, max) = (4353.751, 4423.951, 4459.209), stdev = 47.543
[info]   CI (99.9%): [4240.880, 4607.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.566 ±(99.9%) 1408.431 MB/sec [Average]
[info]   (min, avg, max) = (667.496, 1068.566, 1337.813), stdev = 365.765
[info]   CI (99.9%): [≈ 0, 2476.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4650.435 ±(99.9%) 6074.794 B/op [Average]
[info]   (min, avg, max) = (2889.282, 4650.435, 5805.299), stdev = 1577.605
[info]   CI (99.9%): [≈ 0, 10725.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.180), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111.716 ops/s
[info] # Warmup Iteration   2: 523.146 ops/s
[info] # Warmup Iteration   3: 593.360 ops/s
[info] # Warmup Iteration   4: 602.928 ops/s
[info] # Warmup Iteration   5: 607.320 ops/s
[info] Iteration   1: 605.743 ops/s
[info]                  ·gc.alloc.rate:               1295.767 MB/sec
[info]                  ·gc.alloc.rate.norm:          3365172.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3474489.452 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 605.374 ops/s
[info]                  ·gc.alloc.rate:               1287.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          3347079.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3474489.452 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 594.982 ops/s
[info]                  ·gc.alloc.rate:                   1264.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              3342388.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3536304.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 598.199 ops/s
[info]                  ·gc.alloc.rate:                   1256.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              3303582.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1759296.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12800.855 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 591.355 ops/s
[info]                  ·gc.alloc.rate:                   1270.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              3379457.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3553113.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1383.784 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   599.131 ±(99.9%) 24.447 ops/s [Average]
[info]   (min, avg, max) = (591.355, 599.131, 605.743), stdev = 6.349
[info]   CI (99.9%): [574.683, 623.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1274.965 ±(99.9%) 63.097 MB/sec [Average]
[info]   (min, avg, max) = (1256.453, 1274.965, 1295.767), stdev = 16.386
[info]   CI (99.9%): [1211.869, 1338.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3347535.869 ±(99.9%) 110410.451 B/op [Average]
[info]   (min, avg, max) = (3303582.397, 3347535.869, 3379457.216), stdev = 28673.243
[info]   CI (99.9%): [3237125.418, 3457946.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.448 ±(99.9%) 1150.199 MB/sec [Average]
[info]   (min, avg, max) = (669.114, 1203.448, 1337.859), stdev = 298.703
[info]   CI (99.9%): [53.249, 2353.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3159538.956 ±(99.9%) 3017243.776 B/op [Average]
[info]   (min, avg, max) = (1759296.962, 3159538.956, 3553113.946), stdev = 783568.627
[info]   CI (99.9%): [142295.180, 6176782.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.090 ±(99.9%) 8.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.090, 4.869), stdev = 2.123
[info]   CI (99.9%): [≈ 0, 9.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2869.916 ±(99.9%) 21493.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2869.916, 12800.855), stdev = 5581.708
[info]   CI (99.9%): [≈ 0, 24363.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.302
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176.840 ops/s
[info] # Warmup Iteration   2: 516.678 ops/s
[info] # Warmup Iteration   3: 588.047 ops/s
[info] # Warmup Iteration   4: 599.412 ops/s
[info] # Warmup Iteration   5: 601.404 ops/s
[info] Iteration   1: 599.787 ops/s
[info]                  ·gc.alloc.rate:               1270.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          3333739.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3498748.587 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 597.476 ops/s
[info]                  ·gc.alloc.rate:                   1265.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              3331022.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3513957.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 595.711 ops/s
[info]                  ·gc.alloc.rate:               1258.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          3325102.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3529267.544 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 599.677 ops/s
[info]                  ·gc.alloc.rate:                   1263.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              3315636.947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1752869.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11523.413 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 582.987 ops/s
[info]                  ·gc.alloc.rate:                   1271.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              3431964.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3596400.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1907.726 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   595.128 ±(99.9%) 26.930 ops/s [Average]
[info]   (min, avg, max) = (582.987, 595.128, 599.787), stdev = 6.994
[info]   CI (99.9%): [568.197, 622.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1265.967 ±(99.9%) 20.683 MB/sec [Average]
[info]   (min, avg, max) = (1258.740, 1265.967, 1271.955), stdev = 5.371
[info]   CI (99.9%): [1245.284, 1286.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3347492.976 ±(99.9%) 183785.124 B/op [Average]
[info]   (min, avg, max) = (3315636.947, 3347492.976, 3431964.260), stdev = 47728.413
[info]   CI (99.9%): [3163707.852, 3531278.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1200.981 ±(99.9%) 1147.361 MB/sec [Average]
[info]   (min, avg, max) = (667.968, 1200.981, 1336.028), stdev = 297.966
[info]   CI (99.9%): [53.621, 2348.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3178248.585 ±(99.9%) 3071592.138 B/op [Average]
[info]   (min, avg, max) = (1752869.547, 3178248.585, 3596400.219), stdev = 797682.724
[info]   CI (99.9%): [106656.447, 6249840.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.028 ±(99.9%) 7.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.028, 4.391), stdev = 1.904
[info]   CI (99.9%): [≈ 0, 8.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2708.146 ±(99.9%) 19231.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2708.146, 11523.413), stdev = 4994.252
[info]   CI (99.9%): [≈ 0, 21939.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23522.650 ops/s
[info] # Warmup Iteration   2: 49452.260 ops/s
[info] # Warmup Iteration   3: 50080.738 ops/s
[info] # Warmup Iteration   4: 50514.725 ops/s
[info] # Warmup Iteration   5: 51028.653 ops/s
[info] Iteration   1: 50509.472 ops/s
[info]                  ·gc.alloc.rate:               845.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          26355.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20861.091 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 51086.000 ops/s
[info]                  ·gc.alloc.rate:               849.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          26175.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20625.504 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 50687.689 ops/s
[info]                  ·gc.alloc.rate:                   841.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              26130.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20786.612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.646 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50948.579 ops/s
[info]                  ·gc.alloc.rate:                   859.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              26555.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41372.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 50109.976 ops/s
[info]                  ·gc.alloc.rate:                   828.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              26023.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21036.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   50668.343 ±(99.9%) 1479.316 ops/s [Average]
[info]   (min, avg, max) = (50109.976, 50668.343, 51086.000), stdev = 384.174
[info]   CI (99.9%): [49189.027, 52147.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   845.061 ±(99.9%) 43.899 MB/sec [Average]
[info]   (min, avg, max) = (828.564, 845.061, 859.669), stdev = 11.400
[info]   CI (99.9%): [801.162, 888.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26248.246 ±(99.9%) 807.409 B/op [Average]
[info]   (min, avg, max) = (26023.400, 26248.246, 26555.940), stdev = 209.682
[info]   CI (99.9%): [25440.837, 27055.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.512 ±(99.9%) 1153.326 MB/sec [Average]
[info]   (min, avg, max) = (669.441, 803.512, 1339.301), stdev = 299.515
[info]   CI (99.9%): [≈ 0, 1956.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24936.442 ±(99.9%) 35383.798 B/op [Average]
[info]   (min, avg, max) = (20625.504, 24936.442, 41372.204), stdev = 9189.060
[info]   CI (99.9%): [≈ 0, 60320.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.519 ±(99.9%) 2.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.519, 1.308), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163.627 ops/s
[info] # Warmup Iteration   2: 417.337 ops/s
[info] # Warmup Iteration   3: 564.329 ops/s
[info] # Warmup Iteration   4: 574.758 ops/s
[info] # Warmup Iteration   5: 575.458 ops/s
[info] Iteration   1: 571.468 ops/s
[info]                  ·gc.alloc.rate:               1257.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          3462074.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3670016.000 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 577.973 ops/s
[info]                  ·gc.alloc.rate:               1247.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          3393759.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1813728.608 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 580.478 ops/s
[info]                  ·gc.alloc.rate:                   1265.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              3430258.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3615872.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 576.432 ops/s
[info]                  ·gc.alloc.rate:                   1255.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              3426074.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3641848.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14538.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 572.483 ops/s
[info]                  ·gc.alloc.rate:                   1255.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              3450777.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3658121.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2573.403 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   575.767 ±(99.9%) 14.506 ops/s [Average]
[info]   (min, avg, max) = (571.468, 575.767, 580.478), stdev = 3.767
[info]   CI (99.9%): [561.261, 590.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1256.265 ±(99.9%) 25.200 MB/sec [Average]
[info]   (min, avg, max) = (1247.232, 1256.265, 1265.499), stdev = 6.544
[info]   CI (99.9%): [1231.065, 1281.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3432588.981 ±(99.9%) 101071.460 B/op [Average]
[info]   (min, avg, max) = (3393759.613, 3432588.981, 3462074.839), stdev = 26247.937
[info]   CI (99.9%): [3331517.521, 3533660.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1199.834 ±(99.9%) 1147.926 MB/sec [Average]
[info]   (min, avg, max) = (666.559, 1199.834, 1334.196), stdev = 298.113
[info]   CI (99.9%): [51.908, 2347.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3279917.288 ±(99.9%) 3157049.168 B/op [Average]
[info]   (min, avg, max) = (1813728.608, 3279917.288, 3670016.000), stdev = 819875.643
[info]   CI (99.9%): [122868.121, 6436966.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.265 ±(99.9%) 8.875 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.265, 5.326), stdev = 2.305
[info]   CI (99.9%): [≈ 0, 10.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3456.183 ±(99.9%) 24222.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3456.183, 14538.315), stdev = 6290.621
[info]   CI (99.9%): [≈ 0, 27679.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.588
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5176.680 ops/s
[info] # Warmup Iteration   2: 13952.833 ops/s
[info] # Warmup Iteration   3: 14804.584 ops/s
[info] # Warmup Iteration   4: 14951.364 ops/s
[info] # Warmup Iteration   5: 14959.805 ops/s
[info] Iteration   1: 14978.480 ops/s
[info]                  ·gc.alloc.rate:                   1172.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              123163.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70098.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14775.390 ops/s
[info]                  ·gc.alloc.rate:                   1164.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              124011.698 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142158.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14944.002 ops/s
[info]                  ·gc.alloc.rate:               1185.862 MB/sec
[info]                  ·gc.alloc.rate.norm:          124881.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140621.569 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 15037.162 ops/s
[info]                  ·gc.alloc.rate:                   1179.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              123414.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69893.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15054.062 ops/s
[info]                  ·gc.alloc.rate:                   1181.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              123485.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139698.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.591 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14957.819 ±(99.9%) 428.168 ops/s [Average]
[info]   (min, avg, max) = (14775.390, 14957.819, 15054.062), stdev = 111.194
[info]   CI (99.9%): [14529.651, 15385.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1176.702 ±(99.9%) 31.856 MB/sec [Average]
[info]   (min, avg, max) = (1164.692, 1176.702, 1185.862), stdev = 8.273
[info]   CI (99.9%): [1144.846, 1208.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   123791.248 ±(99.9%) 2630.377 B/op [Average]
[info]   (min, avg, max) = (123163.520, 123791.248, 124881.306), stdev = 683.101
[info]   CI (99.9%): [121160.870, 126421.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1068.400 ±(99.9%) 1409.044 MB/sec [Average]
[info]   (min, avg, max) = (667.303, 1068.400, 1336.444), stdev = 365.924
[info]   CI (99.9%): [≈ 0, 2477.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   112494.238 ±(99.9%) 149425.588 B/op [Average]
[info]   (min, avg, max) = (69893.447, 112494.238, 142158.751), stdev = 38805.351
[info]   CI (99.9%): [≈ 0, 261919.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.137 ±(99.9%) 9.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.137, 5.621), stdev = 2.507
[info]   CI (99.9%): [≈ 0, 10.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   118.835 ±(99.9%) 1009.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 118.835, 587.591), stdev = 262.044
[info]   CI (99.9%): [≈ 0, 1127.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6628.332 ops/s
[info] # Warmup Iteration   2: 16877.403 ops/s
[info] # Warmup Iteration   3: 17621.345 ops/s
[info] # Warmup Iteration   4: 17716.920 ops/s
[info] # Warmup Iteration   5: 18006.210 ops/s
[info] Iteration   1: 17754.556 ops/s
[info]                  ·gc.alloc.rate:               1080.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          95761.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118214.278 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17626.734 ops/s
[info]                  ·gc.alloc.rate:               1076.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          96075.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59569.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17639.556 ops/s
[info]                  ·gc.alloc.rate:                   1071.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              95628.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119169.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17740.928 ops/s
[info]                  ·gc.alloc.rate:                   1057.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              93813.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59301.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.847 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17658.730 ops/s
[info]                  ·gc.alloc.rate:                   1067.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              95081.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119176.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 294.973 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   17684.101 ±(99.9%) 228.718 ops/s [Average]
[info]   (min, avg, max) = (17626.734, 17684.101, 17754.556), stdev = 59.397
[info]   CI (99.9%): [17455.383, 17912.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1070.675 ±(99.9%) 33.684 MB/sec [Average]
[info]   (min, avg, max) = (1057.715, 1070.675, 1080.492), stdev = 8.748
[info]   CI (99.9%): [1036.991, 1104.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   95271.805 ±(99.9%) 3430.530 B/op [Average]
[info]   (min, avg, max) = (93813.493, 95271.805, 96075.112), stdev = 890.898
[info]   CI (99.9%): [91841.276, 98702.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.617 ±(99.9%) 1408.634 MB/sec [Average]
[info]   (min, avg, max) = (667.170, 1068.617, 1337.731), stdev = 365.818
[info]   CI (99.9%): [≈ 0, 2477.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   95086.332 ±(99.9%) 125327.459 B/op [Average]
[info]   (min, avg, max) = (59301.511, 95086.332, 119176.602), stdev = 32547.143
[info]   CI (99.9%): [≈ 0, 220413.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.671 ±(99.9%) 5.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.671, 3.311), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   59.735 ±(99.9%) 506.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.735, 294.973), stdev = 131.505
[info]   CI (99.9%): [≈ 0, 566.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130460.019 ops/s
[info] # Warmup Iteration   2: 216401.478 ops/s
[info] # Warmup Iteration   3: 218251.209 ops/s
[info] # Warmup Iteration   4: 217878.035 ops/s
[info] # Warmup Iteration   5: 218258.262 ops/s
[info] Iteration   1: 215543.212 ops/s
[info]                  ·gc.alloc.rate:                   810.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              5914.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9774.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 218203.462 ops/s
[info]                  ·gc.alloc.rate:               792.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          5713.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4829.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 214847.011 ops/s
[info]                  ·gc.alloc.rate:               773.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          5665.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4909.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 217921.951 ops/s
[info]                  ·gc.alloc.rate:               784.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          5667.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4839.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 218614.118 ops/s
[info]                  ·gc.alloc.rate:                   786.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              5660.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4826.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   217025.951 ±(99.9%) 6573.759 ops/s [Average]
[info]   (min, avg, max) = (214847.011, 217025.951, 218614.118), stdev = 1707.184
[info]   CI (99.9%): [210452.191, 223599.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   789.370 ±(99.9%) 51.698 MB/sec [Average]
[info]   (min, avg, max) = (773.472, 789.370, 810.093), stdev = 13.426
[info]   CI (99.9%): [737.672, 841.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5724.408 ±(99.9%) 418.475 B/op [Average]
[info]   (min, avg, max) = (5660.326, 5724.408, 5914.954), stdev = 108.677
[info]   CI (99.9%): [5305.933, 6142.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   803.836 ±(99.9%) 1151.413 MB/sec [Average]
[info]   (min, avg, max) = (669.565, 803.836, 1338.736), stdev = 299.018
[info]   CI (99.9%): [≈ 0, 1955.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5835.955 ±(99.9%) 8479.847 B/op [Average]
[info]   (min, avg, max) = (4826.877, 5835.955, 9774.886), stdev = 2202.189
[info]   CI (99.9%): [≈ 0, 14315.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.090, 0.300), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110027.639 ops/s
[info] # Warmup Iteration   2: 243527.365 ops/s
[info] # Warmup Iteration   3: 244013.105 ops/s
[info] # Warmup Iteration   4: 245496.196 ops/s
[info] # Warmup Iteration   5: 245503.848 ops/s
[info] Iteration   1: 245326.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 245917.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 245438.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 241769.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 244347.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   244560.021 ±(99.9%) 6395.686 ops/s [Average]
[info]   (min, avg, max) = (241769.460, 244560.021, 245917.748), stdev = 1660.939
[info]   CI (99.9%): [238164.335, 250955.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5953.696 ops/s
[info] # Warmup Iteration   2: 14335.151 ops/s
[info] # Warmup Iteration   3: 17687.333 ops/s
[info] # Warmup Iteration   4: 17922.313 ops/s
[info] # Warmup Iteration   5: 17927.671 ops/s
[info] Iteration   1: 17803.391 ops/s
[info]                  ·gc.alloc.rate:                   1151.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              101747.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117954.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18177.694 ops/s
[info]                  ·gc.alloc.rate:                   1179.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              102138.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115636.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.802 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18305.161 ops/s
[info]                  ·gc.alloc.rate:               1169.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          100537.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57446.020 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17902.706 ops/s
[info]                  ·gc.alloc.rate:                   1157.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              101767.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117523.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.490 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 18285.025 ops/s
[info]                  ·gc.alloc.rate:                   1180.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              101591.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115177.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.142 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18094.795 ±(99.9%) 880.460 ops/s [Average]
[info]   (min, avg, max) = (17803.391, 18094.795, 18305.161), stdev = 228.653
[info]   CI (99.9%): [17214.335, 18975.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1167.659 ±(99.9%) 50.548 MB/sec [Average]
[info]   (min, avg, max) = (1151.014, 1167.659, 1180.347), stdev = 13.127
[info]   CI (99.9%): [1117.111, 1218.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101556.582 ±(99.9%) 2325.846 B/op [Average]
[info]   (min, avg, max) = (100537.683, 101556.582, 102138.857), stdev = 604.015
[info]   CI (99.9%): [99230.737, 103882.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.665 ±(99.9%) 1150.322 MB/sec [Average]
[info]   (min, avg, max) = (668.278, 1202.665, 1338.194), stdev = 298.735
[info]   CI (99.9%): [52.343, 2352.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   104747.593 ±(99.9%) 101922.755 B/op [Average]
[info]   (min, avg, max) = (57446.020, 104747.593, 117954.494), stdev = 26469.016
[info]   CI (99.9%): [2824.838, 206670.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.089 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.142), stdev = 1.841
[info]   CI (99.9%): [≈ 0, 7.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   73.131 ±(99.9%) 610.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 73.131, 356.524), stdev = 158.434
[info]   CI (99.9%): [≈ 0, 683.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 863138.319 ops/s
[info] # Warmup Iteration   2: 1491320.516 ops/s
[info] # Warmup Iteration   3: 1557686.522 ops/s
[info] # Warmup Iteration   4: 1556723.966 ops/s
[info] # Warmup Iteration   5: 1550668.623 ops/s
[info] Iteration   1: 1550429.637 ops/s
[info]                  ·gc.alloc.rate:               73.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 519.345 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1557108.271 ops/s
[info]                  ·gc.alloc.rate:      63.321 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1558535.160 ops/s
[info]                  ·gc.alloc.rate:      63.379 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1558062.595 ops/s
[info]                  ·gc.alloc.rate:      63.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1558522.268 ops/s
[info]                  ·gc.alloc.rate:      63.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1556531.586 ±(99.9%) 13323.376 ops/s [Average]
[info]   (min, avg, max) = (1550429.637, 1556531.586, 1558535.160), stdev = 3460.038
[info]   CI (99.9%): [1543208.210, 1569854.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   65.383 ±(99.9%) 17.440 MB/sec [Average]
[info]   (min, avg, max) = (63.321, 65.383, 73.485), stdev = 4.529
[info]   CI (99.9%): [47.943, 82.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   66.119 ±(99.9%) 18.246 B/op [Average]
[info]   (min, avg, max) = (64.000, 66.119, 74.596), stdev = 4.738
[info]   CI (99.9%): [47.874, 84.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.323 ±(99.9%) 881.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.323, 511.614), stdev = 228.801
[info]   CI (99.9%): [≈ 0, 983.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   103.869 ±(99.9%) 894.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.869, 519.345), stdev = 232.258
[info]   CI (99.9%): [≈ 0, 998.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6120.129 ops/s
[info] # Warmup Iteration   2: 65967.336 ops/s
[info] # Warmup Iteration   3: 82287.904 ops/s
[info] # Warmup Iteration   4: 82499.189 ops/s
[info] # Warmup Iteration   5: 81388.945 ops/s
[info] Iteration   1: 81831.825 ops/s
[info]                  ·gc.alloc.rate:               3354.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          64509.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3355.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64517.505 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 82167.442 ops/s
[info]                  ·gc.alloc.rate:                   3408.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              65285.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64484.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 82789.211 ops/s
[info]                  ·gc.alloc.rate:               3434.499 MB/sec
[info]                  ·gc.alloc.rate.norm:          65274.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64224.504 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 82430.741 ops/s
[info]                  ·gc.alloc.rate:               3420.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          65293.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64651.313 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 82179.572 ops/s
[info]                  ·gc.alloc.rate:               3383.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          64802.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51973.996 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82279.758 ±(99.9%) 1369.058 ops/s [Average]
[info]   (min, avg, max) = (81831.825, 82279.758, 82789.211), stdev = 355.540
[info]   CI (99.9%): [80910.700, 83648.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3400.309 ±(99.9%) 121.516 MB/sec [Average]
[info]   (min, avg, max) = (3354.756, 3400.309, 3434.499), stdev = 31.557
[info]   CI (99.9%): [3278.793, 3521.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65032.775 ±(99.9%) 1384.136 B/op [Average]
[info]   (min, avg, max) = (64509.416, 65032.775, 65293.006), stdev = 359.456
[info]   CI (99.9%): [63648.639, 66416.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3240.297 ±(99.9%) 1134.231 MB/sec [Average]
[info]   (min, avg, max) = (2713.816, 3240.297, 3386.557), stdev = 294.556
[info]   CI (99.9%): [2106.066, 4374.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61970.299 ±(99.9%) 21526.029 B/op [Average]
[info]   (min, avg, max) = (51973.996, 61970.299, 64651.313), stdev = 5590.241
[info]   CI (99.9%): [40444.270, 83496.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.159 ±(99.9%) 1.373 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.797), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575155.564 ops/s
[info] # Warmup Iteration   2: 1773113.813 ops/s
[info] # Warmup Iteration   3: 1866618.993 ops/s
[info] # Warmup Iteration   4: 1866192.976 ops/s
[info] # Warmup Iteration   5: 1825088.340 ops/s
[info] Iteration   1: 1858528.186 ops/s
[info]                  ·gc.alloc.rate:               1013.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          858.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1131.065 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1842403.734 ops/s
[info]                  ·gc.alloc.rate:               982.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          838.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1831901.915 ops/s
[info]                  ·gc.alloc.rate:                   991.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              851.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1148.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1871435.838 ops/s
[info]                  ·gc.alloc.rate:               1006.212 MB/sec
[info]                  ·gc.alloc.rate.norm:          846.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 562.458 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1850002.568 ops/s
[info]                  ·gc.alloc.rate:                   996.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1139.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1850854.448 ±(99.9%) 58201.393 ops/s [Average]
[info]   (min, avg, max) = (1831901.915, 1850854.448, 1871435.838), stdev = 15114.717
[info]   CI (99.9%): [1792653.056, 1909055.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   998.056 ±(99.9%) 47.809 MB/sec [Average]
[info]   (min, avg, max) = (982.132, 998.056, 1013.877), stdev = 12.416
[info]   CI (99.9%): [950.247, 1045.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   848.664 ±(99.9%) 27.751 B/op [Average]
[info]   (min, avg, max) = (838.974, 848.664, 858.558), stdev = 7.207
[info]   CI (99.9%): [820.913, 876.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.874 ±(99.9%) 1410.456 MB/sec [Average]
[info]   (min, avg, max) = (668.468, 1069.874, 1339.093), stdev = 366.291
[info]   CI (99.9%): [≈ 0, 2480.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   910.520 ±(99.9%) 1208.722 B/op [Average]
[info]   (min, avg, max) = (562.458, 910.520, 1148.928), stdev = 313.901
[info]   CI (99.9%): [≈ 0, 2119.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1154861.726 ops/s
[info] # Warmup Iteration   2: 2010048.996 ops/s
[info] # Warmup Iteration   3: 2258931.924 ops/s
[info] # Warmup Iteration   4: 2251183.182 ops/s
[info] # Warmup Iteration   5: 2254611.221 ops/s
[info] Iteration   1: 2252161.565 ops/s
[info]                  ·gc.alloc.rate:               654.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2257203.719 ops/s
[info]                  ·gc.alloc.rate:               656.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2258714.372 ops/s
[info]                  ·gc.alloc.rate:               656.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.907 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2259362.922 ops/s
[info]                  ·gc.alloc.rate:               652.370 MB/sec
[info]                  ·gc.alloc.rate.norm:          454.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467.756 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2262627.993 ops/s
[info]                  ·gc.alloc.rate:                   649.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              451.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2258014.114 ±(99.9%) 14726.711 ops/s [Average]
[info]   (min, avg, max) = (2252161.565, 2258014.114, 2262627.993), stdev = 3824.480
[info]   CI (99.9%): [2243287.403, 2272740.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   653.972 ±(99.9%) 11.385 MB/sec [Average]
[info]   (min, avg, max) = (649.681, 653.972, 656.879), stdev = 2.957
[info]   CI (99.9%): [642.587, 665.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.801 ±(99.9%) 10.085 B/op [Average]
[info]   (min, avg, max) = (451.818, 455.801, 457.992), stdev = 2.619
[info]   CI (99.9%): [445.716, 465.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.275 ±(99.9%) 1.440 MB/sec [Average]
[info]   (min, avg, max) = (670.857, 671.275, 671.619), stdev = 0.374
[info]   CI (99.9%): [669.835, 672.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   467.859 ±(99.9%) 2.376 B/op [Average]
[info]   (min, avg, max) = (467.076, 467.859, 468.800), stdev = 0.617
[info]   CI (99.9%): [465.483, 470.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1324262.642 ops/s
[info] # Warmup Iteration   2: 2326938.681 ops/s
[info] # Warmup Iteration   3: 2375740.914 ops/s
[info] # Warmup Iteration   4: 2392400.351 ops/s
[info] # Warmup Iteration   5: 2401631.836 ops/s
[info] Iteration   1: 2400896.688 ops/s
[info]                  ·gc.alloc.rate:      24.408 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2401800.119 ops/s
[info]                  ·gc.alloc.rate:      24.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2401807.023 ops/s
[info]                  ·gc.alloc.rate:      24.419 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2402656.862 ops/s
[info]                  ·gc.alloc.rate:      24.425 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2401901.716 ops/s
[info]                  ·gc.alloc.rate:      24.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2401812.482 ±(99.9%) 2404.575 ops/s [Average]
[info]   (min, avg, max) = (2400896.688, 2401812.482, 2402656.862), stdev = 624.460
[info]   CI (99.9%): [2399407.907, 2404217.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.417 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (24.408, 24.417, 24.425), stdev = 0.006
[info]   CI (99.9%): [24.394, 24.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12490.429 ops/s
[info] # Warmup Iteration   2: 47058.462 ops/s
[info] # Warmup Iteration   3: 51876.905 ops/s
[info] # Warmup Iteration   4: 50263.478 ops/s
[info] # Warmup Iteration   5: 50825.148 ops/s
[info] Iteration   1: 51621.208 ops/s
[info]                  ·gc.alloc.rate:                   2194.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              66881.245 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61212.630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.473 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 50781.857 ops/s
[info]                  ·gc.alloc.rate:                   2169.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              67221.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62036.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 51662.562 ops/s
[info]                  ·gc.alloc.rate:                   2219.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              67603.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60953.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 50778.493 ops/s
[info]                  ·gc.alloc.rate:                   2169.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              67230.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62073.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 50999.252 ops/s
[info]                  ·gc.alloc.rate:                   2232.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              68877.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82622.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51168.675 ±(99.9%) 1699.619 ops/s [Average]
[info]   (min, avg, max) = (50778.493, 51168.675, 51662.562), stdev = 441.386
[info]   CI (99.9%): [49469.056, 52868.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2196.798 ±(99.9%) 110.521 MB/sec [Average]
[info]   (min, avg, max) = (2169.023, 2196.798, 2232.055), stdev = 28.702
[info]   CI (99.9%): [2086.276, 2307.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67562.825 ±(99.9%) 2997.006 B/op [Average]
[info]   (min, avg, max) = (66881.245, 67562.825, 68877.890), stdev = 778.313
[info]   CI (99.9%): [64565.819, 70559.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.284 ±(99.9%) 1160.659 MB/sec [Average]
[info]   (min, avg, max) = (2000.949, 2138.284, 2677.453), stdev = 301.419
[info]   CI (99.9%): [977.625, 3298.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65779.747 ±(99.9%) 36304.658 B/op [Average]
[info]   (min, avg, max) = (60953.338, 65779.747, 82622.181), stdev = 9428.204
[info]   CI (99.9%): [29475.090, 102084.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.891 ±(99.9%) 7.229 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.891, 4.248), stdev = 1.877
[info]   CI (99.9%): [≈ 0, 8.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.182 ±(99.9%) 220.283 B/op [Average]
[info]   (min, avg, max) = (0.634, 27.182, 129.473), stdev = 57.207
[info]   CI (99.9%): [≈ 0, 247.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88664.780 ops/s
[info] # Warmup Iteration   2: 725800.387 ops/s
[info] # Warmup Iteration   3: 861673.058 ops/s
[info] # Warmup Iteration   4: 864217.746 ops/s
[info] # Warmup Iteration   5: 853963.246 ops/s
[info] Iteration   1: 876829.758 ops/s
[info]                  ·gc.alloc.rate:                   2824.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              5069.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4804.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 882604.586 ops/s
[info]                  ·gc.alloc.rate:                   2816.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              5021.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4768.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 879488.307 ops/s
[info]                  ·gc.alloc.rate:               2862.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          5118.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3345.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5983.836 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 883210.381 ops/s
[info]                  ·gc.alloc.rate:               2859.030 MB/sec
[info]                  ·gc.alloc.rate.norm:          5094.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4789.899 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 869259.170 ops/s
[info]                  ·gc.alloc.rate:               2815.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          5098.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4880.455 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   878278.440 ±(99.9%) 21778.214 ops/s [Average]
[info]   (min, avg, max) = (869259.170, 878278.440, 883210.381), stdev = 5655.733
[info]   CI (99.9%): [856500.227, 900056.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2835.491 ±(99.9%) 89.042 MB/sec [Average]
[info]   (min, avg, max) = (2815.923, 2835.491, 2862.047), stdev = 23.124
[info]   CI (99.9%): [2746.449, 2924.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5080.541 ±(99.9%) 143.074 B/op [Average]
[info]   (min, avg, max) = (5021.924, 5080.541, 5118.409), stdev = 37.156
[info]   CI (99.9%): [4937.467, 5223.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2815.990 ±(99.9%) 1141.302 MB/sec [Average]
[info]   (min, avg, max) = (2673.927, 2815.990, 3345.964), stdev = 296.393
[info]   CI (99.9%): [1674.688, 3957.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5045.305 ±(99.9%) 2026.815 B/op [Average]
[info]   (min, avg, max) = (4768.036, 5045.305, 5983.836), stdev = 526.358
[info]   CI (99.9%): [3018.490, 7072.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.030 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.630 ops/s
[info] # Warmup Iteration   2: 4571178.198 ops/s
[info] # Warmup Iteration   3: 5160515.339 ops/s
[info] # Warmup Iteration   4: 4978715.629 ops/s
[info] # Warmup Iteration   5: 5213667.654 ops/s
[info] Iteration   1: 5235659.557 ops/s
[info]                  ·gc.alloc.rate:      319.491 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5205889.375 ops/s
[info]                  ·gc.alloc.rate:               330.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 5177695.775 ops/s
[info]                  ·gc.alloc.rate:      315.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5096797.131 ops/s
[info]                  ·gc.alloc.rate:                   325.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5224073.917 ops/s
[info]                  ·gc.alloc.rate:      318.649 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5188023.151 ±(99.9%) 213675.423 ops/s [Average]
[info]   (min, avg, max) = (5096797.131, 5188023.151, 5235659.557), stdev = 55490.829
[info]   CI (99.9%): [4974347.728, 5401698.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   322.130 ±(99.9%) 23.193 MB/sec [Average]
[info]   (min, avg, max) = (315.975, 322.130, 330.799), stdev = 6.023
[info]   CI (99.9%): [298.937, 345.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   97.715 ±(99.9%) 9.081 B/op [Average]
[info]   (min, avg, max) = (96.000, 97.715, 100.586), stdev = 2.358
[info]   CI (99.9%): [88.635, 106.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.571 ±(99.9%) 1259.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.571, 666.161), stdev = 327.160
[info]   CI (99.9%): [≈ 0, 1495.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   72.076 ±(99.9%) 386.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.076, 205.709), stdev = 100.330
[info]   CI (99.9%): [≈ 0, 458.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35995.926 ops/s
[info] # Warmup Iteration   2: 744685.721 ops/s
[info] # Warmup Iteration   3: 979713.547 ops/s
[info] # Warmup Iteration   4: 998786.879 ops/s
[info] # Warmup Iteration   5: 1018804.774 ops/s
[info] Iteration   1: 1021624.491 ops/s
[info]                  ·gc.alloc.rate:               1209.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          1861.265 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2047.680 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1021984.081 ops/s
[info]                  ·gc.alloc.rate:               1185.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          1825.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1027.408 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1019427.386 ops/s
[info]                  ·gc.alloc.rate:                   1197.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2062.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1018836.959 ops/s
[info]                  ·gc.alloc.rate:                   1202.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              1857.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2065.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1022326.959 ops/s
[info]                  ·gc.alloc.rate:                   1207.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1859.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2059.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1020839.975 ±(99.9%) 6131.794 ops/s [Average]
[info]   (min, avg, max) = (1018836.959, 1020839.975, 1022326.959), stdev = 1592.407
[info]   CI (99.9%): [1014708.181, 1026971.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1200.547 ±(99.9%) 37.992 MB/sec [Average]
[info]   (min, avg, max) = (1185.156, 1200.547, 1209.765), stdev = 9.867
[info]   CI (99.9%): [1162.555, 1238.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1850.328 ±(99.9%) 57.689 B/op [Average]
[info]   (min, avg, max) = (1825.126, 1850.328, 1861.265), stdev = 14.982
[info]   CI (99.9%): [1792.639, 1908.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1201.725 ±(99.9%) 1150.751 MB/sec [Average]
[info]   (min, avg, max) = (667.153, 1201.725, 1337.578), stdev = 298.846
[info]   CI (99.9%): [50.975, 2352.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1852.318 ±(99.9%) 1775.863 B/op [Average]
[info]   (min, avg, max) = (1027.408, 1852.318, 2065.266), stdev = 461.186
[info]   CI (99.9%): [76.454, 3628.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.872 ±(99.9%) 7.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 4.288), stdev = 1.910
[info]   CI (99.9%): [≈ 0, 8.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.343 ±(99.9%) 11.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.343, 6.602), stdev = 2.940
[info]   CI (99.9%): [≈ 0, 12.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2005762.870 ops/s
[info] # Warmup Iteration   2: 8656869.568 ops/s
[info] # Warmup Iteration   3: 8919490.118 ops/s
[info] # Warmup Iteration   4: 8957351.457 ops/s
[info] # Warmup Iteration   5: 9281981.142 ops/s
[info] Iteration   1: 9242235.634 ops/s
[info]                  ·gc.alloc.rate:               441.416 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87.121 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 9208653.374 ops/s
[info]                  ·gc.alloc.rate:               436.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          74.646 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9219521.992 ops/s
[info]                  ·gc.alloc.rate:                   437.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              74.653 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9276082.078 ops/s
[info]                  ·gc.alloc.rate:      424.349 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9261520.823 ops/s
[info]                  ·gc.alloc.rate:               448.193 MB/sec
[info]                  ·gc.alloc.rate.norm:          76.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9241602.780 ±(99.9%) 108215.691 ops/s [Average]
[info]   (min, avg, max) = (9208653.374, 9241602.780, 9276082.078), stdev = 28103.271
[info]   CI (99.9%): [9133387.090, 9349818.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   437.621 ±(99.9%) 33.520 MB/sec [Average]
[info]   (min, avg, max) = (424.349, 437.621, 448.193), stdev = 8.705
[info]   CI (99.9%): [404.101, 471.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.527 ±(99.9%) 5.939 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.527, 76.166), stdev = 1.542
[info]   CI (99.9%): [68.588, 80.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   473.377 ±(99.9%) 1064.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 473.377, 671.905), stdev = 276.490
[info]   CI (99.9%): [≈ 0, 1538.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80.680 ±(99.9%) 181.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.680, 114.680), stdev = 47.100
[info]   CI (99.9%): [≈ 0, 262.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630.715 ops/s
[info] # Warmup Iteration   2: 131121.518 ops/s
[info] # Warmup Iteration   3: 462909.625 ops/s
[info] # Warmup Iteration   4: 477979.953 ops/s
[info] # Warmup Iteration   5: 472029.117 ops/s
[info] Iteration   1: 474693.696 ops/s
[info]                  ·gc.alloc.rate:                   2311.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              7665.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8885.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.175 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 479010.240 ops/s
[info]                  ·gc.alloc.rate:                   2329.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              7653.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6618.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 479748.678 ops/s
[info]                  ·gc.alloc.rate:               2306.542 MB/sec
[info]                  ·gc.alloc.rate.norm:          7566.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6612.891 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 478560.104 ops/s
[info]                  ·gc.alloc.rate:               2340.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          7698.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8855.121 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 479269.939 ops/s
[info]                  ·gc.alloc.rate:               2330.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          7653.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6643.161 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   478256.531 ±(99.9%) 7846.136 ops/s [Average]
[info]   (min, avg, max) = (474693.696, 478256.531, 479748.678), stdev = 2037.617
[info]   CI (99.9%): [470410.395, 486102.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2323.880 ±(99.9%) 54.657 MB/sec [Average]
[info]   (min, avg, max) = (2306.542, 2323.880, 2340.815), stdev = 14.194
[info]   CI (99.9%): [2269.223, 2378.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7647.589 ±(99.9%) 187.776 B/op [Average]
[info]   (min, avg, max) = (7566.787, 7647.589, 7698.460), stdev = 48.765
[info]   CI (99.9%): [7459.813, 7835.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.113 ±(99.9%) 1409.973 MB/sec [Average]
[info]   (min, avg, max) = (2014.402, 2285.113, 2692.513), stdev = 366.165
[info]   CI (99.9%): [875.140, 3695.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7523.048 ±(99.9%) 4735.914 B/op [Average]
[info]   (min, avg, max) = (6612.891, 7523.048, 8885.339), stdev = 1229.902
[info]   CI (99.9%): [2787.134, 12258.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.275 ±(99.9%) 1.625 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.275, 0.958), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 1.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.909 ±(99.9%) 5.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.909, 3.175), stdev = 1.399
[info]   CI (99.9%): [≈ 0, 6.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1164.360 ops/s
[info] # Warmup Iteration   2: 4172.885 ops/s
[info] # Warmup Iteration   3: 4137.384 ops/s
[info] # Warmup Iteration   4: 4659.375 ops/s
[info] # Warmup Iteration   5: 4699.014 ops/s
[info] Iteration   1: 4712.113 ops/s
[info]                  ·gc.alloc.rate:                   2364.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              789729.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     892835.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1497.628 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4719.860 ops/s
[info]                  ·gc.alloc.rate:                   2364.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              788398.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666326.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.527 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4729.847 ops/s
[info]                  ·gc.alloc.rate:                   2384.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              793266.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     886779.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4733.897 ops/s
[info]                  ·gc.alloc.rate:                   2386.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              793318.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665685.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.841 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4728.534 ops/s
[info]                  ·gc.alloc.rate:                   2398.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              797761.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     889486.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.829 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4724.850 ±(99.9%) 33.762 ops/s [Average]
[info]   (min, avg, max) = (4712.113, 4724.850, 4733.897), stdev = 8.768
[info]   CI (99.9%): [4691.088, 4758.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2379.549 ±(99.9%) 56.950 MB/sec [Average]
[info]   (min, avg, max) = (2364.433, 2379.549, 2398.361), stdev = 14.790
[info]   CI (99.9%): [2322.599, 2436.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   792494.781 ±(99.9%) 14074.992 B/op [Average]
[info]   (min, avg, max) = (788398.044, 792494.781, 797761.685), stdev = 3655.231
[info]   CI (99.9%): [778419.789, 806569.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2402.649 ±(99.9%) 1414.191 MB/sec [Average]
[info]   (min, avg, max) = (1998.336, 2402.649, 2674.119), stdev = 367.261
[info]   CI (99.9%): [988.458, 3816.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   800222.647 ±(99.9%) 471863.847 B/op [Average]
[info]   (min, avg, max) = (665685.207, 800222.647, 892835.877), stdev = 122541.543
[info]   CI (99.9%): [328358.800, 1272086.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.993 ±(99.9%) 7.522 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.993, 4.484), stdev = 1.953
[info]   CI (99.9%): [≈ 0, 8.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   331.403 ±(99.9%) 2512.542 B/op [Average]
[info]   (min, avg, max) = (13.829, 331.403, 1497.628), stdev = 652.499
[info]   CI (99.9%): [≈ 0, 2843.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886.600 ops/s
[info] # Warmup Iteration   2: 5456.613 ops/s
[info] # Warmup Iteration   3: 6676.040 ops/s
[info] # Warmup Iteration   4: 6913.546 ops/s
[info] # Warmup Iteration   5: 6916.589 ops/s
[info] Iteration   1: 6834.885 ops/s
[info]                  ·gc.alloc.rate:                   2323.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              534922.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     615465.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 6721.889 ops/s
[info]                  ·gc.alloc.rate:                   2284.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              534761.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470642.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6756.235 ops/s
[info]                  ·gc.alloc.rate:                   2295.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              534820.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469205.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.849 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6835.451 ops/s
[info]                  ·gc.alloc.rate:               2363.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          544170.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 619912.855 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 6766.297 ops/s
[info]                  ·gc.alloc.rate:               2312.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          537969.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 470759.187 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6782.951 ±(99.9%) 194.190 ops/s [Average]
[info]   (min, avg, max) = (6721.889, 6782.951, 6835.451), stdev = 50.431
[info]   CI (99.9%): [6588.761, 6977.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2316.002 ±(99.9%) 117.243 MB/sec [Average]
[info]   (min, avg, max) = (2284.575, 2316.002, 2363.492), stdev = 30.448
[info]   CI (99.9%): [2198.760, 2433.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   537328.706 ±(99.9%) 15629.650 B/op [Average]
[info]   (min, avg, max) = (534761.191, 537328.706, 544170.754), stdev = 4058.970
[info]   CI (99.9%): [521699.056, 552958.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2282.845 ±(99.9%) 1405.914 MB/sec [Average]
[info]   (min, avg, max) = (2010.653, 2282.845, 2692.462), stdev = 365.111
[info]   CI (99.9%): [876.931, 3688.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   529197.202 ±(99.9%) 311129.061 B/op [Average]
[info]   (min, avg, max) = (469205.952, 529197.202, 619912.855), stdev = 80799.229
[info]   CI (99.9%): [218068.141, 840326.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.749), stdev = 0.322
[info]   CI (99.9%): [≈ 0, 1.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44.249 ±(99.9%) 285.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.249, 172.539), stdev = 74.038
[info]   CI (99.9%): [≈ 0, 329.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26452.767 ops/s
[info] # Warmup Iteration   2: 46099.331 ops/s
[info] # Warmup Iteration   3: 44474.271 ops/s
[info] # Warmup Iteration   4: 45335.124 ops/s
[info] # Warmup Iteration   5: 45505.339 ops/s
[info] Iteration   1: 45541.675 ops/s
[info]                  ·gc.alloc.rate:               754.384 MB/sec
[info]                  ·gc.alloc.rate.norm:          26069.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23182.998 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 45561.609 ops/s
[info]                  ·gc.alloc.rate:               760.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          26252.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23195.835 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 45619.179 ops/s
[info]                  ·gc.alloc.rate:                   757.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              26114.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23166.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.155 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45474.860 ops/s
[info]                  ·gc.alloc.rate:                   769.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              26618.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46526.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 45733.388 ops/s
[info]                  ·gc.alloc.rate:               753.022 MB/sec
[info]                  ·gc.alloc.rate.norm:          25910.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23131.533 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   45586.142 ±(99.9%) 374.006 ops/s [Average]
[info]   (min, avg, max) = (45474.860, 45586.142, 45733.388), stdev = 97.128
[info]   CI (99.9%): [45212.136, 45960.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   758.829 ±(99.9%) 25.064 MB/sec [Average]
[info]   (min, avg, max) = (753.022, 758.829, 769.421), stdev = 6.509
[info]   CI (99.9%): [733.765, 783.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26193.057 ±(99.9%) 1029.182 B/op [Average]
[info]   (min, avg, max) = (25910.508, 26193.057, 26618.413), stdev = 267.275
[info]   CI (99.9%): [25163.876, 27222.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.268 ±(99.9%) 1159.397 MB/sec [Average]
[info]   (min, avg, max) = (670.860, 806.268, 1344.877), stdev = 301.092
[info]   CI (99.9%): [≈ 0, 1965.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27840.749 ±(99.9%) 40222.648 B/op [Average]
[info]   (min, avg, max) = (23131.533, 27840.749, 46526.525), stdev = 10445.694
[info]   CI (99.9%): [≈ 0, 68063.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.575 ±(99.9%) 3.606 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.575, 2.155), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 853.563 ops/s
[info] # Warmup Iteration   2: 4255.673 ops/s
[info] # Warmup Iteration   3: 4725.143 ops/s
[info] # Warmup Iteration   4: 4922.624 ops/s
[info] # Warmup Iteration   5: 4972.005 ops/s
[info] Iteration   1: 4943.732 ops/s
[info]                  ·gc.alloc.rate:               1044.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          332655.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425367.736 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 4974.818 ops/s
[info]                  ·gc.alloc.rate:               1038.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          328520.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211569.595 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 4963.654 ops/s
[info]                  ·gc.alloc.rate:                   1052.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              333702.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424182.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4906.809 ops/s
[info]                  ·gc.alloc.rate:                   1045.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              335278.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429234.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 4933.499 ops/s
[info]                  ·gc.alloc.rate:               1023.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          326627.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 213539.793 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4944.502 ±(99.9%) 102.392 ops/s [Average]
[info]   (min, avg, max) = (4906.809, 4944.502, 4974.818), stdev = 26.591
[info]   CI (99.9%): [4842.110, 5046.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1041.048 ±(99.9%) 41.543 MB/sec [Average]
[info]   (min, avg, max) = (1023.938, 1041.048, 1052.519), stdev = 10.789
[info]   CI (99.9%): [999.505, 1082.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   331356.906 ±(99.9%) 14014.499 B/op [Average]
[info]   (min, avg, max) = (326627.442, 331356.906, 335278.889), stdev = 3639.521
[info]   CI (99.9%): [317342.407, 345371.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1070.125 ±(99.9%) 1409.718 MB/sec [Average]
[info]   (min, avg, max) = (668.747, 1070.125, 1338.343), stdev = 366.099
[info]   CI (99.9%): [≈ 0, 2479.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   340778.829 ±(99.9%) 450791.293 B/op [Average]
[info]   (min, avg, max) = (211569.595, 340778.829, 429234.767), stdev = 117069.067
[info]   CI (99.9%): [≈ 0, 791570.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.724 ±(99.9%) 36.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.724, 22.018), stdev = 9.547
[info]   CI (99.9%): [≈ 0, 42.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1409.273 ops/s
[info] # Warmup Iteration   2: 4612.769 ops/s
[info] # Warmup Iteration   3: 4634.002 ops/s
[info] # Warmup Iteration   4: 4893.359 ops/s
[info] # Warmup Iteration   5: 4935.222 ops/s
[info] Iteration   1: 4933.058 ops/s
[info]                  ·gc.alloc.rate:               617.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          196934.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210607.786 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 4925.273 ops/s
[info]                  ·gc.alloc.rate:               626.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          200316.292 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211056.253 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 4938.098 ops/s
[info]                  ·gc.alloc.rate:      603.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 192323.959 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4916.093 ops/s
[info]                  ·gc.alloc.rate:                   626.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              200497.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211442.567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4897.132 ops/s
[info]                  ·gc.alloc.rate:                   619.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              198979.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212476.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4921.931 ±(99.9%) 62.251 ops/s [Average]
[info]   (min, avg, max) = (4897.132, 4921.931, 4938.098), stdev = 16.166
[info]   CI (99.9%): [4859.679, 4984.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   618.617 ±(99.9%) 36.552 MB/sec [Average]
[info]   (min, avg, max) = (603.451, 618.617, 626.968), stdev = 9.492
[info]   CI (99.9%): [582.065, 655.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   197810.358 ±(99.9%) 13020.407 B/op [Average]
[info]   (min, avg, max) = (192323.959, 197810.358, 200497.663), stdev = 3381.358
[info]   CI (99.9%): [184789.951, 210830.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   528.458 ±(99.9%) 1137.547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 528.458, 661.106), stdev = 295.417
[info]   CI (99.9%): [≈ 0, 1666.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   169116.694 ±(99.9%) 364046.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 169116.694, 212476.864), stdev = 94541.628
[info]   CI (99.9%): [≈ 0, 533162.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.983 ±(99.9%) 11.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.983, 6.690), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 13.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3789.713 ops/s
[info] # Warmup Iteration   2: 6269.928 ops/s
[info] # Warmup Iteration   3: 6596.616 ops/s
[info] # Warmup Iteration   4: 6617.494 ops/s
[info] # Warmup Iteration   5: 6581.816 ops/s
[info] Iteration   1: 6524.145 ops/s
[info]                  ·gc.alloc.rate:                   333.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              80507.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123399.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6399.566 ops/s
[info]                  ·gc.alloc.rate:      313.669 MB/sec
[info]                  ·gc.alloc.rate.norm: 77135.490 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6570.896 ops/s
[info]                  ·gc.alloc.rate:               333.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          79758.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122517.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6612.972 ops/s
[info]                  ·gc.alloc.rate:      323.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 76888.065 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6600.808 ops/s
[info]                  ·gc.alloc.rate:               343.046 MB/sec
[info]                  ·gc.alloc.rate.norm:          81766.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159938.811 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6541.677 ±(99.9%) 333.120 ops/s [Average]
[info]   (min, avg, max) = (6399.566, 6541.677, 6612.972), stdev = 86.510
[info]   CI (99.9%): [6208.557, 6874.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   329.341 ±(99.9%) 43.347 MB/sec [Average]
[info]   (min, avg, max) = (313.669, 329.341, 343.046), stdev = 11.257
[info]   CI (99.9%): [285.993, 372.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79211.134 ±(99.9%) 8216.566 B/op [Average]
[info]   (min, avg, max) = (76888.065, 79211.134, 81766.021), stdev = 2133.816
[info]   CI (99.9%): [70994.568, 87427.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.869 ±(99.9%) 1217.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.869, 671.016), stdev = 316.111
[info]   CI (99.9%): [≈ 0, 1556.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81171.165 ±(99.9%) 291192.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81171.165, 159938.811), stdev = 75621.775
[info]   CI (99.9%): [≈ 0, 372363.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.787 ±(99.9%) 6.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.933), stdev = 1.759
[info]   CI (99.9%): [≈ 0, 7.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2923.439 ops/s
[info] # Warmup Iteration   2: 5968.831 ops/s
[info] # Warmup Iteration   3: 6721.931 ops/s
[info] # Warmup Iteration   4: 6673.905 ops/s
[info] # Warmup Iteration   5: 6694.792 ops/s
[info] Iteration   1: 6700.031 ops/s
[info]                  ·gc.alloc.rate:      278.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 65444.981 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6596.991 ops/s
[info]                  ·gc.alloc.rate:                   290.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              69292.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122053.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.966 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6681.743 ops/s
[info]                  ·gc.alloc.rate:      277.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.069 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6648.152 ops/s
[info]                  ·gc.alloc.rate:               296.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          70175.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121098.702 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6705.872 ops/s
[info]                  ·gc.alloc.rate:      278.665 MB/sec
[info]                  ·gc.alloc.rate.norm: 65400.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6666.558 ±(99.9%) 173.012 ops/s [Average]
[info]   (min, avg, max) = (6596.991, 6666.558, 6705.872), stdev = 44.931
[info]   CI (99.9%): [6493.546, 6839.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   284.394 ±(99.9%) 33.069 MB/sec [Average]
[info]   (min, avg, max) = (277.670, 284.394, 296.450), stdev = 8.588
[info]   CI (99.9%): [251.325, 317.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67142.758 ±(99.9%) 9188.996 B/op [Average]
[info]   (min, avg, max) = (65400.064, 67142.758, 70175.795), stdev = 2386.353
[info]   CI (99.9%): [57953.762, 76331.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.678 ±(99.9%) 1079.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.678, 511.820), stdev = 280.267
[info]   CI (99.9%): [≈ 0, 1283.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48630.361 ±(99.9%) 256417.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48630.361, 122053.102), stdev = 66590.719
[info]   CI (99.9%): [≈ 0, 305047.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.993 ±(99.9%) 8.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.993, 4.966), stdev = 2.221
[info]   CI (99.9%): [≈ 0, 9.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2127.043 ops/s
[info] # Warmup Iteration   2: 6079.951 ops/s
[info] # Warmup Iteration   3: 7741.363 ops/s
[info] # Warmup Iteration   4: 7913.968 ops/s
[info] # Warmup Iteration   5: 8022.837 ops/s
[info] Iteration   1: 7973.916 ops/s
[info]                  ·gc.alloc.rate:                   1691.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              333819.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396897.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.325 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 7986.257 ops/s
[info]                  ·gc.alloc.rate:                   1686.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              332460.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264375.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 635.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7925.637 ops/s
[info]                  ·gc.alloc.rate:                   1700.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              337653.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399085.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.750 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7818.002 ops/s
[info]                  ·gc.alloc.rate:                   1667.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              335680.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268982.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.571 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7661.920 ops/s
[info]                  ·gc.alloc.rate:                   1630.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              334765.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274184.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7873.146 ±(99.9%) 521.479 ops/s [Average]
[info]   (min, avg, max) = (7661.920, 7873.146, 7986.257), stdev = 135.426
[info]   CI (99.9%): [7351.667, 8394.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1675.310 ±(99.9%) 107.540 MB/sec [Average]
[info]   (min, avg, max) = (1630.249, 1675.310, 1700.501), stdev = 27.928
[info]   CI (99.9%): [1567.769, 1782.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334876.059 ±(99.9%) 7536.837 B/op [Average]
[info]   (min, avg, max) = (332460.957, 334876.059, 337653.755), stdev = 1957.293
[info]   CI (99.9%): [327339.222, 342412.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.741 ±(99.9%) 1418.993 MB/sec [Average]
[info]   (min, avg, max) = (1335.226, 1606.741, 2010.939), stdev = 368.508
[info]   CI (99.9%): [187.748, 3025.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   320705.014 ±(99.9%) 272017.484 B/op [Average]
[info]   (min, avg, max) = (264375.571, 320705.014, 399085.883), stdev = 70642.077
[info]   CI (99.9%): [48687.530, 592722.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.860 ±(99.9%) 5.281 MB/sec [Average]
[info]   (min, avg, max) = (0.054, 0.860, 3.226), stdev = 1.371
[info]   CI (99.9%): [≈ 0, 6.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   169.914 ±(99.9%) 1040.314 B/op [Average]
[info]   (min, avg, max) = (11.090, 169.914, 635.834), stdev = 270.166
[info]   CI (99.9%): [≈ 0, 1210.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 12.000), stdev = 3.564
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.723 ops/s
[info] # Warmup Iteration   2: 17349.983 ops/s
[info] # Warmup Iteration   3: 18491.978 ops/s
[info] # Warmup Iteration   4: 18634.751 ops/s
[info] # Warmup Iteration   5: 18508.015 ops/s
[info] Iteration   1: 19265.239 ops/s
[info]                  ·gc.alloc.rate:      475.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 38840.843 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18577.067 ops/s
[info]                  ·gc.alloc.rate:               489.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          41508.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56266.430 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 18757.835 ops/s
[info]                  ·gc.alloc.rate:                   482.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              40476.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55723.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19056.106 ops/s
[info]                  ·gc.alloc.rate:               494.648 MB/sec
[info]                  ·gc.alloc.rate.norm:          40851.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54934.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 19296.847 ops/s
[info]                  ·gc.alloc.rate:      476.194 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18990.619 ±(99.9%) 1215.691 ops/s [Average]
[info]   (min, avg, max) = (18577.067, 18990.619, 19296.847), stdev = 315.711
[info]   CI (99.9%): [17774.928, 20206.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   483.741 ±(99.9%) 32.509 MB/sec [Average]
[info]   (min, avg, max) = (475.455, 483.741, 494.648), stdev = 8.442
[info]   CI (99.9%): [451.233, 516.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   40102.050 ±(99.9%) 4670.810 B/op [Average]
[info]   (min, avg, max) = (38832.022, 40102.050, 41508.933), stdev = 1212.995
[info]   CI (99.9%): [35431.240, 44772.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   398.701 ±(99.9%) 1401.492 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 398.701, 665.170), stdev = 363.963
[info]   CI (99.9%): [≈ 0, 1800.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   33384.972 ±(99.9%) 117367.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33384.972, 56266.430), stdev = 30479.848
[info]   CI (99.9%): [≈ 0, 150752.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.003 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.274 ±(99.9%) 2.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.274, 1.370), stdev = 0.613
[info]   CI (99.9%): [≈ 0, 2.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1754.320 ops/s
[info] # Warmup Iteration   2: 12815.949 ops/s
[info] # Warmup Iteration   3: 15657.144 ops/s
[info] # Warmup Iteration   4: 15683.314 ops/s
[info] # Warmup Iteration   5: 15773.266 ops/s
[info] Iteration   1: 15845.433 ops/s
[info]                  ·gc.alloc.rate:      432.326 MB/sec
[info]                  ·gc.alloc.rate.norm: 42934.163 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15779.652 ops/s
[info]                  ·gc.alloc.rate:               427.622 MB/sec
[info]                  ·gc.alloc.rate.norm:          42650.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51026.889 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 15763.472 ops/s
[info]                  ·gc.alloc.rate:                   434.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              43355.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65939.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15739.337 ops/s
[info]                  ·gc.alloc.rate:      419.571 MB/sec
[info]                  ·gc.alloc.rate.norm: 41948.676 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15802.502 ops/s
[info]                  ·gc.alloc.rate:               435.203 MB/sec
[info]                  ·gc.alloc.rate.norm:          43344.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65776.484 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15786.079 ±(99.9%) 155.580 ops/s [Average]
[info]   (min, avg, max) = (15739.337, 15786.079, 15845.433), stdev = 40.404
[info]   CI (99.9%): [15630.499, 15941.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   429.834 ±(99.9%) 24.848 MB/sec [Average]
[info]   (min, avg, max) = (419.571, 429.834, 435.203), stdev = 6.453
[info]   CI (99.9%): [404.986, 454.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42846.716 ±(99.9%) 2244.490 B/op [Average]
[info]   (min, avg, max) = (41948.676, 42846.716, 43355.118), stdev = 582.887
[info]   CI (99.9%): [40602.226, 45091.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   366.557 ±(99.9%) 1309.616 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 366.557, 660.758), stdev = 340.103
[info]   CI (99.9%): [≈ 0, 1676.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   36548.511 ±(99.9%) 130571.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36548.511, 65939.183), stdev = 33909.058
[info]   CI (99.9%): [≈ 0, 167120.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.416 ±(99.9%) 3.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.416, 2.078), stdev = 0.929
[info]   CI (99.9%): [≈ 0, 3.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13371.110 ops/s
[info] # Warmup Iteration   2: 23237.228 ops/s
[info] # Warmup Iteration   3: 23383.716 ops/s
[info] # Warmup Iteration   4: 22540.929 ops/s
[info] # Warmup Iteration   5: 22584.942 ops/s
[info] Iteration   1: 22578.890 ops/s
[info]                  ·gc.alloc.rate:               436.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          30399.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35661.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 22744.784 ops/s
[info]                  ·gc.alloc.rate:      418.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22681.466 ops/s
[info]                  ·gc.alloc.rate:                   431.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              29896.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46523.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22224.705 ops/s
[info]                  ·gc.alloc.rate:                   434.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              30741.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47480.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.474 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22590.205 ops/s
[info]                  ·gc.alloc.rate:      415.334 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22564.010 ±(99.9%) 776.147 ops/s [Average]
[info]   (min, avg, max) = (22224.705, 22564.010, 22744.784), stdev = 201.563
[info]   CI (99.9%): [21787.863, 23340.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   427.042 ±(99.9%) 36.976 MB/sec [Average]
[info]   (min, avg, max) = (415.334, 427.042, 436.322), stdev = 9.603
[info]   CI (99.9%): [390.066, 464.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29778.641 ±(99.9%) 3206.070 B/op [Average]
[info]   (min, avg, max) = (28928.019, 29778.641, 30741.151), stdev = 832.606
[info]   CI (99.9%): [26572.571, 32984.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.670 ±(99.9%) 1326.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.670, 670.756), stdev = 344.537
[info]   CI (99.9%): [≈ 0, 1697.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25933.097 ±(99.9%) 92894.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25933.097, 47480.284), stdev = 24124.410
[info]   CI (99.9%): [≈ 0, 118827.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.375 ±(99.9%) 2.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.474), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119.874 ops/s
[info] # Warmup Iteration   2: 3294.030 ops/s
[info] # Warmup Iteration   3: 4037.677 ops/s
[info] # Warmup Iteration   4: 4159.763 ops/s
[info] # Warmup Iteration   5: 4093.935 ops/s
[info] Iteration   1: 4113.906 ops/s
[info]                  ·gc.alloc.rate:                   2509.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              959766.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1025387.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4169.384 ops/s
[info]                  ·gc.alloc.rate:                   2493.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              940852.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     759721.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4170.055 ops/s
[info]                  ·gc.alloc.rate:                   2539.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              958258.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014637.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4165.449 ops/s
[info]                  ·gc.alloc.rate:                   2550.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              963295.207 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018127.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4163.145 ops/s
[info]                  ·gc.alloc.rate:                   2523.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              953419.103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765656.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.739 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4156.388 ±(99.9%) 92.098 ops/s [Average]
[info]   (min, avg, max) = (4113.906, 4156.388, 4170.055), stdev = 23.917
[info]   CI (99.9%): [4064.290, 4248.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2523.160 ±(99.9%) 87.840 MB/sec [Average]
[info]   (min, avg, max) = (2493.221, 2523.160, 2550.217), stdev = 22.812
[info]   CI (99.9%): [2435.320, 2611.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   955118.361 ±(99.9%) 33609.124 B/op [Average]
[info]   (min, avg, max) = (940852.599, 955118.361, 963295.207), stdev = 8728.183
[info]   CI (99.9%): [921509.237, 988727.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2421.017 ±(99.9%) 1410.817 MB/sec [Average]
[info]   (min, avg, max) = (2013.230, 2421.017, 2695.380), stdev = 366.385
[info]   CI (99.9%): [1010.199, 3831.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   916706.155 ±(99.9%) 541658.188 B/op [Average]
[info]   (min, avg, max) = (759721.091, 916706.155, 1025387.564), stdev = 140666.911
[info]   CI (99.9%): [375047.968, 1458364.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.385 ±(99.9%) 2.345 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.385, 1.468), stdev = 0.609
[info]   CI (99.9%): [≈ 0, 2.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   146.863 ±(99.9%) 897.562 B/op [Average]
[info]   (min, avg, max) = (15.739, 146.863, 561.400), stdev = 233.094
[info]   CI (99.9%): [≈ 0, 1044.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1832.256 ops/s
[info] # Warmup Iteration   2: 9407.106 ops/s
[info] # Warmup Iteration   3: 10077.741 ops/s
[info] # Warmup Iteration   4: 10228.640 ops/s
[info] # Warmup Iteration   5: 9898.401 ops/s
[info] Iteration   1: 10104.117 ops/s
[info]                  ·gc.alloc.rate:                   2154.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              335471.402 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313006.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 575.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10070.168 ops/s
[info]                  ·gc.alloc.rate:                   2162.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              337998.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313469.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 10247.596 ops/s
[info]                  ·gc.alloc.rate:                   2200.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              337937.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410387.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.677 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10362.500 ops/s
[info]                  ·gc.alloc.rate:                   2224.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              337854.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304709.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10384.355 ops/s
[info]                  ·gc.alloc.rate:                   2229.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              337871.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304720.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.928 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10233.747 ±(99.9%) 554.726 ops/s [Average]
[info]   (min, avg, max) = (10070.168, 10233.747, 10384.355), stdev = 144.061
[info]   CI (99.9%): [9679.021, 10788.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2194.492 ±(99.9%) 133.130 MB/sec [Average]
[info]   (min, avg, max) = (2154.637, 2194.492, 2229.397), stdev = 34.573
[info]   CI (99.9%): [2061.362, 2327.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337426.665 ±(99.9%) 4214.595 B/op [Average]
[info]   (min, avg, max) = (335471.402, 337426.665, 337998.654), stdev = 1094.517
[info]   CI (99.9%): [333212.070, 341641.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2141.206 ±(99.9%) 1143.979 MB/sec [Average]
[info]   (min, avg, max) = (2005.762, 2141.206, 2672.639), stdev = 297.088
[info]   CI (99.9%): [997.227, 3285.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   329258.526 ±(99.9%) 175407.621 B/op [Average]
[info]   (min, avg, max) = (304709.205, 329258.526, 410387.954), stdev = 45552.802
[info]   CI (99.9%): [153850.905, 504666.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 6.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.828, 3.695), stdev = 1.603
[info]   CI (99.9%): [≈ 0, 7.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   128.680 ±(99.9%) 961.640 B/op [Average]
[info]   (min, avg, max) = (9.484, 128.680, 575.282), stdev = 249.735
[info]   CI (99.9%): [≈ 0, 1090.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.750 ops/s
[info] # Warmup Iteration   2: 41160.379 ops/s
[info] # Warmup Iteration   3: 57636.851 ops/s
[info] # Warmup Iteration   4: 56475.970 ops/s
[info] # Warmup Iteration   5: 57746.862 ops/s
[info] Iteration   1: 57874.953 ops/s
[info]                  ·gc.alloc.rate:                   559.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              15212.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18051.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.132 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 58062.748 ops/s
[info]                  ·gc.alloc.rate:               556.950 MB/sec
[info]                  ·gc.alloc.rate.norm:          15094.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17993.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 57937.804 ops/s
[info]                  ·gc.alloc.rate:               564.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          15328.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18050.193 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 58242.491 ops/s
[info]                  ·gc.alloc.rate:      544.553 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57921.700 ops/s
[info]                  ·gc.alloc.rate:               558.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          15179.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18055.802 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   58007.939 ±(99.9%) 571.338 ops/s [Average]
[info]   (min, avg, max) = (57874.953, 58007.939, 58242.491), stdev = 148.375
[info]   CI (99.9%): [57436.602, 58579.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   556.858 ±(99.9%) 28.597 MB/sec [Average]
[info]   (min, avg, max) = (544.553, 556.858, 564.489), stdev = 7.427
[info]   CI (99.9%): [528.261, 585.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15105.480 ±(99.9%) 906.461 B/op [Average]
[info]   (min, avg, max) = (14712.007, 15105.480, 15328.271), stdev = 235.405
[info]   CI (99.9%): [14199.019, 16011.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   531.443 ±(99.9%) 1143.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 531.443, 664.728), stdev = 297.086
[info]   CI (99.9%): [≈ 0, 1675.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14430.201 ±(99.9%) 31062.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14430.201, 18055.802), stdev = 8066.769
[info]   CI (99.9%): [≈ 0, 45492.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.226 ±(99.9%) 1.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 1.132), stdev = 0.506
[info]   CI (99.9%): [≈ 0, 2.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16870.775 ops/s
[info] # Warmup Iteration   2: 40775.238 ops/s
[info] # Warmup Iteration   3: 45615.688 ops/s
[info] # Warmup Iteration   4: 45172.869 ops/s
[info] # Warmup Iteration   5: 45064.057 ops/s
[info] Iteration   1: 45401.646 ops/s
[info]                  ·gc.alloc.rate:                   668.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              23178.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22791.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45198.311 ops/s
[info]                  ·gc.alloc.rate:               662.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          23049.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22928.250 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 45431.016 ops/s
[info]                  ·gc.alloc.rate:                   677.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              23454.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22811.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.721 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 45536.455 ops/s
[info]                  ·gc.alloc.rate:                   674.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              23314.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22805.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.439 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 45618.705 ops/s
[info]                  ·gc.alloc.rate:                   674.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              23258.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22763.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45437.227 ±(99.9%) 612.379 ops/s [Average]
[info]   (min, avg, max) = (45198.311, 45437.227, 45618.705), stdev = 159.033
[info]   CI (99.9%): [44824.848, 46049.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   671.373 ±(99.9%) 23.144 MB/sec [Average]
[info]   (min, avg, max) = (662.157, 671.373, 677.161), stdev = 6.010
[info]   CI (99.9%): [648.229, 694.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23251.116 ±(99.9%) 581.641 B/op [Average]
[info]   (min, avg, max) = (23049.403, 23251.116, 23454.351), stdev = 151.050
[info]   CI (99.9%): [22669.475, 23832.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   658.918 ±(99.9%) 3.888 MB/sec [Average]
[info]   (min, avg, max) = (657.507, 658.918, 659.908), stdev = 1.010
[info]   CI (99.9%): [655.030, 662.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22820.170 ±(99.9%) 243.334 B/op [Average]
[info]   (min, avg, max) = (22763.655, 22820.170, 22928.250), stdev = 63.193
[info]   CI (99.9%): [22576.835, 23063.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.291), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.596 ±(99.9%) 16.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.596, 10.103), stdev = 4.227
[info]   CI (99.9%): [≈ 0, 18.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42196.967 ops/s
[info] # Warmup Iteration   2: 85839.092 ops/s
[info] # Warmup Iteration   3: 87270.101 ops/s
[info] # Warmup Iteration   4: 89483.192 ops/s
[info] # Warmup Iteration   5: 89117.354 ops/s
[info] Iteration   1: 90310.708 ops/s
[info]                  ·gc.alloc.rate:                   698.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              12174.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11689.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88447.953 ops/s
[info]                  ·gc.alloc.rate:               678.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          12068.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11942.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 88266.812 ops/s
[info]                  ·gc.alloc.rate:               686.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          12234.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11967.469 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 88797.782 ops/s
[info]                  ·gc.alloc.rate:                   685.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              12142.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11901.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 90330.005 ops/s
[info]                  ·gc.alloc.rate:               696.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          12127.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11699.204 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89230.652 ±(99.9%) 3900.418 ops/s [Average]
[info]   (min, avg, max) = (88266.812, 89230.652, 90330.005), stdev = 1012.926
[info]   CI (99.9%): [85330.234, 93131.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   688.876 ±(99.9%) 32.043 MB/sec [Average]
[info]   (min, avg, max) = (678.421, 688.876, 698.598), stdev = 8.322
[info]   CI (99.9%): [656.833, 720.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12149.514 ±(99.9%) 236.056 B/op [Average]
[info]   (min, avg, max) = (12068.089, 12149.514, 12234.785), stdev = 61.303
[info]   CI (99.9%): [11913.458, 12385.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.270 ±(99.9%) 1.092 MB/sec [Average]
[info]   (min, avg, max) = (670.804, 671.270, 671.492), stdev = 0.284
[info]   CI (99.9%): [670.177, 672.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11840.172 ±(99.9%) 519.989 B/op [Average]
[info]   (min, avg, max) = (11689.927, 11840.172, 11967.469), stdev = 135.040
[info]   CI (99.9%): [11320.183, 12360.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.146 ±(99.9%) 0.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.369), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47184.525 ops/s
[info] # Warmup Iteration   2: 101919.645 ops/s
[info] # Warmup Iteration   3: 104673.323 ops/s
[info] # Warmup Iteration   4: 105501.221 ops/s
[info] # Warmup Iteration   5: 105526.580 ops/s
[info] Iteration   1: 105490.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105423.230 ops/s
[info]                  ·gc.alloc.rate:      0.048 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.722 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 105334.620 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105553.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105566.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   105473.702 ±(99.9%) 371.221 ops/s [Average]
[info]   (min, avg, max) = (105334.620, 105473.702, 105566.644), stdev = 96.405
[info]   CI (99.9%): [105102.481, 105844.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.010 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.010, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.148 ±(99.9%) 1.235 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.148, 0.722), stdev = 0.321
[info]   CI (99.9%): [≈ 0, 1.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656.571 ops/s
[info] # Warmup Iteration   2: 6925.001 ops/s
[info] # Warmup Iteration   3: 7765.158 ops/s
[info] # Warmup Iteration   4: 7801.708 ops/s
[info] # Warmup Iteration   5: 7763.842 ops/s
[info] Iteration   1: 7798.875 ops/s
[info]                  ·gc.alloc.rate:                   2355.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              475331.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405247.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71.417 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7818.950 ops/s
[info]                  ·gc.alloc.rate:                   2349.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              472797.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     540443.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7829.475 ops/s
[info]                  ·gc.alloc.rate:                   2352.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              472899.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405718.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.184 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7795.905 ops/s
[info]                  ·gc.alloc.rate:               2356.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          475750.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 408242.721 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7784.754 ops/s
[info]                  ·gc.alloc.rate:                   2382.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              481476.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546304.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.208 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7805.592 ±(99.9%) 70.003 ops/s [Average]
[info]   (min, avg, max) = (7784.754, 7805.592, 7829.475), stdev = 18.179
[info]   CI (99.9%): [7735.589, 7875.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2359.212 ±(99.9%) 50.746 MB/sec [Average]
[info]   (min, avg, max) = (2349.294, 2359.212, 2382.267), stdev = 13.178
[info]   CI (99.9%): [2308.467, 2409.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   475650.962 ±(99.9%) 13581.735 B/op [Average]
[info]   (min, avg, max) = (472797.008, 475650.962, 481476.351), stdev = 3527.133
[info]   CI (99.9%): [462069.227, 489232.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2287.415 ±(99.9%) 1430.335 MB/sec [Average]
[info]   (min, avg, max) = (2008.061, 2287.415, 2703.026), stdev = 371.453
[info]   CI (99.9%): [857.080, 3717.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   461191.510 ±(99.9%) 289026.674 B/op [Average]
[info]   (min, avg, max) = (405247.737, 461191.510, 546304.460), stdev = 75059.309
[info]   CI (99.9%): [172164.836, 750218.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.658 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.354), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.693 ±(99.9%) 132.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.693, 71.417), stdev = 34.430
[info]   CI (99.9%): [≈ 0, 160.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 558025.288 ops/s
[info] # Warmup Iteration   2: 8386293.985 ops/s
[info] # Warmup Iteration   3: 9141160.282 ops/s
[info] # Warmup Iteration   4: 9121717.643 ops/s
[info] # Warmup Iteration   5: 9260267.068 ops/s
[info] Iteration   1: 9253760.628 ops/s
[info]                  ·gc.alloc.rate:                   5010.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              852.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5390.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9080535.194 ops/s
[info]                  ·gc.alloc.rate:                   4895.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4737.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9168662.188 ops/s
[info]                  ·gc.alloc.rate:                   4944.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4752.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9252602.747 ops/s
[info]                  ·gc.alloc.rate:                   4986.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809.484 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 8937993.579 ops/s
[info]                  ·gc.alloc.rate:               4811.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          847.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4083.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718.921 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9138710.867 ±(99.9%) 512210.653 ops/s [Average]
[info]   (min, avg, max) = (8937993.579, 9138710.867, 9253760.628), stdev = 133019.480
[info]   CI (99.9%): [8626500.214, 9650921.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4929.832 ±(99.9%) 304.348 MB/sec [Average]
[info]   (min, avg, max) = (4811.906, 4929.832, 5010.485), stdev = 79.038
[info]   CI (99.9%): [4625.484, 5234.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   848.928 ±(99.9%) 7.310 B/op [Average]
[info]   (min, avg, max) = (847.234, 848.928, 852.195), stdev = 1.898
[info]   CI (99.9%): [841.618, 856.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4744.352 ±(99.9%) 1779.865 MB/sec [Average]
[info]   (min, avg, max) = (4083.145, 4744.352, 5390.179), stdev = 462.225
[info]   CI (99.9%): [2964.487, 6524.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   816.346 ±(99.9%) 269.864 B/op [Average]
[info]   (min, avg, max) = (718.921, 816.346, 916.774), stdev = 70.083
[info]   CI (99.9%): [546.482, 1086.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 13.000), stdev = 1.871
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.629 ops/s
[info] # Warmup Iteration   2: 33958265.954 ops/s
[info] # Warmup Iteration   3: 38279720.574 ops/s
[info] # Warmup Iteration   4: 37440189.546 ops/s
[info] # Warmup Iteration   5: 38181678.193 ops/s
[info] Iteration   1: 38180260.334 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38174354.393 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37819391.051 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38124439.856 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38071221.863 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38073933.500 ±(99.9%) 573538.693 ops/s [Average]
[info]   (min, avg, max) = (37819391.051, 38073933.500, 38180260.334), stdev = 148946.177
[info]   CI (99.9%): [37500394.806, 38647472.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223471.036 ops/s
[info] # Warmup Iteration   2: 9683363.026 ops/s
[info] # Warmup Iteration   3: 10541661.559 ops/s
[info] # Warmup Iteration   4: 10482812.592 ops/s
[info] # Warmup Iteration   5: 10877046.295 ops/s
[info] Iteration   1: 10886159.268 ops/s
[info]                  ·gc.alloc.rate:               3729.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3341.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.089 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 10885086.133 ops/s
[info]                  ·gc.alloc.rate:                   3752.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              542.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4024.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     581.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 10847987.449 ops/s
[info]                  ·gc.alloc.rate:               3716.664 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 488.753 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10782903.792 ops/s
[info]                  ·gc.alloc.rate:               3696.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 493.238 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 10904757.258 ops/s
[info]                  ·gc.alloc.rate:                   3765.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4066.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     586.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10861378.780 ±(99.9%) 186621.757 ops/s [Average]
[info]   (min, avg, max) = (10782903.792, 10861378.780, 10904757.258), stdev = 48465.078
[info]   CI (99.9%): [10674757.023, 11048000.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3732.246 ±(99.9%) 105.564 MB/sec [Average]
[info]   (min, avg, max) = (3696.841, 3732.246, 3765.284), stdev = 27.415
[info]   CI (99.9%): [3626.682, 3837.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540.801 ±(99.9%) 7.864 B/op [Average]
[info]   (min, avg, max) = (539.223, 540.801, 543.440), stdev = 2.042
[info]   CI (99.9%): [532.938, 548.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3636.178 ±(99.9%) 1440.788 MB/sec [Average]
[info]   (min, avg, max) = (3341.538, 3636.178, 4066.078), stdev = 374.168
[info]   CI (99.9%): [2195.389, 5076.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   526.776 ±(99.9%) 203.141 B/op [Average]
[info]   (min, avg, max) = (483.089, 526.776, 586.853), stdev = 52.755
[info]   CI (99.9%): [323.636, 729.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20451333.393 ops/s
[info] # Warmup Iteration   2: 46351567.489 ops/s
[info] # Warmup Iteration   3: 48931415.113 ops/s
[info] # Warmup Iteration   4: 48930066.484 ops/s
[info] # Warmup Iteration   5: 48872704.540 ops/s
[info] Iteration   1: 48895147.372 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48843692.787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48888408.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48947276.362 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48912778.923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48897460.759 ±(99.9%) 145288.897 ops/s [Average]
[info]   (min, avg, max) = (48843692.787, 48897460.759, 48947276.362), stdev = 37731.065
[info]   CI (99.9%): [48752171.862, 49042749.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7375714.674 ops/s
[info] # Warmup Iteration   2: 29529418.409 ops/s
[info] # Warmup Iteration   3: 31255943.485 ops/s
[info] # Warmup Iteration   4: 31559022.270 ops/s
[info] # Warmup Iteration   5: 31630463.924 ops/s
[info] Iteration   1: 31570270.625 ops/s
[info]                  ·gc.alloc.rate:               817.731 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 31382543.969 ops/s
[info]                  ·gc.alloc.rate:                   828.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              41.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31655668.639 ops/s
[info]                  ·gc.alloc.rate:               821.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 31646173.218 ops/s
[info]                  ·gc.alloc.rate:               820.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31689375.608 ops/s
[info]                  ·gc.alloc.rate:                   820.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31588806.412 ±(99.9%) 474596.519 ops/s [Average]
[info]   (min, avg, max) = (31382543.969, 31588806.412, 31689375.608), stdev = 123251.209
[info]   CI (99.9%): [31114209.893, 32063402.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   821.623 ±(99.9%) 15.193 MB/sec [Average]
[info]   (min, avg, max) = (817.731, 821.623, 828.167), stdev = 3.946
[info]   CI (99.9%): [806.429, 836.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   40.937 ±(99.9%) 1.300 B/op [Average]
[info]   (min, avg, max) = (40.725, 40.937, 41.534), stdev = 0.338
[info]   CI (99.9%): [39.637, 42.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.822 ±(99.9%) 1156.879 MB/sec [Average]
[info]   (min, avg, max) = (671.090, 806.822, 1344.260), stdev = 300.438
[info]   CI (99.9%): [≈ 0, 1963.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.243 ±(99.9%) 58.494 B/op [Average]
[info]   (min, avg, max) = (33.431, 40.243, 67.417), stdev = 15.191
[info]   CI (99.9%): [≈ 0, 98.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1074595.650 ops/s
[info] # Warmup Iteration   2: 8165919.071 ops/s
[info] # Warmup Iteration   3: 8645524.365 ops/s
[info] # Warmup Iteration   4: 8804399.851 ops/s
[info] # Warmup Iteration   5: 8858716.469 ops/s
[info] Iteration   1: 8865423.074 ops/s
[info]                  ·gc.alloc.rate:               3989.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          708.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4020.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713.646 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 8867614.710 ops/s
[info]                  ·gc.alloc.rate:                   3991.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              708.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4036.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8822820.543 ops/s
[info]                  ·gc.alloc.rate:                   3948.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     602.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8858087.783 ops/s
[info]                  ·gc.alloc.rate:               3986.356 MB/sec
[info]                  ·gc.alloc.rate.norm:          708.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4062.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 721.863 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 8874147.329 ops/s
[info]                  ·gc.alloc.rate:               3996.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          708.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4072.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 722.308 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8857618.688 ±(99.9%) 78092.061 ops/s [Average]
[info]   (min, avg, max) = (8822820.543, 8857618.688, 8874147.329), stdev = 20280.260
[info]   CI (99.9%): [8779526.627, 8935710.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3982.326 ±(99.9%) 74.185 MB/sec [Average]
[info]   (min, avg, max) = (3948.526, 3982.326, 3996.626), stdev = 19.266
[info]   CI (99.9%): [3908.141, 4056.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   707.576 ±(99.9%) 7.020 B/op [Average]
[info]   (min, avg, max) = (704.348, 707.576, 708.807), stdev = 1.823
[info]   CI (99.9%): [700.555, 714.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3913.715 ±(99.9%) 1159.884 MB/sec [Average]
[info]   (min, avg, max) = (3376.165, 3913.715, 4072.752), stdev = 301.218
[info]   CI (99.9%): [2753.832, 5073.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   695.297 ±(99.9%) 200.789 B/op [Average]
[info]   (min, avg, max) = (602.249, 695.297, 722.308), stdev = 52.144
[info]   CI (99.9%): [494.508, 896.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 0.837
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2036204.389 ops/s
[info] # Warmup Iteration   2: 13667682.401 ops/s
[info] # Warmup Iteration   3: 14271364.778 ops/s
[info] # Warmup Iteration   4: 14257493.432 ops/s
[info] # Warmup Iteration   5: 14309624.062 ops/s
[info] Iteration   1: 14365181.102 ops/s
[info]                  ·gc.alloc.rate:                   1719.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 14359204.602 ops/s
[info]                  ·gc.alloc.rate:                   1744.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              191.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 14413096.659 ops/s
[info]                  ·gc.alloc.rate:                   1737.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              189.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14246823.466 ops/s
[info]                  ·gc.alloc.rate:               1732.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          191.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 222.097 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 14417029.398 ops/s
[info]                  ·gc.alloc.rate:               1738.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          189.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146.350 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   14360267.046 ±(99.9%) 264741.607 ops/s [Average]
[info]   (min, avg, max) = (14246823.466, 14360267.046, 14417029.398), stdev = 68752.555
[info]   CI (99.9%): [14095525.438, 14625008.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1734.561 ±(99.9%) 35.432 MB/sec [Average]
[info]   (min, avg, max) = (1719.963, 1734.561, 1744.408), stdev = 9.202
[info]   CI (99.9%): [1699.129, 1769.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   190.099 ±(99.9%) 4.616 B/op [Average]
[info]   (min, avg, max) = (188.437, 190.099, 191.350), stdev = 1.199
[info]   CI (99.9%): [185.483, 194.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.340 ±(99.9%) 1416.715 MB/sec [Average]
[info]   (min, avg, max) = (1340.578, 1610.340, 2015.968), stdev = 367.916
[info]   CI (99.9%): [193.626, 3027.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   176.601 ±(99.9%) 157.924 B/op [Average]
[info]   (min, avg, max) = (146.350, 176.601, 222.097), stdev = 41.012
[info]   CI (99.9%): [18.678, 334.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.185), stdev = 1.420
[info]   CI (99.9%): [≈ 0, 6.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.349), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.644 ops/s
[info] # Warmup Iteration   2: 39175689.164 ops/s
[info] # Warmup Iteration   3: 42344957.113 ops/s
[info] # Warmup Iteration   4: 40470959.267 ops/s
[info] # Warmup Iteration   5: 42510191.390 ops/s
[info] Iteration   1: 42602297.887 ops/s
[info]                  ·gc.alloc.rate:               884.828 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.689 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 42432183.198 ops/s
[info]                  ·gc.alloc.rate:                   900.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 42532800.726 ops/s
[info]                  ·gc.alloc.rate:               882.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.662 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 42387189.591 ops/s
[info]                  ·gc.alloc.rate:               876.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 42303506.956 ops/s
[info]                  ·gc.alloc.rate:                   888.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42451595.672 ±(99.9%) 454639.715 ops/s [Average]
[info]   (min, avg, max) = (42303506.956, 42451595.672, 42602297.887), stdev = 118068.490
[info]   CI (99.9%): [41996955.956, 42906235.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   886.785 ±(99.9%) 34.707 MB/sec [Average]
[info]   (min, avg, max) = (876.721, 886.785, 900.918), stdev = 9.013
[info]   CI (99.9%): [852.078, 921.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   32.876 ±(99.9%) 1.378 B/op [Average]
[info]   (min, avg, max) = (32.552, 32.876, 33.416), stdev = 0.358
[info]   CI (99.9%): [31.498, 34.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.313 ±(99.9%) 1406.811 MB/sec [Average]
[info]   (min, avg, max) = (666.127, 933.313, 1334.402), stdev = 365.344
[info]   CI (99.9%): [≈ 0, 2340.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34.620 ±(99.9%) 52.430 B/op [Average]
[info]   (min, avg, max) = (24.609, 34.620, 49.641), stdev = 13.616
[info]   CI (99.9%): [≈ 0, 87.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1862132.869 ops/s
[info] # Warmup Iteration   2: 12300069.297 ops/s
[info] # Warmup Iteration   3: 12922026.037 ops/s
[info] # Warmup Iteration   4: 13106047.693 ops/s
[info] # Warmup Iteration   5: 13080246.653 ops/s
[info] Iteration   1: 13075094.054 ops/s
[info]                  ·gc.alloc.rate:                   2682.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2674.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13089000.113 ops/s
[info]                  ·gc.alloc.rate:                   2688.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              323.197 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13080035.273 ops/s
[info]                  ·gc.alloc.rate:               2698.182 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 322.302 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 13132431.361 ops/s
[info]                  ·gc.alloc.rate:               2710.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 321.970 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13125992.548 ops/s
[info]                  ·gc.alloc.rate:               2681.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          321.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 242.263 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13100510.670 ±(99.9%) 103072.104 ops/s [Average]
[info]   (min, avg, max) = (13075094.054, 13100510.670, 13132431.361), stdev = 26767.498
[info]   CI (99.9%): [12997438.566, 13203582.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2692.443 ±(99.9%) 46.838 MB/sec [Average]
[info]   (min, avg, max) = (2681.814, 2692.443, 2710.876), stdev = 12.164
[info]   CI (99.9%): [2645.605, 2739.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.425 ±(99.9%) 5.134 B/op [Average]
[info]   (min, avg, max) = (321.585, 323.425, 324.807), stdev = 1.333
[info]   CI (99.9%): [318.291, 328.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2546.866 ±(99.9%) 1133.629 MB/sec [Average]
[info]   (min, avg, max) = (2020.316, 2546.866, 2687.201), stdev = 294.400
[info]   CI (99.9%): [1413.238, 3680.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   305.965 ±(99.9%) 137.129 B/op [Average]
[info]   (min, avg, max) = (242.263, 305.965, 322.302), stdev = 35.612
[info]   CI (99.9%): [168.836, 443.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.029 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17619235.141 ops/s
[info] # Warmup Iteration   2: 48319404.499 ops/s
[info] # Warmup Iteration   3: 49441748.037 ops/s
[info] # Warmup Iteration   4: 49893466.003 ops/s
[info] # Warmup Iteration   5: 49689540.237 ops/s
[info] Iteration   1: 49886792.694 ops/s
[info]                  ·gc.alloc.rate:               1033.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 49911292.080 ops/s
[info]                  ·gc.alloc.rate:                   1045.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 49941273.116 ops/s
[info]                  ·gc.alloc.rate:                   1031.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 49882099.020 ops/s
[info]                  ·gc.alloc.rate:               1052.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42.414 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 49873468.603 ops/s
[info]                  ·gc.alloc.rate:               1027.976 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21.210 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   49898985.103 ±(99.9%) 105886.129 ops/s [Average]
[info]   (min, avg, max) = (49873468.603, 49898985.103, 49941273.116), stdev = 27498.292
[info]   CI (99.9%): [49793098.974, 50004871.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1038.175 ±(99.9%) 40.321 MB/sec [Average]
[info]   (min, avg, max) = (1027.976, 1038.175, 1052.616), stdev = 10.471
[info]   CI (99.9%): [997.854, 1078.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.738 ±(99.9%) 1.289 B/op [Average]
[info]   (min, avg, max) = (32.430, 32.738, 33.206), stdev = 0.335
[info]   CI (99.9%): [31.448, 34.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.708 ±(99.9%) 1416.833 MB/sec [Average]
[info]   (min, avg, max) = (671.406, 940.708, 1344.526), stdev = 367.947
[info]   CI (99.9%): [≈ 0, 2357.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29.665 ±(99.9%) 44.694 B/op [Average]
[info]   (min, avg, max) = (21.174, 29.665, 42.414), stdev = 11.607
[info]   CI (99.9%): [≈ 0, 74.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19462237.522 ops/s
[info] # Warmup Iteration   2: 60036685.594 ops/s
[info] # Warmup Iteration   3: 62538011.893 ops/s
[info] # Warmup Iteration   4: 62567082.408 ops/s
[info] # Warmup Iteration   5: 62534099.190 ops/s
[info] Iteration   1: 62682041.933 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 62228803.718 ops/s
[info]                  ·gc.alloc.rate:      0.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 62550722.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 62599679.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 62593957.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   62531041.126 ±(99.9%) 675801.093 ops/s [Average]
[info]   (min, avg, max) = (62228803.718, 62531041.126, 62682041.933), stdev = 175503.398
[info]   CI (99.9%): [61855240.033, 63206842.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.186 ±(99.9%) 1.601 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.186, 0.930), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 1.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4006379.665 ops/s
[info] # Warmup Iteration   2: 17087701.467 ops/s
[info] # Warmup Iteration   3: 17893531.765 ops/s
[info] # Warmup Iteration   4: 17693852.293 ops/s
[info] # Warmup Iteration   5: 17833824.898 ops/s
[info] Iteration   1: 17975480.587 ops/s
[info]                  ·gc.alloc.rate:                   1685.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              147.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17917067.037 ops/s
[info]                  ·gc.alloc.rate:               1706.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          149.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 176.746 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 17979062.695 ops/s
[info]                  ·gc.alloc.rate:               1684.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          147.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117.677 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17938328.270 ops/s
[info]                  ·gc.alloc.rate:               1693.362 MB/sec
[info]                  ·gc.alloc.rate.norm:          148.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118.121 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17945593.250 ops/s
[info]                  ·gc.alloc.rate:               1709.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          149.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.454 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17951106.368 ±(99.9%) 100560.233 ops/s [Average]
[info]   (min, avg, max) = (17917067.037, 17951106.368, 17979062.695), stdev = 26115.173
[info]   CI (99.9%): [17850546.135, 18051666.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1695.672 ±(99.9%) 44.549 MB/sec [Average]
[info]   (min, avg, max) = (1684.432, 1695.672, 1709.139), stdev = 11.569
[info]   CI (99.9%): [1651.123, 1740.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   148.662 ±(99.9%) 4.652 B/op [Average]
[info]   (min, avg, max) = (147.428, 148.662, 149.897), stdev = 1.208
[info]   CI (99.9%): [144.011, 153.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1613.050 ±(99.9%) 1422.480 MB/sec [Average]
[info]   (min, avg, max) = (1339.078, 1613.050, 2023.339), stdev = 369.413
[info]   CI (99.9%): [190.570, 3035.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   141.445 ±(99.9%) 125.339 B/op [Average]
[info]   (min, avg, max) = (117.229, 141.445, 177.454), stdev = 32.550
[info]   CI (99.9%): [16.106, 266.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403172.338 ops/s
[info] # Warmup Iteration   2: 2586412.312 ops/s
[info] # Warmup Iteration   3: 2712715.743 ops/s
[info] # Warmup Iteration   4: 2733279.068 ops/s
[info] # Warmup Iteration   5: 2691788.167 ops/s
[info] Iteration   1: 2736387.327 ops/s
[info]                  ·gc.alloc.rate:                   2194.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1261.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1159.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.549 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2730954.538 ops/s
[info]                  ·gc.alloc.rate:                   2228.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1283.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1544.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2705637.254 ops/s
[info]                  ·gc.alloc.rate:               2157.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          1254.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1168.340 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2702689.694 ops/s
[info]                  ·gc.alloc.rate:               2181.688 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1170.333 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 2706962.493 ops/s
[info]                  ·gc.alloc.rate:               2185.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          1270.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1171.011 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2716526.261 ±(99.9%) 61009.435 ops/s [Average]
[info]   (min, avg, max) = (2702689.694, 2716526.261, 2736387.327), stdev = 15843.957
[info]   CI (99.9%): [2655516.826, 2777535.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2189.290 ±(99.9%) 98.660 MB/sec [Average]
[info]   (min, avg, max) = (2157.210, 2189.290, 2228.042), stdev = 25.622
[info]   CI (99.9%): [2090.630, 2287.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1268.375 ±(99.9%) 41.918 B/op [Average]
[info]   (min, avg, max) = (1254.828, 1268.375, 1283.851), stdev = 10.886
[info]   CI (99.9%): [1226.457, 1310.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2145.488 ±(99.9%) 1149.724 MB/sec [Average]
[info]   (min, avg, max) = (2008.527, 2145.488, 2679.578), stdev = 298.580
[info]   CI (99.9%): [995.765, 3295.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1242.620 ±(99.9%) 649.069 B/op [Average]
[info]   (min, avg, max) = (1159.381, 1242.620, 1544.037), stdev = 168.561
[info]   CI (99.9%): [593.551, 1891.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.722 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.549), stdev = 1.580
[info]   CI (99.9%): [≈ 0, 6.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.415 ±(99.9%) 3.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 2.041), stdev = 0.909
[info]   CI (99.9%): [≈ 0, 3.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60056.495 ops/s
[info] # Warmup Iteration   2: 164485.342 ops/s
[info] # Warmup Iteration   3: 165507.239 ops/s
[info] # Warmup Iteration   4: 169844.704 ops/s
[info] # Warmup Iteration   5: 171194.203 ops/s
[info] Iteration   1: 171098.535 ops/s
[info]                  ·gc.alloc.rate:               3258.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          29969.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3358.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30885.706 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 171418.941 ops/s
[info]                  ·gc.alloc.rate:                   3251.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              29851.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24696.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 170783.945 ops/s
[info]                  ·gc.alloc.rate:               3266.815 MB/sec
[info]                  ·gc.alloc.rate.norm:          30105.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3370.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31059.483 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 170795.257 ops/s
[info]                  ·gc.alloc.rate:               3267.607 MB/sec
[info]                  ·gc.alloc.rate.norm:          30111.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31146.308 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 171420.303 ops/s
[info]                  ·gc.alloc.rate:               3252.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          29863.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2709.860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24880.034 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   171103.396 ±(99.9%) 1213.138 ops/s [Average]
[info]   (min, avg, max) = (170783.945, 171103.396, 171420.303), stdev = 315.048
[info]   CI (99.9%): [169890.258, 172316.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3259.576 ±(99.9%) 28.904 MB/sec [Average]
[info]   (min, avg, max) = (3251.829, 3259.576, 3267.607), stdev = 7.506
[info]   CI (99.9%): [3230.671, 3288.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29980.273 ±(99.9%) 483.078 B/op [Average]
[info]   (min, avg, max) = (29851.835, 29980.273, 30111.175), stdev = 125.454
[info]   CI (99.9%): [29497.195, 30463.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3101.806 ±(99.9%) 1412.732 MB/sec [Average]
[info]   (min, avg, max) = (2690.268, 3101.806, 3379.938), stdev = 366.882
[info]   CI (99.9%): [1689.074, 4514.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28533.646 ±(99.9%) 13172.509 B/op [Average]
[info]   (min, avg, max) = (24696.697, 28533.646, 31146.308), stdev = 3420.859
[info]   CI (99.9%): [15361.136, 41706.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1095.474 ops/s
[info] # Warmup Iteration   2: 26079.639 ops/s
[info] # Warmup Iteration   3: 35013.801 ops/s
[info] # Warmup Iteration   4: 35062.023 ops/s
[info] # Warmup Iteration   5: 34835.713 ops/s
[info] Iteration   1: 35673.126 ops/s
[info]                  ·gc.alloc.rate:                   2566.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              113194.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117968.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.308 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 35775.902 ops/s
[info]                  ·gc.alloc.rate:                   2545.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              111990.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2682.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118009.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.916 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33585.627 ops/s
[info]                  ·gc.alloc.rate:               2396.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          112228.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94534.783 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 33642.094 ops/s
[info]                  ·gc.alloc.rate:                   2440.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              114136.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126151.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 32378.526 ops/s
[info]                  ·gc.alloc.rate:               2326.741 MB/sec
[info]                  ·gc.alloc.rate.norm:          113042.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98514.466 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   34211.055 ±(99.9%) 5665.631 ops/s [Average]
[info]   (min, avg, max) = (32378.526, 34211.055, 35775.902), stdev = 1471.346
[info]   CI (99.9%): [28545.424, 39876.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2455.243 ±(99.9%) 389.234 MB/sec [Average]
[info]   (min, avg, max) = (2326.741, 2455.243, 2566.821), stdev = 101.083
[info]   CI (99.9%): [2066.008, 2844.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112918.356 ±(99.9%) 3285.150 B/op [Average]
[info]   (min, avg, max) = (111990.215, 112918.356, 114136.108), stdev = 853.143
[info]   CI (99.9%): [109633.205, 116203.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2420.293 ±(99.9%) 1396.917 MB/sec [Average]
[info]   (min, avg, max) = (2018.308, 2420.293, 2697.747), stdev = 362.775
[info]   CI (99.9%): [1023.376, 3817.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111035.765 ±(99.9%) 52876.487 B/op [Average]
[info]   (min, avg, max) = (94534.783, 111035.765, 126151.979), stdev = 13731.856
[info]   CI (99.9%): [58159.277, 163912.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.150 ±(99.9%) 1.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.687), stdev = 0.301
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.634 ±(99.9%) 51.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.634, 30.308), stdev = 13.258
[info]   CI (99.9%): [≈ 0, 57.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37527.175 ops/s
[info] # Warmup Iteration   2: 129347.987 ops/s
[info] # Warmup Iteration   3: 130817.147 ops/s
[info] # Warmup Iteration   4: 129177.848 ops/s
[info] # Warmup Iteration   5: 131913.787 ops/s
[info] Iteration   1: 136102.340 ops/s
[info]                  ·gc.alloc.rate:               1186.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          13711.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15429.751 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 129595.680 ops/s
[info]                  ·gc.alloc.rate:                   1122.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              13622.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16221.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 127830.681 ops/s
[info]                  ·gc.alloc.rate:               1091.629 MB/sec
[info]                  ·gc.alloc.rate.norm:          13433.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8226.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 129526.036 ops/s
[info]                  ·gc.alloc.rate:               1119.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          13593.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16244.757 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 126568.483 ops/s
[info]                  ·gc.alloc.rate:                   1106.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              13752.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16641.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   129924.644 ±(99.9%) 14158.584 ops/s [Average]
[info]   (min, avg, max) = (126568.483, 129924.644, 136102.340), stdev = 3676.939
[info]   CI (99.9%): [115766.060, 144083.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1125.171 ±(99.9%) 139.505 MB/sec [Average]
[info]   (min, avg, max) = (1091.629, 1125.171, 1186.253), stdev = 36.229
[info]   CI (99.9%): [985.667, 1264.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13622.752 ±(99.9%) 475.982 B/op [Average]
[info]   (min, avg, max) = (13433.973, 13622.752, 13752.130), stdev = 123.611
[info]   CI (99.9%): [13146.770, 14098.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.236 ±(99.9%) 1151.177 MB/sec [Average]
[info]   (min, avg, max) = (668.453, 1203.236, 1338.931), stdev = 298.957
[info]   CI (99.9%): [52.060, 2354.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14552.695 ±(99.9%) 13723.102 B/op [Average]
[info]   (min, avg, max) = (8226.216, 14552.695, 16641.697), stdev = 3563.846
[info]   CI (99.9%): [829.593, 28275.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.854 ±(99.9%) 7.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.854, 4.228), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.611 ±(99.9%) 90.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.611, 52.549), stdev = 23.445
[info]   CI (99.9%): [≈ 0, 100.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186999.716 ops/s
[info] # Warmup Iteration   2: 386930.758 ops/s
[info] # Warmup Iteration   3: 411814.274 ops/s
[info] # Warmup Iteration   4: 426075.464 ops/s
[info] # Warmup Iteration   5: 430541.682 ops/s
[info] Iteration   1: 426102.120 ops/s
[info]                  ·gc.alloc.rate:                   1696.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              6262.660 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4963.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 432690.195 ops/s
[info]                  ·gc.alloc.rate:                   1733.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              6304.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7339.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.812 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 445309.566 ops/s
[info]                  ·gc.alloc.rate:                   1782.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              6297.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4746.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 445058.826 ops/s
[info]                  ·gc.alloc.rate:                   1794.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              6347.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7109.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 446027.513 ops/s
[info]                  ·gc.alloc.rate:                   1812.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              6395.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7096.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   439037.644 ±(99.9%) 35084.617 ops/s [Average]
[info]   (min, avg, max) = (426102.120, 439037.644, 446027.513), stdev = 9111.364
[info]   CI (99.9%): [403953.027, 474122.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1763.841 ±(99.9%) 184.508 MB/sec [Average]
[info]   (min, avg, max) = (1696.165, 1763.841, 1812.546), stdev = 47.916
[info]   CI (99.9%): [1579.333, 1948.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6321.473 ±(99.9%) 196.448 B/op [Average]
[info]   (min, avg, max) = (6262.660, 6321.473, 6395.082), stdev = 51.017
[info]   CI (99.9%): [6125.025, 6517.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1745.429 ±(99.9%) 1411.782 MB/sec [Average]
[info]   (min, avg, max) = (1343.221, 1745.429, 2017.765), stdev = 366.635
[info]   CI (99.9%): [333.647, 3157.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6251.059 ±(99.9%) 4930.020 B/op [Average]
[info]   (min, avg, max) = (4746.286, 6251.059, 7339.087), stdev = 1280.311
[info]   CI (99.9%): [1321.039, 11181.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.522 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.683, 3.247), stdev = 1.434
[info]   CI (99.9%): [≈ 0, 6.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.481 ±(99.9%) 20.089 B/op [Average]
[info]   (min, avg, max) = (0.073, 2.481, 11.812), stdev = 5.217
[info]   CI (99.9%): [≈ 0, 22.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244624.855 ops/s
[info] # Warmup Iteration   2: 476315.201 ops/s
[info] # Warmup Iteration   3: 475513.665 ops/s
[info] # Warmup Iteration   4: 478309.651 ops/s
[info] # Warmup Iteration   5: 479606.021 ops/s
[info] Iteration   1: 483861.372 ops/s
[info]                  ·gc.alloc.rate:                   1380.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              4491.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4370.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 482749.009 ops/s
[info]                  ·gc.alloc.rate:                   1385.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              4517.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4382.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 481996.659 ops/s
[info]                  ·gc.alloc.rate:                   1386.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              4528.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4391.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 477642.891 ops/s
[info]                  ·gc.alloc.rate:                   1370.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              4517.278 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4429.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 483334.068 ops/s
[info]                  ·gc.alloc.rate:               1401.712 MB/sec
[info]                  ·gc.alloc.rate.norm:          4564.654 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4370.901 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   481916.800 ±(99.9%) 9579.374 ops/s [Average]
[info]   (min, avg, max) = (477642.891, 481916.800, 483861.372), stdev = 2487.733
[info]   CI (99.9%): [472337.426, 491496.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1385.157 ±(99.9%) 43.035 MB/sec [Average]
[info]   (min, avg, max) = (1370.930, 1385.157, 1401.712), stdev = 11.176
[info]   CI (99.9%): [1342.122, 1428.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4523.776 ±(99.9%) 102.615 B/op [Average]
[info]   (min, avg, max) = (4491.022, 4523.776, 4564.654), stdev = 26.649
[info]   CI (99.9%): [4421.161, 4626.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1343.855 ±(99.9%) 3.958 MB/sec [Average]
[info]   (min, avg, max) = (1342.214, 1343.855, 1344.909), stdev = 1.028
[info]   CI (99.9%): [1339.897, 1347.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4388.994 ±(99.9%) 93.502 B/op [Average]
[info]   (min, avg, max) = (4370.475, 4388.994, 4429.511), stdev = 24.282
[info]   CI (99.9%): [4295.492, 4482.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.746 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.852), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.177 ±(99.9%) 15.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.177, 9.312), stdev = 4.023
[info]   CI (99.9%): [≈ 0, 17.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10662.801 ops/s
[info] # Warmup Iteration   2: 65552.569 ops/s
[info] # Warmup Iteration   3: 73204.840 ops/s
[info] # Warmup Iteration   4: 75225.411 ops/s
[info] # Warmup Iteration   5: 75169.126 ops/s
[info] Iteration   1: 74692.523 ops/s
[info]                  ·gc.alloc.rate:                   1551.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              32698.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42201.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.439 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 74952.511 ops/s
[info]                  ·gc.alloc.rate:                   1544.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              32433.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28073.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 74260.379 ops/s
[info]                  ·gc.alloc.rate:                   1533.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              32491.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28349.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 75388.365 ops/s
[info]                  ·gc.alloc.rate:               1567.390 MB/sec
[info]                  ·gc.alloc.rate.norm:          32722.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27841.131 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 74597.557 ops/s
[info]                  ·gc.alloc.rate:                   1569.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              33105.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42163.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   74778.267 ±(99.9%) 1623.214 ops/s [Average]
[info]   (min, avg, max) = (74260.379, 74778.267, 75388.365), stdev = 421.544
[info]   CI (99.9%): [73155.053, 76401.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1553.395 ±(99.9%) 58.303 MB/sec [Average]
[info]   (min, avg, max) = (1533.790, 1553.395, 1569.419), stdev = 15.141
[info]   CI (99.9%): [1495.092, 1611.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32690.194 ±(99.9%) 1016.574 B/op [Average]
[info]   (min, avg, max) = (32433.677, 32690.194, 33105.209), stdev = 264.001
[info]   CI (99.9%): [31673.620, 33706.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.075 ±(99.9%) 1401.624 MB/sec [Average]
[info]   (min, avg, max) = (1333.559, 1602.075, 2002.771), stdev = 363.997
[info]   CI (99.9%): [200.451, 3003.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33725.599 ±(99.9%) 29734.330 B/op [Average]
[info]   (min, avg, max) = (27841.131, 33725.599, 42201.033), stdev = 7721.911
[info]   CI (99.9%): [3991.269, 63459.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.925 ±(99.9%) 7.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.925, 4.478), stdev = 1.987
[info]   CI (99.9%): [≈ 0, 8.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.585 ±(99.9%) 162.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.585, 94.856), stdev = 42.086
[info]   CI (99.9%): [≈ 0, 181.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 2.966
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67827.249 ops/s
[info] # Warmup Iteration   2: 302289.036 ops/s
[info] # Warmup Iteration   3: 319510.356 ops/s
[info] # Warmup Iteration   4: 318480.024 ops/s
[info] # Warmup Iteration   5: 320611.118 ops/s
[info] Iteration   1: 320007.911 ops/s
[info]                  ·gc.alloc.rate:                   2375.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              11681.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13212.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.483 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 321110.188 ops/s
[info]                  ·gc.alloc.rate:                   2380.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              11670.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9853.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 319544.432 ops/s
[info]                  ·gc.alloc.rate:                   2410.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              11872.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13205.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 320775.836 ops/s
[info]                  ·gc.alloc.rate:                   2392.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              11738.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9880.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 319153.442 ops/s
[info]                  ·gc.alloc.rate:                   2409.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              11880.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13271.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   320118.362 ±(99.9%) 3156.974 ops/s [Average]
[info]   (min, avg, max) = (319153.442, 320118.362, 321110.188), stdev = 819.856
[info]   CI (99.9%): [316961.388, 323275.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2393.629 ±(99.9%) 61.955 MB/sec [Average]
[info]   (min, avg, max) = (2375.024, 2393.629, 2410.667), stdev = 16.090
[info]   CI (99.9%): [2331.673, 2455.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11768.614 ±(99.9%) 392.883 B/op [Average]
[info]   (min, avg, max) = (11670.213, 11768.614, 11880.636), stdev = 102.030
[info]   CI (99.9%): [11375.731, 12161.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2416.564 ±(99.9%) 1422.007 MB/sec [Average]
[info]   (min, avg, max) = (2010.372, 2416.564, 2691.012), stdev = 369.291
[info]   CI (99.9%): [994.558, 3838.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11884.691 ±(99.9%) 7093.423 B/op [Average]
[info]   (min, avg, max) = (9853.694, 11884.691, 13271.201), stdev = 1842.139
[info]   CI (99.9%): [4791.268, 18978.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.686 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.712, 3.351), stdev = 1.477
[info]   CI (99.9%): [≈ 0, 6.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.501 ±(99.9%) 27.964 B/op [Average]
[info]   (min, avg, max) = (0.102, 3.501, 16.483), stdev = 7.262
[info]   CI (99.9%): [≈ 0, 31.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.483
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104150.075 ops/s
[info] # Warmup Iteration   2: 474897.298 ops/s
[info] # Warmup Iteration   3: 497980.661 ops/s
[info] # Warmup Iteration   4: 498471.738 ops/s
[info] # Warmup Iteration   5: 497142.633 ops/s
[info] Iteration   1: 498847.910 ops/s
[info]                  ·gc.alloc.rate:               1313.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          4143.505 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4211.748 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 490910.081 ops/s
[info]                  ·gc.alloc.rate:                   1299.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              4166.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4284.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 499172.574 ops/s
[info]                  ·gc.alloc.rate:               1306.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          4119.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4215.459 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 491731.861 ops/s
[info]                  ·gc.alloc.rate:                   1299.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              4158.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4283.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 499047.210 ops/s
[info]                  ·gc.alloc.rate:               1318.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          4158.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4209.951 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   495941.927 ±(99.9%) 16287.896 ops/s [Average]
[info]   (min, avg, max) = (490910.081, 495941.927, 499172.574), stdev = 4229.915
[info]   CI (99.9%): [479654.031, 512229.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1307.490 ±(99.9%) 32.869 MB/sec [Average]
[info]   (min, avg, max) = (1299.091, 1307.490, 1318.614), stdev = 8.536
[info]   CI (99.9%): [1274.621, 1340.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4149.156 ±(99.9%) 71.934 B/op [Average]
[info]   (min, avg, max) = (4119.266, 4149.156, 4166.743), stdev = 18.681
[info]   CI (99.9%): [4077.223, 4221.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.365 ±(99.9%) 5.172 MB/sec [Average]
[info]   (min, avg, max) = (1335.022, 1336.365, 1338.227), stdev = 1.343
[info]   CI (99.9%): [1331.192, 1341.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4240.967 ±(99.9%) 150.902 B/op [Average]
[info]   (min, avg, max) = (4209.951, 4240.967, 4284.357), stdev = 39.189
[info]   CI (99.9%): [4090.065, 4391.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.878 ±(99.9%) 7.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.878, 4.330), stdev = 1.930
[info]   CI (99.9%): [≈ 0, 8.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.812 ±(99.9%) 23.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.812, 13.858), stdev = 6.176
[info]   CI (99.9%): [≈ 0, 26.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576694.631 ops/s
[info] # Warmup Iteration   2: 1301956.608 ops/s
[info] # Warmup Iteration   3: 1338542.110 ops/s
[info] # Warmup Iteration   4: 1325687.824 ops/s
[info] # Warmup Iteration   5: 1345034.923 ops/s
[info] Iteration   1: 1348404.478 ops/s
[info]                  ·gc.alloc.rate:               2722.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          3176.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3135.052 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1342597.452 ops/s
[info]                  ·gc.alloc.rate:                   2728.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3148.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1341533.443 ops/s
[info]                  ·gc.alloc.rate:                   2723.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              3195.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2689.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3155.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1349716.558 ops/s
[info]                  ·gc.alloc.rate:                   2741.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              3197.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1328880.503 ops/s
[info]                  ·gc.alloc.rate:               2701.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          3199.217 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2702.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3201.085 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1342226.487 ±(99.9%) 31811.653 ops/s [Average]
[info]   (min, avg, max) = (1328880.503, 1342226.487, 1349716.558), stdev = 8261.385
[info]   CI (99.9%): [1310414.834, 1374038.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2723.308 ±(99.9%) 56.130 MB/sec [Average]
[info]   (min, avg, max) = (2701.281, 2723.308, 2741.752), stdev = 14.577
[info]   CI (99.9%): [2667.178, 2779.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3193.087 ±(99.9%) 35.175 B/op [Average]
[info]   (min, avg, max) = (3176.964, 3193.087, 3199.217), stdev = 9.135
[info]   CI (99.9%): [3157.912, 3228.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2692.260 ±(99.9%) 27.716 MB/sec [Average]
[info]   (min, avg, max) = (2686.104, 2692.260, 2702.858), stdev = 7.198
[info]   CI (99.9%): [2664.544, 2719.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3156.784 ±(99.9%) 99.602 B/op [Average]
[info]   (min, avg, max) = (3135.052, 3156.784, 3201.085), stdev = 25.866
[info]   CI (99.9%): [3057.183, 3256.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.024), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14265.744 ops/s
[info] # Warmup Iteration   2: 90972.071 ops/s
[info] # Warmup Iteration   3: 106578.408 ops/s
[info] # Warmup Iteration   4: 105151.194 ops/s
[info] # Warmup Iteration   5: 107903.399 ops/s
[info] Iteration   1: 108343.083 ops/s
[info]                  ·gc.alloc.rate:                   3603.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              52342.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48501.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.512 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 108721.881 ops/s
[info]                  ·gc.alloc.rate:                   3642.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              52727.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3349.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48482.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 107976.861 ops/s
[info]                  ·gc.alloc.rate:                   3647.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              53166.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4036.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58827.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 108987.093 ops/s
[info]                  ·gc.alloc.rate:               3652.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          52744.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3375.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48750.843 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 108118.957 ops/s
[info]                  ·gc.alloc.rate:                   3625.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              52780.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49275.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.303 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   108429.575 ±(99.9%) 1616.793 ops/s [Average]
[info]   (min, avg, max) = (107976.861, 108429.575, 108987.093), stdev = 419.876
[info]   CI (99.9%): [106812.782, 110046.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3634.368 ±(99.9%) 77.481 MB/sec [Average]
[info]   (min, avg, max) = (3603.256, 3634.368, 3652.399), stdev = 20.122
[info]   CI (99.9%): [3556.887, 3711.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52752.154 ±(99.9%) 1124.548 B/op [Average]
[info]   (min, avg, max) = (52342.056, 52752.154, 53166.262), stdev = 292.042
[info]   CI (99.9%): [51627.606, 53876.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497.060 ±(99.9%) 1162.508 MB/sec [Average]
[info]   (min, avg, max) = (3338.861, 3497.060, 4036.075), stdev = 301.900
[info]   CI (99.9%): [2334.553, 4659.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50767.666 ±(99.9%) 17393.431 B/op [Average]
[info]   (min, avg, max) = (48482.681, 50767.666, 58827.648), stdev = 4517.019
[info]   CI (99.9%): [33374.235, 68161.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.484 ±(99.9%) 2.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.484, 1.512), stdev = 0.589
[info]   CI (99.9%): [≈ 0, 2.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125430.843 ops/s
[info] # Warmup Iteration   2: 334575.149 ops/s
[info] # Warmup Iteration   3: 336238.948 ops/s
[info] # Warmup Iteration   4: 341760.375 ops/s
[info] # Warmup Iteration   5: 342200.289 ops/s
[info] Iteration   1: 352493.938 ops/s
[info]                  ·gc.alloc.rate:               1219.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          5444.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5960.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 354109.584 ops/s
[info]                  ·gc.alloc.rate:                   1218.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              5415.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5933.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 350914.732 ops/s
[info]                  ·gc.alloc.rate:               1205.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          5406.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5990.275 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 346859.834 ops/s
[info]                  ·gc.alloc.rate:               1189.160 MB/sec
[info]                  ·gc.alloc.rate.norm:          5395.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3033.152 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 345534.485 ops/s
[info]                  ·gc.alloc.rate:                   1198.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              5458.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6092.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   349982.515 ±(99.9%) 14114.734 ops/s [Average]
[info]   (min, avg, max) = (345534.485, 349982.515, 354109.584), stdev = 3665.552
[info]   CI (99.9%): [335867.780, 364097.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1206.169 ±(99.9%) 50.103 MB/sec [Average]
[info]   (min, avg, max) = (1189.160, 1206.169, 1219.337), stdev = 13.012
[info]   CI (99.9%): [1156.066, 1256.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5424.215 ±(99.9%) 100.685 B/op [Average]
[info]   (min, avg, max) = (5395.909, 5424.215, 5458.285), stdev = 26.147
[info]   CI (99.9%): [5323.530, 5524.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1202.297 ±(99.9%) 1149.150 MB/sec [Average]
[info]   (min, avg, max) = (668.451, 1202.297, 1337.581), stdev = 298.431
[info]   CI (99.9%): [53.147, 2351.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5401.918 ±(99.9%) 5104.247 B/op [Average]
[info]   (min, avg, max) = (3033.152, 5401.918, 6092.668), stdev = 1325.557
[info]   CI (99.9%): [297.671, 10506.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.112 ±(99.9%) 0.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.370), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285970.545 ops/s
[info] # Warmup Iteration   2: 801882.190 ops/s
[info] # Warmup Iteration   3: 832575.435 ops/s
[info] # Warmup Iteration   4: 860779.424 ops/s
[info] # Warmup Iteration   5: 853482.866 ops/s
[info] Iteration   1: 855613.485 ops/s
[info]                  ·gc.alloc.rate:                   637.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1172.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1224.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 852755.613 ops/s
[info]                  ·gc.alloc.rate:               632.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1228.841 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 844799.567 ops/s
[info]                  ·gc.alloc.rate:                   634.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1181.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1242.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 852401.014 ops/s
[info]                  ·gc.alloc.rate:                   632.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1167.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 859826.124 ops/s
[info]                  ·gc.alloc.rate:                   638.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1169.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1221.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   853079.161 ±(99.9%) 21183.841 ops/s [Average]
[info]   (min, avg, max) = (844799.567, 853079.161, 859826.124), stdev = 5501.376
[info]   CI (99.9%): [831895.320, 874263.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   634.952 ±(99.9%) 11.626 MB/sec [Average]
[info]   (min, avg, max) = (632.043, 634.952, 638.681), stdev = 3.019
[info]   CI (99.9%): [623.327, 646.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1171.357 ±(99.9%) 23.985 B/op [Average]
[info]   (min, avg, max) = (1166.072, 1171.357, 1181.575), stdev = 6.229
[info]   CI (99.9%): [1147.372, 1195.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.599 ±(99.9%) 2.635 MB/sec [Average]
[info]   (min, avg, max) = (665.769, 666.599, 667.485), stdev = 0.684
[info]   CI (99.9%): [663.964, 669.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1229.755 ±(99.9%) 30.382 B/op [Average]
[info]   (min, avg, max) = (1221.771, 1229.755, 1242.270), stdev = 7.890
[info]   CI (99.9%): [1199.373, 1260.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.077), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 962928.027 ops/s
[info] # Warmup Iteration   2: 2081380.863 ops/s
[info] # Warmup Iteration   3: 2081545.523 ops/s
[info] # Warmup Iteration   4: 2117024.834 ops/s
[info] # Warmup Iteration   5: 2071429.783 ops/s
[info] Iteration   1: 2104770.166 ops/s
[info]                  ·gc.alloc.rate:                   1004.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2095208.051 ops/s
[info]                  ·gc.alloc.rate:               993.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 504.396 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2120084.584 ops/s
[info]                  ·gc.alloc.rate:                   1010.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              750.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2074117.064 ops/s
[info]                  ·gc.alloc.rate:               988.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          749.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510.031 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2126430.160 ops/s
[info]                  ·gc.alloc.rate:               1031.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          763.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 995.973 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2104122.005 ±(99.9%) 80141.348 ops/s [Average]
[info]   (min, avg, max) = (2074117.064, 2104122.005, 2126430.160), stdev = 20812.454
[info]   CI (99.9%): [2023980.657, 2184263.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1005.829 ±(99.9%) 66.106 MB/sec [Average]
[info]   (min, avg, max) = (988.247, 1005.829, 1031.967), stdev = 17.167
[info]   CI (99.9%): [939.724, 1071.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   752.265 ±(99.9%) 26.017 B/op [Average]
[info]   (min, avg, max) = (746.080, 752.265, 763.830), stdev = 6.757
[info]   CI (99.9%): [726.248, 778.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.876 ±(99.9%) 1419.755 MB/sec [Average]
[info]   (min, avg, max) = (671.247, 940.876, 1345.602), stdev = 368.706
[info]   CI (99.9%): [≈ 0, 2360.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   701.936 ±(99.9%) 1036.231 B/op [Average]
[info]   (min, avg, max) = (501.837, 701.936, 997.444), stdev = 269.106
[info]   CI (99.9%): [≈ 0, 1738.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.016), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1363116.425 ops/s
[info] # Warmup Iteration   2: 2251309.186 ops/s
[info] # Warmup Iteration   3: 2356628.653 ops/s
[info] # Warmup Iteration   4: 2363359.745 ops/s
[info] # Warmup Iteration   5: 2350659.737 ops/s
[info] Iteration   1: 2349766.427 ops/s
[info]                  ·gc.alloc.rate:      0.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2338152.265 ops/s
[info]                  ·gc.alloc.rate:      8.685 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.846 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2359208.031 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2357992.155 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2358738.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2352771.526 ±(99.9%) 34818.252 ops/s [Average]
[info]   (min, avg, max) = (2338152.265, 2352771.526, 2359208.031), stdev = 9042.189
[info]   CI (99.9%): [2317953.274, 2387589.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.754 ±(99.9%) 14.920 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.754, 8.685), stdev = 3.875
[info]   CI (99.9%): [≈ 0, 16.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.181 ±(99.9%) 10.043 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 1.181, 5.846), stdev = 2.608
[info]   CI (99.9%): [≈ 0, 11.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146781.798 ops/s
[info] # Warmup Iteration   2: 466757.531 ops/s
[info] # Warmup Iteration   3: 479380.568 ops/s
[info] # Warmup Iteration   4: 481582.309 ops/s
[info] # Warmup Iteration   5: 481401.713 ops/s
[info] Iteration   1: 482582.530 ops/s
[info]                  ·gc.alloc.rate:               711.850 MB/sec
[info]                  ·gc.alloc.rate.norm:          2320.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2178.971 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 481351.352 ops/s
[info]                  ·gc.alloc.rate:               719.506 MB/sec
[info]                  ·gc.alloc.rate.norm:          2352.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2185.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 485401.931 ops/s
[info]                  ·gc.alloc.rate:                   717.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              2327.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2167.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 485628.930 ops/s
[info]                  ·gc.alloc.rate:               716.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          2320.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2168.580 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 485600.286 ops/s
[info]                  ·gc.alloc.rate:               717.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          2325.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2168.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   484113.006 ±(99.9%) 7735.015 ops/s [Average]
[info]   (min, avg, max) = (481351.352, 484113.006, 485628.930), stdev = 2008.759
[info]   CI (99.9%): [476377.991, 491848.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   716.595 ±(99.9%) 11.138 MB/sec [Average]
[info]   (min, avg, max) = (711.850, 716.595, 719.506), stdev = 2.892
[info]   CI (99.9%): [705.457, 727.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2329.314 ±(99.9%) 51.399 B/op [Average]
[info]   (min, avg, max) = (2320.435, 2329.314, 2352.551), stdev = 13.348
[info]   CI (99.9%): [2277.915, 2380.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.784 ±(99.9%) 1.775 MB/sec [Average]
[info]   (min, avg, max) = (668.399, 668.784, 669.407), stdev = 0.461
[info]   CI (99.9%): [667.009, 670.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2173.899 ±(99.9%) 31.076 B/op [Average]
[info]   (min, avg, max) = (2167.475, 2173.899, 2185.690), stdev = 8.070
[info]   CI (99.9%): [2142.824, 2204.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13271.792 ops/s
[info] # Warmup Iteration   2: 50652.587 ops/s
[info] # Warmup Iteration   3: 56551.151 ops/s
[info] # Warmup Iteration   4: 59650.742 ops/s
[info] # Warmup Iteration   5: 58001.603 ops/s
[info] Iteration   1: 57727.071 ops/s
[info]                  ·gc.alloc.rate:                   2035.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              55499.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54938.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.619 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 58820.761 ops/s
[info]                  ·gc.alloc.rate:                   2060.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              55126.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53847.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 60091.624 ops/s
[info]                  ·gc.alloc.rate:                   2102.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              55045.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52584.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.181 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60098.524 ops/s
[info]                  ·gc.alloc.rate:               2102.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          55071.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52560.507 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 59762.252 ops/s
[info]                  ·gc.alloc.rate:               2104.935 MB/sec
[info]                  ·gc.alloc.rate.norm:          55435.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52934.905 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   59300.046 ±(99.9%) 3937.160 ops/s [Average]
[info]   (min, avg, max) = (57727.071, 59300.046, 60098.524), stdev = 1022.468
[info]   CI (99.9%): [55362.887, 63237.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2081.259 ±(99.9%) 121.977 MB/sec [Average]
[info]   (min, avg, max) = (2035.559, 2081.259, 2104.935), stdev = 31.677
[info]   CI (99.9%): [1959.282, 2203.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55235.769 ±(99.9%) 827.336 B/op [Average]
[info]   (min, avg, max) = (55045.289, 55235.769, 55499.586), stdev = 214.856
[info]   CI (99.9%): [54408.433, 56063.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2010.613 ±(99.9%) 12.164 MB/sec [Average]
[info]   (min, avg, max) = (2007.065, 2010.613, 2014.988), stdev = 3.159
[info]   CI (99.9%): [1998.449, 2022.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53373.168 ±(99.9%) 3922.769 B/op [Average]
[info]   (min, avg, max) = (52560.507, 53373.168, 54938.728), stdev = 1018.731
[info]   CI (99.9%): [49450.399, 57295.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.656 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.810), stdev = 1.209
[info]   CI (99.9%): [≈ 0, 5.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.773 ±(99.9%) 126.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.773, 76.619), stdev = 32.962
[info]   CI (99.9%): [≈ 0, 147.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19751.524 ops/s
[info] # Warmup Iteration   2: 86779.861 ops/s
[info] # Warmup Iteration   3: 94062.650 ops/s
[info] # Warmup Iteration   4: 94693.897 ops/s
[info] # Warmup Iteration   5: 94663.565 ops/s
[info] Iteration   1: 95082.475 ops/s
[info]                  ·gc.alloc.rate:                   1743.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              28841.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22129.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 94667.236 ops/s
[info]                  ·gc.alloc.rate:                   1760.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              29265.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33367.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.407 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 95416.840 ops/s
[info]                  ·gc.alloc.rate:               1749.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          28847.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22019.997 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 95150.931 ops/s
[info]                  ·gc.alloc.rate:                   1768.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              29246.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33055.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 92458.346 ops/s
[info]                  ·gc.alloc.rate:               1732.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          29471.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1996.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33969.262 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   94555.166 ±(99.9%) 4630.664 ops/s [Average]
[info]   (min, avg, max) = (92458.346, 94555.166, 95416.840), stdev = 1202.569
[info]   CI (99.9%): [89924.502, 99185.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1750.646 ±(99.9%) 54.127 MB/sec [Average]
[info]   (min, avg, max) = (1732.469, 1750.646, 1768.206), stdev = 14.057
[info]   CI (99.9%): [1696.519, 1804.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29134.444 ±(99.9%) 1075.145 B/op [Average]
[info]   (min, avg, max) = (28841.469, 29134.444, 29471.579), stdev = 279.212
[info]   CI (99.9%): [28059.299, 30209.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1734.997 ±(99.9%) 1401.534 MB/sec [Average]
[info]   (min, avg, max) = (1335.114, 1734.997, 2007.055), stdev = 363.974
[info]   CI (99.9%): [333.463, 3136.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28908.217 ±(99.9%) 24054.789 B/op [Average]
[info]   (min, avg, max) = (22019.997, 28908.217, 33969.262), stdev = 6246.952
[info]   CI (99.9%): [4853.428, 52963.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.912 ±(99.9%) 7.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.912, 4.476), stdev = 1.992
[info]   CI (99.9%): [≈ 0, 8.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.157 ±(99.9%) 127.546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.157, 74.407), stdev = 33.123
[info]   CI (99.9%): [≈ 0, 142.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47395.588 ops/s
[info] # Warmup Iteration   2: 158612.351 ops/s
[info] # Warmup Iteration   3: 158158.981 ops/s
[info] # Warmup Iteration   4: 163845.098 ops/s
[info] # Warmup Iteration   5: 165368.869 ops/s
[info] Iteration   1: 163188.227 ops/s
[info]                  ·gc.alloc.rate:                   2594.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              25006.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25890.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 163659.939 ops/s
[info]                  ·gc.alloc.rate:                   2573.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              24750.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19356.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 164923.390 ops/s
[info]                  ·gc.alloc.rate:                   2634.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              25139.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25643.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 163207.552 ops/s
[info]                  ·gc.alloc.rate:               2609.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          25161.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25968.049 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 165075.972 ops/s
[info]                  ·gc.alloc.rate:                   2636.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              25139.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25737.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.985 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   164011.016 ±(99.9%) 3556.560 ops/s [Average]
[info]   (min, avg, max) = (163188.227, 164011.016, 165075.972), stdev = 923.627
[info]   CI (99.9%): [160454.456, 167567.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2609.630 ±(99.9%) 103.419 MB/sec [Average]
[info]   (min, avg, max) = (2573.701, 2609.630, 2636.752), stdev = 26.857
[info]   CI (99.9%): [2506.211, 2713.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25039.561 ±(99.9%) 665.239 B/op [Average]
[info]   (min, avg, max) = (24750.565, 25039.561, 25161.003), stdev = 172.761
[info]   CI (99.9%): [24374.322, 25704.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.601 ±(99.9%) 1168.613 MB/sec [Average]
[info]   (min, avg, max) = (2012.797, 2555.601, 2699.433), stdev = 303.485
[info]   CI (99.9%): [1386.989, 3724.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24519.043 ±(99.9%) 11123.530 B/op [Average]
[info]   (min, avg, max) = (19356.503, 24519.043, 25968.049), stdev = 2888.745
[info]   CI (99.9%): [13395.513, 35642.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.208), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 3.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 1.985), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2318.106 ops/s
[info] # Warmup Iteration   2: 28254.304 ops/s
[info] # Warmup Iteration   3: 32764.895 ops/s
[info] # Warmup Iteration   4: 33693.273 ops/s
[info] # Warmup Iteration   5: 33678.607 ops/s
[info] Iteration   1: 33099.609 ops/s
[info]                  ·gc.alloc.rate:                   2227.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              105905.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127397.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.584 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33661.385 ops/s
[info]                  ·gc.alloc.rate:                   2247.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              105081.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94199.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.973 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33145.026 ops/s
[info]                  ·gc.alloc.rate:               2201.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          104545.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95836.911 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 33281.214 ops/s
[info]                  ·gc.alloc.rate:               2239.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          105857.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95608.609 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 33718.665 ops/s
[info]                  ·gc.alloc.rate:               2267.219 MB/sec
[info]                  ·gc.alloc.rate.norm:          105822.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 94571.773 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   33381.180 ±(99.9%) 1118.437 ops/s [Average]
[info]   (min, avg, max) = (33099.609, 33381.180, 33718.665), stdev = 290.454
[info]   CI (99.9%): [32262.743, 34499.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2236.628 ±(99.9%) 93.614 MB/sec [Average]
[info]   (min, avg, max) = (2201.781, 2236.628, 2267.219), stdev = 24.311
[info]   CI (99.9%): [2143.014, 2330.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105442.581 ±(99.9%) 2331.605 B/op [Average]
[info]   (min, avg, max) = (104545.144, 105442.581, 105905.545), stdev = 605.510
[info]   CI (99.9%): [103110.976, 107774.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2152.224 ±(99.9%) 1134.576 MB/sec [Average]
[info]   (min, avg, max) = (2014.768, 2152.224, 2679.246), stdev = 294.646
[info]   CI (99.9%): [1017.648, 3286.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   101522.915 ±(99.9%) 55760.002 B/op [Average]
[info]   (min, avg, max) = (94199.605, 101522.915, 127397.676), stdev = 14480.695
[info]   CI (99.9%): [45762.913, 157282.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.461 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.854), stdev = 0.379
[info]   CI (99.9%): [≈ 0, 1.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.311 ±(99.9%) 69.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.311, 40.584), stdev = 18.046
[info]   CI (99.9%): [≈ 0, 77.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41706.273 ops/s
[info] # Warmup Iteration   2: 158125.415 ops/s
[info] # Warmup Iteration   3: 158105.467 ops/s
[info] # Warmup Iteration   4: 161577.819 ops/s
[info] # Warmup Iteration   5: 159532.012 ops/s
[info] Iteration   1: 159500.186 ops/s
[info]                  ·gc.alloc.rate:               1065.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          10509.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6579.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 159481.826 ops/s
[info]                  ·gc.alloc.rate:                   1071.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              10577.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13174.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 157526.805 ops/s
[info]                  ·gc.alloc.rate:               1056.551 MB/sec
[info]                  ·gc.alloc.rate.norm:          10554.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13350.958 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 157881.725 ops/s
[info]                  ·gc.alloc.rate:                   1043.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              10406.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6667.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 157628.359 ops/s
[info]                  ·gc.alloc.rate:                   1081.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10797.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13359.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   158403.780 ±(99.9%) 3854.105 ops/s [Average]
[info]   (min, avg, max) = (157526.805, 158403.780, 159500.186), stdev = 1000.899
[info]   CI (99.9%): [154549.675, 162257.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1063.807 ±(99.9%) 55.333 MB/sec [Average]
[info]   (min, avg, max) = (1043.838, 1063.807, 1081.361), stdev = 14.370
[info]   CI (99.9%): [1008.475, 1119.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10568.903 ±(99.9%) 553.249 B/op [Average]
[info]   (min, avg, max) = (10406.016, 10568.903, 10797.480), stdev = 143.677
[info]   CI (99.9%): [10015.653, 11122.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.056 ±(99.9%) 1409.965 MB/sec [Average]
[info]   (min, avg, max) = (667.083, 1069.056, 1337.916), stdev = 366.163
[info]   CI (99.9%): [≈ 0, 2479.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10626.335 ±(99.9%) 14073.740 B/op [Average]
[info]   (min, avg, max) = (6579.728, 10626.335, 13359.202), stdev = 3654.906
[info]   CI (99.9%): [≈ 0, 24700.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.893), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.856 ±(99.9%) 66.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.856, 38.869), stdev = 17.337
[info]   CI (99.9%): [≈ 0, 74.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231441.038 ops/s
[info] # Warmup Iteration   2: 387170.533 ops/s
[info] # Warmup Iteration   3: 448215.856 ops/s
[info] # Warmup Iteration   4: 460002.412 ops/s
[info] # Warmup Iteration   5: 459602.746 ops/s
[info] Iteration   1: 457175.519 ops/s
[info]                  ·gc.alloc.rate:                   519.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              1788.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1761.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 458460.928 ops/s
[info]                  ·gc.alloc.rate:               531.396 MB/sec
[info]                  ·gc.alloc.rate.norm:          1823.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2301.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 456560.310 ops/s
[info]                  ·gc.alloc.rate:                   517.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              1782.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2311.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 456510.018 ops/s
[info]                  ·gc.alloc.rate:      503.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 456521.683 ops/s
[info]                  ·gc.alloc.rate:               527.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1818.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2312.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   457045.691 ±(99.9%) 3231.374 ops/s [Average]
[info]   (min, avg, max) = (456510.018, 457045.691, 458460.928), stdev = 839.178
[info]   CI (99.9%): [453814.317, 460277.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.891 ±(99.9%) 41.372 MB/sec [Average]
[info]   (min, avg, max) = (503.729, 519.891, 531.396), stdev = 10.744
[info]   CI (99.9%): [478.519, 561.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1789.976 ±(99.9%) 135.538 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1789.976, 1823.882), stdev = 35.199
[info]   CI (99.9%): [1654.438, 1925.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.726 ±(99.9%) 1118.372 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.726, 670.911), stdev = 290.438
[info]   CI (99.9%): [≈ 0, 1623.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1737.369 ±(99.9%) 3849.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1737.369, 2312.644), stdev = 999.726
[info]   CI (99.9%): [≈ 0, 5586.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.043 ±(99.9%) 0.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202539.148 ops/s
[info] # Warmup Iteration   2: 484988.443 ops/s
[info] # Warmup Iteration   3: 504524.237 ops/s
[info] # Warmup Iteration   4: 499970.127 ops/s
[info] # Warmup Iteration   5: 503524.955 ops/s
[info] Iteration   1: 504336.798 ops/s
[info]                  ·gc.alloc.rate:      5.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 504831.802 ops/s
[info]                  ·gc.alloc.rate:      5.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 503356.290 ops/s
[info]                  ·gc.alloc.rate:      5.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 502892.845 ops/s
[info]                  ·gc.alloc.rate:      5.115 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 507431.205 ops/s
[info]                  ·gc.alloc.rate:      5.159 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   504569.788 ±(99.9%) 6832.956 ops/s [Average]
[info]   (min, avg, max) = (502892.845, 504569.788, 507431.205), stdev = 1774.497
[info]   CI (99.9%): [497736.832, 511402.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.131 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (5.115, 5.131, 5.159), stdev = 0.017
[info]   CI (99.9%): [5.064, 5.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9099.456 ops/s
[info] # Warmup Iteration   2: 61187.166 ops/s
[info] # Warmup Iteration   3: 71326.413 ops/s
[info] # Warmup Iteration   4: 71951.951 ops/s
[info] # Warmup Iteration   5: 72040.778 ops/s
[info] Iteration   1: 70895.646 ops/s
[info]                  ·gc.alloc.rate:                   1395.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              30986.988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29443.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 72351.176 ops/s
[info]                  ·gc.alloc.rate:               1418.177 MB/sec
[info]                  ·gc.alloc.rate.norm:          30837.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1328.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28887.210 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 70961.479 ops/s
[info]                  ·gc.alloc.rate:                   1410.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              31290.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29505.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 70472.826 ops/s
[info]                  ·gc.alloc.rate:                   1404.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              31361.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44668.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 71104.237 ops/s
[info]                  ·gc.alloc.rate:                   1402.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              31027.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29592.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   71157.073 ±(99.9%) 2725.176 ops/s [Average]
[info]   (min, avg, max) = (70472.826, 71157.073, 72351.176), stdev = 707.720
[info]   CI (99.9%): [68431.897, 73882.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1406.240 ±(99.9%) 32.964 MB/sec [Average]
[info]   (min, avg, max) = (1395.813, 1406.240, 1418.177), stdev = 8.561
[info]   CI (99.9%): [1373.276, 1439.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   31100.758 ±(99.9%) 843.496 B/op [Average]
[info]   (min, avg, max) = (30837.263, 31100.758, 31361.882), stdev = 219.053
[info]   CI (99.9%): [30257.262, 31944.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1464.494 ±(99.9%) 1152.928 MB/sec [Average]
[info]   (min, avg, max) = (1326.264, 1464.494, 2000.047), stdev = 299.412
[info]   CI (99.9%): [311.566, 2617.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32419.390 ±(99.9%) 26389.347 B/op [Average]
[info]   (min, avg, max) = (28887.210, 32419.390, 44668.844), stdev = 6853.229
[info]   CI (99.9%): [6030.044, 58808.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.073 ±(99.9%) 0.477 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.292), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.616 ±(99.9%) 10.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.616, 6.451), stdev = 2.738
[info]   CI (99.9%): [≈ 0, 12.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.342
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213585.269 ops/s
[info] # Warmup Iteration   2: 2448820.292 ops/s
[info] # Warmup Iteration   3: 2706755.086 ops/s
[info] # Warmup Iteration   4: 2782144.973 ops/s
[info] # Warmup Iteration   5: 2807220.542 ops/s
[info] Iteration   1: 2789276.819 ops/s
[info]                  ·gc.alloc.rate:               3888.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          2193.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4018.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2267.284 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 2811163.552 ops/s
[info]                  ·gc.alloc.rate:                   3932.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              2201.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4033.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2258.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2811883.683 ops/s
[info]                  ·gc.alloc.rate:               3907.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          2187.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1888.653 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2790622.141 ops/s
[info]                  ·gc.alloc.rate:                   3906.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              2202.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4062.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2290.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2818848.281 ops/s
[info]                  ·gc.alloc.rate:                   3918.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              2187.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1893.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2804358.895 ±(99.9%) 51984.960 ops/s [Average]
[info]   (min, avg, max) = (2789276.819, 2804358.895, 2818848.281), stdev = 13500.329
[info]   CI (99.9%): [2752373.935, 2856343.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3910.721 ±(99.9%) 62.779 MB/sec [Average]
[info]   (min, avg, max) = (3888.124, 3910.721, 3932.416), stdev = 16.304
[info]   CI (99.9%): [3847.942, 3973.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2194.653 ±(99.9%) 28.559 B/op [Average]
[info]   (min, avg, max) = (2187.157, 2194.653, 2202.898), stdev = 7.417
[info]   CI (99.9%): [2166.094, 2223.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3775.940 ±(99.9%) 1382.836 MB/sec [Average]
[info]   (min, avg, max) = (3374.356, 3775.940, 4062.017), stdev = 359.118
[info]   CI (99.9%): [2393.104, 5158.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2119.609 ±(99.9%) 804.341 B/op [Average]
[info]   (min, avg, max) = (1888.653, 2119.609, 2290.302), stdev = 208.885
[info]   CI (99.9%): [1315.267, 2923.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.023), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.585 ops/s
[info] # Warmup Iteration   2: 768805.985 ops/s
[info] # Warmup Iteration   3: 764335.938 ops/s
[info] # Warmup Iteration   4: 797663.577 ops/s
[info] # Warmup Iteration   5: 810078.739 ops/s
[info] Iteration   1: 825513.837 ops/s
[info]                  ·gc.alloc.rate:      490.251 MB/sec
[info]                  ·gc.alloc.rate.norm: 934.632 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 798513.621 ops/s
[info]                  ·gc.alloc.rate:               462.770 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1313.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 798307.842 ops/s
[info]                  ·gc.alloc.rate:                   475.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              937.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1313.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 821169.870 ops/s
[info]                  ·gc.alloc.rate:                   488.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              935.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1277.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 801167.309 ops/s
[info]                  ·gc.alloc.rate:      464.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   808934.496 ±(99.9%) 51172.599 ops/s [Average]
[info]   (min, avg, max) = (798307.842, 808934.496, 825513.837), stdev = 13289.361
[info]   CI (99.9%): [757761.897, 860107.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   476.255 ±(99.9%) 49.606 MB/sec [Average]
[info]   (min, avg, max) = (462.770, 476.255, 490.251), stdev = 12.883
[info]   CI (99.9%): [426.648, 525.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   926.346 ±(99.9%) 50.641 B/op [Average]
[info]   (min, avg, max) = (912.001, 926.346, 937.858), stdev = 13.151
[info]   CI (99.9%): [875.705, 976.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.861 ±(99.9%) 1405.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.861, 666.764), stdev = 365.021
[info]   CI (99.9%): [≈ 0, 1805.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   780.733 ±(99.9%) 2744.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 780.733, 1313.269), stdev = 712.858
[info]   CI (99.9%): [≈ 0, 3525.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5933.043 ops/s
[info] # Warmup Iteration   2: 234584.367 ops/s
[info] # Warmup Iteration   3: 340321.065 ops/s
[info] # Warmup Iteration   4: 344227.814 ops/s
[info] # Warmup Iteration   5: 341168.107 ops/s
[info] Iteration   1: 342116.264 ops/s
[info]                  ·gc.alloc.rate:                   816.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              3757.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3061.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 344987.735 ops/s
[info]                  ·gc.alloc.rate:               822.956 MB/sec
[info]                  ·gc.alloc.rate.norm:          3754.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3039.086 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 335346.547 ops/s
[info]                  ·gc.alloc.rate:                   837.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              3929.475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6255.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 345819.475 ops/s
[info]                  ·gc.alloc.rate:               832.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          3787.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3034.685 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 344264.516 ops/s
[info]                  ·gc.alloc.rate:               826.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          3777.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3051.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   342506.907 ±(99.9%) 16296.024 ops/s [Average]
[info]   (min, avg, max) = (335346.547, 342506.907, 345819.475), stdev = 4232.026
[info]   CI (99.9%): [326210.883, 358802.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   827.148 ±(99.9%) 30.642 MB/sec [Average]
[info]   (min, avg, max) = (816.902, 827.148, 837.277), stdev = 7.958
[info]   CI (99.9%): [796.506, 857.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3801.312 ±(99.9%) 281.031 B/op [Average]
[info]   (min, avg, max) = (3754.246, 3801.312, 3929.475), stdev = 72.983
[info]   CI (99.9%): [3520.280, 4082.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   799.811 ±(99.9%) 1147.690 MB/sec [Average]
[info]   (min, avg, max) = (665.593, 799.811, 1332.981), stdev = 298.052
[info]   CI (99.9%): [≈ 0, 1947.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3688.527 ±(99.9%) 5526.592 B/op [Average]
[info]   (min, avg, max) = (3034.685, 3688.527, 6255.890), stdev = 1435.238
[info]   CI (99.9%): [≈ 0, 9215.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.195), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366050.318 ops/s
[info] # Warmup Iteration   2: 671804.799 ops/s
[info] # Warmup Iteration   3: 738170.666 ops/s
[info] # Warmup Iteration   4: 738727.704 ops/s
[info] # Warmup Iteration   5: 739001.946 ops/s
[info] Iteration   1: 753124.007 ops/s
[info]                  ·gc.alloc.rate:                   692.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1403.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 738633.096 ops/s
[info]                  ·gc.alloc.rate:               669.273 MB/sec
[info]                  ·gc.alloc.rate.norm:          1426.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1430.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 739068.276 ops/s
[info]                  ·gc.alloc.rate:                   685.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1460.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 732775.174 ops/s
[info]                  ·gc.alloc.rate:               676.838 MB/sec
[info]                  ·gc.alloc.rate.norm:          1453.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1443.653 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 740127.140 ops/s
[info]                  ·gc.alloc.rate:               665.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          1415.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1430.681 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   740745.538 ±(99.9%) 28842.019 ops/s [Average]
[info]   (min, avg, max) = (732775.174, 740745.538, 753124.007), stdev = 7490.181
[info]   CI (99.9%): [711903.520, 769587.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   678.107 ±(99.9%) 43.616 MB/sec [Average]
[info]   (min, avg, max) = (665.672, 678.107, 692.910), stdev = 11.327
[info]   CI (99.9%): [634.491, 721.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1440.722 ±(99.9%) 73.302 B/op [Average]
[info]   (min, avg, max) = (1415.573, 1440.722, 1460.333), stdev = 19.036
[info]   CI (99.9%): [1367.420, 1514.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.034 ±(99.9%) 2.188 MB/sec [Average]
[info]   (min, avg, max) = (671.452, 672.034, 672.776), stdev = 0.568
[info]   CI (99.9%): [669.846, 674.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1427.941 ±(99.9%) 57.263 B/op [Average]
[info]   (min, avg, max) = (1403.234, 1427.941, 1443.653), stdev = 14.871
[info]   CI (99.9%): [1370.678, 1485.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.044), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972856.916 ops/s
[info] # Warmup Iteration   2: 2304917.058 ops/s
[info] # Warmup Iteration   3: 3323553.491 ops/s
[info] # Warmup Iteration   4: 3335866.399 ops/s
[info] # Warmup Iteration   5: 3352666.186 ops/s
[info] Iteration   1: 3300877.540 ops/s
[info]                  ·gc.alloc.rate:                   1995.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3348732.030 ops/s
[info]                  ·gc.alloc.rate:                   2009.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     950.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.145 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3342846.139 ops/s
[info]                  ·gc.alloc.rate:               2031.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.616 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3301708.703 ops/s
[info]                  ·gc.alloc.rate:               1993.192 MB/sec
[info]                  ·gc.alloc.rate.norm:          950.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962.127 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3350521.408 ops/s
[info]                  ·gc.alloc.rate:               2039.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          957.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2020.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 948.738 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3328937.164 ±(99.9%) 97792.473 ops/s [Average]
[info]   (min, avg, max) = (3300877.540, 3328937.164, 3350521.408), stdev = 25396.395
[info]   CI (99.9%): [3231144.691, 3426729.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2013.950 ±(99.9%) 80.654 MB/sec [Average]
[info]   (min, avg, max) = (1993.192, 2013.950, 2039.878), stdev = 20.946
[info]   CI (99.9%): [1933.296, 2094.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   952.083 ±(99.9%) 20.080 B/op [Average]
[info]   (min, avg, max) = (944.703, 952.083, 957.779), stdev = 5.215
[info]   CI (99.9%): [932.003, 972.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2020.130 ±(99.9%) 5.339 MB/sec [Average]
[info]   (min, avg, max) = (2018.303, 2020.130, 2021.651), stdev = 1.386
[info]   CI (99.9%): [2014.791, 2025.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   955.056 ±(99.9%) 27.677 B/op [Average]
[info]   (min, avg, max) = (948.738, 955.056, 963.616), stdev = 7.188
[info]   CI (99.9%): [927.378, 982.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.491 ±(99.9%) 4.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.435), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.231 ±(99.9%) 1.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.231, 1.145), stdev = 0.511
[info]   CI (99.9%): [≈ 0, 2.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1913166.727 ops/s
[info] # Warmup Iteration   2: 4446041.138 ops/s
[info] # Warmup Iteration   3: 7435189.119 ops/s
[info] # Warmup Iteration   4: 7536425.797 ops/s
[info] # Warmup Iteration   5: 7278709.228 ops/s
[info] Iteration   1: 7260128.949 ops/s
[info]                  ·gc.alloc.rate:               798.094 MB/sec
[info]                  ·gc.alloc.rate.norm:          173.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 145.561 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7339311.809 ops/s
[info]                  ·gc.alloc.rate:               799.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144.136 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7280975.283 ops/s
[info]                  ·gc.alloc.rate:                   795.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              171.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7311479.761 ops/s
[info]                  ·gc.alloc.rate:               795.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144.819 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7335115.408 ops/s
[info]                  ·gc.alloc.rate:               798.973 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144.354 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7305402.242 ±(99.9%) 132218.107 ops/s [Average]
[info]   (min, avg, max) = (7260128.949, 7305402.242, 7339311.809), stdev = 34336.623
[info]   CI (99.9%): [7173184.134, 7437620.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   797.663 ±(99.9%) 7.666 MB/sec [Average]
[info]   (min, avg, max) = (795.272, 797.663, 799.991), stdev = 1.991
[info]   CI (99.9%): [789.997, 805.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   171.799 ±(99.9%) 2.744 B/op [Average]
[info]   (min, avg, max) = (171.271, 171.799, 173.006), stdev = 0.713
[info]   CI (99.9%): [169.055, 174.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   672.451 ±(99.9%) 2.495 MB/sec [Average]
[info]   (min, avg, max) = (671.486, 672.451, 673.050), stdev = 0.648
[info]   CI (99.9%): [669.957, 674.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   144.831 ±(99.9%) 2.318 B/op [Average]
[info]   (min, avg, max) = (144.136, 144.831, 145.561), stdev = 0.602
[info]   CI (99.9%): [142.513, 147.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5601.663 ops/s
[info] # Warmup Iteration   2: 68627.932 ops/s
[info] # Warmup Iteration   3: 214083.126 ops/s
[info] # Warmup Iteration   4: 241144.113 ops/s
[info] # Warmup Iteration   5: 238664.617 ops/s
[info] Iteration   1: 239745.389 ops/s
[info]                  ·gc.alloc.rate:               2117.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          13902.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13169.022 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 240336.730 ops/s
[info]                  ·gc.alloc.rate:                   2139.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              14006.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13165.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 239909.934 ops/s
[info]                  ·gc.alloc.rate:                   2118.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              13898.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13201.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 236138.418 ops/s
[info]                  ·gc.alloc.rate:               2088.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          13917.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13417.439 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 238521.532 ops/s
[info]                  ·gc.alloc.rate:               2135.526 MB/sec
[info]                  ·gc.alloc.rate.norm:          14091.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17740.290 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   238930.401 ±(99.9%) 6547.168 ops/s [Average]
[info]   (min, avg, max) = (236138.418, 238930.401, 240336.730), stdev = 1700.279
[info]   CI (99.9%): [232383.232, 245477.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2119.960 ±(99.9%) 77.792 MB/sec [Average]
[info]   (min, avg, max) = (2088.326, 2119.960, 2139.529), stdev = 20.202
[info]   CI (99.9%): [2042.168, 2197.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13963.232 ±(99.9%) 322.647 B/op [Average]
[info]   (min, avg, max) = (13898.872, 13963.232, 14091.022), stdev = 83.790
[info]   CI (99.9%): [13640.586, 14285.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2146.275 ±(99.9%) 1167.404 MB/sec [Average]
[info]   (min, avg, max) = (2005.956, 2146.275, 2688.580), stdev = 303.171
[info]   CI (99.9%): [978.871, 3313.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14138.778 ±(99.9%) 7762.933 B/op [Average]
[info]   (min, avg, max) = (13165.218, 14138.778, 17740.290), stdev = 2016.009
[info]   CI (99.9%): [6375.845, 21901.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.400 ±(99.9%) 2.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.728), stdev = 0.752
[info]   CI (99.9%): [≈ 0, 3.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.618 ±(99.9%) 18.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.618, 11.315), stdev = 4.922
[info]   CI (99.9%): [≈ 0, 21.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 970957.968 ops/s
[info] # Warmup Iteration   2: 1518704.340 ops/s
[info] # Warmup Iteration   3: 1584674.566 ops/s
[info] # Warmup Iteration   4: 1566549.219 ops/s
[info] # Warmup Iteration   5: 1584230.992 ops/s
[info] Iteration   1: 1585066.477 ops/s
[info]                  ·gc.alloc.rate:      88.624 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1577589.060 ops/s
[info]                  ·gc.alloc.rate:      95.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 95.434 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1584155.022 ops/s
[info]                  ·gc.alloc.rate:      88.610 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1585131.078 ops/s
[info]                  ·gc.alloc.rate:      88.631 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1579142.114 ops/s
[info]                  ·gc.alloc.rate:                   98.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.266 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     509.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1582216.750 ±(99.9%) 13781.870 ops/s [Average]
[info]   (min, avg, max) = (1577589.060, 1582216.750, 1585131.078), stdev = 3579.108
[info]   CI (99.9%): [1568434.880, 1595998.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   92.024 ±(99.9%) 18.381 MB/sec [Average]
[info]   (min, avg, max) = (88.610, 92.024, 98.596), stdev = 4.774
[info]   CI (99.9%): [73.643, 110.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   91.540 ±(99.9%) 19.059 B/op [Average]
[info]   (min, avg, max) = (88.000, 91.540, 98.266), stdev = 4.950
[info]   CI (99.9%): [72.481, 110.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.317 ±(99.9%) 880.981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.585), stdev = 228.788
[info]   CI (99.9%): [≈ 0, 983.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   101.975 ±(99.9%) 878.036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 101.975, 509.875), stdev = 228.023
[info]   CI (99.9%): [≈ 0, 980.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.105 ±(99.9%) 0.908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.527), stdev = 0.236
[info]   CI (99.9%): [≈ 0, 1.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.526), stdev = 0.235
[info]   CI (99.9%): [≈ 0, 1.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4245.323 ops/s
[info] # Warmup Iteration   2: 58326.819 ops/s
[info] # Warmup Iteration   3: 72620.136 ops/s
[info] # Warmup Iteration   4: 75031.465 ops/s
[info] # Warmup Iteration   5: 74445.736 ops/s
[info] Iteration   1: 74159.343 ops/s
[info]                  ·gc.alloc.rate:               3234.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          68646.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57084.017 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 73214.758 ops/s
[info]                  ·gc.alloc.rate:                   3235.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              69545.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72466.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.343 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 74937.852 ops/s
[info]                  ·gc.alloc.rate:                   3322.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              69784.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71022.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 75968.706 ops/s
[info]                  ·gc.alloc.rate:                   3340.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              69198.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56148.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 73903.868 ops/s
[info]                  ·gc.alloc.rate:                   3280.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              69857.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72251.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   74436.905 ±(99.9%) 4062.463 ops/s [Average]
[info]   (min, avg, max) = (73214.758, 74436.905, 75968.706), stdev = 1055.009
[info]   CI (99.9%): [70374.442, 78499.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3282.614 ±(99.9%) 187.743 MB/sec [Average]
[info]   (min, avg, max) = (3234.571, 3282.614, 3340.141), stdev = 48.756
[info]   CI (99.9%): [3094.871, 3470.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69406.668 ±(99.9%) 1912.445 B/op [Average]
[info]   (min, avg, max) = (68646.400, 69406.668, 69857.976), stdev = 496.656
[info]   CI (99.9%): [67494.224, 71319.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3109.114 ±(99.9%) 1438.750 MB/sec [Average]
[info]   (min, avg, max) = (2689.760, 3109.114, 3392.631), stdev = 373.639
[info]   CI (99.9%): [1670.364, 4547.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65794.690 ±(99.9%) 32358.951 B/op [Average]
[info]   (min, avg, max) = (56148.084, 65794.690, 72466.935), stdev = 8403.517
[info]   CI (99.9%): [33435.738, 98153.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.703 ±(99.9%) 2.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 1.343), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 2.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491071.057 ops/s
[info] # Warmup Iteration   2: 1552191.932 ops/s
[info] # Warmup Iteration   3: 1576622.982 ops/s
[info] # Warmup Iteration   4: 1582182.957 ops/s
[info] # Warmup Iteration   5: 1577125.357 ops/s
[info] Iteration   1: 1568581.065 ops/s
[info]                  ·gc.alloc.rate:               859.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          861.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1338.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1581206.540 ops/s
[info]                  ·gc.alloc.rate:               852.470 MB/sec
[info]                  ·gc.alloc.rate.norm:          848.498 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664.357 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1584877.513 ops/s
[info]                  ·gc.alloc.rate:               847.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          841.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 663.477 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1564067.044 ops/s
[info]                  ·gc.alloc.rate:               845.448 MB/sec
[info]                  ·gc.alloc.rate.norm:          850.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 672.316 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1531558.804 ops/s
[info]                  ·gc.alloc.rate:                   842.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1374.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1566058.193 ±(99.9%) 81324.665 ops/s [Average]
[info]   (min, avg, max) = (1531558.804, 1566058.193, 1584877.513), stdev = 21119.757
[info]   CI (99.9%): [1484733.528, 1647382.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   849.398 ±(99.9%) 25.090 MB/sec [Average]
[info]   (min, avg, max) = (842.830, 849.398, 859.201), stdev = 6.516
[info]   CI (99.9%): [824.308, 874.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   853.657 ±(99.9%) 39.064 B/op [Average]
[info]   (min, avg, max) = (841.145, 853.657, 865.996), stdev = 10.145
[info]   CI (99.9%): [814.593, 892.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.151 ±(99.9%) 1409.110 MB/sec [Average]
[info]   (min, avg, max) = (667.467, 935.151, 1337.762), stdev = 365.941
[info]   CI (99.9%): [≈ 0, 2344.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   942.627 ±(99.9%) 1455.685 B/op [Average]
[info]   (min, avg, max) = (663.477, 942.627, 1374.532), stdev = 378.037
[info]   CI (99.9%): [≈ 0, 2398.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770495.201 ops/s
[info] # Warmup Iteration   2: 1602807.865 ops/s
[info] # Warmup Iteration   3: 1617631.197 ops/s
[info] # Warmup Iteration   4: 1721115.198 ops/s
[info] # Warmup Iteration   5: 1725565.601 ops/s
[info] Iteration   1: 1718259.072 ops/s
[info]                  ·gc.alloc.rate:               493.275 MB/sec
[info]                  ·gc.alloc.rate.norm:          451.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 1719960.743 ops/s
[info]                  ·gc.alloc.rate:               495.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          453.612 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 613.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1724956.088 ops/s
[info]                  ·gc.alloc.rate:      482.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1719721.538 ops/s
[info]                  ·gc.alloc.rate:                   506.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              463.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1719935.783 ops/s
[info]                  ·gc.alloc.rate:               505.708 MB/sec
[info]                  ·gc.alloc.rate.norm:          462.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 614.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1720566.645 ±(99.9%) 9830.726 ops/s [Average]
[info]   (min, avg, max) = (1718259.072, 1720566.645, 1724956.088), stdev = 2553.008
[info]   CI (99.9%): [1710735.919, 1730397.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   496.656 ±(99.9%) 38.154 MB/sec [Average]
[info]   (min, avg, max) = (482.303, 496.656, 506.271), stdev = 9.909
[info]   CI (99.9%): [458.501, 534.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   454.314 ±(99.9%) 36.653 B/op [Average]
[info]   (min, avg, max) = (440.052, 454.314, 463.327), stdev = 9.519
[info]   CI (99.9%): [417.661, 490.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.750 ±(99.9%) 1118.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.750, 671.182), stdev = 290.455
[info]   CI (99.9%): [≈ 0, 1623.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   461.984 ±(99.9%) 1023.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 461.984, 614.164), stdev = 265.796
[info]   CI (99.9%): [≈ 0, 1485.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 945883.014 ops/s
[info] # Warmup Iteration   2: 1637160.629 ops/s
[info] # Warmup Iteration   3: 1812627.311 ops/s
[info] # Warmup Iteration   4: 1793917.477 ops/s
[info] # Warmup Iteration   5: 1804796.772 ops/s
[info] Iteration   1: 1805110.723 ops/s
[info]                  ·gc.alloc.rate:      18.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1810452.148 ops/s
[info]                  ·gc.alloc.rate:      18.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1810543.076 ops/s
[info]                  ·gc.alloc.rate:      18.407 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1810606.921 ops/s
[info]                  ·gc.alloc.rate:      18.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1811050.422 ops/s
[info]                  ·gc.alloc.rate:      18.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1809552.658 ±(99.9%) 9602.623 ops/s [Average]
[info]   (min, avg, max) = (1805110.723, 1809552.658, 1811050.422), stdev = 2493.771
[info]   CI (99.9%): [1799950.035, 1819155.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.398 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (18.351, 18.398, 18.416), stdev = 0.027
[info]   CI (99.9%): [18.296, 18.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13366.331 ops/s
[info] # Warmup Iteration   2: 47248.637 ops/s
[info] # Warmup Iteration   3: 50921.746 ops/s
[info] # Warmup Iteration   4: 51002.586 ops/s
[info] # Warmup Iteration   5: 50719.196 ops/s
[info] Iteration   1: 51045.105 ops/s
[info]                  ·gc.alloc.rate:                   2193.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              67608.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61865.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 51295.889 ops/s
[info]                  ·gc.alloc.rate:                   2218.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              68036.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61400.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52414.781 ops/s
[info]                  ·gc.alloc.rate:               2249.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          67529.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60067.791 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 52430.956 ops/s
[info]                  ·gc.alloc.rate:                   2292.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              68782.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2672.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80184.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.625 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 52487.505 ops/s
[info]                  ·gc.alloc.rate:                   2268.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              67989.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60220.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   51934.847 ±(99.9%) 2710.400 ops/s [Average]
[info]   (min, avg, max) = (51045.105, 51934.847, 52487.505), stdev = 703.882
[info]   CI (99.9%): [49224.448, 54645.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2244.155 ±(99.9%) 151.318 MB/sec [Average]
[info]   (min, avg, max) = (2193.313, 2244.155, 2292.210), stdev = 39.297
[info]   CI (99.9%): [2092.836, 2395.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67989.054 ±(99.9%) 1912.899 B/op [Average]
[info]   (min, avg, max) = (67529.954, 67989.054, 68782.158), stdev = 496.774
[info]   CI (99.9%): [66076.155, 69901.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2138.094 ±(99.9%) 1149.776 MB/sec [Average]
[info]   (min, avg, max) = (2000.579, 2138.094, 2672.197), stdev = 298.593
[info]   CI (99.9%): [988.318, 3287.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64747.861 ±(99.9%) 33358.434 B/op [Average]
[info]   (min, avg, max) = (60067.791, 64747.861, 80184.400), stdev = 8663.079
[info]   CI (99.9%): [31389.427, 98106.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 7.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.227), stdev = 1.883
[info]   CI (99.9%): [≈ 0, 8.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.437 ±(99.9%) 223.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.437, 130.299), stdev = 58.061
[info]   CI (99.9%): [≈ 0, 250.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126612.661 ops/s
[info] # Warmup Iteration   2: 254589.479 ops/s
[info] # Warmup Iteration   3: 272459.446 ops/s
[info] # Warmup Iteration   4: 273808.209 ops/s
[info] # Warmup Iteration   5: 275754.605 ops/s
[info] Iteration   1: 275145.591 ops/s
[info]                  ·gc.alloc.rate:                   1113.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              6366.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7683.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 274162.732 ops/s
[info]                  ·gc.alloc.rate:               1086.555 MB/sec
[info]                  ·gc.alloc.rate.norm:          6237.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3856.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 273313.721 ops/s
[info]                  ·gc.alloc.rate:                   1111.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              6401.371 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7741.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 273280.226 ops/s
[info]                  ·gc.alloc.rate:                   1097.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              6318.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7749.894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 273922.297 ops/s
[info]                  ·gc.alloc.rate:                   1085.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              6238.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3865.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   273964.913 ±(99.9%) 2937.486 ops/s [Average]
[info]   (min, avg, max) = (273280.226, 273964.913, 275145.591), stdev = 762.856
[info]   CI (99.9%): [271027.428, 276902.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1098.908 ±(99.9%) 51.070 MB/sec [Average]
[info]   (min, avg, max) = (1085.707, 1098.908, 1113.438), stdev = 13.263
[info]   CI (99.9%): [1047.839, 1149.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6312.427 ±(99.9%) 285.485 B/op [Average]
[info]   (min, avg, max) = (6237.418, 6312.427, 6401.371), stdev = 74.140
[info]   CI (99.9%): [6026.942, 6597.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.688 ±(99.9%) 1417.968 MB/sec [Average]
[info]   (min, avg, max) = (671.809, 1075.688, 1345.711), stdev = 368.242
[info]   CI (99.9%): [≈ 0, 2493.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6179.391 ±(99.9%) 8149.544 B/op [Average]
[info]   (min, avg, max) = (3856.549, 6179.391, 7749.894), stdev = 2116.411
[info]   CI (99.9%): [≈ 0, 14328.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.562 ±(99.9%) 4.705 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.562, 2.748), stdev = 1.222
[info]   CI (99.9%): [≈ 0, 5.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.229 ±(99.9%) 27.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.229, 15.788), stdev = 7.021
[info]   CI (99.9%): [≈ 0, 30.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4033.449 ops/s
[info] # Warmup Iteration   2: 35060.981 ops/s
[info] # Warmup Iteration   3: 40593.431 ops/s
[info] # Warmup Iteration   4: 40092.792 ops/s
[info] # Warmup Iteration   5: 40733.375 ops/s
[info] Iteration   1: 40955.817 ops/s
[info]                  ·gc.alloc.rate:               2014.517 MB/sec
[info]                  ·gc.alloc.rate.norm:          77415.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76960.763 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 40863.503 ops/s
[info]                  ·gc.alloc.rate:                   2033.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              78308.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77341.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.035 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 40601.075 ops/s
[info]                  ·gc.alloc.rate:                   2032.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              78775.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78085.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 40882.484 ops/s
[info]                  ·gc.alloc.rate:                   2020.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              77766.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77700.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.808 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41076.337 ops/s
[info]                  ·gc.alloc.rate:               2056.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          78796.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77525.304 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   40875.843 ±(99.9%) 673.278 ops/s [Average]
[info]   (min, avg, max) = (40601.075, 40875.843, 41076.337), stdev = 174.848
[info]   CI (99.9%): [40202.565, 41549.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2031.473 ±(99.9%) 62.461 MB/sec [Average]
[info]   (min, avg, max) = (2014.517, 2031.473, 2056.539), stdev = 16.221
[info]   CI (99.9%): [1969.012, 2093.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78212.424 ±(99.9%) 2359.066 B/op [Average]
[info]   (min, avg, max) = (77415.703, 78212.424, 78796.500), stdev = 612.642
[info]   CI (99.9%): [75853.358, 80571.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.546 ±(99.9%) 31.204 MB/sec [Average]
[info]   (min, avg, max) = (2002.679, 2013.546, 2023.362), stdev = 8.104
[info]   CI (99.9%): [1982.342, 2044.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77522.689 ±(99.9%) 1607.550 B/op [Average]
[info]   (min, avg, max) = (76960.763, 77522.689, 78085.447), stdev = 417.476
[info]   CI (99.9%): [75915.138, 79130.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.684 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.416), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 0.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.330 ±(99.9%) 26.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.330, 16.035), stdev = 6.840
[info]   CI (99.9%): [≈ 0, 30.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17087.070 ops/s
[info] # Warmup Iteration   2: 105378.552 ops/s
[info] # Warmup Iteration   3: 112547.801 ops/s
[info] # Warmup Iteration   4: 114584.656 ops/s
[info] # Warmup Iteration   5: 112208.107 ops/s
[info] Iteration   1: 113848.080 ops/s
[info]                  ·gc.alloc.rate:               1146.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          15844.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18440.903 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 114830.125 ops/s
[info]                  ·gc.alloc.rate:               1137.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          15590.820 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9148.221 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 114422.571 ops/s
[info]                  ·gc.alloc.rate:                   1147.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              15784.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18371.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.859 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 114401.311 ops/s
[info]                  ·gc.alloc.rate:               1170.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          16097.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18392.372 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 114902.647 ops/s
[info]                  ·gc.alloc.rate:                   1148.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              15732.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9165.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   114480.947 ±(99.9%) 1622.336 ops/s [Average]
[info]   (min, avg, max) = (113848.080, 114480.947, 114902.647), stdev = 421.315
[info]   CI (99.9%): [112858.611, 116103.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1150.105 ±(99.9%) 46.630 MB/sec [Average]
[info]   (min, avg, max) = (1137.656, 1150.105, 1170.314), stdev = 12.110
[info]   CI (99.9%): [1103.475, 1196.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15809.916 ±(99.9%) 716.603 B/op [Average]
[info]   (min, avg, max) = (15590.820, 15809.916, 16097.496), stdev = 186.099
[info]   CI (99.9%): [15093.313, 16526.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.754 ±(99.9%) 1407.544 MB/sec [Average]
[info]   (min, avg, max) = (667.542, 1068.754, 1337.155), stdev = 365.535
[info]   CI (99.9%): [≈ 0, 2476.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   14703.622 ±(99.9%) 19497.977 B/op [Average]
[info]   (min, avg, max) = (9148.221, 14703.622, 18440.903), stdev = 5063.563
[info]   CI (99.9%): [≈ 0, 34201.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.892 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 4.018), stdev = 1.790
[info]   CI (99.9%): [≈ 0, 7.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.178 ±(99.9%) 94.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.178, 55.032), stdev = 24.518
[info]   CI (99.9%): [≈ 0, 105.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185817.684 ops/s
[info] # Warmup Iteration   2: 330766.307 ops/s
[info] # Warmup Iteration   3: 332966.578 ops/s
[info] # Warmup Iteration   4: 335740.970 ops/s
[info] # Warmup Iteration   5: 334922.082 ops/s
[info] Iteration   1: 338502.200 ops/s
[info]                  ·gc.alloc.rate:               468.011 MB/sec
[info]                  ·gc.alloc.rate.norm:          2176.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2378.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 335519.385 ops/s
[info]                  ·gc.alloc.rate:               471.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          2212.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3146.728 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 337731.835 ops/s
[info]                  ·gc.alloc.rate:      454.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 339131.834 ops/s
[info]                  ·gc.alloc.rate:               479.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3113.088 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 337776.889 ops/s
[info]                  ·gc.alloc.rate:                   481.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              2241.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3128.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   337732.429 ±(99.9%) 5255.254 ops/s [Average]
[info]   (min, avg, max) = (335519.385, 337732.429, 339131.834), stdev = 1364.773
[info]   CI (99.9%): [332477.174, 342987.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   471.094 ±(99.9%) 40.469 MB/sec [Average]
[info]   (min, avg, max) = (454.926, 471.094, 481.058), stdev = 10.510
[info]   CI (99.9%): [430.625, 511.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2195.094 ±(99.9%) 186.271 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2195.094, 2241.471), stdev = 48.374
[info]   CI (99.9%): [2008.823, 2381.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   505.017 ±(99.9%) 1119.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 505.017, 671.460), stdev = 290.646
[info]   CI (99.9%): [≈ 0, 1624.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2353.439 ±(99.9%) 5218.521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2353.439, 3146.728), stdev = 1355.233
[info]   CI (99.9%): [≈ 0, 7571.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171312.388 ops/s
[info] # Warmup Iteration   2: 358093.464 ops/s
[info] # Warmup Iteration   3: 367778.890 ops/s
[info] # Warmup Iteration   4: 368073.069 ops/s
[info] # Warmup Iteration   5: 368028.854 ops/s
[info] Iteration   1: 349052.893 ops/s
[info]                  ·gc.alloc.rate:      3.549 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 367946.477 ops/s
[info]                  ·gc.alloc.rate:      3.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 367991.956 ops/s
[info]                  ·gc.alloc.rate:      3.741 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368125.390 ops/s
[info]                  ·gc.alloc.rate:      3.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 366830.120 ops/s
[info]                  ·gc.alloc.rate:      3.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   363989.367 ±(99.9%) 32214.168 ops/s [Average]
[info]   (min, avg, max) = (349052.893, 363989.367, 368125.390), stdev = 8365.917
[info]   CI (99.9%): [331775.200, 396203.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.701 ±(99.9%) 0.327 MB/sec [Average]
[info]   (min, avg, max) = (3.549, 3.701, 3.742), stdev = 0.085
[info]   CI (99.9%): [3.373, 4.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.002), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9954.348 ops/s
[info] # Warmup Iteration   2: 49108.407 ops/s
[info] # Warmup Iteration   3: 60202.312 ops/s
[info] # Warmup Iteration   4: 58901.344 ops/s
[info] # Warmup Iteration   5: 61075.043 ops/s
[info] Iteration   1: 61253.477 ops/s
[info]                  ·gc.alloc.rate:               1242.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          31923.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17123.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 59752.388 ops/s
[info]                  ·gc.alloc.rate:               1226.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          32301.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35144.368 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 61110.150 ops/s
[info]                  ·gc.alloc.rate:                   1248.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              32150.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34432.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 61128.828 ops/s
[info]                  ·gc.alloc.rate:               1247.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          32126.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34490.601 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 61267.495 ops/s
[info]                  ·gc.alloc.rate:                   1263.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              32451.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34472.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.925 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   60902.467 ±(99.9%) 2490.674 ops/s [Average]
[info]   (min, avg, max) = (59752.388, 60902.467, 61267.495), stdev = 646.820
[info]   CI (99.9%): [58411.793, 63393.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1245.836 ±(99.9%) 50.976 MB/sec [Average]
[info]   (min, avg, max) = (1226.902, 1245.836, 1263.750), stdev = 13.238
[info]   CI (99.9%): [1194.860, 1296.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32190.785 ±(99.9%) 763.626 B/op [Average]
[info]   (min, avg, max) = (31923.352, 32190.785, 32451.099), stdev = 198.311
[info]   CI (99.9%): [31427.160, 32954.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1204.052 ±(99.9%) 1157.277 MB/sec [Average]
[info]   (min, avg, max) = (666.452, 1204.052, 1342.460), stdev = 300.541
[info]   CI (99.9%): [46.775, 2361.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31132.666 ±(99.9%) 30176.144 B/op [Average]
[info]   (min, avg, max) = (17123.974, 31132.666, 35144.368), stdev = 7836.649
[info]   CI (99.9%): [956.522, 61308.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.179 ±(99.9%) 1.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.854), stdev = 0.378
[info]   CI (99.9%): [≈ 0, 1.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.599 ±(99.9%) 37.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.599, 21.925), stdev = 9.696
[info]   CI (99.9%): [≈ 0, 41.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12730.566 ops/s
[info] # Warmup Iteration   2: 68163.001 ops/s
[info] # Warmup Iteration   3: 68824.583 ops/s
[info] # Warmup Iteration   4: 74196.913 ops/s
[info] # Warmup Iteration   5: 74750.918 ops/s
[info] Iteration   1: 74226.667 ops/s
[info]                  ·gc.alloc.rate:                   1743.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              36962.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42499.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 72612.968 ops/s
[info]                  ·gc.alloc.rate:               1700.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          36862.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28992.353 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 72527.883 ops/s
[info]                  ·gc.alloc.rate:                   1700.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              36904.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43620.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 74134.406 ops/s
[info]                  ·gc.alloc.rate:                   1721.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              36548.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28496.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 74273.899 ops/s
[info]                  ·gc.alloc.rate:                   1752.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              37145.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42732.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73555.165 ±(99.9%) 3468.818 ops/s [Average]
[info]   (min, avg, max) = (72527.883, 73555.165, 74273.899), stdev = 900.841
[info]   CI (99.9%): [70086.346, 77023.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1723.831 ±(99.9%) 92.384 MB/sec [Average]
[info]   (min, avg, max) = (1700.635, 1723.831, 1752.997), stdev = 23.992
[info]   CI (99.9%): [1631.447, 1816.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   36884.614 ±(99.9%) 834.868 B/op [Average]
[info]   (min, avg, max) = (36548.605, 36884.614, 37145.853), stdev = 216.813
[info]   CI (99.9%): [36049.746, 37719.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.215 ±(99.9%) 1414.064 MB/sec [Average]
[info]   (min, avg, max) = (1337.657, 1742.215, 2016.622), stdev = 367.228
[info]   CI (99.9%): [328.150, 3156.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37268.223 ±(99.9%) 30012.312 B/op [Average]
[info]   (min, avg, max) = (28496.987, 37268.223, 43620.195), stdev = 7794.102
[info]   CI (99.9%): [7255.910, 67280.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.152 ±(99.9%) 4.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.152, 3.094), stdev = 1.152
[info]   CI (99.9%): [≈ 0, 5.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24768.031 ops/s
[info] # Warmup Iteration   2: 112912.053 ops/s
[info] # Warmup Iteration   3: 125786.682 ops/s
[info] # Warmup Iteration   4: 130620.478 ops/s
[info] # Warmup Iteration   5: 133907.523 ops/s
[info] Iteration   1: 134434.955 ops/s
[info]                  ·gc.alloc.rate:               919.902 MB/sec
[info]                  ·gc.alloc.rate.norm:          10769.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7798.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 134344.297 ops/s
[info]                  ·gc.alloc.rate:               925.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          10843.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7803.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 133317.192 ops/s
[info]                  ·gc.alloc.rate:                   931.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              11002.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15743.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 134245.821 ops/s
[info]                  ·gc.alloc.rate:                   915.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              10728.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7825.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 134475.983 ops/s
[info]                  ·gc.alloc.rate:               916.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          10724.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7811.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   134163.649 ±(99.9%) 1853.752 ops/s [Average]
[info]   (min, avg, max) = (133317.192, 134163.649, 134475.983), stdev = 481.413
[info]   CI (99.9%): [132309.898, 136017.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   921.795 ±(99.9%) 26.885 MB/sec [Average]
[info]   (min, avg, max) = (915.178, 921.795, 931.964), stdev = 6.982
[info]   CI (99.9%): [894.911, 948.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10813.670 ±(99.9%) 445.277 B/op [Average]
[info]   (min, avg, max) = (10724.510, 10813.670, 11002.089), stdev = 115.637
[info]   CI (99.9%): [10368.393, 11258.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.171 ±(99.9%) 1148.327 MB/sec [Average]
[info]   (min, avg, max) = (666.127, 800.171, 1333.636), stdev = 298.217
[info]   CI (99.9%): [≈ 0, 1948.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9396.637 ±(99.9%) 13663.094 B/op [Average]
[info]   (min, avg, max) = (7798.481, 9396.637, 15743.936), stdev = 3548.262
[info]   CI (99.9%): [≈ 0, 23059.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.492), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84861.126 ops/s
[info] # Warmup Iteration   2: 266139.278 ops/s
[info] # Warmup Iteration   3: 286814.616 ops/s
[info] # Warmup Iteration   4: 295231.282 ops/s
[info] # Warmup Iteration   5: 294730.078 ops/s
[info] Iteration   1: 294542.359 ops/s
[info]                  ·gc.alloc.rate:                   1249.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              6674.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7179.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 294959.864 ops/s
[info]                  ·gc.alloc.rate:               1229.945 MB/sec
[info]                  ·gc.alloc.rate.norm:          6562.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3586.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 294499.104 ops/s
[info]                  ·gc.alloc.rate:                   1252.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              6693.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7186.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 293778.648 ops/s
[info]                  ·gc.alloc.rate:                   1237.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              6628.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7207.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 294454.882 ops/s
[info]                  ·gc.alloc.rate:                   1252.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              6693.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7185.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.448 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   294446.972 ±(99.9%) 1635.498 ops/s [Average]
[info]   (min, avg, max) = (293778.648, 294446.972, 294959.864), stdev = 424.734
[info]   CI (99.9%): [292811.474, 296082.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1244.246 ±(99.9%) 38.653 MB/sec [Average]
[info]   (min, avg, max) = (1229.945, 1244.246, 1252.460), stdev = 10.038
[info]   CI (99.9%): [1205.593, 1282.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6650.508 ±(99.9%) 214.962 B/op [Average]
[info]   (min, avg, max) = (6562.723, 6650.508, 6693.564), stdev = 55.825
[info]   CI (99.9%): [6435.546, 6865.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.042 ±(99.9%) 1157.838 MB/sec [Average]
[info]   (min, avg, max) = (672.159, 1210.042, 1345.625), stdev = 300.687
[info]   CI (99.9%): [52.205, 2367.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6468.923 ±(99.9%) 6204.768 B/op [Average]
[info]   (min, avg, max) = (3586.498, 6468.923, 7207.156), stdev = 1611.359
[info]   CI (99.9%): [264.154, 12673.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.720 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.832), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.568 ±(99.9%) 25.282 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.568, 15.167), stdev = 6.566
[info]   CI (99.9%): [≈ 0, 28.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006.535 ops/s
[info] # Warmup Iteration   2: 20359.644 ops/s
[info] # Warmup Iteration   3: 27183.047 ops/s
[info] # Warmup Iteration   4: 27630.592 ops/s
[info] # Warmup Iteration   5: 27346.335 ops/s
[info] Iteration   1: 27634.153 ops/s
[info]                  ·gc.alloc.rate:               1388.348 MB/sec
[info]                  ·gc.alloc.rate.norm:          79039.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75841.357 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 27813.687 ops/s
[info]                  ·gc.alloc.rate:                   1392.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              78786.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75501.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27455.584 ops/s
[info]                  ·gc.alloc.rate:                   1362.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              78117.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76641.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27597.819 ops/s
[info]                  ·gc.alloc.rate:                   1396.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              79570.260 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114439.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.324 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 27856.028 ops/s
[info]                  ·gc.alloc.rate:                   1389.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              78522.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.269 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75836.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   27671.454 ±(99.9%) 631.879 ops/s [Average]
[info]   (min, avg, max) = (27455.584, 27671.454, 27856.028), stdev = 164.097
[info]   CI (99.9%): [27039.575, 28303.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1385.891 ±(99.9%) 51.164 MB/sec [Average]
[info]   (min, avg, max) = (1362.731, 1385.891, 1396.229), stdev = 13.287
[info]   CI (99.9%): [1334.727, 1437.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78807.158 ±(99.9%) 2103.166 B/op [Average]
[info]   (min, avg, max) = (78117.274, 78807.158, 79570.260), stdev = 546.186
[info]   CI (99.9%): [76703.991, 80910.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.760 ±(99.9%) 1156.731 MB/sec [Average]
[info]   (min, avg, max) = (1332.179, 1470.760, 2008.088), stdev = 300.399
[info]   CI (99.9%): [314.028, 2627.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83652.049 ±(99.9%) 66292.522 B/op [Average]
[info]   (min, avg, max) = (75501.392, 83652.049, 114439.749), stdev = 17215.957
[info]   CI (99.9%): [17359.527, 149944.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.229 ±(99.9%) 1.529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.229, 0.936), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13.028 ±(99.9%) 87.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.028, 53.324), stdev = 22.626
[info]   CI (99.9%): [≈ 0, 100.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46391.745 ops/s
[info] # Warmup Iteration   2: 167934.258 ops/s
[info] # Warmup Iteration   3: 172719.135 ops/s
[info] # Warmup Iteration   4: 178937.357 ops/s
[info] # Warmup Iteration   5: 180974.997 ops/s
[info] Iteration   1: 178142.498 ops/s
[info]                  ·gc.alloc.rate:               1027.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          9077.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11788.233 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 173669.442 ops/s
[info]                  ·gc.alloc.rate:               976.321 MB/sec
[info]                  ·gc.alloc.rate.norm:          8847.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6052.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 175824.211 ops/s
[info]                  ·gc.alloc.rate:                   1003.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              8982.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11958.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 180972.074 ops/s
[info]                  ·gc.alloc.rate:               1015.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          8828.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5810.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 178158.889 ops/s
[info]                  ·gc.alloc.rate:                   1012.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              8947.353 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11816.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   177353.423 ±(99.9%) 10593.865 ops/s [Average]
[info]   (min, avg, max) = (173669.442, 177353.423, 180972.074), stdev = 2751.193
[info]   CI (99.9%): [166759.557, 187947.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1007.096 ±(99.9%) 74.024 MB/sec [Average]
[info]   (min, avg, max) = (976.321, 1007.096, 1027.618), stdev = 19.224
[info]   CI (99.9%): [933.072, 1081.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8936.769 ±(99.9%) 393.809 B/op [Average]
[info]   (min, avg, max) = (8828.394, 8936.769, 9077.701), stdev = 102.271
[info]   CI (99.9%): [8542.960, 9330.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.799 ±(99.9%) 1408.922 MB/sec [Average]
[info]   (min, avg, max) = (667.845, 1068.799, 1337.612), stdev = 365.893
[info]   CI (99.9%): [≈ 0, 2477.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9485.063 ±(99.9%) 12498.717 B/op [Average]
[info]   (min, avg, max) = (5810.617, 9485.063, 11958.188), stdev = 3245.877
[info]   CI (99.9%): [≈ 0, 21983.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.186), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229625.812 ops/s
[info] # Warmup Iteration   2: 448776.348 ops/s
[info] # Warmup Iteration   3: 476250.092 ops/s
[info] # Warmup Iteration   4: 476046.443 ops/s
[info] # Warmup Iteration   5: 474016.601 ops/s
[info] Iteration   1: 477329.529 ops/s
[info]                  ·gc.alloc.rate:                   1429.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              4710.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4430.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 473400.993 ops/s
[info]                  ·gc.alloc.rate:               1425.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          4739.872 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4469.197 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 474818.786 ops/s
[info]                  ·gc.alloc.rate:                   1442.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              4780.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6688.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 474138.066 ops/s
[info]                  ·gc.alloc.rate:                   1442.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              4788.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4457.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 476953.279 ops/s
[info]                  ·gc.alloc.rate:               1447.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          4777.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4422.702 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   475328.131 ±(99.9%) 6679.576 ops/s [Average]
[info]   (min, avg, max) = (473400.993, 475328.131, 477329.529), stdev = 1734.665
[info]   CI (99.9%): [468648.554, 482007.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1437.443 ±(99.9%) 36.653 MB/sec [Average]
[info]   (min, avg, max) = (1425.693, 1437.443, 1447.683), stdev = 9.519
[info]   CI (99.9%): [1400.790, 1474.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4759.306 ±(99.9%) 127.893 B/op [Average]
[info]   (min, avg, max) = (4710.218, 4759.306, 4788.160), stdev = 33.213
[info]   CI (99.9%): [4631.413, 4887.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.849 ±(99.9%) 1162.204 MB/sec [Average]
[info]   (min, avg, max) = (1340.194, 1477.849, 2017.754), stdev = 301.821
[info]   CI (99.9%): [315.645, 2640.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4893.602 ±(99.9%) 3863.337 B/op [Average]
[info]   (min, avg, max) = (4422.702, 4893.602, 6688.026), stdev = 1003.296
[info]   CI (99.9%): [1030.265, 8756.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.227), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.263 ±(99.9%) 18.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.263, 10.695), stdev = 4.719
[info]   CI (99.9%): [≈ 0, 20.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.121
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230836.882 ops/s
[info] # Warmup Iteration   2: 506199.111 ops/s
[info] # Warmup Iteration   3: 514834.483 ops/s
[info] # Warmup Iteration   4: 509305.967 ops/s
[info] # Warmup Iteration   5: 517016.480 ops/s
[info] Iteration   1: 515056.339 ops/s
[info]                  ·gc.alloc.rate:                   987.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4101.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 509281.606 ops/s
[info]                  ·gc.alloc.rate:               948.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          2929.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2075.092 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 515946.028 ops/s
[info]                  ·gc.alloc.rate:                   977.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              2981.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4097.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 518517.952 ops/s
[info]                  ·gc.alloc.rate:                   965.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              2930.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2039.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 517492.218 ops/s
[info]                  ·gc.alloc.rate:               976.449 MB/sec
[info]                  ·gc.alloc.rate.norm:          2969.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2044.233 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   515258.828 ±(99.9%) 13863.702 ops/s [Average]
[info]   (min, avg, max) = (509281.606, 515258.828, 518517.952), stdev = 3600.359
[info]   CI (99.9%): [501395.126, 529122.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   970.972 ±(99.9%) 57.183 MB/sec [Average]
[info]   (min, avg, max) = (948.165, 970.972, 987.081), stdev = 14.850
[info]   CI (99.9%): [913.789, 1028.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2965.656 ±(99.9%) 140.860 B/op [Average]
[info]   (min, avg, max) = (2929.494, 2965.656, 3016.208), stdev = 36.581
[info]   CI (99.9%): [2824.796, 3106.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   940.222 ±(99.9%) 1414.989 MB/sec [Average]
[info]   (min, avg, max) = (671.627, 940.222, 1343.250), stdev = 367.468
[info]   CI (99.9%): [≈ 0, 2355.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2871.501 ±(99.9%) 4316.964 B/op [Average]
[info]   (min, avg, max) = (2039.154, 2871.501, 4101.574), stdev = 1121.102
[info]   CI (99.9%): [≈ 0, 7188.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.127), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10269.020 ops/s
[info] # Warmup Iteration   2: 66422.295 ops/s
[info] # Warmup Iteration   3: 75621.339 ops/s
[info] # Warmup Iteration   4: 77386.266 ops/s
[info] # Warmup Iteration   5: 77120.129 ops/s
[info] Iteration   1: 77266.881 ops/s
[info]                  ·gc.alloc.rate:               1379.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          28104.318 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27150.277 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 74474.556 ops/s
[info]                  ·gc.alloc.rate:                        1323.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                   27977.516 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.021 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.434 B/op
[info]                  ·gc.churn.Metaspace:                   0.062 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              1.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:               1347.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          28484.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           4.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      98.103 B/op
[info]                  ·gc.count:                             4.000 counts
[info]                  ·gc.time:                              40.000 ms
[info] Iteration   3: 77824.715 ops/s
[info]                  ·gc.alloc.rate:               1391.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          28142.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26990.711 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 77448.466 ops/s
[info]                  ·gc.alloc.rate:               1385.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          28152.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27074.699 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 77648.291 ops/s
[info]                  ·gc.alloc.rate:               1389.243 MB/sec
[info]                  ·gc.alloc.rate.norm:          28159.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26977.271 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   76932.582 ±(99.9%) 5352.231 ops/s [Average]
[info]   (min, avg, max) = (74474.556, 76932.582, 77824.715), stdev = 1389.957
[info]   CI (99.9%): [71580.350, 82284.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1374.065 ±(99.9%) 109.400 MB/sec [Average]
[info]   (min, avg, max) = (1323.892, 1374.065, 1391.826), stdev = 28.411
[info]   CI (99.9%): [1264.665, 1483.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28107.159 ±(99.9%) 290.822 B/op [Average]
[info]   (min, avg, max) = (27977.516, 28107.159, 28159.453), stdev = 75.526
[info]   CI (99.9%): [27816.337, 28397.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.004 ±(99.9%) 0.035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.087 ±(99.9%) 0.747 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.434), stdev = 0.194
[info]   CI (99.9%): [≈ 0, 0.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.012 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.260 ±(99.9%) 2.242 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.302), stdev = 0.582
[info]   CI (99.9%): [≈ 0, 2.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.831 ±(99.9%) 26.469 MB/sec [Average]
[info]   (min, avg, max) = (1330.920, 1335.831, 1347.867), stdev = 6.874
[info]   CI (99.9%): [1309.361, 1362.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27335.428 ±(99.9%) 2487.318 B/op [Average]
[info]   (min, avg, max) = (26977.271, 27335.428, 28484.180), stdev = 645.948
[info]   CI (99.9%): [24848.110, 29822.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 7.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.928, 4.642), stdev = 2.076
[info]   CI (99.9%): [≈ 0, 8.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.621 ±(99.9%) 168.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.621, 98.103), stdev = 43.873
[info]   CI (99.9%): [≈ 0, 188.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.000, 40.000), stdev = 16.263
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25050.875 ops/s
[info] # Warmup Iteration   2: 88412.740 ops/s
[info] # Warmup Iteration   3: 94072.675 ops/s
[info] # Warmup Iteration   4: 97599.857 ops/s
[info] # Warmup Iteration   5: 96825.090 ops/s
[info] Iteration   1: 97583.976 ops/s
[info]                  ·gc.alloc.rate:               1585.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          25567.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21658.889 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 96317.859 ops/s
[info]                  ·gc.alloc.rate:                   1590.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              25982.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32947.937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 97439.652 ops/s
[info]                  ·gc.alloc.rate:                   1610.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              26016.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21691.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 98358.805 ops/s
[info]                  ·gc.alloc.rate:                   1614.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              25834.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21445.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 97776.950 ops/s
[info]                  ·gc.alloc.rate:               1612.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          25952.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32327.385 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   97495.448 ±(99.9%) 2870.148 ops/s [Average]
[info]   (min, avg, max) = (96317.859, 97495.448, 98358.805), stdev = 745.368
[info]   CI (99.9%): [94625.301, 100365.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1602.771 ±(99.9%) 52.689 MB/sec [Average]
[info]   (min, avg, max) = (1585.222, 1602.771, 1614.739), stdev = 13.683
[info]   CI (99.9%): [1550.082, 1655.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25870.786 ±(99.9%) 704.630 B/op [Average]
[info]   (min, avg, max) = (25567.277, 25870.786, 26016.733), stdev = 182.990
[info]   CI (99.9%): [25166.156, 26575.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.381 ±(99.9%) 1414.769 MB/sec [Average]
[info]   (min, avg, max) = (1340.386, 1610.381, 2017.278), stdev = 367.411
[info]   CI (99.9%): [195.612, 3025.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26014.192 ±(99.9%) 23300.599 B/op [Average]
[info]   (min, avg, max) = (21445.190, 26014.192, 32947.937), stdev = 6051.091
[info]   CI (99.9%): [2713.594, 49314.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 2.832), stdev = 1.228
[info]   CI (99.9%): [≈ 0, 5.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.412 ±(99.9%) 77.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.412, 46.260), stdev = 20.056
[info]   CI (99.9%): [≈ 0, 89.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34392.183 ops/s
[info] # Warmup Iteration   2: 160701.651 ops/s
[info] # Warmup Iteration   3: 170856.306 ops/s
[info] # Warmup Iteration   4: 176852.833 ops/s
[info] # Warmup Iteration   5: 178692.653 ops/s
[info] Iteration   1: 178557.032 ops/s
[info]                  ·gc.alloc.rate:                   757.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              6676.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5862.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 177413.401 ops/s
[info]                  ·gc.alloc.rate:               749.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          6647.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5909.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 175184.308 ops/s
[info]                  ·gc.alloc.rate:                   746.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              6705.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5984.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 174937.609 ops/s
[info]                  ·gc.alloc.rate:               742.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          6683.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5998.643 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 178419.446 ops/s
[info]                  ·gc.alloc.rate:               755.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          6660.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5882.128 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   176902.359 ±(99.9%) 6700.728 ops/s [Average]
[info]   (min, avg, max) = (174937.609, 176902.359, 178557.032), stdev = 1740.158
[info]   CI (99.9%): [170201.631, 183603.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   750.259 ±(99.9%) 22.851 MB/sec [Average]
[info]   (min, avg, max) = (742.970, 750.259, 757.380), stdev = 5.934
[info]   CI (99.9%): [727.408, 773.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6674.501 ±(99.9%) 85.742 B/op [Average]
[info]   (min, avg, max) = (6647.065, 6674.501, 6705.084), stdev = 22.267
[info]   CI (99.9%): [6588.758, 6760.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.249 ±(99.9%) 2.659 MB/sec [Average]
[info]   (min, avg, max) = (665.106, 666.249, 666.798), stdev = 0.691
[info]   CI (99.9%): [663.590, 668.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5927.497 ±(99.9%) 234.867 B/op [Average]
[info]   (min, avg, max) = (5862.772, 5927.497, 5998.643), stdev = 60.994
[info]   CI (99.9%): [5692.631, 6162.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.111 ±(99.9%) 0.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.367), stdev = 0.165
[info]   CI (99.9%): [≈ 0, 0.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114096.304 ops/s
[info] # Warmup Iteration   2: 274145.623 ops/s
[info] # Warmup Iteration   3: 278144.978 ops/s
[info] # Warmup Iteration   4: 275267.700 ops/s
[info] # Warmup Iteration   5: 280874.417 ops/s
[info] Iteration   1: 281702.274 ops/s
[info]                  ·gc.alloc.rate:               1023.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          5716.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3751.361 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 280959.790 ops/s
[info]                  ·gc.alloc.rate:               1031.519 MB/sec
[info]                  ·gc.alloc.rate.norm:          5778.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7526.531 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 282891.352 ops/s
[info]                  ·gc.alloc.rate:                   1023.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              5692.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3739.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 281817.975 ops/s
[info]                  ·gc.alloc.rate:               1044.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          5834.489 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7509.094 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 282332.891 ops/s
[info]                  ·gc.alloc.rate:               1019.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          5684.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3748.721 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   281940.856 ±(99.9%) 2784.501 ops/s [Average]
[info]   (min, avg, max) = (280959.790, 281940.856, 282891.352), stdev = 723.126
[info]   CI (99.9%): [279156.356, 284725.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1028.585 ±(99.9%) 39.006 MB/sec [Average]
[info]   (min, avg, max) = (1019.864, 1028.585, 1044.995), stdev = 10.130
[info]   CI (99.9%): [989.579, 1067.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5741.210 ±(99.9%) 245.394 B/op [Average]
[info]   (min, avg, max) = (5684.464, 5741.210, 5834.489), stdev = 63.728
[info]   CI (99.9%): [5495.816, 5986.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.966 ±(99.9%) 1417.759 MB/sec [Average]
[info]   (min, avg, max) = (671.438, 940.966, 1344.928), stdev = 368.187
[info]   CI (99.9%): [≈ 0, 2358.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5255.004 ±(99.9%) 7954.143 B/op [Average]
[info]   (min, avg, max) = (3739.316, 5255.004, 7526.531), stdev = 2065.666
[info]   CI (99.9%): [≈ 0, 13209.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7897.541 ops/s
[info] # Warmup Iteration   2: 60860.008 ops/s
[info] # Warmup Iteration   3: 66533.696 ops/s
[info] # Warmup Iteration   4: 69412.264 ops/s
[info] # Warmup Iteration   5: 69423.529 ops/s
[info] Iteration   1: 68947.878 ops/s
[info]                  ·gc.alloc.rate:                   2698.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              61601.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61097.746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.851 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 69060.093 ops/s
[info]                  ·gc.alloc.rate:                   2688.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              61267.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61212.985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 68873.592 ops/s
[info]                  ·gc.alloc.rate:               2683.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          61323.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46146.538 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 68134.094 ops/s
[info]                  ·gc.alloc.rate:               2683.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          61973.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62348.927 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 67810.964 ops/s
[info]                  ·gc.alloc.rate:               2670.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          61990.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2705.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62798.610 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   68565.324 ±(99.9%) 2144.978 ops/s [Average]
[info]   (min, avg, max) = (67810.964, 68565.324, 69060.093), stdev = 557.044
[info]   CI (99.9%): [66420.346, 70710.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2685.014 ±(99.9%) 38.558 MB/sec [Average]
[info]   (min, avg, max) = (2670.977, 2685.014, 2698.713), stdev = 10.013
[info]   CI (99.9%): [2646.456, 2723.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61631.054 ±(99.9%) 1325.609 B/op [Average]
[info]   (min, avg, max) = (61267.142, 61631.054, 61990.222), stdev = 344.256
[info]   CI (99.9%): [60305.445, 62956.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2557.513 ±(99.9%) 1159.053 MB/sec [Average]
[info]   (min, avg, max) = (2019.450, 2557.513, 2705.808), stdev = 301.002
[info]   CI (99.9%): [1398.460, 3716.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58720.961 ±(99.9%) 27212.146 B/op [Average]
[info]   (min, avg, max) = (46146.538, 58720.961, 62798.610), stdev = 7066.908
[info]   CI (99.9%): [31508.815, 85933.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.234 ±(99.9%) 6.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.234, 3.321), stdev = 1.698
[info]   CI (99.9%): [≈ 0, 7.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72388.698 ops/s
[info] # Warmup Iteration   2: 190279.821 ops/s
[info] # Warmup Iteration   3: 198343.555 ops/s
[info] # Warmup Iteration   4: 202552.597 ops/s
[info] # Warmup Iteration   5: 203157.133 ops/s
[info] Iteration   1: 198783.796 ops/s
[info]                  ·gc.alloc.rate:               1406.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          11132.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10611.708 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 203425.150 ops/s
[info]                  ·gc.alloc.rate:                   1422.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              11002.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10377.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 203044.727 ops/s
[info]                  ·gc.alloc.rate:                   1431.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              11099.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10404.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 202813.667 ops/s
[info]                  ·gc.alloc.rate:                   1417.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              10993.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10405.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 202665.569 ops/s
[info]                  ·gc.alloc.rate:                   1416.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              11004.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10392.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   202146.582 ±(99.9%) 7322.321 ops/s [Average]
[info]   (min, avg, max) = (198783.796, 202146.582, 203425.150), stdev = 1901.583
[info]   CI (99.9%): [194824.261, 209468.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1418.806 ±(99.9%) 36.226 MB/sec [Average]
[info]   (min, avg, max) = (1406.037, 1418.806, 1431.988), stdev = 9.408
[info]   CI (99.9%): [1382.580, 1455.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11046.501 ±(99.9%) 249.375 B/op [Average]
[info]   (min, avg, max) = (10993.690, 11046.501, 11132.618), stdev = 64.762
[info]   CI (99.9%): [10797.126, 11295.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340.644 ±(99.9%) 5.976 MB/sec [Average]
[info]   (min, avg, max) = (1338.186, 1340.644, 1342.285), stdev = 1.552
[info]   CI (99.9%): [1334.669, 1346.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10438.350 ±(99.9%) 375.744 B/op [Average]
[info]   (min, avg, max) = (10377.272, 10438.350, 10611.708), stdev = 97.579
[info]   CI (99.9%): [10062.606, 10814.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.039), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 5.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.810 ±(99.9%) 38.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.810, 23.558), stdev = 10.059
[info]   CI (99.9%): [≈ 0, 44.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157998.394 ops/s
[info] # Warmup Iteration   2: 502615.730 ops/s
[info] # Warmup Iteration   3: 512563.727 ops/s
[info] # Warmup Iteration   4: 515968.187 ops/s
[info] # Warmup Iteration   5: 514794.195 ops/s
[info] Iteration   1: 516644.119 ops/s
[info]                  ·gc.alloc.rate:               409.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1558.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 508274.438 ops/s
[info]                  ·gc.alloc.rate:               417.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          1293.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1584.111 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 508783.065 ops/s
[info]                  ·gc.alloc.rate:               420.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          1299.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2061.591 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 510374.334 ops/s
[info]                  ·gc.alloc.rate:      402.103 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 509273.956 ops/s
[info]                  ·gc.alloc.rate:               416.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          1286.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2059.680 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   510669.982 ±(99.9%) 13202.950 ops/s [Average]
[info]   (min, avg, max) = (508274.438, 510669.982, 516644.119), stdev = 3428.764
[info]   CI (99.9%): [497467.033, 523872.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   413.238 ±(99.9%) 28.137 MB/sec [Average]
[info]   (min, avg, max) = (402.103, 413.238, 420.161), stdev = 7.307
[info]   CI (99.9%): [385.101, 441.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1273.646 ±(99.9%) 105.546 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1273.646, 1299.686), stdev = 27.410
[info]   CI (99.9%): [1168.100, 1379.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.240 ±(99.9%) 1057.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.240, 666.470), stdev = 274.572
[info]   CI (99.9%): [≈ 0, 1528.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1452.782 ±(99.9%) 3266.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1452.782, 2061.591), stdev = 848.230
[info]   CI (99.9%): [≈ 0, 4719.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 388172.224 ops/s
[info] # Warmup Iteration   2: 603165.678 ops/s
[info] # Warmup Iteration   3: 640804.398 ops/s
[info] # Warmup Iteration   4: 629234.084 ops/s
[info] # Warmup Iteration   5: 627207.088 ops/s
[info] Iteration   1: 627596.051 ops/s
[info]                  ·gc.alloc.rate:               350.278 MB/sec
[info]                  ·gc.alloc.rate.norm:          878.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1283.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 628908.124 ops/s
[info]                  ·gc.alloc.rate:      338.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 624545.023 ops/s
[info]                  ·gc.alloc.rate:               354.576 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1289.268 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 629678.783 ops/s
[info]                  ·gc.alloc.rate:      339.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 625756.027 ops/s
[info]                  ·gc.alloc.rate:               362.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1686.333 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   627296.801 ±(99.9%) 8237.592 ops/s [Average]
[info]   (min, avg, max) = (624545.023, 627296.801, 629678.783), stdev = 2139.276
[info]   CI (99.9%): [619059.210, 635534.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   349.166 ±(99.9%) 39.590 MB/sec [Average]
[info]   (min, avg, max) = (338.849, 349.166, 362.868), stdev = 10.281
[info]   CI (99.9%): [309.576, 388.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   876.131 ±(99.9%) 109.368 B/op [Average]
[info]   (min, avg, max) = (848.001, 876.131, 912.686), stdev = 28.403
[info]   CI (99.9%): [766.763, 985.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.735 ±(99.9%) 1216.604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.735, 670.457), stdev = 315.948
[info]   CI (99.9%): [≈ 0, 1555.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   851.722 ±(99.9%) 3059.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 851.722, 1686.333), stdev = 794.495
[info]   CI (99.9%): [≈ 0, 3911.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 405358.613 ops/s
[info] # Warmup Iteration   2: 680284.230 ops/s
[info] # Warmup Iteration   3: 694719.525 ops/s
[info] # Warmup Iteration   4: 694483.848 ops/s
[info] # Warmup Iteration   5: 694328.030 ops/s
[info] Iteration   1: 694644.084 ops/s
[info]                  ·gc.alloc.rate:      7.062 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 694430.803 ops/s
[info]                  ·gc.alloc.rate:      7.060 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 694529.437 ops/s
[info]                  ·gc.alloc.rate:      7.061 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 694604.164 ops/s
[info]                  ·gc.alloc.rate:      7.062 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691326.068 ops/s
[info]                  ·gc.alloc.rate:      7.028 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   693906.911 ±(99.9%) 5564.261 ops/s [Average]
[info]   (min, avg, max) = (691326.068, 693906.911, 694644.084), stdev = 1445.021
[info]   CI (99.9%): [688342.650, 699471.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.055 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (7.028, 7.055, 7.062), stdev = 0.015
[info]   CI (99.9%): [6.998, 7.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8861.036 ops/s
[info] # Warmup Iteration   2: 32879.709 ops/s
[info] # Warmup Iteration   3: 35347.322 ops/s
[info] # Warmup Iteration   4: 35026.824 ops/s
[info] # Warmup Iteration   5: 35200.614 ops/s
[info] Iteration   1: 35793.473 ops/s
[info]                  ·gc.alloc.rate:                   1953.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              85911.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88499.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 36088.496 ops/s
[info]                  ·gc.alloc.rate:                   1955.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              85261.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87662.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35519.446 ops/s
[info]                  ·gc.alloc.rate:               1924.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          85288.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59210.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 35993.283 ops/s
[info]                  ·gc.alloc.rate:                   1977.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              86476.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87660.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.910 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 36089.177 ops/s
[info]                  ·gc.alloc.rate:                   1983.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              86488.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87509.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35896.775 ±(99.9%) 935.591 ops/s [Average]
[info]   (min, avg, max) = (35519.446, 35896.775, 36089.177), stdev = 242.970
[info]   CI (99.9%): [34961.184, 36832.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1959.040 ±(99.9%) 89.171 MB/sec [Average]
[info]   (min, avg, max) = (1924.800, 1959.040, 1983.284), stdev = 23.157
[info]   CI (99.9%): [1869.869, 2048.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85885.282 ±(99.9%) 2325.397 B/op [Average]
[info]   (min, avg, max) = (85261.865, 85885.282, 86488.199), stdev = 603.898
[info]   CI (99.9%): [83559.885, 88210.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.214 ±(99.9%) 1158.036 MB/sec [Average]
[info]   (min, avg, max) = (1336.267, 1874.214, 2012.720), stdev = 300.738
[info]   CI (99.9%): [716.178, 3032.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82108.346 ±(99.9%) 49312.753 B/op [Average]
[info]   (min, avg, max) = (59210.231, 82108.346, 88499.229), stdev = 12806.365
[info]   CI (99.9%): [32795.593, 131421.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 4.953 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 2.977), stdev = 1.286
[info]   CI (99.9%): [≈ 0, 5.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   34.894 ±(99.9%) 217.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.894, 130.889), stdev = 56.546
[info]   CI (99.9%): [≈ 0, 252.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69950.134 ops/s
[info] # Warmup Iteration   2: 790356.213 ops/s
[info] # Warmup Iteration   3: 840523.487 ops/s
[info] # Warmup Iteration   4: 867921.101 ops/s
[info] # Warmup Iteration   5: 863086.722 ops/s
[info] Iteration   1: 867069.395 ops/s
[info]                  ·gc.alloc.rate:                   2323.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              4218.481 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3652.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 873499.090 ops/s
[info]                  ·gc.alloc.rate:                   2339.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.561 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4820.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 859115.070 ops/s
[info]                  ·gc.alloc.rate:               2301.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          4215.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3674.491 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 874940.812 ops/s
[info]                  ·gc.alloc.rate:               2358.081 MB/sec
[info]                  ·gc.alloc.rate.norm:          4241.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3612.837 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 870113.825 ops/s
[info]                  ·gc.alloc.rate:               2369.550 MB/sec
[info]                  ·gc.alloc.rate.norm:          4286.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4855.986 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   868947.638 ±(99.9%) 24216.313 ops/s [Average]
[info]   (min, avg, max) = (859115.070, 868947.638, 874940.812), stdev = 6288.899
[info]   CI (99.9%): [844731.326, 893163.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2338.452 ±(99.9%) 104.844 MB/sec [Average]
[info]   (min, avg, max) = (2301.037, 2338.452, 2369.550), stdev = 27.228
[info]   CI (99.9%): [2233.608, 2443.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4235.477 ±(99.9%) 117.057 B/op [Average]
[info]   (min, avg, max) = (4215.354, 4235.477, 4286.124), stdev = 30.399
[info]   CI (99.9%): [4118.420, 4352.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2277.274 ±(99.9%) 1415.409 MB/sec [Average]
[info]   (min, avg, max) = (2005.796, 2277.274, 2684.593), stdev = 367.577
[info]   CI (99.9%): [861.865, 3692.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4123.274 ±(99.9%) 2514.470 B/op [Average]
[info]   (min, avg, max) = (3612.837, 4123.274, 4855.986), stdev = 653.000
[info]   CI (99.9%): [1608.804, 6637.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 6.749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.934), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 7.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 12.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 7.142), stdev = 3.182
[info]   CI (99.9%): [≈ 0, 13.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16527.277 ops/s
[info] # Warmup Iteration   2: 1513620.457 ops/s
[info] # Warmup Iteration   3: 1794625.305 ops/s
[info] # Warmup Iteration   4: 1797319.693 ops/s
[info] # Warmup Iteration   5: 1792850.059 ops/s
[info] Iteration   1: 1817203.319 ops/s
[info]                  ·gc.alloc.rate:                   1144.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              991.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     577.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1799678.753 ops/s
[info]                  ·gc.alloc.rate:                   1150.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1005.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1167.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1829407.649 ops/s
[info]                  ·gc.alloc.rate:                   1164.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              1001.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1149.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1854764.270 ops/s
[info]                  ·gc.alloc.rate:               1163.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          987.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 567.542 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1834249.375 ops/s
[info]                  ·gc.alloc.rate:                   1165.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              999.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1148.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1827060.673 ±(99.9%) 78717.465 ops/s [Average]
[info]   (min, avg, max) = (1799678.753, 1827060.673, 1854764.270), stdev = 20442.676
[info]   CI (99.9%): [1748343.208, 1905778.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1157.450 ±(99.9%) 36.851 MB/sec [Average]
[info]   (min, avg, max) = (1144.216, 1157.450, 1165.004), stdev = 9.570
[info]   CI (99.9%): [1120.599, 1194.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   997.096 ±(99.9%) 29.256 B/op [Average]
[info]   (min, avg, max) = (987.527, 997.096, 1005.921), stdev = 7.598
[info]   CI (99.9%): [967.840, 1026.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.056 ±(99.9%) 1409.918 MB/sec [Average]
[info]   (min, avg, max) = (667.097, 1069.056, 1338.014), stdev = 366.151
[info]   CI (99.9%): [≈ 0, 2478.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   922.102 ±(99.9%) 1228.747 B/op [Average]
[info]   (min, avg, max) = (567.542, 922.102, 1167.489), stdev = 319.102
[info]   CI (99.9%): [≈ 0, 2150.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.358 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.289), stdev = 1.911
[info]   CI (99.9%): [≈ 0, 8.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.747 ±(99.9%) 6.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.747, 3.680), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2571045.045 ops/s
[info] # Warmup Iteration   2: 8552729.065 ops/s
[info] # Warmup Iteration   3: 8675754.352 ops/s
[info] # Warmup Iteration   4: 8484117.854 ops/s
[info] # Warmup Iteration   5: 8686734.759 ops/s
[info] Iteration   1: 8651352.823 ops/s
[info]                  ·gc.alloc.rate:                   277.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8590815.559 ops/s
[info]                  ·gc.alloc.rate:      273.280 MB/sec
[info]                  ·gc.alloc.rate.norm: 50.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8644886.123 ops/s
[info]                  ·gc.alloc.rate:               275.781 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93.140 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 8670503.965 ops/s
[info]                  ·gc.alloc.rate:      264.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8591080.022 ops/s
[info]                  ·gc.alloc.rate:                   281.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              51.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8629727.698 ±(99.9%) 141060.883 ops/s [Average]
[info]   (min, avg, max) = (8590815.559, 8629727.698, 8670503.965), stdev = 36633.063
[info]   CI (99.9%): [8488666.815, 8770788.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   274.558 ±(99.9%) 24.527 MB/sec [Average]
[info]   (min, avg, max) = (264.472, 274.558, 281.359), stdev = 6.370
[info]   CI (99.9%): [250.031, 299.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   50.070 ±(99.9%) 4.980 B/op [Average]
[info]   (min, avg, max) = (48.000, 50.070, 51.544), stdev = 1.293
[info]   CI (99.9%): [45.089, 55.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.011 ±(99.9%) 1079.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.011, 511.824), stdev = 280.261
[info]   CI (99.9%): [≈ 0, 1386.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   55.987 ±(99.9%) 196.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.987, 93.722), stdev = 51.109
[info]   CI (99.9%): [≈ 0, 252.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 594.728 ops/s
[info] # Warmup Iteration   2: 64123.996 ops/s
[info] # Warmup Iteration   3: 130903.186 ops/s
[info] # Warmup Iteration   4: 332686.878 ops/s
[info] # Warmup Iteration   5: 354514.165 ops/s
[info] Iteration   1: 355473.350 ops/s
[info]                  ·gc.alloc.rate:                   2339.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              10354.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8884.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 349958.847 ops/s
[info]                  ·gc.alloc.rate:                   2313.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              10400.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12061.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.273 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 347877.715 ops/s
[info]                  ·gc.alloc.rate:                   2302.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              10415.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9108.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 355111.243 ops/s
[info]                  ·gc.alloc.rate:               2335.432 MB/sec
[info]                  ·gc.alloc.rate.norm:          10351.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8931.124 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 356361.914 ops/s
[info]                  ·gc.alloc.rate:               2383.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          10525.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11885.615 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   352956.614 ±(99.9%) 14580.966 ops/s [Average]
[info]   (min, avg, max) = (347877.715, 352956.614, 356361.914), stdev = 3786.630
[info]   CI (99.9%): [338375.648, 367537.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2334.925 ±(99.9%) 120.673 MB/sec [Average]
[info]   (min, avg, max) = (2302.455, 2334.925, 2383.924), stdev = 31.338
[info]   CI (99.9%): [2214.252, 2455.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10409.281 ±(99.9%) 273.090 B/op [Average]
[info]   (min, avg, max) = (10351.016, 10409.281, 10525.732), stdev = 70.921
[info]   CI (99.9%): [10136.191, 10682.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2282.177 ±(99.9%) 1424.979 MB/sec [Average]
[info]   (min, avg, max) = (2007.260, 2282.177, 2691.918), stdev = 370.062
[info]   CI (99.9%): [857.198, 3707.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10174.231 ±(99.9%) 6337.700 B/op [Average]
[info]   (min, avg, max) = (8884.763, 10174.231, 12061.585), stdev = 1645.880
[info]   CI (99.9%): [3836.531, 16511.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.354 ±(99.9%) 2.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.395), stdev = 0.601
[info]   CI (99.9%): [≈ 0, 2.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.593 ±(99.9%) 10.409 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.593, 6.273), stdev = 2.703
[info]   CI (99.9%): [≈ 0, 12.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 8.000), stdev = 1.581
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78345.189 ops/s
[info] # Warmup Iteration   2: 1064698.295 ops/s
[info] # Warmup Iteration   3: 1093225.942 ops/s
[info] # Warmup Iteration   4: 1113429.349 ops/s
[info] # Warmup Iteration   5: 1102622.730 ops/s
[info] Iteration   1: 1108321.502 ops/s
[info]                  ·gc.alloc.rate:               1798.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          2554.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1903.647 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1111987.283 ops/s
[info]                  ·gc.alloc.rate:                   1829.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              2589.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2847.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.510 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1119842.670 ops/s
[info]                  ·gc.alloc.rate:                   1829.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              2570.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2819.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.146 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1116536.734 ops/s
[info]                  ·gc.alloc.rate:               1812.247 MB/sec
[info]                  ·gc.alloc.rate.norm:          2554.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1883.660 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1117712.242 ops/s
[info]                  ·gc.alloc.rate:               1836.228 MB/sec
[info]                  ·gc.alloc.rate.norm:          2585.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2822.409 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1114880.086 ±(99.9%) 17935.092 ops/s [Average]
[info]   (min, avg, max) = (1108321.502, 1114880.086, 1119842.670), stdev = 4657.686
[info]   CI (99.9%): [1096944.995, 1132815.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1821.282 ±(99.9%) 59.211 MB/sec [Average]
[info]   (min, avg, max) = (1798.836, 1821.282, 1836.228), stdev = 15.377
[info]   CI (99.9%): [1762.070, 1880.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2570.758 ±(99.9%) 64.740 B/op [Average]
[info]   (min, avg, max) = (2554.033, 2570.758, 2589.587), stdev = 16.813
[info]   CI (99.9%): [2506.019, 2635.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1740.040 ±(99.9%) 1411.074 MB/sec [Average]
[info]   (min, avg, max) = (1336.575, 1740.040, 2012.449), stdev = 366.452
[info]   CI (99.9%): [328.965, 3151.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2455.319 ±(99.9%) 1974.986 B/op [Average]
[info]   (min, avg, max) = (1883.660, 2455.319, 2847.846), stdev = 512.898
[info]   CI (99.9%): [480.332, 4430.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.893), stdev = 1.730
[info]   CI (99.9%): [≈ 0, 7.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.131 ±(99.9%) 9.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.131, 5.510), stdev = 2.448
[info]   CI (99.9%): [≈ 0, 10.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256117.925 ops/s
[info] # Warmup Iteration   2: 2687384.514 ops/s
[info] # Warmup Iteration   3: 2787564.821 ops/s
[info] # Warmup Iteration   4: 2741245.496 ops/s
[info] # Warmup Iteration   5: 2706173.157 ops/s
[info] Iteration   1: 2719942.480 ops/s
[info]                  ·gc.alloc.rate:                   1198.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              693.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2691737.640 ops/s
[info]                  ·gc.alloc.rate:               1190.776 MB/sec
[info]                  ·gc.alloc.rate.norm:          696.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 781.892 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2647581.974 ops/s
[info]                  ·gc.alloc.rate:               1169.748 MB/sec
[info]                  ·gc.alloc.rate.norm:          695.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 795.552 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2713921.834 ops/s
[info]                  ·gc.alloc.rate:                   1172.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              679.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2748132.995 ops/s
[info]                  ·gc.alloc.rate:                   1213.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              695.236 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     767.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2704263.385 ±(99.9%) 144506.143 ops/s [Average]
[info]   (min, avg, max) = (2647581.974, 2704263.385, 2748132.995), stdev = 37527.786
[info]   CI (99.9%): [2559757.242, 2848769.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1189.127 ±(99.9%) 71.312 MB/sec [Average]
[info]   (min, avg, max) = (1169.748, 1189.127, 1213.927), stdev = 18.519
[info]   CI (99.9%): [1117.815, 1260.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.000 ±(99.9%) 26.408 B/op [Average]
[info]   (min, avg, max) = (679.844, 692.000, 696.212), stdev = 6.858
[info]   CI (99.9%): [665.593, 718.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.460 ±(99.9%) 1151.633 MB/sec [Average]
[info]   (min, avg, max) = (669.464, 1204.460, 1340.237), stdev = 299.075
[info]   CI (99.9%): [52.827, 2356.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   701.295 ±(99.9%) 675.099 B/op [Average]
[info]   (min, avg, max) = (388.239, 701.295, 795.552), stdev = 175.321
[info]   CI (99.9%): [26.196, 1376.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.751 ±(99.9%) 6.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.705), stdev = 1.651
[info]   CI (99.9%): [≈ 0, 7.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.430 ±(99.9%) 3.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.430, 2.122), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1092367.520 ops/s
[info] # Warmup Iteration   2: 5876331.814 ops/s
[info] # Warmup Iteration   3: 6220466.131 ops/s
[info] # Warmup Iteration   4: 6199160.122 ops/s
[info] # Warmup Iteration   5: 6207041.771 ops/s
[info] Iteration   1: 6218822.009 ops/s
[info]                  ·gc.alloc.rate:               713.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          180.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6203737.632 ops/s
[info]                  ·gc.alloc.rate:               716.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170.101 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6161675.623 ops/s
[info]                  ·gc.alloc.rate:               711.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 6187775.673 ops/s
[info]                  ·gc.alloc.rate:                   731.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              185.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     341.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6234121.920 ops/s
[info]                  ·gc.alloc.rate:               711.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          179.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169.523 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6201226.571 ±(99.9%) 107941.953 ops/s [Average]
[info]   (min, avg, max) = (6161675.623, 6201226.571, 6234121.920), stdev = 28032.182
[info]   CI (99.9%): [6093284.619, 6309168.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   716.738 ±(99.9%) 31.717 MB/sec [Average]
[info]   (min, avg, max) = (711.225, 716.738, 731.024), stdev = 8.237
[info]   CI (99.9%): [685.020, 748.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.911 ±(99.9%) 9.272 B/op [Average]
[info]   (min, avg, max) = (179.644, 181.911, 185.938), stdev = 2.408
[info]   CI (99.9%): [172.639, 191.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.255 ±(99.9%) 1156.732 MB/sec [Average]
[info]   (min, avg, max) = (670.483, 805.255, 1342.626), stdev = 300.400
[info]   CI (99.9%): [≈ 0, 1961.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204.449 ±(99.9%) 295.027 B/op [Average]
[info]   (min, avg, max) = (169.523, 204.449, 341.500), stdev = 76.618
[info]   CI (99.9%): [≈ 0, 499.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1068148.373 ops/s
[info] # Warmup Iteration   2: 6302474.480 ops/s
[info] # Warmup Iteration   3: 6540784.697 ops/s
[info] # Warmup Iteration   4: 6572748.596 ops/s
[info] # Warmup Iteration   5: 6534295.508 ops/s
[info] Iteration   1: 6475183.385 ops/s
[info]                  ·gc.alloc.rate:               409.556 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124.350 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6498306.005 ops/s
[info]                  ·gc.alloc.rate:                   406.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              98.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6391244.060 ops/s
[info]                  ·gc.alloc.rate:      389.918 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6505521.021 ops/s
[info]                  ·gc.alloc.rate:               416.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          100.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6438987.700 ops/s
[info]                  ·gc.alloc.rate:               408.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6461848.434 ±(99.9%) 181857.448 ops/s [Average]
[info]   (min, avg, max) = (6391244.060, 6461848.434, 6505521.021), stdev = 47227.802
[info]   CI (99.9%): [6279990.986, 6643705.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   406.323 ±(99.9%) 38.031 MB/sec [Average]
[info]   (min, avg, max) = (389.918, 406.323, 416.525), stdev = 9.877
[info]   CI (99.9%): [368.292, 444.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   98.946 ±(99.9%) 7.059 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.946, 100.771), stdev = 1.833
[info]   CI (99.9%): [91.887, 106.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.884 ±(99.9%) 1062.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.884, 670.756), stdev = 276.046
[info]   CI (99.9%): [≈ 0, 1535.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   114.869 ±(99.9%) 258.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.869, 163.883), stdev = 67.100
[info]   CI (99.9%): [≈ 0, 373.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4161.491 ops/s
[info] # Warmup Iteration   2: 327451.275 ops/s
[info] # Warmup Iteration   3: 409336.956 ops/s
[info] # Warmup Iteration   4: 413767.233 ops/s
[info] # Warmup Iteration   5: 407373.591 ops/s
[info] Iteration   1: 421009.519 ops/s
[info]                  ·gc.alloc.rate:                   2581.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              9650.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7485.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 418469.500 ops/s
[info]                  ·gc.alloc.rate:                   2580.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              9704.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2662.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10011.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.626 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 422532.350 ops/s
[info]                  ·gc.alloc.rate:               2618.297 MB/sec
[info]                  ·gc.alloc.rate.norm:          9752.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2664.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9925.139 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 423351.224 ops/s
[info]                  ·gc.alloc.rate:               2636.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          9802.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9933.370 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 422560.705 ops/s
[info]                  ·gc.alloc.rate:                   2605.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              9705.683 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7489.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   421584.660 ±(99.9%) 7458.365 ops/s [Average]
[info]   (min, avg, max) = (418469.500, 421584.660, 423351.224), stdev = 1936.914
[info]   CI (99.9%): [414126.295, 429043.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2604.655 ±(99.9%) 92.876 MB/sec [Average]
[info]   (min, avg, max) = (2580.811, 2604.655, 2636.818), stdev = 24.120
[info]   CI (99.9%): [2511.779, 2697.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9723.061 ±(99.9%) 221.154 B/op [Average]
[info]   (min, avg, max) = (9650.187, 9723.061, 9802.774), stdev = 57.433
[info]   CI (99.9%): [9501.908, 9944.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2402.492 ±(99.9%) 1391.480 MB/sec [Average]
[info]   (min, avg, max) = (2002.525, 2402.492, 2671.946), stdev = 361.363
[info]   CI (99.9%): [1011.012, 3793.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8969.042 ±(99.9%) 5208.948 B/op [Average]
[info]   (min, avg, max) = (7485.880, 8969.042, 10011.420), stdev = 1352.747
[info]   CI (99.9%): [3760.094, 14177.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.458), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.483 ±(99.9%) 2.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 1.712), stdev = 0.735
[info]   CI (99.9%): [≈ 0, 3.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24433.853 ops/s
[info] # Warmup Iteration   2: 74115.140 ops/s
[info] # Warmup Iteration   3: 78396.420 ops/s
[info] # Warmup Iteration   4: 80014.072 ops/s
[info] # Warmup Iteration   5: 79366.189 ops/s
[info] Iteration   1: 80815.092 ops/s
[info]                  ·gc.alloc.rate:                   2252.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              43871.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39242.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.944 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 80678.675 ops/s
[info]                  ·gc.alloc.rate:                   2248.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              43871.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39205.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81253.066 ops/s
[info]                  ·gc.alloc.rate:               2290.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          44363.142 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51870.738 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 80787.353 ops/s
[info]                  ·gc.alloc.rate:               2265.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          44134.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39178.848 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 80970.893 ops/s
[info]                  ·gc.alloc.rate:               2271.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          44142.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39154.572 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   80901.016 ±(99.9%) 857.924 ops/s [Average]
[info]   (min, avg, max) = (80678.675, 80901.016, 81253.066), stdev = 222.800
[info]   CI (99.9%): [80043.091, 81758.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2265.883 ±(99.9%) 63.798 MB/sec [Average]
[info]   (min, avg, max) = (2248.894, 2265.883, 2290.380), stdev = 16.568
[info]   CI (99.9%): [2202.086, 2329.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44076.628 ±(99.9%) 803.301 B/op [Average]
[info]   (min, avg, max) = (43871.036, 44076.628, 44363.142), stdev = 208.615
[info]   CI (99.9%): [43273.328, 44879.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2145.808 ±(99.9%) 1145.583 MB/sec [Average]
[info]   (min, avg, max) = (2009.747, 2145.808, 2677.983), stdev = 297.504
[info]   CI (99.9%): [1000.225, 3291.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41730.417 ±(99.9%) 21828.166 B/op [Average]
[info]   (min, avg, max) = (39154.572, 41730.417, 51870.738), stdev = 5668.705
[info]   CI (99.9%): [19902.251, 63558.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.643), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.595 ±(99.9%) 121.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.595, 70.944), stdev = 31.512
[info]   CI (99.9%): [≈ 0, 135.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14400.159 ops/s
[info] # Warmup Iteration   2: 113859.552 ops/s
[info] # Warmup Iteration   3: 121157.641 ops/s
[info] # Warmup Iteration   4: 126064.366 ops/s
[info] # Warmup Iteration   5: 125652.880 ops/s
[info] Iteration   1: 126953.477 ops/s
[info]                  ·gc.alloc.rate:                   2004.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              24852.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24856.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.935 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 127659.176 ops/s
[info]                  ·gc.alloc.rate:                   2013.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              24821.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24686.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 128146.900 ops/s
[info]                  ·gc.alloc.rate:                   2019.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              24806.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1996.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24519.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 130185.688 ops/s
[info]                  ·gc.alloc.rate:               2052.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          24814.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24144.630 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 130057.107 ops/s
[info]                  ·gc.alloc.rate:               2064.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          24980.233 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24212.356 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   128600.470 ±(99.9%) 5593.069 ops/s [Average]
[info]   (min, avg, max) = (126953.477, 128600.470, 130185.688), stdev = 1452.502
[info]   CI (99.9%): [123007.400, 134193.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2031.012 ±(99.9%) 100.195 MB/sec [Average]
[info]   (min, avg, max) = (2004.789, 2031.012, 2064.394), stdev = 26.020
[info]   CI (99.9%): [1930.817, 2131.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24855.115 ±(99.9%) 277.546 B/op [Average]
[info]   (min, avg, max) = (24806.383, 24855.115, 24980.233), stdev = 72.078
[info]   CI (99.9%): [24577.569, 25132.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2000.436 ±(99.9%) 13.912 MB/sec [Average]
[info]   (min, avg, max) = (1996.466, 2000.436, 2005.130), stdev = 3.613
[info]   CI (99.9%): [1986.524, 2014.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24483.935 ±(99.9%) 1171.306 B/op [Average]
[info]   (min, avg, max) = (24144.630, 24483.935, 24856.774), stdev = 304.185
[info]   CI (99.9%): [23312.629, 25655.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.937 ±(99.9%) 7.359 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.937, 4.351), stdev = 1.911
[info]   CI (99.9%): [≈ 0, 8.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.608 ±(99.9%) 91.243 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.608, 53.935), stdev = 23.695
[info]   CI (99.9%): [≈ 0, 102.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61036.031 ops/s
[info] # Warmup Iteration   2: 161000.326 ops/s
[info] # Warmup Iteration   3: 177792.196 ops/s
[info] # Warmup Iteration   4: 175294.757 ops/s
[info] # Warmup Iteration   5: 179885.444 ops/s
[info] Iteration   1: 176799.383 ops/s
[info]                  ·gc.alloc.rate:                   2689.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              23938.681 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23891.920 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.853 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 175288.755 ops/s
[info]                  ·gc.alloc.rate:                   2655.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              23835.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18068.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.561 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 176184.605 ops/s
[info]                  ·gc.alloc.rate:                   2695.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              24078.191 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23998.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 179497.174 ops/s
[info]                  ·gc.alloc.rate:                   2743.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              24054.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23609.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 179603.883 ops/s
[info]                  ·gc.alloc.rate:               2746.040 MB/sec
[info]                  ·gc.alloc.rate.norm:          24063.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23653.363 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   177474.760 ±(99.9%) 7585.517 ops/s [Average]
[info]   (min, avg, max) = (175288.755, 177474.760, 179603.883), stdev = 1969.935
[info]   CI (99.9%): [169889.243, 185060.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2705.951 ±(99.9%) 148.739 MB/sec [Average]
[info]   (min, avg, max) = (2655.135, 2705.951, 2746.040), stdev = 38.627
[info]   CI (99.9%): [2557.211, 2854.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23994.013 ±(99.9%) 402.152 B/op [Average]
[info]   (min, avg, max) = (23835.716, 23994.013, 24078.191), stdev = 104.438
[info]   CI (99.9%): [23591.861, 24396.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.130 ±(99.9%) 1167.923 MB/sec [Average]
[info]   (min, avg, max) = (2012.658, 2555.130, 2699.243), stdev = 303.306
[info]   CI (99.9%): [1387.207, 3723.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22644.354 ±(99.9%) 9870.594 B/op [Average]
[info]   (min, avg, max) = (18068.069, 22644.354, 23998.973), stdev = 2563.362
[info]   CI (99.9%): [12773.760, 32514.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.208), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.594 ±(99.9%) 2.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.594, 1.853), stdev = 0.734
[info]   CI (99.9%): [≈ 0, 3.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4779.547 ops/s
[info] # Warmup Iteration   2: 50317.201 ops/s
[info] # Warmup Iteration   3: 60086.795 ops/s
[info] # Warmup Iteration   4: 60004.554 ops/s
[info] # Warmup Iteration   5: 61489.265 ops/s
[info] Iteration   1: 62152.476 ops/s
[info]                  ·gc.alloc.rate:                   3119.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              78984.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2664.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67475.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 62075.384 ops/s
[info]                  ·gc.alloc.rate:                   3131.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              79352.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84569.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.056 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 62231.668 ops/s
[info]                  ·gc.alloc.rate:                   3151.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              79700.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67703.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 62106.029 ops/s
[info]                  ·gc.alloc.rate:               3173.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          80409.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3359.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85126.213 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 60436.879 ops/s
[info]                  ·gc.alloc.rate:               3065.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          79795.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70241.616 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   61800.487 ±(99.9%) 2944.021 ops/s [Average]
[info]   (min, avg, max) = (60436.879, 61800.487, 62231.668), stdev = 764.553
[info]   CI (99.9%): [58856.466, 64744.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3128.216 ±(99.9%) 156.073 MB/sec [Average]
[info]   (min, avg, max) = (3065.613, 3128.216, 3173.088), stdev = 40.532
[info]   CI (99.9%): [2972.143, 3284.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79648.701 ±(99.9%) 2047.400 B/op [Average]
[info]   (min, avg, max) = (78984.771, 79648.701, 80409.097), stdev = 531.703
[info]   CI (99.9%): [77601.301, 81696.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2947.412 ±(99.9%) 1410.052 MB/sec [Average]
[info]   (min, avg, max) = (2664.803, 2947.412, 3359.234), stdev = 366.186
[info]   CI (99.9%): [1537.360, 4357.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75023.187 ±(99.9%) 34794.823 B/op [Average]
[info]   (min, avg, max) = (67475.933, 75023.187, 85126.213), stdev = 9036.105
[info]   CI (99.9%): [40228.364, 109818.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.422 ±(99.9%) 1.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.422, 1.056), stdev = 0.441
[info]   CI (99.9%): [≈ 0, 2.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75807.776 ops/s
[info] # Warmup Iteration   2: 182621.107 ops/s
[info] # Warmup Iteration   3: 189150.659 ops/s
[info] # Warmup Iteration   4: 189383.953 ops/s
[info] # Warmup Iteration   5: 188278.942 ops/s
[info] Iteration   1: 189131.803 ops/s
[info]                  ·gc.alloc.rate:               1328.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          11054.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11158.189 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 189428.026 ops/s
[info]                  ·gc.alloc.rate:                   1341.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              11144.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11149.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 189881.917 ops/s
[info]                  ·gc.alloc.rate:               1330.871 MB/sec
[info]                  ·gc.alloc.rate.norm:          11026.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5562.847 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 186831.345 ops/s
[info]                  ·gc.alloc.rate:                   1338.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              11273.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11312.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 185484.459 ops/s
[info]                  ·gc.alloc.rate:                   1314.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              11149.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11372.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   188151.510 ±(99.9%) 7316.419 ops/s [Average]
[info]   (min, avg, max) = (185484.459, 188151.510, 189881.917), stdev = 1900.051
[info]   CI (99.9%): [180835.091, 195467.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1330.657 ±(99.9%) 40.921 MB/sec [Average]
[info]   (min, avg, max) = (1314.020, 1330.657, 1341.314), stdev = 10.627
[info]   CI (99.9%): [1289.737, 1371.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11129.809 ±(99.9%) 372.071 B/op [Average]
[info]   (min, avg, max) = (11026.854, 11129.809, 11273.054), stdev = 96.626
[info]   CI (99.9%): [10757.737, 11501.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.563 ±(99.9%) 1154.137 MB/sec [Average]
[info]   (min, avg, max) = (671.400, 1207.563, 1343.005), stdev = 299.726
[info]   CI (99.9%): [53.426, 2361.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10111.184 ±(99.9%) 9797.750 B/op [Average]
[info]   (min, avg, max) = (5562.847, 10111.184, 11372.682), stdev = 2544.444
[info]   CI (99.9%): [313.434, 19908.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.331), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.823 ±(99.9%) 47.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.823, 28.058), stdev = 12.435
[info]   CI (99.9%): [≈ 0, 53.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100142.055 ops/s
[info] # Warmup Iteration   2: 452547.072 ops/s
[info] # Warmup Iteration   3: 463599.872 ops/s
[info] # Warmup Iteration   4: 469948.440 ops/s
[info] # Warmup Iteration   5: 474227.699 ops/s
[info] Iteration   1: 470648.580 ops/s
[info]                  ·gc.alloc.rate:               419.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          1404.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1710.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 470357.766 ops/s
[info]                  ·gc.alloc.rate:               419.570 MB/sec
[info]                  ·gc.alloc.rate.norm:          1403.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1711.823 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 471657.447 ops/s
[info]                  ·gc.alloc.rate:                   430.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1437.753 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2222.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 471796.749 ops/s
[info]                  ·gc.alloc.rate:      407.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 469839.746 ops/s
[info]                  ·gc.alloc.rate:                   424.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              1421.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2231.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   470860.058 ±(99.9%) 3251.045 ops/s [Average]
[info]   (min, avg, max) = (469839.746, 470860.058, 471796.749), stdev = 844.286
[info]   CI (99.9%): [467609.013, 474111.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   420.520 ±(99.9%) 32.746 MB/sec [Average]
[info]   (min, avg, max) = (407.677, 420.520, 430.888), stdev = 8.504
[info]   CI (99.9%): [387.774, 453.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1405.583 ±(99.9%) 111.976 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1405.583, 1437.753), stdev = 29.080
[info]   CI (99.9%): [1293.607, 1517.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.105 ±(99.9%) 1056.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.105, 666.160), stdev = 274.459
[info]   CI (99.9%): [≈ 0, 1527.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1575.361 ±(99.9%) 3533.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1575.361, 2231.454), stdev = 917.649
[info]   CI (99.9%): [≈ 0, 5108.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.070), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361111.329 ops/s
[info] # Warmup Iteration   2: 622154.263 ops/s
[info] # Warmup Iteration   3: 639564.219 ops/s
[info] # Warmup Iteration   4: 658478.358 ops/s
[info] # Warmup Iteration   5: 644231.889 ops/s
[info] Iteration   1: 639096.742 ops/s
[info]                  ·gc.alloc.rate:                   363.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1259.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 646182.698 ops/s
[info]                  ·gc.alloc.rate:      348.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 640560.210 ops/s
[info]                  ·gc.alloc.rate:               372.070 MB/sec
[info]                  ·gc.alloc.rate.norm:          914.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1648.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 642592.415 ops/s
[info]                  ·gc.alloc.rate:      346.241 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 640305.402 ops/s
[info]                  ·gc.alloc.rate:                   362.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              891.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1648.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.931 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   641747.493 ±(99.9%) 10702.554 ops/s [Average]
[info]   (min, avg, max) = (639096.742, 641747.493, 646182.698), stdev = 2779.419
[info]   CI (99.9%): [631044.940, 652450.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   358.521 ±(99.9%) 42.303 MB/sec [Average]
[info]   (min, avg, max) = (346.241, 358.521, 372.070), stdev = 10.986
[info]   CI (99.9%): [316.218, 400.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   879.232 ±(99.9%) 114.815 B/op [Average]
[info]   (min, avg, max) = (848.001, 879.232, 914.123), stdev = 29.817
[info]   CI (99.9%): [764.418, 994.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.734 ±(99.9%) 1327.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.734, 671.137), stdev = 344.629
[info]   CI (99.9%): [≈ 0, 1697.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   911.427 ±(99.9%) 3261.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 911.427, 1648.923), stdev = 847.009
[info]   CI (99.9%): [≈ 0, 4172.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.654 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.228), stdev = 1.439
[info]   CI (99.9%): [≈ 0, 6.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.607 ±(99.9%) 13.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.607, 7.931), stdev = 3.536
[info]   CI (99.9%): [≈ 0, 15.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 373566.533 ops/s
[info] # Warmup Iteration   2: 695579.889 ops/s
[info] # Warmup Iteration   3: 714553.908 ops/s
[info] # Warmup Iteration   4: 713002.240 ops/s
[info] # Warmup Iteration   5: 713862.744 ops/s
[info] Iteration   1: 713393.413 ops/s
[info]                  ·gc.alloc.rate:      7.253 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 714447.973 ops/s
[info]                  ·gc.alloc.rate:      7.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 714160.134 ops/s
[info]                  ·gc.alloc.rate:      7.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 713383.795 ops/s
[info]                  ·gc.alloc.rate:      7.252 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 713813.404 ops/s
[info]                  ·gc.alloc.rate:      7.258 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   713839.744 ±(99.9%) 1806.509 ops/s [Average]
[info]   (min, avg, max) = (713383.795, 713839.744, 714447.973), stdev = 469.145
[info]   CI (99.9%): [712033.235, 715646.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.257 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (7.252, 7.257, 7.263), stdev = 0.005
[info]   CI (99.9%): [7.239, 7.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10597.252 ops/s
[info] # Warmup Iteration   2: 32282.449 ops/s
[info] # Warmup Iteration   3: 35421.013 ops/s
[info] # Warmup Iteration   4: 34791.338 ops/s
[info] # Warmup Iteration   5: 34618.494 ops/s
[info] Iteration   1: 35444.605 ops/s
[info]                  ·gc.alloc.rate:                   1936.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              85961.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89385.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.329 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35601.408 ops/s
[info]                  ·gc.alloc.rate:                   1944.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              85941.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88880.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.175 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35681.569 ops/s
[info]                  ·gc.alloc.rate:               1934.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          85323.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59001.867 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 35599.757 ops/s
[info]                  ·gc.alloc.rate:                   1943.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              85908.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88633.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35412.575 ops/s
[info]                  ·gc.alloc.rate:                   1948.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              86559.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89182.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.626 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   35547.983 ±(99.9%) 440.737 ops/s [Average]
[info]   (min, avg, max) = (35412.575, 35547.983, 35681.569), stdev = 114.458
[info]   CI (99.9%): [35107.246, 35988.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1941.510 ±(99.9%) 22.166 MB/sec [Average]
[info]   (min, avg, max) = (1934.478, 1941.510, 1948.473), stdev = 5.756
[info]   CI (99.9%): [1919.344, 1963.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85938.961 ±(99.9%) 1684.454 B/op [Average]
[info]   (min, avg, max) = (85323.530, 85938.961, 86559.629), stdev = 437.447
[info]   CI (99.9%): [84254.507, 87623.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1875.017 ±(99.9%) 1156.668 MB/sec [Average]
[info]   (min, avg, max) = (1337.706, 1875.017, 2013.875), stdev = 300.383
[info]   CI (99.9%): [718.348, 3031.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83016.643 ±(99.9%) 51705.407 B/op [Average]
[info]   (min, avg, max) = (59001.867, 83016.643, 89385.255), stdev = 13427.730
[info]   CI (99.9%): [31311.236, 134722.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 4.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.812, 2.936), stdev = 1.258
[info]   CI (99.9%): [≈ 0, 5.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.010 ±(99.9%) 215.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.010, 130.329), stdev = 55.847
[info]   CI (99.9%): [≈ 0, 251.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1240310.654 ops/s
[info] # Warmup Iteration   2: 3197810.934 ops/s
[info] # Warmup Iteration   3: 3367180.253 ops/s
[info] # Warmup Iteration   4: 3411918.743 ops/s
[info] # Warmup Iteration   5: 3429991.876 ops/s
[info] Iteration   1: 3438907.572 ops/s
[info]                  ·gc.alloc.rate:               2876.133 MB/sec
[info]                  ·gc.alloc.rate.norm:          1316.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2680.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.778 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 3445140.315 ops/s
[info]                  ·gc.alloc.rate:                   2908.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1225.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3442219.239 ops/s
[info]                  ·gc.alloc.rate:               2932.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          1340.767 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3360.433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1536.446 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 3443483.062 ops/s
[info]                  ·gc.alloc.rate:               2906.861 MB/sec
[info]                  ·gc.alloc.rate.norm:          1328.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1232.047 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 3440527.070 ops/s
[info]                  ·gc.alloc.rate:               2907.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          1329.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1236.423 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3442055.452 ±(99.9%) 9397.934 ops/s [Average]
[info]   (min, avg, max) = (3438907.572, 3442055.452, 3445140.315), stdev = 2440.614
[info]   CI (99.9%): [3432657.518, 3451453.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2906.178 ±(99.9%) 76.990 MB/sec [Average]
[info]   (min, avg, max) = (2876.133, 2906.178, 2932.453), stdev = 19.994
[info]   CI (99.9%): [2829.188, 2983.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1328.664 ±(99.9%) 33.610 B/op [Average]
[info]   (min, avg, max) = (1316.100, 1328.664, 1340.767), stdev = 8.728
[info]   CI (99.9%): [1295.054, 1362.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2824.604 ±(99.9%) 1154.016 MB/sec [Average]
[info]   (min, avg, max) = (2680.935, 2824.604, 3360.433), stdev = 299.694
[info]   CI (99.9%): [1670.588, 3978.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1291.376 ±(99.9%) 527.810 B/op [Average]
[info]   (min, avg, max) = (1225.185, 1291.376, 1536.446), stdev = 137.071
[info]   CI (99.9%): [763.566, 1819.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.881 ops/s
[info] # Warmup Iteration   2: 5407690.253 ops/s
[info] # Warmup Iteration   3: 5893573.859 ops/s
[info] # Warmup Iteration   4: 5974025.215 ops/s
[info] # Warmup Iteration   5: 5882364.145 ops/s
[info] Iteration   1: 5985997.411 ops/s
[info]                  ·gc.alloc.rate:                   1170.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5905397.915 ops/s
[info]                  ·gc.alloc.rate:                   1143.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5976360.263 ops/s
[info]                  ·gc.alloc.rate:                   1173.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              309.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6000406.786 ops/s
[info]                  ·gc.alloc.rate:               1155.803 MB/sec
[info]                  ·gc.alloc.rate.norm:          303.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.167 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 5906154.691 ops/s
[info]                  ·gc.alloc.rate:                   1147.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   5954863.413 ±(99.9%) 175669.295 ops/s [Average]
[info]   (min, avg, max) = (5905397.915, 5954863.413, 6000406.786), stdev = 45620.758
[info]   CI (99.9%): [5779194.118, 6130532.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1158.163 ±(99.9%) 51.694 MB/sec [Average]
[info]   (min, avg, max) = (1143.557, 1158.163, 1173.428), stdev = 13.425
[info]   CI (99.9%): [1106.469, 1209.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   306.080 ±(99.9%) 9.087 B/op [Average]
[info]   (min, avg, max) = (303.083, 306.080, 309.014), stdev = 2.360
[info]   CI (99.9%): [296.993, 315.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1201.364 ±(99.9%) 1148.126 MB/sec [Average]
[info]   (min, avg, max) = (667.998, 1201.364, 1336.980), stdev = 298.165
[info]   CI (99.9%): [53.238, 2349.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   317.792 ±(99.9%) 307.160 B/op [Average]
[info]   (min, avg, max) = (175.167, 317.792, 356.265), stdev = 79.768
[info]   CI (99.9%): [10.632, 624.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.889 ±(99.9%) 7.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 4.374), stdev = 1.948
[info]   CI (99.9%): [≈ 0, 8.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.237 ±(99.9%) 1.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.237, 1.166), stdev = 0.519
[info]   CI (99.9%): [≈ 0, 2.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 943132.118 ops/s
[info] # Warmup Iteration   2: 3762502.681 ops/s
[info] # Warmup Iteration   3: 4044152.859 ops/s
[info] # Warmup Iteration   4: 4090899.615 ops/s
[info] # Warmup Iteration   5: 4106591.714 ops/s
[info] Iteration   1: 4170819.128 ops/s
[info]                  ·gc.alloc.rate:                   2291.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4165154.612 ops/s
[info]                  ·gc.alloc.rate:                   2287.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              864.206 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4182665.289 ops/s
[info]                  ·gc.alloc.rate:               2324.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2670.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1004.942 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4190700.234 ops/s
[info]                  ·gc.alloc.rate:               2316.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          870.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 753.675 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 4194137.865 ops/s
[info]                  ·gc.alloc.rate:               2318.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 754.537 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4180695.426 ±(99.9%) 48084.270 ops/s [Average]
[info]   (min, avg, max) = (4165154.612, 4180695.426, 4194137.865), stdev = 12487.332
[info]   CI (99.9%): [4132611.155, 4228779.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2307.633 ±(99.9%) 65.033 MB/sec [Average]
[info]   (min, avg, max) = (2287.079, 2307.633, 2324.232), stdev = 16.889
[info]   CI (99.9%): [2242.601, 2372.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   868.715 ±(99.9%) 16.383 B/op [Average]
[info]   (min, avg, max) = (864.206, 868.715, 874.526), stdev = 4.255
[info]   CI (99.9%): [852.333, 885.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2139.853 ±(99.9%) 1143.031 MB/sec [Average]
[info]   (min, avg, max) = (2003.095, 2139.853, 2670.837), stdev = 296.841
[info]   CI (99.9%): [996.822, 3282.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   805.539 ±(99.9%) 429.275 B/op [Average]
[info]   (min, avg, max) = (753.675, 805.539, 1004.942), stdev = 111.481
[info]   CI (99.9%): [376.263, 1234.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.623 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.851), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 2.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 1.453), stdev = 0.649
[info]   CI (99.9%): [≈ 0, 2.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3643230.412 ops/s
[info] # Warmup Iteration   2: 6722568.880 ops/s
[info] # Warmup Iteration   3: 6866263.487 ops/s
[info] # Warmup Iteration   4: 6973296.717 ops/s
[info] # Warmup Iteration   5: 6817555.468 ops/s
[info] Iteration   1: 6907076.673 ops/s
[info]                  ·gc.alloc.rate:                   1330.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6931667.570 ops/s
[info]                  ·gc.alloc.rate:                   1354.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.485 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6920596.617 ops/s
[info]                  ·gc.alloc.rate:                   1342.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6957473.025 ops/s
[info]                  ·gc.alloc.rate:                   1348.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6828102.909 ops/s
[info]                  ·gc.alloc.rate:               1309.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          301.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 154.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6908983.359 ±(99.9%) 188110.671 ops/s [Average]
[info]   (min, avg, max) = (6828102.909, 6908983.359, 6957473.025), stdev = 48851.744
[info]   CI (99.9%): [6720872.688, 7097094.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1336.988 ±(99.9%) 68.405 MB/sec [Average]
[info]   (min, avg, max) = (1309.599, 1336.988, 1354.321), stdev = 17.765
[info]   CI (99.9%): [1268.583, 1405.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.547 ±(99.9%) 8.352 B/op [Average]
[info]   (min, avg, max) = (301.855, 304.547, 307.485), stdev = 2.169
[info]   CI (99.9%): [296.196, 312.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.135 ±(99.9%) 1159.547 MB/sec [Average]
[info]   (min, avg, max) = (671.457, 1210.135, 1345.655), stdev = 301.131
[info]   CI (99.9%): [50.588, 2369.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   275.309 ±(99.9%) 259.497 B/op [Average]
[info]   (min, avg, max) = (154.767, 275.309, 306.301), stdev = 67.390
[info]   CI (99.9%): [15.812, 534.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 4.382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 2.644), stdev = 1.138
[info]   CI (99.9%): [≈ 0, 5.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.147 ±(99.9%) 0.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.601), stdev = 0.259
[info]   CI (99.9%): [≈ 0, 1.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 961951.274 ops/s
[info] # Warmup Iteration   2: 3881439.853 ops/s
[info] # Warmup Iteration   3: 4136606.518 ops/s
[info] # Warmup Iteration   4: 4123380.809 ops/s
[info] # Warmup Iteration   5: 4128950.695 ops/s
[info] Iteration   1: 4091030.269 ops/s
[info]                  ·gc.alloc.rate:                   2457.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              945.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1029.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4212803.783 ops/s
[info]                  ·gc.alloc.rate:                   2494.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              931.745 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4195974.057 ops/s
[info]                  ·gc.alloc.rate:               2537.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1002.983 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4209647.356 ops/s
[info]                  ·gc.alloc.rate:               2546.006 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.869 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1002.428 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 4223032.795 ops/s
[info]                  ·gc.alloc.rate:               2527.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.773 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 751.603 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4186497.652 ±(99.9%) 208846.956 ops/s [Average]
[info]   (min, avg, max) = (4091030.269, 4186497.652, 4223032.795), stdev = 54236.891
[info]   CI (99.9%): [3977650.697, 4395344.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2512.651 ±(99.9%) 140.141 MB/sec [Average]
[info]   (min, avg, max) = (2457.585, 2512.651, 2546.006), stdev = 36.394
[info]   CI (99.9%): [2372.510, 2652.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   944.488 ±(99.9%) 31.967 B/op [Average]
[info]   (min, avg, max) = (931.745, 944.488, 951.869), stdev = 8.302
[info]   CI (99.9%): [912.520, 976.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2410.807 ±(99.9%) 1404.838 MB/sec [Average]
[info]   (min, avg, max) = (2005.017, 2410.807, 2681.240), stdev = 364.832
[info]   CI (99.9%): [1005.969, 3815.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   907.089 ±(99.9%) 553.010 B/op [Average]
[info]   (min, avg, max) = (748.856, 907.089, 1029.572), stdev = 143.615
[info]   CI (99.9%): [354.079, 1460.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.437), stdev = 0.193
[info]   CI (99.9%): [≈ 0, 0.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.287 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.168), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1060230.436 ops/s
[info] # Warmup Iteration   2: 2149444.593 ops/s
[info] # Warmup Iteration   3: 2192575.049 ops/s
[info] # Warmup Iteration   4: 2210967.060 ops/s
[info] # Warmup Iteration   5: 2200730.722 ops/s
[info] Iteration   1: 2147975.019 ops/s
[info]                  ·gc.alloc.rate:               1271.582 MB/sec
[info]                  ·gc.alloc.rate.norm:          931.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 491.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2170515.928 ops/s
[info]                  ·gc.alloc.rate:               1289.347 MB/sec
[info]                  ·gc.alloc.rate.norm:          934.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 972.781 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2204991.688 ops/s
[info]                  ·gc.alloc.rate:                   1307.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              933.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     958.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2208925.005 ops/s
[info]                  ·gc.alloc.rate:                   1308.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              932.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2167762.390 ops/s
[info]                  ·gc.alloc.rate:                   1297.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              941.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2180034.006 ±(99.9%) 100533.166 ops/s [Average]
[info]   (min, avg, max) = (2147975.019, 2180034.006, 2208925.005), stdev = 26108.144
[info]   CI (99.9%): [2079500.840, 2280567.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1294.971 ±(99.9%) 59.118 MB/sec [Average]
[info]   (min, avg, max) = (1271.582, 1294.971, 1308.948), stdev = 15.353
[info]   CI (99.9%): [1235.853, 1354.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   934.836 ±(99.9%) 15.688 B/op [Average]
[info]   (min, avg, max) = (931.550, 934.836, 941.819), stdev = 4.074
[info]   CI (99.9%): [919.147, 950.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.511 ±(99.9%) 1156.524 MB/sec [Average]
[info]   (min, avg, max) = (670.239, 1207.511, 1342.948), stdev = 300.346
[info]   CI (99.9%): [50.987, 2364.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   870.360 ±(99.9%) 817.120 B/op [Average]
[info]   (min, avg, max) = (491.012, 870.360, 973.073), stdev = 212.204
[info]   CI (99.9%): [53.240, 1687.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 5.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 3.331), stdev = 1.480
[info]   CI (99.9%): [≈ 0, 6.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.487 ±(99.9%) 4.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.487, 2.373), stdev = 1.055
[info]   CI (99.9%): [≈ 0, 4.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.838 ops/s
[info] # Warmup Iteration   2: 5560869.839 ops/s
[info] # Warmup Iteration   3: 5951972.559 ops/s
[info] # Warmup Iteration   4: 5833768.221 ops/s
[info] # Warmup Iteration   5: 5597840.233 ops/s
[info] Iteration   1: 5888908.917 ops/s
[info]                  ·gc.alloc.rate:                   586.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5893771.129 ops/s
[info]                  ·gc.alloc.rate:               585.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.888 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5858775.788 ops/s
[info]                  ·gc.alloc.rate:                   583.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5840751.445 ops/s
[info]                  ·gc.alloc.rate:                   589.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              158.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5894933.274 ops/s
[info]                  ·gc.alloc.rate:               590.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5875428.111 ±(99.9%) 93896.135 ops/s [Average]
[info]   (min, avg, max) = (5840751.445, 5875428.111, 5894933.274), stdev = 24384.528
[info]   CI (99.9%): [5781531.975, 5969324.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   587.224 ±(99.9%) 10.909 MB/sec [Average]
[info]   (min, avg, max) = (583.560, 587.224, 590.568), stdev = 2.833
[info]   CI (99.9%): [576.316, 598.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   157.302 ±(99.9%) 3.756 B/op [Average]
[info]   (min, avg, max) = (156.380, 157.302, 158.834), stdev = 0.975
[info]   CI (99.9%): [153.546, 161.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.417 ±(99.9%) 1.089 MB/sec [Average]
[info]   (min, avg, max) = (666.155, 666.417, 666.837), stdev = 0.283
[info]   CI (99.9%): [665.328, 667.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   178.516 ±(99.9%) 2.920 B/op [Average]
[info]   (min, avg, max) = (177.888, 178.516, 179.592), stdev = 0.758
[info]   CI (99.9%): [175.596, 181.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1762369.983 ops/s
[info] # Warmup Iteration   2: 4630853.774 ops/s
[info] # Warmup Iteration   3: 4655973.579 ops/s
[info] # Warmup Iteration   4: 4705533.435 ops/s
[info] # Warmup Iteration   5: 4702472.604 ops/s
[info] Iteration   1: 4617957.990 ops/s
[info]                  ·gc.alloc.rate:               1252.383 MB/sec
[info]                  ·gc.alloc.rate.norm:          426.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 456.110 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 4674816.568 ops/s
[info]                  ·gc.alloc.rate:                   1275.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4696656.359 ops/s
[info]                  ·gc.alloc.rate:               1281.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          429.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.148 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 4686276.411 ops/s
[info]                  ·gc.alloc.rate:                   1291.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.237 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4678459.056 ops/s
[info]                  ·gc.alloc.rate:               1295.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.822 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 449.975 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4670833.277 ±(99.9%) 118295.909 ops/s [Average]
[info]   (min, avg, max) = (4617957.990, 4670833.277, 4696656.359), stdev = 30721.072
[info]   CI (99.9%): [4552537.368, 4789129.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1279.346 ±(99.9%) 65.451 MB/sec [Average]
[info]   (min, avg, max) = (1252.383, 1279.346, 1295.549), stdev = 16.997
[info]   CI (99.9%): [1213.895, 1344.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   431.061 ±(99.9%) 14.001 B/op [Average]
[info]   (min, avg, max) = (426.802, 431.061, 435.822), stdev = 3.636
[info]   CI (99.9%): [417.060, 445.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.406 ±(99.9%) 6.086 MB/sec [Average]
[info]   (min, avg, max) = (1337.622, 1339.406, 1341.602), stdev = 1.580
[info]   CI (99.9%): [1333.320, 1345.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   451.323 ±(99.9%) 10.596 B/op [Average]
[info]   (min, avg, max) = (449.148, 451.323, 456.110), stdev = 2.752
[info]   CI (99.9%): [440.727, 461.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 6.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.685), stdev = 1.645
[info]   CI (99.9%): [≈ 0, 7.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.249 ±(99.9%) 2.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.237), stdev = 0.553
[info]   CI (99.9%): [≈ 0, 2.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3865149.083 ops/s
[info] # Warmup Iteration   2: 5897429.196 ops/s
[info] # Warmup Iteration   3: 6047814.371 ops/s
[info] # Warmup Iteration   4: 6069697.401 ops/s
[info] # Warmup Iteration   5: 5954570.775 ops/s
[info] Iteration   1: 5952397.682 ops/s
[info]                  ·gc.alloc.rate:                   589.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5930165.862 ops/s
[info]                  ·gc.alloc.rate:               602.773 MB/sec
[info]                  ·gc.alloc.rate.norm:          159.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5938036.323 ops/s
[info]                  ·gc.alloc.rate:               589.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 177.972 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 5965570.685 ops/s
[info]                  ·gc.alloc.rate:                   591.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              156.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5987255.024 ops/s
[info]                  ·gc.alloc.rate:      578.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   5954685.115 ±(99.9%) 87446.568 ops/s [Average]
[info]   (min, avg, max) = (5930165.862, 5954685.115, 5987255.024), stdev = 22709.596
[info]   CI (99.9%): [5867238.547, 6042131.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   590.411 ±(99.9%) 33.413 MB/sec [Average]
[info]   (min, avg, max) = (578.314, 590.411, 602.773), stdev = 8.677
[info]   CI (99.9%): [556.999, 623.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   156.053 ±(99.9%) 10.875 B/op [Average]
[info]   (min, avg, max) = (152.000, 156.053, 159.975), stdev = 2.824
[info]   CI (99.9%): [145.178, 166.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.912 ±(99.9%) 1155.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.912, 671.480), stdev = 300.143
[info]   CI (99.9%): [≈ 0, 1692.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   142.104 ±(99.9%) 305.894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 142.104, 178.033), stdev = 79.440
[info]   CI (99.9%): [≈ 0, 447.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3851123.518 ops/s
[info] # Warmup Iteration   2: 6158701.786 ops/s
[info] # Warmup Iteration   3: 6428606.509 ops/s
[info] # Warmup Iteration   4: 6432052.318 ops/s
[info] # Warmup Iteration   5: 6430924.246 ops/s
[info] Iteration   1: 6428994.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6425499.744 ops/s
[info]                  ·gc.alloc.rate:      0.494 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.121 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6429395.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6434601.285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6427991.181 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6429296.516 ±(99.9%) 12823.412 ops/s [Average]
[info]   (min, avg, max) = (6425499.744, 6429296.516, 6434601.285), stdev = 3330.199
[info]   CI (99.9%): [6416473.104, 6442119.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.099 ±(99.9%) 0.850 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.099, 0.494), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 0.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.024 ±(99.9%) 0.208 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.024, 0.121), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1780308.821 ops/s
[info] # Warmup Iteration   2: 4394278.938 ops/s
[info] # Warmup Iteration   3: 4537956.335 ops/s
[info] # Warmup Iteration   4: 4631119.464 ops/s
[info] # Warmup Iteration   5: 4629690.075 ops/s
[info] Iteration   1: 4622269.544 ops/s
[info]                  ·gc.alloc.rate:                   1301.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              443.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4649319.727 ops/s
[info]                  ·gc.alloc.rate:                   1304.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4643255.182 ops/s
[info]                  ·gc.alloc.rate:               1302.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 454.763 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 4551778.145 ops/s
[info]                  ·gc.alloc.rate:                   1300.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              449.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     464.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4609190.217 ops/s
[info]                  ·gc.alloc.rate:                   1305.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     457.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4615162.563 ±(99.9%) 149874.531 ops/s [Average]
[info]   (min, avg, max) = (4551778.145, 4615162.563, 4649319.727), stdev = 38921.940
[info]   CI (99.9%): [4465288.032, 4765037.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1303.061 ±(99.9%) 7.528 MB/sec [Average]
[info]   (min, avg, max) = (1300.811, 1303.061, 1305.268), stdev = 1.955
[info]   CI (99.9%): [1295.533, 1310.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   444.399 ±(99.9%) 13.314 B/op [Average]
[info]   (min, avg, max) = (441.455, 444.399, 449.785), stdev = 3.457
[info]   CI (99.9%): [431.086, 457.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1340.952 ±(99.9%) 5.808 MB/sec [Average]
[info]   (min, avg, max) = (1338.883, 1340.952, 1342.921), stdev = 1.508
[info]   CI (99.9%): [1335.145, 1346.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   457.326 ±(99.9%) 15.902 B/op [Average]
[info]   (min, avg, max) = (453.942, 457.326, 464.345), stdev = 4.130
[info]   CI (99.9%): [441.423, 473.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.560), stdev = 1.572
[info]   CI (99.9%): [≈ 0, 6.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.259 ±(99.9%) 2.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.259, 1.231), stdev = 0.544
[info]   CI (99.9%): [≈ 0, 2.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266127.278 ops/s
[info] # Warmup Iteration   2: 1419099.188 ops/s
[info] # Warmup Iteration   3: 1495894.046 ops/s
[info] # Warmup Iteration   4: 1488172.245 ops/s
[info] # Warmup Iteration   5: 1509877.149 ops/s
[info] Iteration   1: 1511083.603 ops/s
[info]                  ·gc.alloc.rate:                   2139.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              2228.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2100.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1490315.688 ops/s
[info]                  ·gc.alloc.rate:                   2113.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              2231.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2124.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1518378.770 ops/s
[info]                  ·gc.alloc.rate:                   2132.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              2210.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2083.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1495617.460 ops/s
[info]                  ·gc.alloc.rate:                   2132.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2243.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2117.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1515835.755 ops/s
[info]                  ·gc.alloc.rate:                   2160.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              2243.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2091.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1506246.255 ±(99.9%) 48298.750 ops/s [Average]
[info]   (min, avg, max) = (1490315.688, 1506246.255, 1518378.770), stdev = 12543.032
[info]   CI (99.9%): [1457947.506, 1554545.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2135.717 ±(99.9%) 65.399 MB/sec [Average]
[info]   (min, avg, max) = (2113.109, 2135.717, 2160.419), stdev = 16.984
[info]   CI (99.9%): [2070.318, 2201.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2231.356 ±(99.9%) 51.865 B/op [Average]
[info]   (min, avg, max) = (2210.487, 2231.356, 2243.397), stdev = 13.469
[info]   CI (99.9%): [2179.491, 2283.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2013.492 ±(99.9%) 10.060 MB/sec [Average]
[info]   (min, avg, max) = (2010.603, 2013.492, 2017.268), stdev = 2.613
[info]   CI (99.9%): [2003.432, 2023.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2103.733 ±(99.9%) 65.618 B/op [Average]
[info]   (min, avg, max) = (2083.900, 2103.733, 2124.607), stdev = 17.041
[info]   CI (99.9%): [2038.115, 2169.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 5.602 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.687, 3.289), stdev = 1.455
[info]   CI (99.9%): [≈ 0, 6.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.716 ±(99.9%) 5.835 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.716, 3.426), stdev = 1.515
[info]   CI (99.9%): [≈ 0, 6.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.654 ops/s
[info] # Warmup Iteration   2: 2520446.841 ops/s
[info] # Warmup Iteration   3: 2777326.092 ops/s
[info] # Warmup Iteration   4: 2835901.227 ops/s
[info] # Warmup Iteration   5: 2861977.531 ops/s
[info] Iteration   1: 2804076.919 ops/s
[info]                  ·gc.alloc.rate:                   552.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              310.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2793203.927 ops/s
[info]                  ·gc.alloc.rate:               553.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.348 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2867917.149 ops/s
[info]                  ·gc.alloc.rate:      539.405 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2846775.777 ops/s
[info]                  ·gc.alloc.rate:                   549.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              303.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2847514.182 ops/s
[info]                  ·gc.alloc.rate:                   556.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2831897.591 ±(99.9%) 122281.991 ops/s [Average]
[info]   (min, avg, max) = (2793203.927, 2831897.591, 2867917.149), stdev = 31756.245
[info]   CI (99.9%): [2709615.600, 2954179.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   550.306 ±(99.9%) 25.248 MB/sec [Average]
[info]   (min, avg, max) = (539.405, 550.306, 556.316), stdev = 6.557
[info]   CI (99.9%): [525.058, 575.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   305.879 ±(99.9%) 24.319 B/op [Average]
[info]   (min, avg, max) = (296.000, 305.879, 311.980), stdev = 6.315
[info]   CI (99.9%): [281.560, 330.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.200 ±(99.9%) 1147.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.200, 666.891), stdev = 298.068
[info]   CI (99.9%): [≈ 0, 1680.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   297.289 ±(99.9%) 640.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 297.289, 375.348), stdev = 166.218
[info]   CI (99.9%): [≈ 0, 937.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222864.299 ops/s
[info] # Warmup Iteration   2: 1614658.929 ops/s
[info] # Warmup Iteration   3: 1700557.134 ops/s
[info] # Warmup Iteration   4: 1708315.198 ops/s
[info] # Warmup Iteration   5: 1710025.043 ops/s
[info] Iteration   1: 1718995.745 ops/s
[info]                  ·gc.alloc.rate:               940.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          860.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 610.518 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1718058.660 ops/s
[info]                  ·gc.alloc.rate:               936.603 MB/sec
[info]                  ·gc.alloc.rate.norm:          857.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 610.216 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1716665.054 ops/s
[info]                  ·gc.alloc.rate:                   948.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              869.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1221.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1718992.423 ops/s
[info]                  ·gc.alloc.rate:               931.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609.914 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1721492.279 ops/s
[info]                  ·gc.alloc.rate:               944.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          863.382 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609.306 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1718840.832 ±(99.9%) 6786.029 ops/s [Average]
[info]   (min, avg, max) = (1716665.054, 1718840.832, 1721492.279), stdev = 1762.310
[info]   CI (99.9%): [1712054.803, 1725626.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   940.202 ±(99.9%) 24.566 MB/sec [Average]
[info]   (min, avg, max) = (931.808, 940.202, 948.060), stdev = 6.380
[info]   CI (99.9%): [915.637, 964.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   860.863 ±(99.9%) 23.166 B/op [Average]
[info]   (min, avg, max) = (853.154, 860.863, 869.200), stdev = 6.016
[info]   CI (99.9%): [837.697, 884.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   799.599 ±(99.9%) 1146.653 MB/sec [Average]
[info]   (min, avg, max) = (666.143, 799.599, 1332.288), stdev = 297.782
[info]   CI (99.9%): [≈ 0, 1946.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   732.284 ±(99.9%) 1053.005 B/op [Average]
[info]   (min, avg, max) = (609.306, 732.284, 1221.467), stdev = 273.462
[info]   CI (99.9%): [≈ 0, 1785.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1081577.535 ops/s
[info] # Warmup Iteration   2: 2400152.842 ops/s
[info] # Warmup Iteration   3: 2372450.966 ops/s
[info] # Warmup Iteration   4: 2423843.522 ops/s
[info] # Warmup Iteration   5: 2434702.139 ops/s
[info] Iteration   1: 2434118.087 ops/s
[info]                  ·gc.alloc.rate:               472.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          305.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 330.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2443761.341 ops/s
[info]                  ·gc.alloc.rate:      459.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2435532.396 ops/s
[info]                  ·gc.alloc.rate:               477.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 434.114 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2436606.686 ops/s
[info]                  ·gc.alloc.rate:               481.742 MB/sec
[info]                  ·gc.alloc.rate.norm:          311.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 433.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2443941.431 ops/s
[info]                  ·gc.alloc.rate:      459.625 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2438791.988 ±(99.9%) 18107.964 ops/s [Average]
[info]   (min, avg, max) = (2434118.087, 2438791.988, 2443941.431), stdev = 4702.581
[info]   CI (99.9%): [2420684.024, 2456899.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   470.184 ±(99.9%) 39.352 MB/sec [Average]
[info]   (min, avg, max) = (459.622, 470.184, 481.742), stdev = 10.220
[info]   CI (99.9%): [430.831, 509.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.441 ±(99.9%) 27.357 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.441, 311.179), stdev = 7.104
[info]   CI (99.9%): [276.085, 330.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.040 ±(99.9%) 1328.348 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.040, 671.807), stdev = 344.968
[info]   CI (99.9%): [≈ 0, 1699.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   239.771 ±(99.9%) 858.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 239.771, 434.114), stdev = 222.900
[info]   CI (99.9%): [≈ 0, 1098.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 387495.241 ops/s
[info] # Warmup Iteration   2: 1593562.169 ops/s
[info] # Warmup Iteration   3: 1718713.183 ops/s
[info] # Warmup Iteration   4: 1719835.328 ops/s
[info] # Warmup Iteration   5: 1682235.878 ops/s
[info] Iteration   1: 1712431.030 ops/s
[info]                  ·gc.alloc.rate:               995.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          914.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1228.770 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1727279.423 ops/s
[info]                  ·gc.alloc.rate:               970.413 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609.710 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1724758.551 ops/s
[info]                  ·gc.alloc.rate:                   981.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              895.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     610.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1726705.486 ops/s
[info]                  ·gc.alloc.rate:                   986.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1220.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1734163.369 ops/s
[info]                  ·gc.alloc.rate:               974.588 MB/sec
[info]                  ·gc.alloc.rate.norm:          884.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 608.174 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1725067.572 ±(99.9%) 30447.266 ops/s [Average]
[info]   (min, avg, max) = (1712431.030, 1725067.572, 1734163.369), stdev = 7907.058
[info]   CI (99.9%): [1694620.306, 1755514.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   981.680 ±(99.9%) 37.878 MB/sec [Average]
[info]   (min, avg, max) = (970.413, 981.680, 995.357), stdev = 9.837
[info]   CI (99.9%): [943.801, 1019.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   895.626 ±(99.9%) 48.610 B/op [Average]
[info]   (min, avg, max) = (884.190, 895.626, 914.879), stdev = 12.624
[info]   CI (99.9%): [847.016, 944.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   936.890 ±(99.9%) 1409.596 MB/sec [Average]
[info]   (min, avg, max) = (669.167, 936.890, 1338.932), stdev = 366.068
[info]   CI (99.9%): [≈ 0, 2346.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   855.540 ±(99.9%) 1297.379 B/op [Average]
[info]   (min, avg, max) = (608.174, 855.540, 1228.770), stdev = 336.925
[info]   CI (99.9%): [≈ 0, 2152.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.006 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460973.697 ops/s
[info] # Warmup Iteration   2: 1776123.991 ops/s
[info] # Warmup Iteration   3: 1848363.289 ops/s
[info] # Warmup Iteration   4: 1872534.009 ops/s
[info] # Warmup Iteration   5: 1865221.639 ops/s
[info] Iteration   1: 1849410.532 ops/s
[info]                  ·gc.alloc.rate:               1410.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1141.998 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 1832554.894 ops/s
[info]                  ·gc.alloc.rate:               1409.944 MB/sec
[info]                  ·gc.alloc.rate.norm:          1210.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1153.064 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 1850512.263 ops/s
[info]                  ·gc.alloc.rate:                   1413.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              1202.244 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1142.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1854005.005 ops/s
[info]                  ·gc.alloc.rate:                   1428.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1140.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1877246.860 ops/s
[info]                  ·gc.alloc.rate:               1433.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          1201.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1124.249 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1852745.911 ±(99.9%) 61660.608 ops/s [Average]
[info]   (min, avg, max) = (1832554.894, 1852745.911, 1877246.860), stdev = 16013.064
[info]   CI (99.9%): [1791085.303, 1914406.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1419.140 ±(99.9%) 41.682 MB/sec [Average]
[info]   (min, avg, max) = (1409.944, 1419.140, 1433.246), stdev = 10.825
[info]   CI (99.9%): [1377.458, 1460.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1205.382 ±(99.9%) 21.599 B/op [Average]
[info]   (min, avg, max) = (1200.263, 1205.382, 1212.453), stdev = 5.609
[info]   CI (99.9%): [1183.782, 1226.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.588 ±(99.9%) 3.940 MB/sec [Average]
[info]   (min, avg, max) = (1341.037, 1342.588, 1343.649), stdev = 1.023
[info]   CI (99.9%): [1338.647, 1346.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1140.414 ±(99.9%) 39.887 B/op [Average]
[info]   (min, avg, max) = (1124.249, 1140.414, 1153.064), stdev = 10.358
[info]   CI (99.9%): [1100.528, 1180.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.666 ±(99.9%) 4.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.873), stdev = 1.249
[info]   CI (99.9%): [≈ 0, 5.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.566 ±(99.9%) 4.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.443), stdev = 1.063
[info]   CI (99.9%): [≈ 0, 4.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 2.449
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.638 ops/s
[info] # Warmup Iteration   2: 2605485.848 ops/s
[info] # Warmup Iteration   3: 2797384.258 ops/s
[info] # Warmup Iteration   4: 2804460.052 ops/s
[info] # Warmup Iteration   5: 2811283.661 ops/s
[info] Iteration   1: 2808832.405 ops/s
[info]                  ·gc.alloc.rate:               751.421 MB/sec
[info]                  ·gc.alloc.rate.norm:          421.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.258 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 2768992.106 ops/s
[info]                  ·gc.alloc.rate:                   736.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              418.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2800522.540 ops/s
[info]                  ·gc.alloc.rate:                   764.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     749.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2811930.173 ops/s
[info]                  ·gc.alloc.rate:               749.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373.409 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2810840.564 ops/s
[info]                  ·gc.alloc.rate:                   754.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              422.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     373.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2800223.558 ±(99.9%) 69401.670 ops/s [Average]
[info]   (min, avg, max) = (2768992.106, 2800223.558, 2811930.173), stdev = 18023.393
[info]   CI (99.9%): [2730821.887, 2869625.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   751.074 ±(99.9%) 38.665 MB/sec [Average]
[info]   (min, avg, max) = (736.219, 751.074, 764.153), stdev = 10.041
[info]   CI (99.9%): [712.408, 789.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   422.112 ±(99.9%) 16.766 B/op [Average]
[info]   (min, avg, max) = (418.389, 422.112, 429.443), stdev = 4.354
[info]   CI (99.9%): [405.346, 438.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   800.343 ±(99.9%) 1148.688 MB/sec [Average]
[info]   (min, avg, max) = (666.115, 800.343, 1333.977), stdev = 298.311
[info]   CI (99.9%): [≈ 0, 1949.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   449.816 ±(99.9%) 645.537 B/op [Average]
[info]   (min, avg, max) = (373.258, 449.816, 749.675), stdev = 167.644
[info]   CI (99.9%): [≈ 0, 1095.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 592537.726 ops/s
[info] # Warmup Iteration   2: 2941454.425 ops/s
[info] # Warmup Iteration   3: 2982210.159 ops/s
[info] # Warmup Iteration   4: 2981828.599 ops/s
[info] # Warmup Iteration   5: 2967280.137 ops/s
[info] Iteration   1: 2997009.409 ops/s
[info]                  ·gc.alloc.rate:               1312.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          688.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 702.440 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2964990.448 ops/s
[info]                  ·gc.alloc.rate:               1308.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          694.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.733 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 2990039.960 ops/s
[info]                  ·gc.alloc.rate:               1316.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          692.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 705.484 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 2996158.739 ops/s
[info]                  ·gc.alloc.rate:                   1306.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              686.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.903 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2978886.215 ops/s
[info]                  ·gc.alloc.rate:               1324.571 MB/sec
[info]                  ·gc.alloc.rate.norm:          699.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 706.684 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2985416.954 ±(99.9%) 52056.229 ops/s [Average]
[info]   (min, avg, max) = (2964990.448, 2985416.954, 2997009.409), stdev = 13518.837
[info]   CI (99.9%): [2933360.725, 3037473.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1313.528 ±(99.9%) 27.838 MB/sec [Average]
[info]   (min, avg, max) = (1306.500, 1313.528, 1324.571), stdev = 7.229
[info]   CI (99.9%): [1285.691, 1341.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.350 ±(99.9%) 19.930 B/op [Average]
[info]   (min, avg, max) = (686.221, 692.350, 699.622), stdev = 5.176
[info]   CI (99.9%): [672.421, 712.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.321 ±(99.9%) 5.603 MB/sec [Average]
[info]   (min, avg, max) = (1337.942, 1339.321, 1341.067), stdev = 1.455
[info]   CI (99.9%): [1333.718, 1344.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   705.944 ±(99.9%) 11.935 B/op [Average]
[info]   (min, avg, max) = (702.440, 705.944, 710.733), stdev = 3.099
[info]   CI (99.9%): [694.009, 717.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 6.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.622), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 6.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.381 ±(99.9%) 3.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.903), stdev = 0.851
[info]   CI (99.9%): [≈ 0, 3.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1289565.241 ops/s
[info] # Warmup Iteration   2: 3117084.151 ops/s
[info] # Warmup Iteration   3: 3348028.233 ops/s
[info] # Warmup Iteration   4: 3379253.242 ops/s
[info] # Warmup Iteration   5: 3362067.904 ops/s
[info] Iteration   1: 3373329.922 ops/s
[info]                  ·gc.alloc.rate:                   888.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              414.720 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3384924.342 ops/s
[info]                  ·gc.alloc.rate:               890.813 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.910 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3373198.427 ops/s
[info]                  ·gc.alloc.rate:               908.010 MB/sec
[info]                  ·gc.alloc.rate.norm:          423.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 626.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 3373990.036 ops/s
[info]                  ·gc.alloc.rate:               890.538 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3383418.382 ops/s
[info]                  ·gc.alloc.rate:               901.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          419.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312.512 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3377772.222 ±(99.9%) 22616.634 ops/s [Average]
[info]   (min, avg, max) = (3373198.427, 3377772.222, 3384924.342), stdev = 5873.468
[info]   CI (99.9%): [3355155.588, 3400388.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   896.020 ±(99.9%) 32.596 MB/sec [Average]
[info]   (min, avg, max) = (888.856, 896.020, 908.010), stdev = 8.465
[info]   CI (99.9%): [863.424, 928.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   417.498 ±(99.9%) 15.514 B/op [Average]
[info]   (min, avg, max) = (414.179, 417.498, 423.639), stdev = 4.029
[info]   CI (99.9%): [401.984, 433.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.654 ±(99.9%) 1156.789 MB/sec [Average]
[info]   (min, avg, max) = (670.764, 805.654, 1343.051), stdev = 300.415
[info]   CI (99.9%): [≈ 0, 1962.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   375.474 ±(99.9%) 540.595 B/op [Average]
[info]   (min, avg, max) = (311.910, 375.474, 626.611), stdev = 140.391
[info]   CI (99.9%): [≈ 0, 916.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1314658.141 ops/s
[info] # Warmup Iteration   2: 3417955.157 ops/s
[info] # Warmup Iteration   3: 3641631.174 ops/s
[info] # Warmup Iteration   4: 3626866.431 ops/s
[info] # Warmup Iteration   5: 3643065.335 ops/s
[info] Iteration   1: 3641527.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3646576.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3647897.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3645792.592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3647536.500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3645866.236 ±(99.9%) 9864.292 ops/s [Average]
[info]   (min, avg, max) = (3641527.728, 3645866.236, 3647897.828), stdev = 2561.725
[info]   CI (99.9%): [3636001.944, 3655730.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 666994.529 ops/s
[info] # Warmup Iteration   2: 2796822.464 ops/s
[info] # Warmup Iteration   3: 2850721.592 ops/s
[info] # Warmup Iteration   4: 2882459.330 ops/s
[info] # Warmup Iteration   5: 2880910.365 ops/s
[info] Iteration   1: 2878698.117 ops/s
[info]                  ·gc.alloc.rate:                   1421.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              777.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     733.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2872675.459 ops/s
[info]                  ·gc.alloc.rate:                   1425.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     735.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2870190.070 ops/s
[info]                  ·gc.alloc.rate:                   1436.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              787.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2878930.896 ops/s
[info]                  ·gc.alloc.rate:                   1429.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2888764.162 ops/s
[info]                  ·gc.alloc.rate:               1434.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          781.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 730.210 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2877851.741 ±(99.9%) 27664.201 ops/s [Average]
[info]   (min, avg, max) = (2870190.070, 2877851.741, 2888764.162), stdev = 7184.305
[info]   CI (99.9%): [2850187.540, 2905515.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1429.535 ±(99.9%) 22.986 MB/sec [Average]
[info]   (min, avg, max) = (1421.663, 1429.535, 1436.185), stdev = 5.969
[info]   CI (99.9%): [1406.549, 1452.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   781.801 ±(99.9%) 14.127 B/op [Average]
[info]   (min, avg, max) = (777.262, 781.801, 787.520), stdev = 3.669
[info]   CI (99.9%): [767.674, 795.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1342.288 ±(99.9%) 4.893 MB/sec [Average]
[info]   (min, avg, max) = (1340.278, 1342.288, 1343.630), stdev = 1.271
[info]   CI (99.9%): [1337.394, 1347.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   734.088 ±(99.9%) 9.553 B/op [Average]
[info]   (min, avg, max) = (730.210, 734.088, 736.768), stdev = 2.481
[info]   CI (99.9%): [724.535, 743.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.710 ±(99.9%) 4.975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.710, 2.987), stdev = 1.292
[info]   CI (99.9%): [≈ 0, 5.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.389 ±(99.9%) 2.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.389, 1.638), stdev = 0.708
[info]   CI (99.9%): [≈ 0, 3.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3192.668 ops/s
[info] # Warmup Iteration   2: 9145.959 ops/s
[info] # Warmup Iteration   3: 12075.449 ops/s
[info] # Warmup Iteration   4: 12113.517 ops/s
[info] # Warmup Iteration   5: 11994.022 ops/s
[info] Iteration   1: 12071.447 ops/s
[info]                  ·gc.alloc.rate:                   1421.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              185279.302 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174429.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 12074.900 ops/s
[info]                  ·gc.alloc.rate:                   1420.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              185090.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174473.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.617 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 12074.497 ops/s
[info]                  ·gc.alloc.rate:                   1407.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              183452.740 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174574.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 425.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 12085.712 ops/s
[info]                  ·gc.alloc.rate:                   1408.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              183410.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174227.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11778.284 ops/s
[info]                  ·gc.alloc.rate:                   1398.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              186804.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178367.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.377 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12016.968 ±(99.9%) 514.207 ops/s [Average]
[info]   (min, avg, max) = (11778.284, 12016.968, 12085.712), stdev = 133.538
[info]   CI (99.9%): [11502.761, 12531.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1411.319 ±(99.9%) 37.034 MB/sec [Average]
[info]   (min, avg, max) = (1398.371, 1411.319, 1421.401), stdev = 9.618
[info]   CI (99.9%): [1374.286, 1448.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   184807.690 ±(99.9%) 5472.594 B/op [Average]
[info]   (min, avg, max) = (183410.602, 184807.690, 186804.955), stdev = 1421.215
[info]   CI (99.9%): [179335.096, 190280.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1338.013 ±(99.9%) 6.675 MB/sec [Average]
[info]   (min, avg, max) = (1335.209, 1338.013, 1339.855), stdev = 1.733
[info]   CI (99.9%): [1331.338, 1344.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   175214.535 ±(99.9%) 6804.123 B/op [Average]
[info]   (min, avg, max) = (174227.738, 175214.535, 178367.397), stdev = 1767.009
[info]   CI (99.9%): [168410.412, 182018.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.876 ±(99.9%) 5.271 MB/sec [Average]
[info]   (min, avg, max) = (0.019, 0.876, 3.267), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 6.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   114.291 ±(99.9%) 686.474 B/op [Average]
[info]   (min, avg, max) = (2.524, 114.291, 425.638), stdev = 178.275
[info]   CI (99.9%): [≈ 0, 800.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3476.875 ops/s
[info] # Warmup Iteration   2: 19699.659 ops/s
[info] # Warmup Iteration   3: 22834.919 ops/s
[info] # Warmup Iteration   4: 22310.000 ops/s
[info] # Warmup Iteration   5: 22968.980 ops/s
[info] Iteration   1: 22742.463 ops/s
[info]                  ·gc.alloc.rate:               368.522 MB/sec
[info]                  ·gc.alloc.rate.norm:          25499.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35402.751 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 22800.561 ops/s
[info]                  ·gc.alloc.rate:               355.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          24561.480 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35314.259 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 22884.633 ops/s
[info]                  ·gc.alloc.rate:      339.568 MB/sec
[info]                  ·gc.alloc.rate.norm: 23352.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22448.373 ops/s
[info]                  ·gc.alloc.rate:               356.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          24995.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46140.520 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 22576.805 ops/s
[info]                  ·gc.alloc.rate:      335.027 MB/sec
[info]                  ·gc.alloc.rate.norm: 23352.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   22690.567 ±(99.9%) 678.121 ops/s [Average]
[info]   (min, avg, max) = (22448.373, 22690.567, 22884.633), stdev = 176.106
[info]   CI (99.9%): [22012.446, 23368.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   351.114 ±(99.9%) 52.643 MB/sec [Average]
[info]   (min, avg, max) = (335.027, 351.114, 368.522), stdev = 13.671
[info]   CI (99.9%): [298.471, 403.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24352.214 ±(99.9%) 3741.168 B/op [Average]
[info]   (min, avg, max) = (23352.019, 24352.214, 25499.933), stdev = 971.569
[info]   CI (99.9%): [20611.046, 28093.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.303 ±(99.9%) 1204.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.303, 658.142), stdev = 312.769
[info]   CI (99.9%): [≈ 0, 1540.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23371.506 ±(99.9%) 83884.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23371.506, 46140.520), stdev = 21784.529
[info]   CI (99.9%): [≈ 0, 107255.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11094.587 ops/s
[info] # Warmup Iteration   2: 20744.484 ops/s
[info] # Warmup Iteration   3: 22477.562 ops/s
[info] # Warmup Iteration   4: 22457.285 ops/s
[info] # Warmup Iteration   5: 22523.917 ops/s
[info] Iteration   1: 22177.310 ops/s
[info]                  ·gc.alloc.rate:               259.816 MB/sec
[info]                  ·gc.alloc.rate.norm:          18437.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36306.134 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22563.688 ops/s
[info]                  ·gc.alloc.rate:      245.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22486.544 ops/s
[info]                  ·gc.alloc.rate:               254.039 MB/sec
[info]                  ·gc.alloc.rate.norm:          17780.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35807.308 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22543.169 ops/s
[info]                  ·gc.alloc.rate:      245.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22409.984 ops/s
[info]                  ·gc.alloc.rate:                   258.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              18181.932 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35928.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.462 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22436.139 ±(99.9%) 602.541 ops/s [Average]
[info]   (min, avg, max) = (22177.310, 22436.139, 22563.688), stdev = 156.478
[info]   CI (99.9%): [21833.598, 23038.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   252.598 ±(99.9%) 27.621 MB/sec [Average]
[info]   (min, avg, max) = (245.012, 252.598, 259.816), stdev = 7.173
[info]   CI (99.9%): [224.976, 280.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17721.607 ±(99.9%) 2350.800 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17721.607, 18437.584), stdev = 610.495
[info]   CI (99.9%): [15370.807, 20072.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.962 ±(99.9%) 1079.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.962, 511.613), stdev = 280.217
[info]   CI (99.9%): [≈ 0, 1385.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21608.433 ±(99.9%) 75959.989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21608.433, 36306.134), stdev = 19726.568
[info]   CI (99.9%): [≈ 0, 97568.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.292 ±(99.9%) 2.518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.292, 1.462), stdev = 0.654
[info]   CI (99.9%): [≈ 0, 2.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268.792 ops/s
[info] # Warmup Iteration   2: 2771.233 ops/s
[info] # Warmup Iteration   3: 7050.037 ops/s
[info] # Warmup Iteration   4: 7691.952 ops/s
[info] # Warmup Iteration   5: 7664.910 ops/s
[info] Iteration   1: 7642.398 ops/s
[info]                  ·gc.alloc.rate:               2126.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          437939.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1983.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 408373.986 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 7679.029 ops/s
[info]                  ·gc.alloc.rate:                   2170.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              444875.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2653.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     543812.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.602 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7714.657 ops/s
[info]                  ·gc.alloc.rate:                   2164.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              441484.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406684.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7714.080 ops/s
[info]                  ·gc.alloc.rate:               2152.353 MB/sec
[info]                  ·gc.alloc.rate.norm:          439068.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 407756.906 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7678.508 ops/s
[info]                  ·gc.alloc.rate:               2169.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          444609.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 410760.533 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7685.735 ±(99.9%) 115.764 ops/s [Average]
[info]   (min, avg, max) = (7642.398, 7685.735, 7714.657), stdev = 30.064
[info]   CI (99.9%): [7569.970, 7801.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2156.642 ±(99.9%) 70.196 MB/sec [Average]
[info]   (min, avg, max) = (2126.671, 2156.642, 2170.656), stdev = 18.230
[info]   CI (99.9%): [2086.446, 2226.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   441595.454 ±(99.9%) 12116.547 B/op [Average]
[info]   (min, avg, max) = (437939.298, 441595.454, 444875.248), stdev = 3146.629
[info]   CI (99.9%): [429478.907, 453712.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2126.628 ±(99.9%) 1134.294 MB/sec [Average]
[info]   (min, avg, max) = (1983.099, 2126.628, 2653.394), stdev = 294.573
[info]   CI (99.9%): [992.334, 3260.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   435477.734 ±(99.9%) 233269.194 B/op [Average]
[info]   (min, avg, max) = (406684.977, 435477.734, 543812.267), stdev = 60579.269
[info]   CI (99.9%): [202208.540, 668746.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.468 ±(99.9%) 3.643 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.468, 2.155), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   95.964 ±(99.9%) 746.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.964, 441.602), stdev = 193.925
[info]   CI (99.9%): [≈ 0, 842.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15689.936 ops/s
[info] # Warmup Iteration   2: 59233.555 ops/s
[info] # Warmup Iteration   3: 59775.452 ops/s
[info] # Warmup Iteration   4: 60617.864 ops/s
[info] # Warmup Iteration   5: 61573.486 ops/s
[info] Iteration   1: 61939.308 ops/s
[info]                  ·gc.alloc.rate:               793.626 MB/sec
[info]                  ·gc.alloc.rate.norm:          20162.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16857.917 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 60930.779 ops/s
[info]                  ·gc.alloc.rate:                   807.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              20843.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34327.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 61950.861 ops/s
[info]                  ·gc.alloc.rate:               799.476 MB/sec
[info]                  ·gc.alloc.rate.norm:          20310.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16906.238 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 61910.513 ops/s
[info]                  ·gc.alloc.rate:               796.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          20237.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16917.159 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 62037.552 ops/s
[info]                  ·gc.alloc.rate:                   796.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              20210.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16898.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   61753.803 ±(99.9%) 1780.984 ops/s [Average]
[info]   (min, avg, max) = (60930.779, 61753.803, 62037.552), stdev = 462.516
[info]   CI (99.9%): [59972.819, 63534.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   798.628 ±(99.9%) 19.932 MB/sec [Average]
[info]   (min, avg, max) = (793.626, 798.628, 807.112), stdev = 5.176
[info]   CI (99.9%): [778.695, 818.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20352.965 ±(99.9%) 1074.939 B/op [Average]
[info]   (min, avg, max) = (20162.708, 20352.965, 20843.089), stdev = 279.158
[info]   CI (99.9%): [19278.027, 21427.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   797.997 ±(99.9%) 1143.605 MB/sec [Average]
[info]   (min, avg, max) = (663.546, 797.997, 1329.267), stdev = 296.991
[info]   CI (99.9%): [≈ 0, 1941.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20381.349 ±(99.9%) 30019.958 B/op [Average]
[info]   (min, avg, max) = (16857.917, 20381.349, 34327.357), stdev = 7796.088
[info]   CI (99.9%): [≈ 0, 50401.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.428 ±(99.9%) 2.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.428, 1.613), stdev = 0.701
[info]   CI (99.9%): [≈ 0, 3.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28856.572 ops/s
[info] # Warmup Iteration   2: 67884.532 ops/s
[info] # Warmup Iteration   3: 70133.943 ops/s
[info] # Warmup Iteration   4: 70581.126 ops/s
[info] # Warmup Iteration   5: 70691.127 ops/s
[info] Iteration   1: 70315.699 ops/s
[info]                  ·gc.alloc.rate:                   467.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              10451.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11450.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.466 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 70625.483 ops/s
[info]                  ·gc.alloc.rate:               479.152 MB/sec
[info]                  ·gc.alloc.rate.norm:          10673.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14807.460 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 70473.315 ops/s
[info]                  ·gc.alloc.rate:                   479.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              10709.264 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14839.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 70691.591 ops/s
[info]                  ·gc.alloc.rate:      460.651 MB/sec
[info]                  ·gc.alloc.rate.norm: 10256.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 70416.712 ops/s
[info]                  ·gc.alloc.rate:                   482.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              10784.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14866.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   70504.560 ±(99.9%) 590.183 ops/s [Average]
[info]   (min, avg, max) = (70315.699, 70504.560, 70691.591), stdev = 153.269
[info]   CI (99.9%): [69914.377, 71094.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   473.828 ±(99.9%) 36.480 MB/sec [Average]
[info]   (min, avg, max) = (460.651, 473.828, 482.557), stdev = 9.474
[info]   CI (99.9%): [437.348, 510.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10575.050 ±(99.9%) 836.053 B/op [Average]
[info]   (min, avg, max) = (10256.006, 10575.050, 10784.476), stdev = 217.120
[info]   CI (99.9%): [9738.997, 11411.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   501.270 ±(99.9%) 1108.853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 501.270, 665.200), stdev = 287.966
[info]   CI (99.9%): [≈ 0, 1610.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11192.783 ±(99.9%) 24746.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11192.783, 14866.291), stdev = 6426.599
[info]   CI (99.9%): [≈ 0, 35939.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 0.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 0.466), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32016.294 ops/s
[info] # Warmup Iteration   2: 75460.337 ops/s
[info] # Warmup Iteration   3: 76040.035 ops/s
[info] # Warmup Iteration   4: 76894.536 ops/s
[info] # Warmup Iteration   5: 75848.314 ops/s
[info] Iteration   1: 77045.068 ops/s
[info]                  ·gc.alloc.rate:      20.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77049.271 ops/s
[info]                  ·gc.alloc.rate:      20.758 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77049.801 ops/s
[info]                  ·gc.alloc.rate:      20.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.584 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77052.601 ops/s
[info]                  ·gc.alloc.rate:      21.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 443.056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77156.263 ops/s
[info]                  ·gc.alloc.rate:      20.787 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   77070.601 ±(99.9%) 184.685 ops/s [Average]
[info]   (min, avg, max) = (77045.068, 77070.601, 77156.263), stdev = 47.962
[info]   CI (99.9%): [76885.916, 77255.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20.957 ±(99.9%) 1.589 MB/sec [Average]
[info]   (min, avg, max) = (20.757, 20.957, 21.695), stdev = 0.413
[info]   CI (99.9%): [19.367, 22.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   427.932 ±(99.9%) 32.569 B/op [Average]
[info]   (min, avg, max) = (424.006, 427.932, 443.056), stdev = 8.458
[info]   CI (99.9%): [395.362, 460.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57944.436 ops/s
[info] # Warmup Iteration   2: 293743.173 ops/s
[info] # Warmup Iteration   3: 306768.515 ops/s
[info] # Warmup Iteration   4: 313232.346 ops/s
[info] # Warmup Iteration   5: 308642.598 ops/s
[info] Iteration   1: 313091.619 ops/s
[info]                  ·gc.alloc.rate:                   1852.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              9310.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10129.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 313316.041 ops/s
[info]                  ·gc.alloc.rate:                   1888.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              9487.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10121.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 315786.996 ops/s
[info]                  ·gc.alloc.rate:                   1879.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              9367.404 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6679.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 312380.790 ops/s
[info]                  ·gc.alloc.rate:               1860.543 MB/sec
[info]                  ·gc.alloc.rate.norm:          9373.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10119.187 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 314166.663 ops/s
[info]                  ·gc.alloc.rate:               1893.697 MB/sec
[info]                  ·gc.alloc.rate.norm:          9487.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10070.011 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   313748.422 ±(99.9%) 5027.808 ops/s [Average]
[info]   (min, avg, max) = (312380.790, 313748.422, 315786.996), stdev = 1305.706
[info]   CI (99.9%): [308720.614, 318776.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1874.941 ±(99.9%) 69.235 MB/sec [Average]
[info]   (min, avg, max) = (1852.096, 1874.941, 1893.697), stdev = 17.980
[info]   CI (99.9%): [1805.706, 1944.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9405.204 ±(99.9%) 304.094 B/op [Average]
[info]   (min, avg, max) = (9310.074, 9405.204, 9487.434), stdev = 78.972
[info]   CI (99.9%): [9101.110, 9709.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.776 ±(99.9%) 1157.045 MB/sec [Average]
[info]   (min, avg, max) = (1340.285, 1877.776, 2015.063), stdev = 300.481
[info]   CI (99.9%): [720.731, 3034.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9423.969 ±(99.9%) 5908.446 B/op [Average]
[info]   (min, avg, max) = (6679.462, 9423.969, 10129.276), stdev = 1534.405
[info]   CI (99.9%): [3515.523, 15332.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.539), stdev = 1.576
[info]   CI (99.9%): [≈ 0, 6.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.618 ±(99.9%) 30.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.618, 17.776), stdev = 7.915
[info]   CI (99.9%): [≈ 0, 34.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.793
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112651.912 ops/s
[info] # Warmup Iteration   2: 588327.567 ops/s
[info] # Warmup Iteration   3: 610971.845 ops/s
[info] # Warmup Iteration   4: 607123.147 ops/s
[info] # Warmup Iteration   5: 611080.217 ops/s
[info] Iteration   1: 609736.966 ops/s
[info]                  ·gc.alloc.rate:                   675.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1718.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 610425.428 ops/s
[info]                  ·gc.alloc.rate:               678.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1748.731 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1716.665 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 609169.625 ops/s
[info]                  ·gc.alloc.rate:               670.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          1732.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1722.715 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 600494.849 ops/s
[info]                  ·gc.alloc.rate:                   668.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1747.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 610279.453 ops/s
[info]                  ·gc.alloc.rate:               675.126 MB/sec
[info]                  ·gc.alloc.rate.norm:          1740.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1721.360 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   608021.264 ±(99.9%) 16312.911 ops/s [Average]
[info]   (min, avg, max) = (600494.849, 608021.264, 610425.428), stdev = 4236.411
[info]   CI (99.9%): [591708.353, 624334.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   673.676 ±(99.9%) 15.057 MB/sec [Average]
[info]   (min, avg, max) = (668.622, 673.676, 678.260), stdev = 3.910
[info]   CI (99.9%): [658.618, 688.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1743.565 ±(99.9%) 29.856 B/op [Average]
[info]   (min, avg, max) = (1732.394, 1743.565, 1752.400), stdev = 7.754
[info]   CI (99.9%): [1713.708, 1773.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.639 ±(99.9%) 3.247 MB/sec [Average]
[info]   (min, avg, max) = (665.791, 666.639, 667.784), stdev = 0.843
[info]   CI (99.9%): [663.391, 669.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1725.397 ±(99.9%) 48.745 B/op [Average]
[info]   (min, avg, max) = (1716.665, 1725.397, 1747.647), stdev = 12.659
[info]   CI (99.9%): [1676.652, 1774.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.055), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 614572.182 ops/s
[info] # Warmup Iteration   2: 1215795.462 ops/s
[info] # Warmup Iteration   3: 1266599.390 ops/s
[info] # Warmup Iteration   4: 1263151.275 ops/s
[info] # Warmup Iteration   5: 1267450.029 ops/s
[info] Iteration   1: 1266755.658 ops/s
[info]                  ·gc.alloc.rate:               676.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          840.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 831.549 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1274207.529 ops/s
[info]                  ·gc.alloc.rate:      680.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 840.287 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1266636.043 ops/s
[info]                  ·gc.alloc.rate:               671.855 MB/sec
[info]                  ·gc.alloc.rate.norm:          834.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 833.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1243538.638 ops/s
[info]                  ·gc.alloc.rate:               678.740 MB/sec
[info]                  ·gc.alloc.rate.norm:          859.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 849.417 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1270010.944 ops/s
[info]                  ·gc.alloc.rate:               679.864 MB/sec
[info]                  ·gc.alloc.rate.norm:          842.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 832.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1264229.762 ±(99.9%) 46098.129 ops/s [Average]
[info]   (min, avg, max) = (1243538.638, 1264229.762, 1274207.529), stdev = 11971.538
[info]   CI (99.9%): [1218131.634, 1310327.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   677.575 ±(99.9%) 13.329 MB/sec [Average]
[info]   (min, avg, max) = (671.855, 677.575, 680.446), stdev = 3.461
[info]   CI (99.9%): [664.247, 690.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   843.457 ±(99.9%) 35.396 B/op [Average]
[info]   (min, avg, max) = (834.812, 843.457, 859.081), stdev = 9.192
[info]   CI (99.9%): [808.061, 878.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.681 ±(99.9%) 1155.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.681, 671.492), stdev = 300.014
[info]   CI (99.9%): [≈ 0, 1691.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   669.400 ±(99.9%) 1441.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 669.400, 849.417), stdev = 374.279
[info]   CI (99.9%): [≈ 0, 2110.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15391.923 ops/s
[info] # Warmup Iteration   2: 88430.156 ops/s
[info] # Warmup Iteration   3: 103283.591 ops/s
[info] # Warmup Iteration   4: 103891.008 ops/s
[info] # Warmup Iteration   5: 105428.362 ops/s
[info] Iteration   1: 105842.175 ops/s
[info]                  ·gc.alloc.rate:               3382.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          50284.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3337.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49617.083 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 102385.733 ops/s
[info]                  ·gc.alloc.rate:                   3264.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              50181.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2677.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41154.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.600 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 105705.224 ops/s
[info]                  ·gc.alloc.rate:                   3343.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              49764.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3359.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50004.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 104374.350 ops/s
[info]                  ·gc.alloc.rate:                   3326.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              50163.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3371.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50838.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.256 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 104524.750 ops/s
[info]                  ·gc.alloc.rate:                   3357.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              50556.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50912.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   104566.446 ±(99.9%) 5348.947 ops/s [Average]
[info]   (min, avg, max) = (102385.733, 104566.446, 105842.175), stdev = 1389.105
[info]   CI (99.9%): [99217.499, 109915.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3334.882 ±(99.9%) 170.566 MB/sec [Average]
[info]   (min, avg, max) = (3264.597, 3334.882, 3382.445), stdev = 44.295
[info]   CI (99.9%): [3164.316, 3505.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50190.028 ±(99.9%) 1097.954 B/op [Average]
[info]   (min, avg, max) = (49764.043, 50190.028, 50556.125), stdev = 285.135
[info]   CI (99.9%): [49092.074, 51287.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3225.353 ±(99.9%) 1181.361 MB/sec [Average]
[info]   (min, avg, max) = (2677.315, 3225.353, 3381.173), stdev = 306.796
[info]   CI (99.9%): [2043.992, 4406.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48505.271 ±(99.9%) 15964.999 B/op [Average]
[info]   (min, avg, max) = (41154.158, 48505.271, 50912.264), stdev = 4146.060
[info]   CI (99.9%): [32540.272, 64470.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.820 ±(99.9%) 2.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 1.600), stdev = 0.622
[info]   CI (99.9%): [≈ 0, 3.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124584.925 ops/s
[info] # Warmup Iteration   2: 319911.168 ops/s
[info] # Warmup Iteration   3: 336309.862 ops/s
[info] # Warmup Iteration   4: 327387.321 ops/s
[info] # Warmup Iteration   5: 339175.945 ops/s
[info] Iteration   1: 338194.651 ops/s
[info]                  ·gc.alloc.rate:               1182.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          5501.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6238.774 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 333617.938 ops/s
[info]                  ·gc.alloc.rate:                   1171.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              5524.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6327.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 335316.446 ops/s
[info]                  ·gc.alloc.rate:                   1178.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              5531.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6300.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 339039.730 ops/s
[info]                  ·gc.alloc.rate:               1177.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          5467.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3116.933 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 340062.115 ops/s
[info]                  ·gc.alloc.rate:                   1207.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              5587.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6218.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   337246.176 ±(99.9%) 10356.358 ops/s [Average]
[info]   (min, avg, max) = (333617.938, 337246.176, 340062.115), stdev = 2689.513
[info]   CI (99.9%): [326889.818, 347602.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1183.513 ±(99.9%) 54.270 MB/sec [Average]
[info]   (min, avg, max) = (1171.096, 1183.513, 1207.662), stdev = 14.094
[info]   CI (99.9%): [1129.243, 1237.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5522.710 ±(99.9%) 170.346 B/op [Average]
[info]   (min, avg, max) = (5467.520, 5522.710, 5587.971), stdev = 44.238
[info]   CI (99.9%): [5352.364, 5693.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.957 ±(99.9%) 1154.889 MB/sec [Average]
[info]   (min, avg, max) = (671.447, 1207.957, 1343.921), stdev = 299.921
[info]   CI (99.9%): [53.068, 2362.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5640.365 ±(99.9%) 5434.550 B/op [Average]
[info]   (min, avg, max) = (3116.933, 5640.365, 6327.419), stdev = 1411.335
[info]   CI (99.9%): [205.815, 11074.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.612 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.269), stdev = 1.457
[info]   CI (99.9%): [≈ 0, 6.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.064 ±(99.9%) 25.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.064, 15.126), stdev = 6.743
[info]   CI (99.9%): [≈ 0, 29.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 230657.895 ops/s
[info] # Warmup Iteration   2: 743902.567 ops/s
[info] # Warmup Iteration   3: 703299.932 ops/s
[info] # Warmup Iteration   4: 768386.123 ops/s
[info] # Warmup Iteration   5: 755122.432 ops/s
[info] Iteration   1: 763604.661 ops/s
[info]                  ·gc.alloc.rate:               601.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1239.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1372.945 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 736257.350 ops/s
[info]                  ·gc.alloc.rate:               576.392 MB/sec
[info]                  ·gc.alloc.rate.norm:          1231.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1423.941 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 775413.173 ops/s
[info]                  ·gc.alloc.rate:      591.303 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 771498.909 ops/s
[info]                  ·gc.alloc.rate:                   609.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1244.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1360.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 770107.131 ops/s
[info]                  ·gc.alloc.rate:               606.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1363.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   763376.245 ±(99.9%) 60629.510 ops/s [Average]
[info]   (min, avg, max) = (736257.350, 763376.245, 775413.173), stdev = 15745.291
[info]   CI (99.9%): [702746.735, 824005.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   597.187 ±(99.9%) 52.404 MB/sec [Average]
[info]   (min, avg, max) = (576.392, 597.187, 609.959), stdev = 13.609
[info]   CI (99.9%): [544.783, 649.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1231.217 ±(99.9%) 69.350 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1231.217, 1244.309), stdev = 18.010
[info]   CI (99.9%): [1161.867, 1300.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.325 ±(99.9%) 1148.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.325, 667.142), stdev = 298.138
[info]   CI (99.9%): [≈ 0, 1681.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1104.255 ±(99.9%) 2379.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1104.255, 1423.941), stdev = 617.827
[info]   CI (99.9%): [≈ 0, 3483.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.127), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 762272.675 ops/s
[info] # Warmup Iteration   2: 1490062.812 ops/s
[info] # Warmup Iteration   3: 1611182.229 ops/s
[info] # Warmup Iteration   4: 1580394.312 ops/s
[info] # Warmup Iteration   5: 1615443.247 ops/s
[info] Iteration   1: 1622174.627 ops/s
[info]                  ·gc.alloc.rate:               777.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          754.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1597785.365 ops/s
[info]                  ·gc.alloc.rate:               769.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          757.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1624596.877 ops/s
[info]                  ·gc.alloc.rate:               770.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1584134.328 ops/s
[info]                  ·gc.alloc.rate:               749.594 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 667.135 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1564415.400 ops/s
[info]                  ·gc.alloc.rate:                   762.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              767.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1351.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1598621.319 ±(99.9%) 98363.125 ops/s [Average]
[info]   (min, avg, max) = (1564415.400, 1598621.319, 1624596.877), stdev = 25544.591
[info]   CI (99.9%): [1500258.195, 1696984.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   765.896 ±(99.9%) 40.369 MB/sec [Average]
[info]   (min, avg, max) = (749.594, 765.896, 777.214), stdev = 10.484
[info]   CI (99.9%): [725.527, 806.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   754.082 ±(99.9%) 35.175 B/op [Average]
[info]   (min, avg, max) = (744.737, 754.082, 767.221), stdev = 9.135
[info]   CI (99.9%): [718.907, 789.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.609 ±(99.9%) 1158.193 MB/sec [Average]
[info]   (min, avg, max) = (670.490, 805.609, 1343.659), stdev = 300.779
[info]   CI (99.9%): [≈ 0, 1963.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   796.155 ±(99.9%) 1196.394 B/op [Average]
[info]   (min, avg, max) = (650.199, 796.155, 1351.802), stdev = 310.700
[info]   CI (99.9%): [≈ 0, 1992.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 907774.714 ops/s
[info] # Warmup Iteration   2: 1700923.516 ops/s
[info] # Warmup Iteration   3: 1747798.446 ops/s
[info] # Warmup Iteration   4: 1744232.067 ops/s
[info] # Warmup Iteration   5: 1743527.604 ops/s
[info] Iteration   1: 1743247.040 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1745675.562 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1743572.471 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1743508.173 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1743443.072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1743889.264 ±(99.9%) 3873.672 ops/s [Average]
[info]   (min, avg, max) = (1743247.040, 1743889.264, 1745675.562), stdev = 1005.980
[info]   CI (99.9%): [1740015.591, 1747762.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120201.701 ops/s
[info] # Warmup Iteration   2: 433963.956 ops/s
[info] # Warmup Iteration   3: 453150.160 ops/s
[info] # Warmup Iteration   4: 459573.233 ops/s
[info] # Warmup Iteration   5: 452875.278 ops/s
[info] Iteration   1: 458222.348 ops/s
[info]                  ·gc.alloc.rate:               695.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          2388.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2293.683 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 452547.187 ops/s
[info]                  ·gc.alloc.rate:               696.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          2422.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2324.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 448952.844 ops/s
[info]                  ·gc.alloc.rate:                   686.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2405.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2343.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 457777.715 ops/s
[info]                  ·gc.alloc.rate:               694.450 MB/sec
[info]                  ·gc.alloc.rate.norm:          2387.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2299.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 455555.051 ops/s
[info]                  ·gc.alloc.rate:               692.969 MB/sec
[info]                  ·gc.alloc.rate.norm:          2393.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2310.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   454611.029 ±(99.9%) 14942.682 ops/s [Average]
[info]   (min, avg, max) = (448952.844, 454611.029, 458222.348), stdev = 3880.567
[info]   CI (99.9%): [439668.347, 469553.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   693.160 ±(99.9%) 16.029 MB/sec [Average]
[info]   (min, avg, max) = (686.145, 693.160, 696.793), stdev = 4.163
[info]   CI (99.9%): [677.131, 709.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2399.435 ±(99.9%) 56.777 B/op [Average]
[info]   (min, avg, max) = (2387.516, 2399.435, 2422.601), stdev = 14.745
[info]   CI (99.9%): [2342.657, 2456.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.575 ±(99.9%) 1.843 MB/sec [Average]
[info]   (min, avg, max) = (667.805, 668.575, 669.070), stdev = 0.479
[info]   CI (99.9%): [666.731, 670.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2314.397 ±(99.9%) 77.474 B/op [Average]
[info]   (min, avg, max) = (2293.683, 2314.397, 2343.423), stdev = 20.120
[info]   CI (99.9%): [2236.923, 2391.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:53:59
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    838800.334 ±   63513.348   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2379.046 ±     214.159  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4463.306 ±     139.893    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2274.656 ±    1415.639  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4264.926 ±    2545.809    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.816 ±       6.892  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.506 ±      12.709    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        33.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1816091.313 ±   63320.547   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1248.584 ±      60.588  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1081.943 ±      29.656    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.517 ±    1151.712  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1041.391 ±     989.563    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.879 ±       7.210  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.756 ±       6.200    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        31.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5816060.254 ±  491524.100   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       395.435 ±      21.696  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.044 ±      11.400    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       339.047 ±    1218.082  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        92.954 ±     335.194    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    318842.830 ±   12550.443   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2814.680 ±     141.208  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13892.315 ±     271.547    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2696.547 ±      36.212  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     13310.552 ±     542.687    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.067 ±       0.486  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.327 ±       2.382    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    903403.755 ±   45277.327   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2424.131 ±     130.991  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4222.793 ±     100.154    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2277.277 ±    1406.989  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      3972.295 ±    2608.466    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.774 ±       6.444  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.339 ±      11.138    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        27.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2833239.205 ±  144337.812   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1214.956 ±      64.369  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       674.712 ±      24.945    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1203.223 ±    1149.659  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       668.512 ±     642.633    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.795 ±       6.713  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.433 ±       3.655    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14390198.266 ±  940387.896   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       759.428 ±      46.450  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        83.062 ±       6.424    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       805.129 ±    1153.197  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        88.327 ±     131.272    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  16170490.098 ± 3779497.323   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    525248.587 ±   11464.841   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      1570.115 ±      88.802  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4704.227 ±     199.967    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      1595.127 ±    1408.177  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4775.389 ±    4128.210    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.021 ±       0.057  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.062 ±       0.169    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        12.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2106696.458 ±   23444.648   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2984.155 ±      33.716  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2229.350 ±      36.894    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2954.089 ±    1427.149  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2207.231 ±    1080.154    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.021 ±       0.098  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.016 ±       0.074    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10237067.059 ±  855477.868   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1295.620 ±      97.326  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       199.195 ±       4.200    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1335.126 ±       4.064  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       205.339 ±      17.730    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.948 ±       8.093  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.148 ±       1.264    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3305716.355 ±  144298.149   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2067.838 ±      63.520  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       984.267 ±      24.413    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2004.090 ±      10.210  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       953.973 ±      38.240    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.837 ±       6.984  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.393 ±       3.283    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        28.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13377743.013 ± 2624922.110   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1755.290 ±     329.231  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.508 ±       5.600    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1750.075 ±    1418.909  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       207.323 ±     193.022    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.546 ±       4.007  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.063 ±       0.458    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1188038.971 ±   71343.095   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      3039.278 ±     159.147  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4026.526 ±     107.981    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2946.752 ±    1376.658  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3904.976 ±    1858.571    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.016 ±       0.095    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        34.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2504194.425 ±   84959.194   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2214.383 ±     139.635  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1391.388 ±      45.142    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2143.798 ±    1148.656  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1346.717 ±     703.828    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.733 ±       6.221  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.459 ±       3.894    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        25.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  20193166.081 ±  325089.693   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       631.703 ±      33.118  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.236 ±       2.849    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       533.014 ±    1147.353  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        41.581 ±      89.511    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.007 ±       0.047  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         4.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        12.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6118785.736 ±  639993.997   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1733.232 ±     203.248  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.780 ±      13.048    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1602.814 ±    1405.275  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       411.961 ±     351.201    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.756 ±       6.507  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.192 ±       1.655    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28923030.757 ±  853109.973   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       901.934 ±      46.920  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.078 ±       1.791    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       805.889 ±    1156.001  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        43.822 ±      62.288    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34595615.012 ± 3069639.642   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         5.603 ±      46.441  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.265 ±       2.203    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1888432.943 ±  110535.041   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      2845.648 ±     140.956  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2371.376 ±      76.475    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2677.705 ±      47.040  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2231.795 ±     159.175    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.007 ±       0.037    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    312840.985 ±    6334.610   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1923.050 ±      63.502  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9674.311 ±     330.814    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1877.940 ±    1151.656  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9450.965 ±    5879.755    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.737 ±       4.946  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.719 ±      24.993    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    500887.868 ±   33006.693   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       648.589 ±      48.576  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2037.795 ±      31.387    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.144 ±       2.629  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2090.380 ±     143.692    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.026 ±       0.136    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1332522.634 ±   49920.317   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       913.309 ±      29.680  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1078.658 ±      53.065    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941.006 ±    1418.582  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1113.766 ±    1709.617    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.005 ±       0.042    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        19.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    122237.296 ±    4529.301   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3642.979 ±     155.710  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     46897.957 ±     646.099    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3499.620 ±    1218.436  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     45046.900 ±   15212.675    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.322 ±       1.350    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    345612.654 ±   27211.332   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1184.666 ±      78.556  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5394.830 ±     100.939    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.250 ±    1414.683  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4907.799 ±    6686.595    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.699 ±       5.280  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.154 ±      23.821    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    874169.974 ±  181557.319   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       650.026 ±     130.118  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1170.423 ±      24.659    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.676 ±       2.126  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1203.252 ±     265.293    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.022 ±       0.127    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2534748.969 ±   89663.359   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1209.943 ±      51.462  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       751.152 ±      38.191    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1209.840 ±    1156.656  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       750.832 ±     715.268    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.625 ±       4.639  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.389 ±       2.884    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2912762.493 ±   62740.604   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.632 ±       5.435  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.345 ±       2.967    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    465290.094 ±   17741.024   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       689.841 ±      27.551  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2333.444 ±      23.469    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.270 ±       2.115  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2260.663 ±      90.079    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17361.668 ±     601.670   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1397.717 ±      57.622  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126703.363 ±    4702.882    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1342.609 ±       5.380  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    121713.285 ±    4525.083    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.720 ±       4.563  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        65.147 ±     413.025    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     37816.838 ±    1197.135   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1038.706 ±      21.021  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43224.901 ±    1382.037    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       936.406 ±    1411.340  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     39044.440 ±   59813.838    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.690 ±       2.774    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     44871.516 ±     432.595   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       623.953 ±      10.014  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     21884.045 ±     408.693    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       671.033 ±       1.918  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     23535.285 ±     216.323    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.292 ±       1.541    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30226.994 ±     943.144   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1528.779 ±      75.378  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79585.936 ±    1750.214    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.801 ±    1155.488  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76651.316 ±   60954.604    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.908 ±       7.636  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        47.114 ±     396.290    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24866.903 ±     314.715   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1807.087 ±      23.316  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114364.798 ±    1181.601    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1741.495 ±    1409.868  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    110190.267 ±   88730.244    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.779 ±       6.259  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        49.390 ±     397.019    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     24880.640 ±    1168.286   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1547.614 ±      75.111  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     97881.462 ±    1371.465    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1469.828 ±    1155.253  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     93102.234 ±   77011.493    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.829 ±       6.955  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        53.184 ±     446.676    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27361.991 ±     535.769   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1621.877 ±      16.831  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93289.162 ±    1620.971    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1612.496 ±    1416.467  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     92805.571 ±   82756.616    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.720 ±       4.088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        41.301 ±     234.411    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27662.895 ±     754.376   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1580.817 ±      61.709  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     89937.985 ±    2300.898    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1477.510 ±    1161.533  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     84127.466 ±   68005.350    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.699 ±       4.197  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        39.942 ±     240.541    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        24.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7914.018 ±      80.698   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1180.931 ±      38.953  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234849.015 ±    8873.976    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1072.178 ±    1414.271  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    213331.258 ±  282621.252    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.808 ±       6.909  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       160.371 ±    1371.932    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     17770.366 ±    2080.606   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1637.683 ±     101.591  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    145102.056 ±    9988.031    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.370 ±    1412.375  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    142937.942 ±  133401.321    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.754 ±       4.630  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        69.264 ±     431.577    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     41964.204 ±    2334.370   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1183.211 ±      53.737  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44375.118 ±     724.278    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1071.585 ±    1412.620  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     40281.152 ±   54095.176    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.762 ±       5.302  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        28.762 ±     200.389    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     67725.069 ±    1102.444   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       774.169 ±      26.258  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     17986.376 ±     454.692    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       805.084 ±    1153.638  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18693.310 ±   26576.537    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.386 ±       2.034    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     32909.587 ±    1086.195   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2184.504 ±      88.565  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    104462.674 ±    1700.935    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2152.513 ±    1168.243  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    102906.941 ±   54627.063    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.175 ±       1.254  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         8.349 ±      59.705    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27381.652 ±     441.182   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1763.829 ±      80.190  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101375.508 ±    3322.260    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.410 ±    1408.518  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     99873.016 ±   80020.394    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.787 ±       6.554  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        45.444 ±     378.517    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34566.526 ±    1642.484   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1570.120 ±      66.246  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     71488.825 ±    1022.475    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612.527 ±    1415.801  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     73468.421 ±   65538.869    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.641 ±       4.273  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        29.138 ±     193.765    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34928.886 ±     440.332   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1512.596 ±      54.215  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68148.024 ±    2611.350    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1478.990 ±    1154.394  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66661.352 ±   52839.146    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.674 ±       4.893  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        30.391 ±     220.311    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    325411.159 ±   18221.253   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1843.063 ±      75.534  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8914.682 ±     294.937    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1742.323 ±    1411.043  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      8440.263 ±    7093.278    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.749 ±       6.318  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.605 ±      30.377    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1533680.398 ±   38850.158   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       496.111 ±      38.527  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       509.081 ±      46.748    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.750 ±    1405.178  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       411.335 ±    1445.969    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.001 ±       0.009    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    676797.287 ±   26592.819   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       536.799 ±      25.114  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1248.310 ±      72.359    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.387 ±    1111.961  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1171.927 ±    2590.501    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.084    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1769506.976 ±  486024.396   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       351.974 ±     118.240  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       312.785 ±      31.493    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.741 ±    1216.638  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       292.723 ±    1049.378    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.004 ±       0.031    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    103283.186 ±     808.066   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3475.072 ±      56.810  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52954.653 ±     739.956    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3358.221 ±      73.530  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     51174.217 ±    1196.554    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.063 ±       0.546    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    366325.287 ±    7631.630   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1259.093 ±      35.622  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5412.231 ±      91.761    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1206.908 ±    1154.019  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5190.483 ±    4993.371    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.706 ±       5.265  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.042 ±      22.702    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1581726.202 ±  100473.348   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       755.711 ±      64.672  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       751.869 ±      29.475    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       799.041 ±    1148.090  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       793.727 ±    1114.978    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.022 ±       0.145  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.022 ±       0.147    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1004610.049 ±   67886.293   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       728.700 ±      59.130  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1141.507 ±      17.342    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       668.330 ±       1.992  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1047.251 ±      72.755    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±       0.057    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2811591.211 ±  120131.069   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1340.009 ±      64.745  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       750.007 ±      24.096    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.327 ±    1150.560  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       674.779 ±     653.108    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.007 ±       0.040    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3198160.108 ±    2680.889   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    472269.832 ±   34082.626   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       559.224 ±      54.741  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1863.606 ±     133.423    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.812 ±    1151.224  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1783.788 ±    3843.141    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.028 ±       0.147    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    160548.614 ±    5618.342   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2032.171 ±     121.653  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19918.903 ±     516.780    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.416 ±    1147.425  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     18382.762 ±   10738.878    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.749 ±       4.628  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.431 ±      46.101    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    454193.453 ±    4464.760   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       376.738 ±      40.020  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1305.302 ±     149.800    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       337.952 ±    1212.488  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1172.749 ±    4210.150    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.043 ±       0.374    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1246662.546 ±   30986.658   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       250.277 ±      33.449  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       315.955 ±      42.670    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       306.970 ±    1079.041  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       387.485 ±    1362.158    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     86419.724 ±    2577.075   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3471.469 ±     128.969  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63222.146 ±     482.311    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3358.438 ±      72.969  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     61165.960 ±    1438.869    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.228 ±       0.803    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        35.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    306806.684 ±    6240.602   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1726.775 ±      84.910  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8857.720 ±     318.570    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1608.425 ±    1414.993  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8251.314 ±    7267.772    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.695 ±       5.942  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.570 ±      30.504    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1901351.888 ±  110433.912   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1004.632 ±      76.285  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.544 ±      27.576    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.521 ±    1410.962  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       884.878 ±    1152.030    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.007 ±       0.037    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2862686.433 ±   30168.084   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       792.084 ±      39.704  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       435.441 ±      18.888    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       805.630 ±    1156.312  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       442.685 ±     631.585    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.007 ±       0.040    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3019230.697 ±   37140.330   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.856 ±       7.365  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.448 ±       3.855    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     48779.925 ±    2606.092   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2210.184 ±     158.688  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71303.557 ±    2510.331    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2142.422 ±    1159.953  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69092.982 ±   36057.038    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.804 ±       6.609  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.445 ±     217.740    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    243648.466 ±   10992.262   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2679.593 ±     134.439  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17306.801 ±     315.493    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2552.241 ±    1165.141  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16481.284 ±    7397.244    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.050 ±       0.387  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.324 ±       2.513    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        25.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    380711.741 ±   18280.287   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1967.684 ±      46.831  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8134.553 ±     271.159    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1871.374 ±    1145.034  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7745.092 ±    4941.146    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.816 ±       5.639  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.332 ±      22.954    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2228158.523 ±   66418.114   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       793.453 ±      45.936  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       560.361 ±      30.826    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.060 ±    1156.299  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       569.606 ±     822.977    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.092 ±       0.700  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.065 ±       0.496    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     89401.080 ±    2409.752   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3532.124 ±      95.494  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62173.748 ±     865.377    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3382.676 ±      53.717  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     59545.574 ±    2109.441    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.033 ±       0.201  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.586 ±       3.531    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    269672.746 ±    4290.255   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2186.527 ±      50.709  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12760.369 ±     162.443    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2143.848 ±    1145.031  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12516.083 ±    6871.500    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.733 ±       6.176  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.286 ±      36.123    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1577245.061 ±   63892.801   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       945.337 ±      67.414  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       943.240 ±      45.284    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       936.900 ±    1409.853  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       933.908 ±    1392.729    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.008 ±       0.044    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2823163.156 ±  318039.735   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       986.781 ±     105.570  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       550.134 ±      22.756    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       941.026 ±    1418.868  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       527.955 ±     836.545    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.025    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3173003.547 ±    3862.992   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    397610.273 ±   20247.044   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2562.470 ±     192.609  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10141.757 ±     270.206    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2406.141 ±    1399.712  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9510.488 ±    5107.582    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.049 ±       0.282    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        18.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     26075.918 ±    2296.745   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1678.066 ±     144.229  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    101269.237 ±    2931.883    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1610.485 ±    1417.184  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     97209.805 ±   85525.550    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.766 ±       4.391  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        46.509 ±     268.285    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     98673.569 ±    1025.785   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       954.723 ±      31.590  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15227.240 ±     579.780    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       934.577 ±    1406.799  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14914.381 ±   22557.888    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.066  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.196 ±       1.051    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     67888.181 ±    4198.177   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1217.327 ±      43.696  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28224.022 ±     893.242    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1202.553 ±    1152.545  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27934.084 ±   27411.871    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.833 ±       6.991  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.737 ±     165.804    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    136756.485 ±   12042.003   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       944.627 ±     108.773  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10869.274 ±     559.706    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.954 ±    1415.855  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10809.992 ±   16001.809    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.237 ±       1.106    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     36154.574 ±    1582.032   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1807.354 ±      88.787  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78667.994 ±    2788.525    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1736.376 ±    1405.563  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     75649.167 ±   62649.238    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.895 ±       7.529  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        39.714 ±     334.199    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32347.956 ±     385.937   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       529.328 ±      42.607  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25752.776 ±    2345.492    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       401.475 ±    1411.243  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19571.922 ±   68798.270    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.203 ±       1.747    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32548.465 ±     293.830   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       408.089 ±      39.417  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19732.103 ±    2026.156    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       369.193 ±    1320.612  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17877.563 ±   63932.511    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.201 ±       1.734    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34410.461 ±    1013.293   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       429.068 ±      57.270  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19623.426 ±    2941.452    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.624 ±    1326.484  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16962.746 ±   60608.801    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34680.235 ±     255.151   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       389.261 ±      26.298  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17661.966 ±    1302.892    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       472.952 ±    1063.070  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     21474.221 ±   48259.784    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.378 ±       3.254    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     15164.438 ±    1222.497   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1118.729 ±      75.787  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    116115.067 ±    6954.835    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1073.829 ±    1415.224  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    111521.357 ±  147822.583    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.812 ±       5.672  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        82.982 ±     576.249    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15468.982 ±     982.128   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1013.130 ±      20.233  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    103101.328 ±    7218.821    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1071.255 ±    1411.767  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    109268.104 ±  146976.353    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2.120 ±       5.740    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    108540.953 ±    4070.029   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       292.441 ±      44.826  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4241.410 ±     795.708    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.653 ±    1079.075  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2991.119 ±   15772.411    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13294.593 ±     237.281   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1312.674 ±      27.654  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    155375.225 ±    2713.050    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.414 ±       5.442  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    158424.120 ±    3163.839    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.903 ±       6.744  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       107.454 ±     803.106    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45416.379 ±     699.476   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1151.954 ±      30.990  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     39917.916 ±    1022.755    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1074.089 ±    1416.085  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     37252.339 ±   49470.539    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.708 ±       5.916  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.488 ±     204.639    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        23.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     64982.449 ±     494.353   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1143.947 ±      26.529  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27705.456 ±     589.763    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1204.927 ±    1152.630  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     29190.650 ±   28022.090    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.792 ±       6.592  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        19.148 ±     159.459    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    177476.594 ±    1608.378   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       290.494 ±      29.988  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2576.244 ±     286.657    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.956 ±    1078.994  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2726.541 ±    9584.177    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.074 ±       0.390    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    184926.107 ±    1806.271   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         0.413 ±       3.552  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         3.529 ±      30.366    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     58207.225 ±    1581.639   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1132.687 ±      50.503  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30627.423 ±    1510.629    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1207.582 ±    1155.461  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32679.132 ±   31593.209    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.774 ±       6.623  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        20.920 ±     178.921    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     97855.538 ±    2845.828   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2157.960 ±      79.442  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     34702.114 ±     482.615    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2007.917 ±      12.829  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     32291.211 ±    1070.690    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.829 ±       6.999  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.329 ±     112.603    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    126567.688 ±    5716.058   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1797.771 ±     109.903  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22352.963 ±     614.603    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1869.444 ±    1150.048  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23254.426 ±   14516.670    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.887 ±       7.192  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        11.241 ±      91.276    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    167166.056 ±    5048.263   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1571.086 ±      80.728  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14789.851 ±     371.049    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478.204 ±    1161.198  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     13909.056 ±   10711.763    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.641 ±       5.522  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.002 ±      51.680    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     55383.075 ±     544.502   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2981.641 ±      84.903  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84729.064 ±    2285.526    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2833.752 ±    1163.015  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     80523.322 ±   32870.629    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.118 ±       1.018    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        21.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        30.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    178596.150 ±   23813.350   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1190.799 ±     146.693  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10494.337 ±     388.269    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.710 ±    1415.431  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9508.555 ±   13036.795    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.708 ±       4.988  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.574 ±      46.916    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    534572.635 ±   13927.531   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       557.078 ±      28.357  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1639.882 ±      66.367    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       534.309 ±    1150.141  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1574.525 ±    3389.599    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    721771.548 ±   14719.412   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       571.385 ±      20.065  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1245.876 ±      40.415    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.535 ±    1154.933  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1171.522 ±    2521.912    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    782006.400 ±    5103.508   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.208 ±       1.787  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.419 ±       3.606    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    339494.492 ±    4108.222   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       958.276 ±      29.317  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4442.411 ±     153.971    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       930.375 ±    1403.575  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4314.727 ±    6530.369    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.058 ±       0.204    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38173.238 ±     739.485   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1946.040 ±      55.481  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80235.054 ±    1914.612    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.406 ±    1159.236  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     77413.964 ±   48001.293    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.779 ±       4.543  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        32.212 ±     188.039    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    295656.871 ±   11006.278   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       315.292 ±      26.302  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1678.667 ±     179.862    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       368.503 ±    1317.734  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1971.944 ±    7060.151    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.791 ±       6.795  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         4.205 ±      36.137    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    107607.265 ±    6023.513   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1293.629 ±      64.981  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18919.584 ±     168.912    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.360 ±       5.982  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19576.828 ±    1131.572    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.858 ±       7.028  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        12.463 ±     102.106    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    460541.133 ±   66963.649   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       304.695 ±      44.060  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1041.441 ±      93.838    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       204.665 ±    1079.140  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       705.470 ±    3722.863    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.014 ±       0.120    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     40831.842 ±    1173.327   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2029.351 ±      62.887  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     78218.975 ±    1966.291    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2002.447 ±      14.685  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     77183.699 ±    1817.386    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.891 ±       6.393  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34.214 ±     245.492    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        29.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     75850.079 ±     659.633   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       619.679 ±      17.797  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12858.242 ±     382.436    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.555 ±    1152.823  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11121.926 ±   23940.821    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.173 ±       0.912    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     87994.318 ±    1114.615   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       513.022 ±      28.667  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9175.427 ±     618.918    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       532.684 ±    1146.643  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9538.620 ±   20532.851    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.009 ±       0.076  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.159 ±       1.372    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     78401.716 ±     674.343   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       478.134 ±      36.306  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9597.294 ±     791.642    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.001 ±    1113.612  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10105.036 ±   22373.275    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.167 ±       1.442    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86221.560 ±    3637.290   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       502.684 ±      26.244  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9174.995 ±     667.011    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.742 ±    1118.423  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9240.806 ±   20481.621    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.229 ±       1.968    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     88198.135 ±     497.525   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       443.660 ±      36.727  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7916.484 ±     683.844    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.644 ±    1326.673  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6614.977 ±   23683.326    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.223 ±       1.281    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10196.361 ±     257.450   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1677.826 ±      90.929  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    258963.663 ±   11009.727    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1609.936 ±    1415.833  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    248452.799 ±  217583.286    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.820 ±       5.157  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       126.777 ±     795.456    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        27.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9775.388 ±     164.437   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1543.567 ±      43.571  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    248502.856 ±    8883.339    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1605.088 ±    1403.358  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    258581.928 ±  229984.410    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.905 ±       6.715  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       145.124 ±    1077.112    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    151886.482 ±    1976.058   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       406.775 ±      39.108  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4215.398 ±     457.539    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.644 ±    1326.686  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3846.956 ±   13761.092    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.043 ±       0.372    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5846.057 ±     277.691   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1533.102 ±      89.113  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    412696.214 ±    7012.436    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1469.945 ±    1156.000  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    395815.344 ±  313580.894    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.954 ±       7.323  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       254.788 ±    1956.411    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     20189.592 ±    1081.330   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1577.298 ±      60.281  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122954.251 ±    6055.537    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1608.513 ±    1411.305  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    125515.182 ±  113069.283    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.774 ±       4.865  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        61.468 ±     388.191    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     23669.564 ±     493.495   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1602.642 ±      63.730  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106556.904 ±    2894.658    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1469.327 ±    1147.738  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     97691.763 ±   76195.640    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.554 ±       2.921    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    134372.720 ±    2477.831   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       305.074 ±      38.656  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3573.751 ±     517.926    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.646 ±    1079.039  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2407.634 ±   12694.861    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    140214.700 ±     383.561   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5         0.060 ±       0.514  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.674 ±       5.771    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23549.120 ±     324.363   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1635.606 ±      41.669  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109305.237 ±    1895.121    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1473.868 ±    1155.453  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     98482.254 ±   76751.020    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.821 ±       5.082  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        54.929 ±     340.487    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    123787.986 ±    1793.777   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1768.091 ±      35.996  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22478.192 ±     572.916    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.814 ±    1409.287  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     22175.771 ±   18052.286    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.758 ±       5.990  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.688 ±      76.632    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    557007.791 ±   30297.975   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       595.396 ±      30.951  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1682.255 ±      29.152    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       666.645 ±       1.631  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1883.823 ±      97.960    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.009 ±       0.081  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.026 ±       0.226    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        16.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    316754.935 ±   21335.721   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       459.256 ±      61.385  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2281.396 ±     212.373    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.950 ±    1319.602  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1827.850 ±    6523.986    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.063 ±       0.358    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    757239.914 ±   31537.879   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       507.891 ±      37.556  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1055.621 ±      74.755    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.960 ±    1119.020  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1048.959 ±    2328.939    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.026 ±       0.227    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     77557.398 ±    1048.083   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3209.516 ±     123.116  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65115.945 ±    1922.975    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3085.996 ±    1429.871  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     62601.124 ±   28638.070    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.021 ±       0.113  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.422 ±       2.302    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        33.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    198882.479 ±    3948.774   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1457.246 ±      69.647  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11531.321 ±     441.494    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1475.297 ±    1160.522  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11678.006 ±    9289.220    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.712 ±       5.907  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         5.653 ±      46.898    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    625134.436 ±  124355.204   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       349.627 ±      86.999  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       879.783 ±      91.988    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.611 ±    1318.089  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       926.159 ±    3285.843    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.001 ±       0.012  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.003 ±       0.030    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    649058.556 ±   65704.103   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       495.882 ±      81.190  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1201.860 ±      81.483    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.782 ±    1113.026  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1204.643 ±    2661.170    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.020 ±       0.105    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1112172.001 ±   70888.016   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       626.321 ±      46.398  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       886.236 ±      20.686    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.323 ±       1.548  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       950.155 ±      63.549    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.050    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1175095.050 ±    6641.736   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     34832.080 ±    1137.188   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1921.260 ±      66.890  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     86794.264 ±    1883.772    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1873.273 ±    1155.486  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     84650.603 ±   52765.430    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.845 ±       7.190  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        38.755 ±     329.659    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    127720.222 ±    4950.806   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1807.285 ±      79.353  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     22269.755 ±     609.173    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1740.926 ±    1410.608  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     21455.554 ±   17444.405    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.783 ±       6.048  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.552 ±      73.806    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    202514.100 ±   12689.377   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1229.501 ±      68.923  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9555.539 ±     344.833    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1203.353 ±    1150.639  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9347.595 ±    8887.703    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.841 ±       5.897  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.643 ±      46.647    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        26.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    254325.898 ±   17423.724   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1369.813 ±     114.683  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8475.920 ±     328.538    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345.053 ±       2.463  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8324.998 ±     563.758    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.570 ±       4.169  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.482 ±      25.441    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     66572.766 ±    2593.266   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2680.765 ±     139.757  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63362.835 ±    1085.041    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2561.360 ±    1148.570  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60536.669 ±   26887.188    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.096 ±       0.593  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.290 ±      14.246    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    175596.892 ±    3060.337   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1169.402 ±      57.898  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10480.881 ±     557.953    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.755 ±    1415.878  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9627.026 ±   12733.184    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.695 ±       5.853  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.197 ±      52.154    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    718421.727 ±   43806.203   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       744.558 ±      50.869  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1630.902 ±      34.084    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.517 ±       3.068  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1462.484 ±      95.266    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.018 ±       0.156    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    698001.627 ±   15100.087   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       552.167 ±      40.342  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1245.031 ±      81.329    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.633 ±    1155.143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1209.515 ±    2603.762    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.028 ±       0.161    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    777414.882 ±    1314.890   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    356815.618 ±   20132.480   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1004.212 ±      64.721  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4428.909 ±     168.998    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       930.737 ±    1401.388  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4097.033 ±    6064.191    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.021 ±       0.179  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.091 ±       0.786    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11176.363 ±     461.103   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1413.882 ±      40.634  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    199093.542 ±    4342.354    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1341.531 ±       6.015  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    188915.377 ±    7569.788    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.774 ±       5.767  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       108.038 ±     804.684    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10717.008 ±      88.923   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1245.768 ±      27.443  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    182928.671 ±    3724.374    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1203.910 ±    1151.621  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    176819.443 ±  169582.164    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.900 ±       5.977  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       132.161 ±     878.381    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    272932.790 ±   25665.096   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1833.428 ±     149.435  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10573.412 ±     285.774    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1748.204 ±    1417.044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10108.858 ±    8709.053    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.600 ±       3.900  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.555 ±      23.420    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      8610.410 ±     117.110   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1552.043 ±      66.783  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    283673.401 ±   10272.006    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1603.065 ±    1403.598  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    293051.695 ±  257679.206    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.928 ±       7.371  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       169.325 ±    1344.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25362.160 ±    1363.408   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1343.689 ±      72.699  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     83382.616 ±    2577.763    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1341.093 ±       5.995  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     83233.309 ±    4802.396    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.754 ±       6.310  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        47.739 ±     400.044    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     30377.130 ±     509.373   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1259.734 ±      42.973  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65261.133 ±    2246.141    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1205.163 ±    1152.409  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     62445.154 ±   59849.828    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.800 ±       5.457  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        41.372 ±     282.388    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    630793.080 ±    4564.814   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1171.461 ±      41.844  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2922.671 ±     109.722    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1075.994 ±    1418.032  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2685.121 ±    3545.692    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.662 ±       5.491  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.650 ±      13.678    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    775496.768 ±    1115.546   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     28563.244 ±     517.094   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1296.247 ±      44.157  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71411.957 ±    2504.072    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1206.719 ±    1156.504  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     66530.759 ±   64369.396    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.840 ±       6.877  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        46.288 ±     378.975    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     34349.378 ±    1302.005   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1814.600 ±      60.502  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83135.463 ±    2666.676    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1741.992 ±    1412.158  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79882.155 ±   66244.654    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.804 ±       6.651  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.259 ±     308.615    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     30801.943 ±     738.867   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1362.567 ±      35.390  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69618.961 ±    1260.569    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336.706 ±       6.081  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     68299.356 ±    1701.244    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.009 ±       7.129  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        51.783 ±     366.505    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    484150.213 ±   11931.291   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1299.277 ±      43.411  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4223.241 ±      38.988    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1345.195 ±       3.741  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4372.680 ±     104.152    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.612 ±       4.825  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.983 ±      15.627    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     17992.349 ±     604.820   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1834.758 ±      88.423  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    160484.207 ±    5825.629    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1734.229 ±    1405.997  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    151696.586 ±  123052.044    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.941 ±       7.193  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        82.405 ±     630.988    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     56379.226 ±    1411.944   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1737.682 ±      85.834  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48501.764 ±    1599.886    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1609.421 ±    1415.924  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     44924.454 ±   39545.068    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.779 ±       5.904  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        21.822 ±     165.665    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    160769.377 ±    3258.117   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1948.386 ±      55.207  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19072.686 ±     453.696    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.325 ±    1156.156  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18337.283 ±   11303.237    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.779 ±       5.417  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.677 ±      53.501    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1190940.638 ±   26311.724   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1316.803 ±      39.435  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1739.916 ±      54.633    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.309 ±    1158.194  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1599.723 ±    1537.281    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.692 ±       5.820  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.919 ±       7.731    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1384639.188 ±    1983.955   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     69612.086 ±    1919.704   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1764.204 ±      89.021  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39885.089 ±    1015.189    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1741.051 ±    1410.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     39334.222 ±   31254.747    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.804 ±       6.474  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.156 ±     146.212    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     16902.481 ±    1370.890   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1501.795 ±     101.622  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    139838.405 ±    4404.896    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1475.604 ±    1160.816  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    137807.525 ±  119381.094    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.808 ±       6.165  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        77.190 ±     591.514    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17627.854 ±     796.446   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1423.794 ±      33.661  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    127127.318 ±    5022.687    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336.983 ±       6.744  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    119380.635 ±    5827.937    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.899 ±       6.469  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        80.665 ±     580.750    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    670848.626 ±   34288.200   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1803.361 ±      98.892  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4230.760 ±      58.629    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1747.627 ±    1421.327  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4100.922 ±    3346.638    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.600 ±       5.028  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.415 ±      11.864    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     12115.331 ±     651.585   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1655.035 ±     130.087  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    214971.779 ±    6912.191    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1600.186 ±    1405.240  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    207665.315 ±  177591.342    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.033 ±       0.201  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4.351 ±      26.233    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     44326.730 ±    2599.841   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1734.298 ±      86.457  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61572.170 ±    1851.928    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1608.924 ±    1415.546  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     57171.993 ±   51369.447    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.766 ±       6.328  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        26.891 ±     222.053    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     56142.533 ±    2565.578   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1724.900 ±     105.075  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48348.330 ±    1456.750    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1739.644 ±    1412.224  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     48750.471 ±   39296.245    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.771 ±       6.323  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        21.733 ±     178.437    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1345186.809 ±   19952.704   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1260.188 ±      46.236  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1474.091 ±      50.495    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1209.967 ±    1158.587  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1416.168 ±    1365.765    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.687 ±       5.519  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.803 ±       6.449    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1577401.777 ±    1778.516   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3521.520 ±     161.661   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       483.095 ±      40.914  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    215874.060 ±   12251.804    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.719 ±    1115.624  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    225000.428 ±  499855.536    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.607 ±      32.364    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    125100.592 ±    1127.915   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1986.318 ±      51.529  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     24987.674 ±     448.516    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2010.610 ±      12.156  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     25293.631 ±     369.744    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.770 ±       4.765  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.718 ±      60.172    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    374034.477 ±   13623.402   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       771.934 ±      23.762  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3248.248 ±      49.486    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       666.672 ±       2.170  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2805.470 ±     104.555    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.016 ±       0.089  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.068 ±       0.372    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    255852.099 ±   10871.309   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       576.211 ±      55.011  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3543.971 ±     218.487    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.165 ±    1147.679  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3270.222 ±    7040.710    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.026 ±       0.221    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    517684.759 ±    5530.556   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       673.452 ±      10.728  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2047.400 ±      44.798    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       670.938 ±       1.733  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2039.749 ±      19.259    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.038 ±       0.218    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     75117.268 ±    1602.534   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3174.427 ±     106.789  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66506.219 ±    1206.656    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3084.318 ±    1400.831  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     64608.977 ±   28910.173    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.025 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.523 ±       2.765    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    135623.032 ±    2550.111   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1186.116 ±      19.370  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13763.948 ±     352.701    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1074.150 ±    1416.100  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12459.288 ±   16367.385    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.662 ±       5.347  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         7.692 ±      62.106    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    205843.013 ±    9819.321   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       165.844 ±      28.269  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1267.810 ±     189.846    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.639 ±    1079.003  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1557.676 ±    8213.214    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.373 ±       3.213  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.847 ±      24.513    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    424370.794 ±    5746.841   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       426.809 ±      31.976  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1582.730 ±     128.969    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.246 ±    1320.773  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1370.809 ±    4900.261    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    458915.011 ±    6791.076   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       370.046 ±      34.845  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1269.118 ±     133.680    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.744 ±    1216.618  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1164.304 ±    4181.524    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    497426.554 ±    3715.681   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     28613.492 ±     809.754   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1620.517 ±      88.392  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     89117.648 ±    3369.357    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.569 ±    1411.780  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     88340.964 ±   76064.524    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.816 ±       5.154  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        44.930 ±     283.127    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8233.573 ±      83.807   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1160.942 ±      52.804  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    221869.574 ±    9421.588    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.362 ±    1156.403  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    230845.679 ±  219866.357    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.783 ±       6.651  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       149.112 ±    1266.850    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8117.391 ±     142.554   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1082.344 ±      29.831  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    209837.542 ±    8605.173    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       936.628 ±    1411.689  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    181829.182 ±  277131.147    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1.615 ±       8.517    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    189518.063 ±    8240.794   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1659.194 ±      92.923  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     13776.690 ±     329.078    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1613.214 ±    1418.671  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     13397.674 ±   11822.007    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.583 ±       4.929  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4.888 ±      41.347    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        22.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7541.953 ±     236.704   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1261.107 ±      56.224  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    263138.165 ±    9354.576    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1197.401 ±    1146.454  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    249852.935 ±  239349.867    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.748 ±       9.214    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     20237.104 ±    1016.889   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1152.415 ±      81.557  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89608.275 ±    3281.052    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207.428 ±    1155.005  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     93812.499 ±   88800.093    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.741 ±       6.292  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        56.769 ±     481.852    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     25798.076 ±     962.855   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1143.158 ±      70.886  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     69736.884 ±    2608.946    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1205.001 ±    1152.800  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     73497.609 ±   70144.615    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.800 ±       6.663  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        48.918 ±     407.606    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    376796.692 ±    5545.222   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       878.436 ±      23.637  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3669.056 ±     110.107    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       805.778 ±    1156.178  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3368.247 ±    4880.792    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.070 ±       0.280    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    430759.929 ±    1102.212   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     25134.351 ±     862.005   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1205.466 ±      63.806  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75480.550 ±    2990.605    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.916 ±    1414.503  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     67186.837 ±   88620.162    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.912 ±       5.292  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        56.998 ±     330.267    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13219.496 ±     495.900   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1271.282 ±       7.243  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    151355.844 ±    6176.444    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1207.904 ±    1156.262  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    144020.805 ±  140441.645    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.745 ±       5.681  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        88.835 ±     676.873    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13937.034 ±     946.575   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1239.763 ±      91.013  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    139986.552 ±    3558.031    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.260 ±    1152.506  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    135534.981 ±  125648.472    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.879 ±       6.487  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        99.638 ±     738.377    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    275285.722 ±    7150.190   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1639.232 ±      40.487  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9371.945 ±     281.226    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1478.914 ±    1159.141  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      8458.413 ±    6719.346    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.583 ±       4.584  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.305 ±      25.963    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12540.371 ±    1221.443   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1515.266 ±     154.748  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    190145.263 ±    3289.047    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Compressed_Class_Space.norm                      128  thrpt    5         0.553 ±       4.765    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Metaspace                                        128  thrpt    5         0.012 ±       0.107  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.Metaspace.norm                                   128  thrpt    5         1.623 ±      13.976    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1467.101 ±    1137.637  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    183942.666 ±  135865.805    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Old_Gen                                       128  thrpt    5         0.254 ±       2.191  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Old_Gen.norm                                  128  thrpt    5        33.326 ±     286.943    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.050 ±       0.298  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         6.451 ±      39.175    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        75.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     33339.660 ±     457.322   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1438.008 ±      30.789  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     67884.339 ±    1855.992    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1341.577 ±       4.729  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     63331.797 ±     722.378    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       4.976  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.143 ±     234.832    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     79014.890 ±    1342.761   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1992.101 ±      70.902  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39675.064 ±     844.901    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2008.038 ±      12.191  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     39993.813 ±     872.257    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.774 ±       5.023  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.494 ±     100.494    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    627615.470 ±   22627.716   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       884.202 ±      30.810  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2217.158 ±      62.636    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.281 ±    1157.989  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2024.646 ±    2958.239    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.031 ±       0.267    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    592746.148 ±    5468.384   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         1.032 ±       8.883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         2.748 ±      23.652    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     75662.129 ±    3683.462   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2195.108 ±      96.359  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45655.055 ±     650.422    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2138.801 ±    1161.446  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     44486.828 ±   24156.758    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.846 ±       6.927  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        17.570 ±     143.961    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     16255.110 ±     994.983   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       867.834 ±      45.276  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     84027.910 ±    5098.448    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       939.728 ±    1415.283  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     91136.875 ±  139170.410    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1.621 ±       8.552    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17216.307 ±     493.342   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       757.988 ±       9.765  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     69290.565 ±    1844.230    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668.495 ±       1.779  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61110.125 ±    1727.760    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.378 ±       3.255    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    122204.970 ±    1506.070   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       314.333 ±      35.639  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4048.144 ±     509.678    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.652 ±    1079.071  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2644.793 ±   13945.229    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.161 ±       1.390    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14746.588 ±    1241.684   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1150.418 ±      37.816  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    122803.038 ±   10270.458    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1070.431 ±    1410.095  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    114668.564 ±  155775.881    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.816 ±       6.937  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        86.033 ±     731.320    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     49992.228 ±    1271.714   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1548.805 ±      35.862  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48757.082 ±    1436.256    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1609.626 ±    1408.854  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     50671.508 ±   44348.973    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.745 ±       6.148  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        23.393 ±     192.952    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     78488.735 ±     646.870   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1671.605 ±      50.940  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33516.052 ±    1015.281    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1606.681 ±    1409.036  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32218.333 ±   28343.120    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.767 ±       4.992  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        15.370 ±     100.014    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    294503.054 ±   10526.166   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       577.590 ±      37.606  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3086.374 ±     147.983    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       536.705 ±    1155.299  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2867.521 ±    6173.828    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.044 ±       0.234    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    364919.033 ±     798.076   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.009 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.037 ±       0.310    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     66761.183 ±    3055.159   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1536.046 ±     102.840  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36205.975 ±    1284.153    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.085 ±    1150.435  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34742.377 ±   26911.219    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.784 ±       6.661  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.425 ±     156.551    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    147041.373 ±    2892.161   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1929.905 ±      91.682  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20656.360 ±     717.581    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1877.457 ±    1147.869  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20094.658 ±   12267.292    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.762 ±       5.900  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.163 ±      63.276    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    832626.927 ±   22055.149   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       473.037 ±      48.054  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       893.969 ±      81.527    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.838 ±    1405.488  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       754.293 ±    2651.560    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.001 ±       0.009  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.002 ±       0.017    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    426075.050 ±   25816.173   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       434.634 ±      35.144  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1605.585 ±     122.738    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       368.787 ±    1318.913  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1365.891 ±    4876.989    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.030 ±       0.261    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1133307.453 ±   51014.426   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       405.821 ±      44.967  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       563.502 ±      46.820    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       472.968 ±    1063.216  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       655.412 ±    1463.541    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.012 ±       0.061    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     82408.068 ±    2625.602   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3328.884 ±     130.749  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63573.875 ±    1308.411    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3219.657 ±    1182.004  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     61487.930 ±   22521.082    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.029 ±       0.166  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.557 ±       3.183    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    272172.114 ±   12014.433   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1656.188 ±      84.631  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9576.934 ±     184.904    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1607.671 ±    1416.416  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9289.821 ±    8024.439    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.745 ±       5.059  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.293 ±      29.162    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1253849.666 ±   11008.108   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       440.210 ±      27.933  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       552.574 ±      39.501    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       501.683 ±    1110.017  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       630.350 ±    1394.703    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.005 ±       0.035  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.006 ±       0.044    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1557711.973 ±   28214.123   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       936.523 ±      25.558  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       946.172 ±      40.378    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       936.800 ±    1410.046  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       947.545 ±    1440.224    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.008 ±       0.044    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1918969.371 ±    8293.679   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       674.941 ±      11.216  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       553.531 ±      10.667    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.049 ±       2.342  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       550.338 ±       2.816    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.003 ±       0.029    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2058182.806 ±    8000.803   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5         0.205 ±       1.760  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5         0.157 ±       1.348    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42136.368 ±    1557.665   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2103.791 ±      26.234  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78578.800 ±    2311.221    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2007.744 ±      12.929  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74992.603 ±    2779.007    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.820 ±       6.619  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30.403 ±     245.350    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     14407.756 ±     800.937   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1907.492 ±     113.050  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    208340.005 ±    4968.013    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1877.151 ±    1150.038  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    205103.237 ±  127279.975    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.766 ±       4.703  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        84.437 ±     520.121    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     98658.400 ±    3313.225   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1328.539 ±      48.630  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21190.556 ±     361.480    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1338.463 ±       5.278  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21350.079 ±     708.082    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.824 ±       6.920  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        13.084 ±     109.837    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    256097.880 ±    9974.734   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       857.307 ±      37.725  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5268.677 ±     237.060    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       940.363 ±    1416.300  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5792.006 ±    8885.904    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.102 ±       0.876    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     13860.744 ±     404.573   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2108.343 ±      26.918  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    239393.710 ±    5294.227    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2003.790 ±      14.910  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    227525.409 ±    6868.005    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.903 ±       6.465  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       102.548 ±     734.486    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     32934.063 ±    1195.637   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2766.700 ±     112.261  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    132210.121 ±    1145.784    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2684.660 ±      32.065  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    128296.977 ±    3323.344    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.058 ±       0.222  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         2.792 ±      10.657    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    106776.894 ±    2440.445   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1513.179 ±      57.433  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22301.645 ±     592.556    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.569 ±    1144.832  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21694.103 ±   16582.630    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.754 ±       6.356  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.120 ±      93.764    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    178457.296 ±    7423.080   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.163 ±      59.474  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5159.531 ±     319.187    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.966 ±    1155.861  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4712.579 ±   10144.190    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.109 ±       0.943    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    194904.277 ±     365.545   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     49020.946 ±    1735.035   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3471.987 ±     134.805  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111469.144 ±     843.382    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3366.079 ±      63.485  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    108075.236 ±    3534.479    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.269 ±       1.416    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26057.818 ±    1065.315   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1406.104 ±      79.082  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84921.595 ±    2287.703    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342.361 ±       6.595  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     81081.422 ±    3610.482    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.770 ±       4.942  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        47.077 ±     303.830    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     29170.861 ±    1124.790   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1185.346 ±      62.018  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     63948.547 ±    2093.106    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.863 ±    1411.046  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     57763.785 ±   75989.741    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.849 ±       5.833  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        46.161 ±     317.058    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    643074.810 ±   21291.739   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1732.931 ±     101.484  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4238.990 ±     105.799    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1745.720 ±    1410.588  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4265.092 ±    3331.795    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.587 ±       4.788  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.455 ±      11.877    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     24126.909 ±     826.821   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1808.812 ±      45.454  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    117984.258 ±    2047.475    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1742.684 ±    1417.796  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    113740.332 ±   93931.524    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.387 ±       2.410  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        25.541 ±     159.709    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     73978.001 ±    3015.065   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1966.606 ±     102.074  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41835.251 ±     919.643    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1876.396 ±    1156.553  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     39939.557 ±   25116.434    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.779 ±       4.681  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.742 ±     100.800    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    184025.951 ±    6958.198   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2064.325 ±      78.813  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17654.752 ±     391.668    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2007.776 ±      10.865  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17172.322 ±     699.186    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.729 ±       6.184  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.209 ±      52.697    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1510004.092 ±   38355.313   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1286.965 ±      59.264  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1341.293 ±      57.544    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1209.808 ±    1158.694  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1261.591 ±    1216.834    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.654 ±       5.494  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.676 ±       5.681    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        21.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1757335.668 ±   65809.108   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5         1.524 ±      13.123  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         1.389 ±      11.959    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    152978.992 ±    7427.781   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1986.115 ±     123.794  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20432.356 ±     364.585    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2005.075 ±       9.544  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20630.908 ±    1081.819    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.824 ±       5.633  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         8.625 ±      59.148    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     42674.306 ±    2511.872   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1571.608 ±      98.667  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57960.370 ±    1581.557    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1470.650 ±    1156.302  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     54320.310 ±   44923.272    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.854 ±       7.215  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.939 ±     270.084    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    795420.702 ±   30022.933   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1587.494 ±      62.685  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3141.028 ±      82.169    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1477.816 ±    1151.063  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2925.281 ±    2312.445    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.616 ±       4.537  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.218 ±       8.992    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     32337.470 ±     771.301   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2258.904 ±      92.809  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    109923.245 ±    4179.247    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2151.562 ±    1171.525  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    104685.820 ±   56399.492    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.112 ±       0.747  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5.448 ±      36.118    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        16.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    340431.788 ±   17311.669   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1663.778 ±     122.219  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      7690.876 ±     233.090    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1605.683 ±    1407.964  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      7413.276 ±    6274.881    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.754 ±       5.324  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3.457 ±      24.428    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        25.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1956271.127 ±   98434.518   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1174.340 ±      53.364  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       944.816 ±      28.280    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1075.828 ±    1418.452  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       866.412 ±    1152.047    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.645 ±       4.437  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.529 ±       3.655    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2248855.175 ±    4417.356   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    246297.521 ±    9657.634   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1645.322 ±      52.182  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10513.742 ±     441.981    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1603.092 ±    1406.363  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10254.284 ±    9226.218    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.837 ±       5.853  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.316 ±      37.219    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     72079.369 ±    1373.141   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1589.166 ±      32.307  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34695.982 ±     696.820    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1474.998 ±    1158.352  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     32215.430 ±   25646.756    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.791 ±       6.543  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        17.335 ±     143.427    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     84952.457 ±     770.022   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1108.888 ±      43.035  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20540.819 ±     871.042    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1070.116 ±    1409.706  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     19833.275 ±   26245.999    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.704 ±       5.970  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        12.996 ±     110.238    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     99449.651 ±    1488.514   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1228.445 ±      20.816  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19440.383 ±     506.136    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1209.787 ±    1157.318  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19152.981 ±   18419.203    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.674 ±       5.075  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        10.658 ±      80.184    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     45592.734 ±     800.657   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2140.395 ±      49.824  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73875.220 ±     980.435    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2000.647 ±      15.737  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     69053.218 ±    1427.090    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.991 ±       8.045  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        34.239 ±     277.945    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    115002.445 ±    1084.860   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1099.058 ±      48.730  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15040.412 ±     651.081    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1072.028 ±    1412.600  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14674.044 ±   19374.511    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.633 ±       5.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         8.654 ±      73.907    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    310201.836 ±   13120.519   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       474.491 ±      48.839  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2406.812 ±     181.519    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.573 ±    1112.357  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2540.620 ±    5617.716    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.042 ±       0.220    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    647213.650 ±   35328.885   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       823.547 ±      44.431  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2002.602 ±      95.352    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       805.391 ±    1153.398  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1963.098 ±    2892.297    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.020 ±       0.107    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    751356.211 ±   12873.936   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.233 ±       2.005  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.490 ±       4.216    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    237201.255 ±   12246.271   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       785.328 ±      51.266  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5210.154 ±     363.795    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       801.376 ±    1147.549  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5322.169 ±    7718.976    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.082 ±       0.289    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        19.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    123022.083 ±    1359.366   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1734.961 ±      37.247  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22194.106 ±     456.182    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1739.471 ±    1410.629  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     22259.790 ±   18213.071    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.151  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        10.101 ±      78.499    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    183080.294 ±    4935.577   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1116.878 ±      52.312  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9598.053 ±     401.989    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.214 ±    1409.095  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9199.941 ±   12144.553    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.708 ±       5.915  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.032 ±      50.406    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    521006.140 ±   12001.894   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       348.841 ±      35.261  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1053.574 ±     105.699    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       338.809 ±    1216.891  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1023.421 ±    3682.639    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.013 ±       0.109    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     67748.101 ±    3490.352   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2730.740 ±     176.566  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63432.248 ±    1300.178    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2694.189 ±      36.972  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     62592.539 ±    2770.636    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.250 ±       1.848  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5.846 ±      43.328    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    175747.352 ±    1721.750   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1146.488 ±      34.708  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10266.365 ±     382.870    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.158 ±    1155.243  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10812.933 ±   10389.137    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.671 ±       5.684  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.027 ±      51.095    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    543956.677 ±   37254.591   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       553.245 ±      39.733  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1600.786 ±     116.154    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       533.322 ±    1148.019  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1550.697 ±    3339.752    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.687 ±       5.871  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2.029 ±      17.335    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1138302.325 ±    9433.281   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       866.560 ±      21.742  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1198.042 ±      32.123    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.021 ±    1157.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1114.225 ±    1597.404    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±       0.061    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1271104.216 ±    2040.164   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.026 ±       0.218  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.032 ±       0.271    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    361230.139 ±   12875.952   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1015.547 ±      71.464  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4423.951 ±     183.071    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.566 ±    1408.431  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4650.435 ±    6074.794    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.072 ±       0.290    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       599.131 ±      24.447   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1274.965 ±      63.097  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3347535.869 ±  110410.451    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.448 ±    1150.199  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3159538.956 ± 3017243.776    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.090 ±       8.176  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2869.916 ±   21493.171    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       595.128 ±      26.930   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1265.967 ±      20.683  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3347492.976 ±  183785.124    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1200.981 ±    1147.361  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3178248.585 ± 3071592.138    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.028 ±       7.332  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2708.146 ±   19231.085    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        30.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     50668.343 ±    1479.316   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       845.061 ±      43.899  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26248.246 ±     807.409    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       803.512 ±    1153.326  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     24936.442 ±   35383.798    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.519 ±       2.102    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       575.767 ±      14.506   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1256.265 ±      25.200  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3432588.981 ±  101071.460    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1199.834 ±    1147.926  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3279917.288 ± 3157049.168    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.265 ±       8.875  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3456.183 ±   24222.940    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        36.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14957.819 ±     428.168   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1176.702 ±      31.856  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    123791.248 ±    2630.377    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1068.400 ±    1409.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    112494.238 ±  149425.588    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.137 ±       9.653  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       118.835 ±    1009.040    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     17684.101 ±     228.718   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1070.675 ±      33.684  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     95271.805 ±    3430.530    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1068.617 ±    1408.634  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     95086.332 ±  125327.459    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.671 ±       5.684  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        59.735 ±     506.380    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    217025.951 ±    6573.759   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       789.370 ±      51.698  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5724.408 ±     418.475    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       803.836 ±    1151.413  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5835.955 ±    8479.847    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.090 ±       0.517    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        19.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    244560.021 ±    6395.686   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     18094.795 ±     880.460   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1167.659 ±      50.548  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101556.582 ±    2325.846    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1202.665 ±    1150.322  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    104747.593 ±  101922.755    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.849 ±       7.089  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        73.131 ±     610.073    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        29.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1556531.586 ±   13323.376   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        65.383 ±      17.440  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        66.119 ±      18.246    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.323 ±     881.031  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       103.869 ±     894.343    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     82279.758 ±    1369.058   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3400.309 ±     121.516  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     65032.775 ±    1384.136    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3240.297 ±    1134.231  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     61970.299 ±   21526.029    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.008 ±       0.072  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.159 ±       1.373    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        24.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        34.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1850854.448 ±   58201.393   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5       998.056 ±      47.809  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       848.664 ±      27.751    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1069.874 ±    1410.456  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       910.520 ±    1208.722    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.011 ±       0.062    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2258014.114 ±   14726.711   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       653.972 ±      11.385  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       455.801 ±      10.085    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.275 ±       1.440  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       467.859 ±       2.376    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.004 ±       0.036  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.003 ±       0.025    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        14.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2401812.482 ±    2404.575   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.417 ±       0.023  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51168.675 ±    1699.619   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2196.798 ±     110.521  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     67562.825 ±    2997.006    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2138.284 ±    1160.659  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65779.747 ±   36304.658    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.891 ±       7.229  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        27.182 ±     220.283    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    878278.440 ±   21778.214   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2835.491 ±      89.042  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5080.541 ±     143.074    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2815.990 ±    1141.302  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      5045.305 ±    2026.815    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.030 ±       0.188    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   5188023.151 ±  213675.423   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       322.130 ±      23.193  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        97.715 ±       9.081    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       235.571 ±    1259.775  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5        72.076 ±     386.335    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.003 ±       0.022  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.001 ±       0.007    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         2.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1020839.975 ±    6131.794   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1200.547 ±      37.992  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1850.328 ±      57.689    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1201.725 ±    1150.751  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1852.318 ±    1775.863    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.872 ±       7.354  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.343 ±      11.321    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9241602.780 ±  108215.691   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       437.621 ±      33.520  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.527 ±       5.939    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       473.377 ±    1064.664  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        80.680 ±     181.365    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.001 ±       0.012    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    478256.531 ±    7846.136   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2323.880 ±      54.657  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      7647.589 ±     187.776    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2285.113 ±    1409.973  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      7523.048 ±    4735.914    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.275 ±       1.625  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.909 ±       5.385    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        17.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4724.850 ±      33.762   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2379.549 ±      56.950  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    792494.781 ±   14074.992    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2402.649 ±    1414.191  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    800222.647 ±  471863.847    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.993 ±       7.522  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       331.403 ±    2512.542    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        18.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        30.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6782.951 ±     194.190   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2316.002 ±     117.243  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    537328.706 ±   15629.650    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2282.845 ±    1405.914  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    529197.202 ±  311129.061    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.192 ±       1.238  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        44.249 ±     285.096    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        17.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     45586.142 ±     374.006   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       758.829 ±      25.064  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26193.057 ±    1029.182    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       806.268 ±    1159.397  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     27840.749 ±   40222.648    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.575 ±       3.606    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        19.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4944.502 ±     102.392   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1041.048 ±      41.543  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    331356.906 ±   14014.499    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1070.125 ±    1409.718  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    340778.829 ±  450791.293    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.018 ±       0.115  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         5.724 ±      36.761    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         8.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      4921.931 ±      62.251   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       618.617 ±      36.552  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    197810.358 ±   13020.407    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       528.458 ±    1137.547  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    169116.694 ±  364046.145    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.006 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         1.983 ±      11.471    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         7.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6541.677 ±     333.120   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       329.341 ±      43.347  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79211.134 ±    8216.566    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.869 ±    1217.229  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81171.165 ±  291192.527    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.003 ±       0.028  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.787 ±       6.772    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5         9.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6666.558 ±     173.012   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       284.394 ±      33.069  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67142.758 ±    9188.996    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.678 ±    1079.207  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48630.361 ±  256417.148    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0.993 ±       8.552    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7873.146 ±     521.479   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1675.310 ±     107.540  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334876.059 ±    7536.837    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1606.741 ±    1418.993  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    320705.014 ±  272017.484    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.860 ±       5.281  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       169.914 ±    1040.314    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        31.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     18990.619 ±    1215.691   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       483.741 ±      32.509  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     40102.050 ±    4670.810    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       398.701 ±    1401.492  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     33384.972 ±  117367.042    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.003 ±       0.028  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.274 ±       2.359    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15786.079 ±     155.580   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       429.834 ±      24.848  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     42846.716 ±    2244.490    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       366.557 ±    1309.616  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     36548.511 ±  130571.707    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.416 ±       3.579    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     22564.010 ±     776.147   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       427.042 ±      36.976  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29778.641 ±    3206.070    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       370.670 ±    1326.688  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     25933.097 ±   92894.512    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.005 ±       0.035  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.375 ±       2.459    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4156.388 ±      92.098   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2523.160 ±      87.840  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    955118.361 ±   33609.124    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2421.017 ±    1410.817  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    916706.155 ±  541658.188    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.385 ±       2.345  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       146.863 ±     897.562    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10233.747 ±     554.726   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2194.492 ±     133.130  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337426.665 ±    4214.595    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2141.206 ±    1143.979  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    329258.526 ±  175407.621    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.828 ±       6.174  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       128.680 ±     961.640    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     58007.939 ±     571.338   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       556.858 ±      28.597  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15105.480 ±     906.461    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       531.443 ±    1143.973  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14430.201 ±   31062.253    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.226 ±       1.950    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     45437.227 ±     612.379   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       671.373 ±      23.144  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23251.116 ±     581.641    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       658.918 ±       3.888  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     22820.170 ±     243.334    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.075 ±       0.469  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         2.596 ±      16.277    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89230.652 ±    3900.418   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       688.876 ±      32.043  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12149.514 ±     236.056    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       671.270 ±       1.092  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11840.172 ±     519.989    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.146 ±       0.772    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    105473.702 ±     371.221   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.010 ±       0.083  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         0.148 ±       1.235    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7805.592 ±      70.003   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2359.212 ±      50.746  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    475650.962 ±   13581.735    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2287.415 ±    1430.335  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    461191.510 ±  289026.674    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.137 ±       0.658  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        27.693 ±     132.577    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        28.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9138710.867 ±  512210.653   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4929.832 ±     304.348  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       848.928 ±       7.310    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4744.352 ±    1779.865  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       816.346 ±     269.864    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.054 ±       0.146  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.009 ±       0.025    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        35.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        50.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38073933.500 ±  573538.693   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10861378.780 ±  186621.757   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3732.246 ±     105.564  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540.801 ±       7.864    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3636.178 ±    1440.788  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       526.776 ±     203.141    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        36.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48897460.759 ±  145288.897   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31588806.412 ±  474596.519   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       821.623 ±      15.193  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        40.937 ±       1.300    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.822 ±    1156.879  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.243 ±      58.494    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.029 ±       0.176  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.001 ±       0.009    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   8857618.688 ±   78092.061   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3982.326 ±      74.185  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       707.576 ±       7.020    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3913.715 ±    1159.884  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       695.297 ±     200.789    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.001 ±       0.008    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        29.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        41.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  14360267.046 ±  264741.607   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1734.561 ±      35.432  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       190.099 ±       4.616    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.340 ±    1416.715  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       176.601 ±     157.924    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.645 ±       5.468  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.071 ±       0.599    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        23.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42451595.672 ±  454639.715   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       886.785 ±      34.707  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        32.876 ±       1.378    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       933.313 ±    1406.811  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        34.620 ±      52.430    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.013 ±       0.074  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13100510.670 ±  103072.104   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2692.443 ±      46.838  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.425 ±       5.134    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2546.866 ±    1133.629  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       305.965 ±     137.129    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.029 ±       0.209  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.004 ±       0.025    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        19.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  49898985.103 ±  105886.129   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1038.175 ±      40.321  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        32.738 ±       1.289    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       940.708 ±    1416.833  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        29.665 ±      44.694    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        20.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  62531041.126 ±  675801.093   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.186 ±       1.601  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.005 ±       0.040    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17951106.368 ±  100560.233   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1695.672 ±      44.549  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       148.662 ±       4.652    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1613.050 ±    1422.480  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       141.445 ±     125.339    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2716526.261 ±   61009.435   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2189.290 ±      98.660  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1268.375 ±      41.918    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2145.488 ±    1149.724  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1242.620 ±     649.069    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.722 ±       6.086  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.415 ±       3.500    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        27.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    171103.396 ±    1213.138   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3259.576 ±      28.904  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     29980.273 ±     483.078    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3101.806 ±    1412.732  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28533.646 ±   13172.509    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.038 ±       0.329    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        23.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     34211.055 ±    5665.631   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2455.243 ±     389.234  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    112918.356 ±    3285.150    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2420.293 ±    1396.917  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    111035.765 ±   52876.487    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.150 ±       1.159  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.634 ±      51.053    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    129924.644 ±   14158.584   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1125.171 ±     139.505  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13622.752 ±     475.982    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1203.236 ±    1151.177  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     14552.695 ±   13723.102    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.854 ±       7.263  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        10.611 ±      90.279    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    439037.644 ±   35084.617   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1763.841 ±     184.508  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6321.473 ±     196.448    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1745.429 ±    1411.782  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6251.059 ±    4930.020    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.683 ±       5.522  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.481 ±      20.089    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    481916.800 ±    9579.374   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1385.157 ±      43.035  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4523.776 ±     102.615    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1343.855 ±       3.958  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4388.994 ±      93.502    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.666 ±       4.746  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.177 ±      15.493    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        25.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     74778.267 ±    1623.214   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1553.395 ±      58.303  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     32690.194 ±    1016.574    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1602.075 ±    1401.624  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     33725.599 ±   29734.330    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.925 ±       7.650  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        19.585 ±     162.057    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        32.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    320118.362 ±    3156.974   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2393.629 ±      61.955  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11768.614 ±     392.883    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2416.564 ±    1422.007  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11884.691 ±    7093.423    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.712 ±       5.686  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.501 ±      27.964    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        18.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    495941.927 ±   16287.896   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1307.490 ±      32.869  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4149.156 ±      71.934    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1336.365 ±       5.172  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4240.967 ±     150.902    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.878 ±       7.430  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.812 ±      23.781    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1342226.487 ±   31811.653   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2723.308 ±      56.130  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3193.087 ±      35.175    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2692.260 ±      27.716  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3156.784 ±      99.602    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.015 ±       0.051    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    108429.575 ±    1616.793   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3634.368 ±      77.481  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52752.154 ±    1124.548    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3497.060 ±    1162.508  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50767.666 ±   17393.431    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.033 ±       0.156  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.484 ±       2.270    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        36.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    349982.515 ±   14114.734   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1206.169 ±      50.103  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5424.215 ±     100.685    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1202.297 ±    1149.150  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5401.918 ±    5104.247    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.025 ±       0.143  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.112 ±       0.639    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    853079.161 ±   21183.841   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       634.952 ±      11.626  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1171.357 ±      23.985    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       666.599 ±       2.635  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1229.755 ±      30.382    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.057  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.038 ±       0.104    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        17.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2104122.005 ±   80141.348   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1005.829 ±      66.106  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       752.265 ±      26.017    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.876 ±    1419.755  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       701.936 ±    1036.231    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.006 ±       0.033    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        21.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2352771.526 ±   34818.252   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         1.754 ±      14.920  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         1.181 ±      10.043    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    484113.006 ±    7735.015   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       716.595 ±      11.138  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2329.314 ±      51.399    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       668.784 ±       1.775  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2173.899 ±      31.076    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.013 ±       0.116    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     59300.046 ±    3937.160   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2081.259 ±     121.977  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55235.769 ±     827.336    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2010.613 ±      12.164  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     53373.168 ±    3922.769    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.766 ±       4.656  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.773 ±     126.924    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     94555.166 ±    4630.664   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1750.646 ±      54.127  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29134.444 ±    1075.145    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1734.997 ±    1401.534  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28908.217 ±   24054.789    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.912 ±       7.672  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.157 ±     127.546    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    164011.016 ±    3556.560   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2609.630 ±     103.419  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25039.561 ±     665.239    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2555.601 ±    1168.613  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24519.043 ±   11123.530    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.062 ±       0.321  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.597 ±       3.055    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     33381.180 ±    1118.437   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2236.628 ±      93.614  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105442.581 ±    2331.605    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2152.224 ±    1134.576  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    101522.915 ±   55760.002    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.175 ±       1.461  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         8.311 ±      69.488    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        16.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    158403.780 ±    3854.105   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1063.807 ±      55.333  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10568.903 ±     553.249    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1069.056 ±    1409.965  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10626.335 ±   14073.740    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.787 ±       6.686  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.856 ±      66.758    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    457045.691 ±    3231.374   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       519.891 ±      41.372  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1789.976 ±     135.538    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.726 ±    1118.372  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1737.369 ±    3849.588    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.043 ±       0.247    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        12.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    504569.788 ±    6832.956   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.131 ±       0.067  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     71157.073 ±    2725.176   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1406.240 ±      32.964  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     31100.758 ±     843.496    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1464.494 ±    1152.928  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     32419.390 ±   26389.347    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.073 ±       0.477  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.616 ±      10.545    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        17.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2804358.895 ±   51984.960   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3910.721 ±      62.779  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2194.653 ±      28.559    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3775.940 ±    1382.836  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2119.609 ±     804.341    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.021 ±       0.080  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.012 ±       0.045    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        28.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    808934.496 ±   51172.599   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       476.255 ±      49.606  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       926.346 ±      50.641    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       399.861 ±    1405.567  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       780.733 ±    2744.960    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.013 ±       0.096  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.025 ±       0.184    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    342506.907 ±   16296.024   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       827.148 ±      30.642  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3801.312 ±     281.031    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       799.811 ±    1147.690  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3688.527 ±    5526.592    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.010 ±       0.069  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.049 ±       0.326    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    740745.538 ±   28842.019   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       678.107 ±      43.616  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1440.722 ±      73.302    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.034 ±       2.188  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1427.941 ±      57.263    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.018 ±       0.093    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3328937.164 ±   97792.473   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      2013.950 ±      80.654  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       952.083 ±      20.080    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2020.130 ±       5.339  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       955.056 ±      27.677    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.491 ±       4.185  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.231 ±       1.967    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7305402.242 ±  132218.107   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       797.663 ±       7.666  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       171.799 ±       2.744    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       672.451 ±       2.495  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       144.831 ±       2.318    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.001 ±       0.008    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        11.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    238930.401 ±    6547.168   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2119.960 ±      77.792  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13963.232 ±     322.647    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2146.275 ±    1167.404  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     14138.778 ±    7762.933    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.400 ±       2.895  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.618 ±      18.953    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        30.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1582216.750 ±   13781.870   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        92.024 ±      18.381  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        91.540 ±      19.059    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.317 ±     880.981  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       101.975 ±     878.036    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.105 ±       0.908  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.105 ±       0.905    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     74436.905 ±    4062.463   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3282.614 ±     187.743  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69406.668 ±    1912.445    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3109.114 ±    1438.750  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     65794.690 ±   32358.951    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.033 ±       0.108  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.703 ±       2.270    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        23.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        35.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1566058.193 ±   81324.665   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       849.398 ±      25.090  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       853.657 ±      39.064    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       935.151 ±    1409.110  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       942.627 ±    1455.685    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.004 ±       0.037    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        23.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1720566.645 ±    9830.726   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       496.656 ±      38.154  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       454.314 ±      36.653    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.750 ±    1118.440  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       461.984 ±    1023.486    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.004 ±       0.033    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1809552.658 ±    9602.623   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.398 ±       0.102  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     51934.847 ±    2710.400   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2244.155 ±     151.318  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67989.054 ±    1912.899    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2138.094 ±    1149.776  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     64747.861 ±   33358.434    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.858 ±       7.253  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        26.437 ±     223.573    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    273964.913 ±    2937.486   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1098.908 ±      51.070  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6312.427 ±     285.485    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.688 ±    1417.968  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6179.391 ±    8149.544    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.562 ±       4.705  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.229 ±      27.035    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     40875.843 ±     673.278   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2031.473 ±      62.461  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     78212.424 ±    2359.066    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2013.546 ±      31.204  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     77522.689 ±    1607.550    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.112 ±       0.684  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4.330 ±      26.339    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        25.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    114480.947 ±    1622.336   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1150.105 ±      46.630  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15809.916 ±     716.603    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1068.754 ±    1407.544  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     14703.622 ±   19497.977    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.816 ±       6.892  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        11.178 ±      94.409    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    337732.429 ±    5255.254   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       471.094 ±      40.469  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2195.094 ±     186.271    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       505.017 ±    1119.174  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2353.439 ±    5218.521    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.019 ±       0.167    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        13.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    363989.367 ±   32214.168   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.701 ±       0.327  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     60902.467 ±    2490.674   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1245.836 ±      50.976  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     32190.785 ±     763.626    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1204.052 ±    1157.277  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     31132.666 ±   30176.144    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.179 ±       1.454  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         4.599 ±      37.337    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        16.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73555.165 ±    3468.818   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1723.831 ±      92.384  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     36884.614 ±     834.868    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1742.215 ±    1414.064  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     37268.223 ±   30012.312    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.054 ±       0.209  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.152 ±       4.434    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        13.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    134163.649 ±    1853.752   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       921.795 ±      26.885  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10813.670 ±     445.277    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       800.171 ±    1148.327  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9396.637 ±   13663.094    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.017 ±       0.088  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.196 ±       1.033    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    294446.972 ±    1635.498   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1244.246 ±      38.653  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6650.508 ±     214.962    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1210.042 ±    1157.838  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6468.923 ±    6204.768    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.666 ±       4.720  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.568 ±      25.282    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     27671.454 ±     631.879   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1385.891 ±      51.164  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     78807.158 ±    2103.166    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1470.760 ±    1156.731  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     83652.049 ±   66292.522    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.229 ±       1.529  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        13.028 ±      87.124    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    177353.423 ±   10593.865   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1007.096 ±      74.024  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8936.769 ±     393.809    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1068.799 ±    1408.922  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      9485.063 ±   12498.717    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.074 ±       0.390    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        26.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    475328.131 ±    6679.576   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1437.443 ±      36.653  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4759.306 ±     127.893    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1477.849 ±    1162.204  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4893.602 ±    3863.337    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.683 ±       5.482  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.263 ±      18.172    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        25.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    515258.828 ±   13863.702   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       970.972 ±      57.183  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2965.656 ±     140.860    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       940.222 ±    1414.989  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2871.501 ±    4316.964    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.017 ±       0.067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.051 ±       0.205    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     76932.582 ±    5352.231   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1374.065 ±     109.400  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     28107.159 ±     290.822    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                  128  thrpt    5         0.004 ±       0.035  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm             128  thrpt    5         0.087 ±       0.747    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace                               128  thrpt    5         0.012 ±       0.106  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.Metaspace.norm                          128  thrpt    5         0.260 ±       2.242    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1335.831 ±      26.469  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     27335.428 ±    2487.318    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.928 ±       7.994  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        19.621 ±     168.938    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        55.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     97495.448 ±    2870.148   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1602.771 ±      52.689  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25870.786 ±     704.630    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1610.381 ±    1414.769  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     26014.192 ±   23300.599    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.762 ±       4.730  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.412 ±      77.230    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    176902.359 ±    6700.728   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       750.259 ±      22.851  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6674.501 ±      85.742    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.249 ±       2.659  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5927.497 ±     234.867    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.111 ±       0.633    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    281940.856 ±    2784.501   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1028.585 ±      39.006  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5741.210 ±     245.394    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       940.966 ±    1417.759  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5255.004 ±    7954.143    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.023 ±       0.199    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        20.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     68565.324 ±    2144.978   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2685.014 ±      38.558  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     61631.054 ±    1325.609    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2557.513 ±    1159.053  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     58720.961 ±   27212.146    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.054 ±       0.287  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.234 ±       6.540    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    202146.582 ±    7322.321   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1418.806 ±      36.226  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     11046.501 ±     249.375    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1340.644 ±       5.976  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10438.350 ±     375.744    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.749 ±       4.997  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.810 ±      38.734    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    510669.982 ±   13202.950   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       413.238 ±      28.137  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1273.646 ±     105.546    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.240 ±    1057.279  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1452.782 ±    3266.233    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        15.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    627296.801 ±    8237.592   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       349.166 ±      39.590  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       876.131 ±     109.368    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.735 ±    1216.604  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       851.722 ±    3059.318    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    693906.911 ±    5564.261   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.055 ±       0.057  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35896.775 ±     935.591   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1959.040 ±      89.171  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85885.282 ±    2325.397    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.214 ±    1158.036  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     82108.346 ±   49312.753    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.795 ±       4.953  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        34.894 ±     217.738    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    868947.638 ±   24216.313   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2338.452 ±     104.844  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4235.477 ±     117.057    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2277.274 ±    1415.409  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      4123.274 ±    2514.470    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.799 ±       6.749  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.451 ±      12.251    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1827060.673 ±   78717.465   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1157.450 ±      36.851  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       997.096 ±      29.256    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1069.056 ±    1409.918  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       922.102 ±    1228.747    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.870 ±       7.358  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.747 ±       6.313    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         8.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8629727.698 ±  141060.883   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       274.558 ±      24.527  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        50.070 ±       4.980    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.011 ±    1079.186  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        55.987 ±     196.803    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.008    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    352956.614 ±   14580.966   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2334.925 ±     120.673  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10409.281 ±     273.090    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2282.177 ±    1424.979  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5     10174.231 ±    6337.700    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.354 ±       2.315  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.593 ±      10.409    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1114880.086 ±   17935.092   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1821.282 ±      59.211  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2570.758 ±      64.740    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1740.040 ±    1411.074  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2455.319 ±    1974.986    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.800 ±       6.662  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.131 ±       9.428    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2704263.385 ±  144506.143   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1189.127 ±      71.312  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       692.000 ±      26.408    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1204.460 ±    1151.633  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       701.295 ±     675.099    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.751 ±       6.359  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.430 ±       3.642    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6201226.571 ±  107941.953   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       716.738 ±      31.717  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181.911 ±       9.272    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       805.255 ±    1156.732  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       204.449 ±     295.027    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.001 ±       0.009    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        17.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6461848.434 ±  181857.448   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       406.323 ±      38.031  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.946 ±       7.059    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.884 ±    1062.955  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       114.869 ±     258.378    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.001 ±       0.009    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    421584.660 ±    7458.365   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2604.655 ±      92.876  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      9723.061 ±     221.154    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2402.492 ±    1391.480  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      8969.042 ±    5208.948    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.129 ±       0.757  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.483 ±       2.831    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        18.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     80901.016 ±     857.924   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2265.883 ±      63.798  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44076.628 ±     803.301    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2145.808 ±    1145.583  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     41730.417 ±   21828.166    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.749 ±       6.231  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        14.595 ±     121.343    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        25.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    128600.470 ±    5593.069   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2031.012 ±     100.195  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24855.115 ±     277.546    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2000.436 ±      13.912  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     24483.935 ±    1171.306    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.937 ±       7.359  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11.608 ±      91.243    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    177474.760 ±    7585.517   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2705.951 ±     148.739  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23994.013 ±     402.152    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2555.130 ±    1167.923  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22644.354 ±    9870.594    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.067 ±       0.318  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.594 ±       2.828    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     61800.487 ±    2944.021   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3128.216 ±     156.073  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79648.701 ±    2047.400    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2947.412 ±    1410.052  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     75023.187 ±   34794.823    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.017 ±       0.067  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.422 ±       1.700    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    188151.510 ±    7316.419   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1330.657 ±      40.921  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11129.809 ±     372.071    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1207.563 ±    1154.137  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     10111.184 ±    9797.750    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.691 ±       5.685  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         5.823 ±      47.883    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    470860.058 ±    3251.045   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       420.520 ±      32.746  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1405.583 ±     111.976    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       471.105 ±    1056.845  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1575.361 ±    3533.539    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.044  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.028 ±       0.147    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         4.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    641747.493 ±   10702.554   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       358.521 ±      42.303  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       879.232 ±     114.815    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       370.734 ±    1327.044  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       911.427 ±    3261.531    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.654 ±       5.542  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1.607 ±      13.615    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    713839.744 ±    1806.509   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.257 ±       0.018  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     35547.983 ±     440.737   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1941.510 ±      22.166  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85938.961 ±    1684.454    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1875.017 ±    1156.668  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     83016.643 ±   51705.407    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.812 ±       4.846  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.010 ±     215.048    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3442055.452 ±    9397.934   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2906.178 ±      76.990  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1328.664 ±      33.610    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2824.604 ±    1154.016  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1291.376 ±     527.810    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.004 ±       0.033    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   5954863.413 ±  175669.295   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1158.163 ±      51.694  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       306.080 ±       9.087    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1201.364 ±    1148.126  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       317.792 ±     307.160    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.889 ±       7.503  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.237 ±       1.999    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4180695.426 ±   48084.270   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2307.633 ±      65.033  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       868.715 ±      16.383    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2139.853 ±    1143.031  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       805.539 ±     429.275    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.774 ±       6.623  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.292 ±       2.499    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6908983.359 ±  188110.671   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1336.988 ±      68.405  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       304.547 ±       8.352    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.135 ±    1159.547  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       275.309 ±     259.497    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.645 ±       4.382  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.147 ±       0.997    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4186497.652 ±  208846.956   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2512.651 ±     140.141  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       944.488 ±      31.967    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2410.807 ±    1404.838  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       907.089 ±     553.010    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.092 ±       0.745  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.035 ±       0.287    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2180034.006 ±  100533.166   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1294.971 ±      59.118  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       934.836 ±      15.688    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.511 ±    1156.524  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       870.360 ±     817.120    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.683 ±       5.700  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.487 ±       4.061    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5875428.111 ±   93896.135   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       587.224 ±      10.909  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       157.302 ±       3.756    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       666.417 ±       1.089  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       178.516 ±       2.920    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.002 ±       0.010    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        16.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4670833.277 ±  118295.909   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1279.346 ±      65.451  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       431.061 ±      14.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1339.406 ±       6.086  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       451.323 ±      10.596    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.741 ±       6.336  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.249 ±       2.128    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   5954685.115 ±   87446.568   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       590.411 ±      33.413  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       156.053 ±      10.875    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       536.912 ±    1155.744  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       142.104 ±     305.894    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.002 ±       0.012    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        11.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6429296.516 ±   12823.412   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5         0.099 ±       0.850  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.024 ±       0.208    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4615162.563 ±  149874.531   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1303.061 ±       7.528  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       444.399 ±      13.314    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1340.952 ±       5.808  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       457.326 ±      15.902    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.749 ±       6.052  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.259 ±       2.093    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1506246.255 ±   48298.750   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2135.717 ±      65.399  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2231.356 ±      51.865    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2013.492 ±      10.060  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2103.733 ±      65.618    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.687 ±       5.602  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.716 ±       5.835    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2831897.591 ±  122281.991   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       550.306 ±      25.248  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       305.879 ±      24.319    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       533.200 ±    1147.753  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       297.289 ±     640.045    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.012 ±       0.068  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.007 ±       0.037    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        13.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1718840.832 ±    6786.029   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       940.202 ±      24.566  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       860.863 ±      23.166    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.599 ±    1146.653  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       732.284 ±    1053.005    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.008 ±       0.066    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2438791.988 ±   18107.964   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       470.184 ±      39.352  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       303.441 ±      27.357    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.040 ±    1328.348  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       239.771 ±     858.308    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1725067.572 ±   30447.266   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5       981.680 ±      37.878  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       895.626 ±      48.610    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       936.890 ±    1409.596  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       855.540 ±    1297.379    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.006 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.006 ±       0.033    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1852745.911 ±   61660.608   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1419.140 ±      41.682  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1205.382 ±      21.599    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.588 ±       3.940  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1140.414 ±      39.887    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.666 ±       4.811  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.566 ±       4.092    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   2800223.558 ±   69401.670   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       751.074 ±      38.665  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       422.112 ±      16.766    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       800.343 ±    1148.688  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       449.816 ±     645.537    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.012 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.007 ±       0.025    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2985416.954 ±   52056.229   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1313.528 ±      27.838  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       692.350 ±      19.930    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1339.321 ±       5.603  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       705.944 ±      11.935    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.724 ±       6.238  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.381 ±       3.276    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3377772.222 ±   22616.634   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       896.020 ±      32.596  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       417.498 ±      15.514    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       805.654 ±    1156.789  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       375.474 ±     540.595    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.002 ±       0.017    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3645866.236 ±    9864.292   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2877851.741 ±   27664.201   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1429.535 ±      22.986  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       781.801 ±      14.127    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1342.288 ±       4.893  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       734.088 ±       9.553    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.710 ±       4.975  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.389 ±       2.728    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     12016.968 ±     514.207   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1411.319 ±      37.034  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    184807.690 ±    5472.594    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1338.013 ±       6.675  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    175214.535 ±    6804.123    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.876 ±       5.271  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       114.291 ±     686.474    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        29.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     22690.567 ±     678.121   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       351.114 ±      52.643  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24352.214 ±    3741.168    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.303 ±    1204.363  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     23371.506 ±   83884.463    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22436.139 ±     602.541   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       252.598 ±      27.621  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17721.607 ±    2350.800    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.962 ±    1079.016  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21608.433 ±   75959.989    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.292 ±       2.518    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7685.735 ±     115.764   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2156.642 ±      70.196  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    441595.454 ±   12116.547    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2126.628 ±    1134.294  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    435477.734 ±  233269.194    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.468 ±       3.643  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5        95.964 ±     746.737    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     61753.803 ±    1780.984   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       798.628 ±      19.932  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20352.965 ±    1074.939    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       797.997 ±    1143.605  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     20381.349 ±   30019.958    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.428 ±       2.698    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     70504.560 ±     590.183   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       473.828 ±      36.480  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10575.050 ±     836.053    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       501.270 ±    1108.853  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     11192.783 ±   24746.543    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.279 ±       0.981    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     77070.601 ±     184.685   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        20.957 ±       1.589  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       427.932 ±      32.569    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    313748.422 ±    5027.808   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1874.941 ±      69.235  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9405.204 ±     304.094    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.776 ±    1157.045  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9423.969 ±    5908.446    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.720 ±       6.068  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.618 ±      30.479    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    608021.264 ±   16312.911   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       673.676 ±      15.057  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1743.565 ±      29.856    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.639 ±       3.247  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1725.397 ±      48.745    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.044  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.022 ±       0.114    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1264229.762 ±   46098.129   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       677.575 ±      13.329  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       843.457 ±      35.396    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       536.681 ±    1155.249  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       669.400 ±    1441.213    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    104566.446 ±    5348.947   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3334.882 ±     170.566  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50190.028 ±    1097.954    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3225.353 ±    1181.361  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     48505.271 ±   15964.999    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.054 ±       0.156  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.820 ±       2.395    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        36.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    337246.176 ±   10356.358   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1183.513 ±      54.270  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5522.710 ±     170.346    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.957 ±    1154.889  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5640.365 ±    5434.550    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.662 ±       5.612  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.064 ±      25.964    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    763376.245 ±   60629.510   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       597.187 ±      52.404  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1231.217 ±      69.350    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.325 ±    1148.024  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1104.255 ±    2379.032    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.108  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.025 ±       0.219    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1598621.319 ±   98363.125   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       765.896 ±      40.369  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       754.082 ±      35.175    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       805.609 ±    1158.193  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       796.155 ±    1196.394    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.012 ±       0.108  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.013 ±       0.108    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         6.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        17.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1743889.264 ±    3873.672   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    454611.029 ±   14942.682   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       693.160 ±      16.029  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2399.435 ±      56.777    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       668.575 ±       1.843  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2314.397 ±      77.474    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.015 ±       0.126    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7132 s, completed May 7, 2018 12:36:58 AM
